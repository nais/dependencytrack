// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package dependencytracktest

import (
	"context"

	"github.com/nais/dependencytrack/pkg/dependencytrack"
	"github.com/nais/dependencytrack/pkg/dependencytrack/auth"
	mock "github.com/stretchr/testify/mock"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CreateProject provides a mock function for the type MockClient
func (_mock *MockClient) CreateProject(ctx context.Context, imageName string, imageTag string, tags []string) (*dependencytrack.Project, error) {
	ret := _mock.Called(ctx, imageName, imageTag, tags)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *dependencytrack.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string) (*dependencytrack.Project, error)); ok {
		return returnFunc(ctx, imageName, imageTag, tags)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []string) *dependencytrack.Project); ok {
		r0 = returnFunc(ctx, imageName, imageTag, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dependencytrack.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = returnFunc(ctx, imageName, imageTag, tags)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockClient_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
//   - imageTag string
//   - tags []string
func (_e *MockClient_Expecter) CreateProject(ctx interface{}, imageName interface{}, imageTag interface{}, tags interface{}) *MockClient_CreateProject_Call {
	return &MockClient_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, imageName, imageTag, tags)}
}

func (_c *MockClient_CreateProject_Call) Run(run func(ctx context.Context, imageName string, imageTag string, tags []string)) *MockClient_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []string
		if args[3] != nil {
			arg3 = args[3].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockClient_CreateProject_Call) Return(project *dependencytrack.Project, err error) *MockClient_CreateProject_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_CreateProject_Call) RunAndReturn(run func(ctx context.Context, imageName string, imageTag string, tags []string) (*dependencytrack.Project, error)) *MockClient_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectWithSbom provides a mock function for the type MockClient
func (_mock *MockClient) CreateProjectWithSbom(ctx context.Context, imageName string, imageTag string, sbom []byte) (string, error) {
	ret := _mock.Called(ctx, imageName, imageTag, sbom)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectWithSbom")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []byte) (string, error)); ok {
		return returnFunc(ctx, imageName, imageTag, sbom)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, []byte) string); ok {
		r0 = returnFunc(ctx, imageName, imageTag, sbom)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, []byte) error); ok {
		r1 = returnFunc(ctx, imageName, imageTag, sbom)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_CreateProjectWithSbom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectWithSbom'
type MockClient_CreateProjectWithSbom_Call struct {
	*mock.Call
}

// CreateProjectWithSbom is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
//   - imageTag string
//   - sbom []byte
func (_e *MockClient_Expecter) CreateProjectWithSbom(ctx interface{}, imageName interface{}, imageTag interface{}, sbom interface{}) *MockClient_CreateProjectWithSbom_Call {
	return &MockClient_CreateProjectWithSbom_Call{Call: _e.mock.On("CreateProjectWithSbom", ctx, imageName, imageTag, sbom)}
}

func (_c *MockClient_CreateProjectWithSbom_Call) Run(run func(ctx context.Context, imageName string, imageTag string, sbom []byte)) *MockClient_CreateProjectWithSbom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 []byte
		if args[3] != nil {
			arg3 = args[3].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockClient_CreateProjectWithSbom_Call) Return(s string, err error) *MockClient_CreateProjectWithSbom_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockClient_CreateProjectWithSbom_Call) RunAndReturn(run func(ctx context.Context, imageName string, imageTag string, sbom []byte) (string, error)) *MockClient_CreateProjectWithSbom_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function for the type MockClient
func (_mock *MockClient) DeleteProject(ctx context.Context, uuid string) error {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockClient_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockClient_Expecter) DeleteProject(ctx interface{}, uuid interface{}) *MockClient_DeleteProject_Call {
	return &MockClient_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, uuid)}
}

func (_c *MockClient_DeleteProject_Call) Run(run func(ctx context.Context, uuid string)) *MockClient_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_DeleteProject_Call) Return(err error) *MockClient_DeleteProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_DeleteProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) error) *MockClient_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnalysisTrailForImage provides a mock function for the type MockClient
func (_mock *MockClient) GetAnalysisTrailForImage(ctx context.Context, projectId string, componentId string, vulnerabilityId string) (*dependencytrack.Analysis, error) {
	ret := _mock.Called(ctx, projectId, componentId, vulnerabilityId)

	if len(ret) == 0 {
		panic("no return value specified for GetAnalysisTrailForImage")
	}

	var r0 *dependencytrack.Analysis
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (*dependencytrack.Analysis, error)); ok {
		return returnFunc(ctx, projectId, componentId, vulnerabilityId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) *dependencytrack.Analysis); ok {
		r0 = returnFunc(ctx, projectId, componentId, vulnerabilityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dependencytrack.Analysis)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, projectId, componentId, vulnerabilityId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetAnalysisTrailForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnalysisTrailForImage'
type MockClient_GetAnalysisTrailForImage_Call struct {
	*mock.Call
}

// GetAnalysisTrailForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId string
//   - componentId string
//   - vulnerabilityId string
func (_e *MockClient_Expecter) GetAnalysisTrailForImage(ctx interface{}, projectId interface{}, componentId interface{}, vulnerabilityId interface{}) *MockClient_GetAnalysisTrailForImage_Call {
	return &MockClient_GetAnalysisTrailForImage_Call{Call: _e.mock.On("GetAnalysisTrailForImage", ctx, projectId, componentId, vulnerabilityId)}
}

func (_c *MockClient_GetAnalysisTrailForImage_Call) Run(run func(ctx context.Context, projectId string, componentId string, vulnerabilityId string)) *MockClient_GetAnalysisTrailForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockClient_GetAnalysisTrailForImage_Call) Return(analysis *dependencytrack.Analysis, err error) *MockClient_GetAnalysisTrailForImage_Call {
	_c.Call.Return(analysis, err)
	return _c
}

func (_c *MockClient_GetAnalysisTrailForImage_Call) RunAndReturn(run func(ctx context.Context, projectId string, componentId string, vulnerabilityId string) (*dependencytrack.Analysis, error)) *MockClient_GetAnalysisTrailForImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetFindings provides a mock function for the type MockClient
func (_mock *MockClient) GetFindings(ctx context.Context, uuid string, suppressed bool, filterSource ...string) ([]*dependencytrack.Vulnerability, error) {
	// string
	_va := make([]interface{}, len(filterSource))
	for _i := range filterSource {
		_va[_i] = filterSource[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, uuid, suppressed)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindings")
	}

	var r0 []*dependencytrack.Vulnerability
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool, ...string) ([]*dependencytrack.Vulnerability, error)); ok {
		return returnFunc(ctx, uuid, suppressed, filterSource...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, bool, ...string) []*dependencytrack.Vulnerability); ok {
		r0 = returnFunc(ctx, uuid, suppressed, filterSource...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dependencytrack.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, bool, ...string) error); ok {
		r1 = returnFunc(ctx, uuid, suppressed, filterSource...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetFindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindings'
type MockClient_GetFindings_Call struct {
	*mock.Call
}

// GetFindings is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - suppressed bool
//   - filterSource ...string
func (_e *MockClient_Expecter) GetFindings(ctx interface{}, uuid interface{}, suppressed interface{}, filterSource ...interface{}) *MockClient_GetFindings_Call {
	return &MockClient_GetFindings_Call{Call: _e.mock.On("GetFindings",
		append([]interface{}{ctx, uuid, suppressed}, filterSource...)...)}
}

func (_c *MockClient_GetFindings_Call) Run(run func(ctx context.Context, uuid string, suppressed bool, filterSource ...string)) *MockClient_GetFindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		var arg3 []string
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *MockClient_GetFindings_Call) Return(vulnerabilitys []*dependencytrack.Vulnerability, err error) *MockClient_GetFindings_Call {
	_c.Call.Return(vulnerabilitys, err)
	return _c
}

func (_c *MockClient_GetFindings_Call) RunAndReturn(run func(ctx context.Context, uuid string, suppressed bool, filterSource ...string) ([]*dependencytrack.Vulnerability, error)) *MockClient_GetFindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function for the type MockClient
func (_mock *MockClient) GetProject(ctx context.Context, name string, version string) (*dependencytrack.Project, error) {
	ret := _mock.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *dependencytrack.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*dependencytrack.Project, error)); ok {
		return returnFunc(ctx, name, version)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *dependencytrack.Project); ok {
		r0 = returnFunc(ctx, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dependencytrack.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, name, version)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockClient_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockClient_Expecter) GetProject(ctx interface{}, name interface{}, version interface{}) *MockClient_GetProject_Call {
	return &MockClient_GetProject_Call{Call: _e.mock.On("GetProject", ctx, name, version)}
}

func (_c *MockClient_GetProject_Call) Run(run func(ctx context.Context, name string, version string)) *MockClient_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClient_GetProject_Call) Return(project *dependencytrack.Project, err error) *MockClient_GetProject_Call {
	_c.Call.Return(project, err)
	return _c
}

func (_c *MockClient_GetProject_Call) RunAndReturn(run func(ctx context.Context, name string, version string) (*dependencytrack.Project, error)) *MockClient_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function for the type MockClient
func (_mock *MockClient) GetProjects(ctx context.Context, limit int32, offset int32) ([]dependencytrack.Project, error) {
	ret := _mock.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 []dependencytrack.Project
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32, int32) ([]dependencytrack.Project, error)); ok {
		return returnFunc(ctx, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32, int32) []dependencytrack.Project); ok {
		r0 = returnFunc(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dependencytrack.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = returnFunc(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockClient_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
//   - offset int32
func (_e *MockClient_Expecter) GetProjects(ctx interface{}, limit interface{}, offset interface{}) *MockClient_GetProjects_Call {
	return &MockClient_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx, limit, offset)}
}

func (_c *MockClient_GetProjects_Call) Run(run func(ctx context.Context, limit int32, offset int32)) *MockClient_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		var arg2 int32
		if args[2] != nil {
			arg2 = args[2].(int32)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockClient_GetProjects_Call) Return(projects []dependencytrack.Project, err error) *MockClient_GetProjects_Call {
	_c.Call.Return(projects, err)
	return _c
}

func (_c *MockClient_GetProjects_Call) RunAndReturn(run func(ctx context.Context, limit int32, offset int32) ([]dependencytrack.Project, error)) *MockClient_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerAnalysis provides a mock function for the type MockClient
func (_mock *MockClient) TriggerAnalysis(ctx context.Context, uuid string) error {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for TriggerAnalysis")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_TriggerAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerAnalysis'
type MockClient_TriggerAnalysis_Call struct {
	*mock.Call
}

// TriggerAnalysis is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockClient_Expecter) TriggerAnalysis(ctx interface{}, uuid interface{}) *MockClient_TriggerAnalysis_Call {
	return &MockClient_TriggerAnalysis_Call{Call: _e.mock.On("TriggerAnalysis", ctx, uuid)}
}

func (_c *MockClient_TriggerAnalysis_Call) Run(run func(ctx context.Context, uuid string)) *MockClient_TriggerAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_TriggerAnalysis_Call) Return(err error) *MockClient_TriggerAnalysis_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_TriggerAnalysis_Call) RunAndReturn(run func(ctx context.Context, uuid string) error) *MockClient_TriggerAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFinding provides a mock function for the type MockClient
func (_mock *MockClient) UpdateFinding(ctx context.Context, request dependencytrack.AnalysisRequest) error {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFinding")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dependencytrack.AnalysisRequest) error); ok {
		r0 = returnFunc(ctx, request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_UpdateFinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFinding'
type MockClient_UpdateFinding_Call struct {
	*mock.Call
}

// UpdateFinding is a helper method to define mock.On call
//   - ctx context.Context
//   - request dependencytrack.AnalysisRequest
func (_e *MockClient_Expecter) UpdateFinding(ctx interface{}, request interface{}) *MockClient_UpdateFinding_Call {
	return &MockClient_UpdateFinding_Call{Call: _e.mock.On("UpdateFinding", ctx, request)}
}

func (_c *MockClient_UpdateFinding_Call) Run(run func(ctx context.Context, request dependencytrack.AnalysisRequest)) *MockClient_UpdateFinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dependencytrack.AnalysisRequest
		if args[1] != nil {
			arg1 = args[1].(dependencytrack.AnalysisRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockClient_UpdateFinding_Call) Return(err error) *MockClient_UpdateFinding_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_UpdateFinding_Call) RunAndReturn(run func(ctx context.Context, request dependencytrack.AnalysisRequest) error) *MockClient_UpdateFinding_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManagementClient creates a new instance of MockManagementClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManagementClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManagementClient {
	mock := &MockManagementClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockManagementClient is an autogenerated mock type for the ManagementClient type
type MockManagementClient struct {
	mock.Mock
}

type MockManagementClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManagementClient) EXPECT() *MockManagementClient_Expecter {
	return &MockManagementClient_Expecter{mock: &_m.Mock}
}

// AddToTeam provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) AddToTeam(ctx context.Context, username string, uuid string) error {
	ret := _mock.Called(ctx, username, uuid)

	if len(ret) == 0 {
		panic("no return value specified for AddToTeam")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, username, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_AddToTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToTeam'
type MockManagementClient_AddToTeam_Call struct {
	*mock.Call
}

// AddToTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - uuid string
func (_e *MockManagementClient_Expecter) AddToTeam(ctx interface{}, username interface{}, uuid interface{}) *MockManagementClient_AddToTeam_Call {
	return &MockManagementClient_AddToTeam_Call{Call: _e.mock.On("AddToTeam", ctx, username, uuid)}
}

func (_c *MockManagementClient_AddToTeam_Call) Run(run func(ctx context.Context, username string, uuid string)) *MockManagementClient_AddToTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockManagementClient_AddToTeam_Call) Return(err error) *MockManagementClient_AddToTeam_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_AddToTeam_Call) RunAndReturn(run func(ctx context.Context, username string, uuid string) error) *MockManagementClient_AddToTeam_Call {
	_c.Call.Return(run)
	return _c
}

// AllMetricsRefresh provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) AllMetricsRefresh(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllMetricsRefresh")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_AllMetricsRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllMetricsRefresh'
type MockManagementClient_AllMetricsRefresh_Call struct {
	*mock.Call
}

// AllMetricsRefresh is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) AllMetricsRefresh(ctx interface{}) *MockManagementClient_AllMetricsRefresh_Call {
	return &MockManagementClient_AllMetricsRefresh_Call{Call: _e.mock.On("AllMetricsRefresh", ctx)}
}

func (_c *MockManagementClient_AllMetricsRefresh_Call) Run(run func(ctx context.Context)) *MockManagementClient_AllMetricsRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagementClient_AllMetricsRefresh_Call) Return(err error) *MockManagementClient_AllMetricsRefresh_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_AllMetricsRefresh_Call) RunAndReturn(run func(ctx context.Context) error) *MockManagementClient_AllMetricsRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeAdminPassword provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) ChangeAdminPassword(ctx context.Context, oldPassword auth.Password, newPassword auth.Password) error {
	ret := _mock.Called(ctx, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangeAdminPassword")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, auth.Password, auth.Password) error); ok {
		r0 = returnFunc(ctx, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_ChangeAdminPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeAdminPassword'
type MockManagementClient_ChangeAdminPassword_Call struct {
	*mock.Call
}

// ChangeAdminPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - oldPassword auth.Password
//   - newPassword auth.Password
func (_e *MockManagementClient_Expecter) ChangeAdminPassword(ctx interface{}, oldPassword interface{}, newPassword interface{}) *MockManagementClient_ChangeAdminPassword_Call {
	return &MockManagementClient_ChangeAdminPassword_Call{Call: _e.mock.On("ChangeAdminPassword", ctx, oldPassword, newPassword)}
}

func (_c *MockManagementClient_ChangeAdminPassword_Call) Run(run func(ctx context.Context, oldPassword auth.Password, newPassword auth.Password)) *MockManagementClient_ChangeAdminPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 auth.Password
		if args[1] != nil {
			arg1 = args[1].(auth.Password)
		}
		var arg2 auth.Password
		if args[2] != nil {
			arg2 = args[2].(auth.Password)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockManagementClient_ChangeAdminPassword_Call) Return(err error) *MockManagementClient_ChangeAdminPassword_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_ChangeAdminPassword_Call) RunAndReturn(run func(ctx context.Context, oldPassword auth.Password, newPassword auth.Password) error) *MockManagementClient_ChangeAdminPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigPropertyAggregate provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) ConfigPropertyAggregate(ctx context.Context, property dependencytrack.ConfigProperty) error {
	ret := _mock.Called(ctx, property)

	if len(ret) == 0 {
		panic("no return value specified for ConfigPropertyAggregate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dependencytrack.ConfigProperty) error); ok {
		r0 = returnFunc(ctx, property)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_ConfigPropertyAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigPropertyAggregate'
type MockManagementClient_ConfigPropertyAggregate_Call struct {
	*mock.Call
}

// ConfigPropertyAggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - property dependencytrack.ConfigProperty
func (_e *MockManagementClient_Expecter) ConfigPropertyAggregate(ctx interface{}, property interface{}) *MockManagementClient_ConfigPropertyAggregate_Call {
	return &MockManagementClient_ConfigPropertyAggregate_Call{Call: _e.mock.On("ConfigPropertyAggregate", ctx, property)}
}

func (_c *MockManagementClient_ConfigPropertyAggregate_Call) Run(run func(ctx context.Context, property dependencytrack.ConfigProperty)) *MockManagementClient_ConfigPropertyAggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dependencytrack.ConfigProperty
		if args[1] != nil {
			arg1 = args[1].(dependencytrack.ConfigProperty)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_ConfigPropertyAggregate_Call) Return(err error) *MockManagementClient_ConfigPropertyAggregate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_ConfigPropertyAggregate_Call) RunAndReturn(run func(ctx context.Context, property dependencytrack.ConfigProperty) error) *MockManagementClient_ConfigPropertyAggregate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAdminUser provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) CreateAdminUser(ctx context.Context, username string, password auth.Password, teamUuid string) error {
	ret := _mock.Called(ctx, username, password, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdminUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, auth.Password, string) error); ok {
		r0 = returnFunc(ctx, username, password, teamUuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_CreateAdminUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdminUser'
type MockManagementClient_CreateAdminUser_Call struct {
	*mock.Call
}

// CreateAdminUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password auth.Password
//   - teamUuid string
func (_e *MockManagementClient_Expecter) CreateAdminUser(ctx interface{}, username interface{}, password interface{}, teamUuid interface{}) *MockManagementClient_CreateAdminUser_Call {
	return &MockManagementClient_CreateAdminUser_Call{Call: _e.mock.On("CreateAdminUser", ctx, username, password, teamUuid)}
}

func (_c *MockManagementClient_CreateAdminUser_Call) Run(run func(ctx context.Context, username string, password auth.Password, teamUuid string)) *MockManagementClient_CreateAdminUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 auth.Password
		if args[2] != nil {
			arg2 = args[2].(auth.Password)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockManagementClient_CreateAdminUser_Call) Return(err error) *MockManagementClient_CreateAdminUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_CreateAdminUser_Call) RunAndReturn(run func(ctx context.Context, username string, password auth.Password, teamUuid string) error) *MockManagementClient_CreateAdminUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAdminUsers provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) CreateAdminUsers(ctx context.Context, users []*dependencytrack.AdminUser, teamUuid string) error {
	ret := _mock.Called(ctx, users, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdminUsers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*dependencytrack.AdminUser, string) error); ok {
		r0 = returnFunc(ctx, users, teamUuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_CreateAdminUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdminUsers'
type MockManagementClient_CreateAdminUsers_Call struct {
	*mock.Call
}

// CreateAdminUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - users []*dependencytrack.AdminUser
//   - teamUuid string
func (_e *MockManagementClient_Expecter) CreateAdminUsers(ctx interface{}, users interface{}, teamUuid interface{}) *MockManagementClient_CreateAdminUsers_Call {
	return &MockManagementClient_CreateAdminUsers_Call{Call: _e.mock.On("CreateAdminUsers", ctx, users, teamUuid)}
}

func (_c *MockManagementClient_CreateAdminUsers_Call) Run(run func(ctx context.Context, users []*dependencytrack.AdminUser, teamUuid string)) *MockManagementClient_CreateAdminUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*dependencytrack.AdminUser
		if args[1] != nil {
			arg1 = args[1].([]*dependencytrack.AdminUser)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockManagementClient_CreateAdminUsers_Call) Return(err error) *MockManagementClient_CreateAdminUsers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_CreateAdminUsers_Call) RunAndReturn(run func(ctx context.Context, users []*dependencytrack.AdminUser, teamUuid string) error) *MockManagementClient_CreateAdminUsers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOidcUser provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) CreateOidcUser(ctx context.Context, email string) error {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateOidcUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_CreateOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOidcUser'
type MockManagementClient_CreateOidcUser_Call struct {
	*mock.Call
}

// CreateOidcUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockManagementClient_Expecter) CreateOidcUser(ctx interface{}, email interface{}) *MockManagementClient_CreateOidcUser_Call {
	return &MockManagementClient_CreateOidcUser_Call{Call: _e.mock.On("CreateOidcUser", ctx, email)}
}

func (_c *MockManagementClient_CreateOidcUser_Call) Run(run func(ctx context.Context, email string)) *MockManagementClient_CreateOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_CreateOidcUser_Call) Return(err error) *MockManagementClient_CreateOidcUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_CreateOidcUser_Call) RunAndReturn(run func(ctx context.Context, email string) error) *MockManagementClient_CreateOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) CreateTeam(ctx context.Context, teamName string, permissions []dependencytrack.Permission) (*dependencytrack.Team, error) {
	ret := _mock.Called(ctx, teamName, permissions)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *dependencytrack.Team
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []dependencytrack.Permission) (*dependencytrack.Team, error)); ok {
		return returnFunc(ctx, teamName, permissions)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []dependencytrack.Permission) *dependencytrack.Team); ok {
		r0 = returnFunc(ctx, teamName, permissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dependencytrack.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []dependencytrack.Permission) error); ok {
		r1 = returnFunc(ctx, teamName, permissions)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockManagementClient_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamName string
//   - permissions []dependencytrack.Permission
func (_e *MockManagementClient_Expecter) CreateTeam(ctx interface{}, teamName interface{}, permissions interface{}) *MockManagementClient_CreateTeam_Call {
	return &MockManagementClient_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx, teamName, permissions)}
}

func (_c *MockManagementClient_CreateTeam_Call) Run(run func(ctx context.Context, teamName string, permissions []dependencytrack.Permission)) *MockManagementClient_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []dependencytrack.Permission
		if args[2] != nil {
			arg2 = args[2].([]dependencytrack.Permission)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockManagementClient_CreateTeam_Call) Return(team *dependencytrack.Team, err error) *MockManagementClient_CreateTeam_Call {
	_c.Call.Return(team, err)
	return _c
}

func (_c *MockManagementClient_CreateTeam_Call) RunAndReturn(run func(ctx context.Context, teamName string, permissions []dependencytrack.Permission) (*dependencytrack.Team, error)) *MockManagementClient_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedUser provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) DeleteManagedUser(ctx context.Context, username string) error {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, username)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_DeleteManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedUser'
type MockManagementClient_DeleteManagedUser_Call struct {
	*mock.Call
}

// DeleteManagedUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockManagementClient_Expecter) DeleteManagedUser(ctx interface{}, username interface{}) *MockManagementClient_DeleteManagedUser_Call {
	return &MockManagementClient_DeleteManagedUser_Call{Call: _e.mock.On("DeleteManagedUser", ctx, username)}
}

func (_c *MockManagementClient_DeleteManagedUser_Call) Run(run func(ctx context.Context, username string)) *MockManagementClient_DeleteManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_DeleteManagedUser_Call) Return(err error) *MockManagementClient_DeleteManagedUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_DeleteManagedUser_Call) RunAndReturn(run func(ctx context.Context, username string) error) *MockManagementClient_DeleteManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOidcUser provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) DeleteOidcUser(ctx context.Context, username string) error {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOidcUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, username)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_DeleteOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOidcUser'
type MockManagementClient_DeleteOidcUser_Call struct {
	*mock.Call
}

// DeleteOidcUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockManagementClient_Expecter) DeleteOidcUser(ctx interface{}, username interface{}) *MockManagementClient_DeleteOidcUser_Call {
	return &MockManagementClient_DeleteOidcUser_Call{Call: _e.mock.On("DeleteOidcUser", ctx, username)}
}

func (_c *MockManagementClient_DeleteOidcUser_Call) Run(run func(ctx context.Context, username string)) *MockManagementClient_DeleteOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_DeleteOidcUser_Call) Return(err error) *MockManagementClient_DeleteOidcUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_DeleteOidcUser_Call) RunAndReturn(run func(ctx context.Context, username string) error) *MockManagementClient_DeleteOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) DeleteTeam(ctx context.Context, uuid string) error {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockManagementClient_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockManagementClient_Expecter) DeleteTeam(ctx interface{}, uuid interface{}) *MockManagementClient_DeleteTeam_Call {
	return &MockManagementClient_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, uuid)}
}

func (_c *MockManagementClient_DeleteTeam_Call) Run(run func(ctx context.Context, uuid string)) *MockManagementClient_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_DeleteTeam_Call) Return(err error) *MockManagementClient_DeleteTeam_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_DeleteTeam_Call) RunAndReturn(run func(ctx context.Context, uuid string) error) *MockManagementClient_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserMembership provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) DeleteUserMembership(ctx context.Context, teamUuid string, username string) error {
	ret := _mock.Called(ctx, teamUuid, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserMembership")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, teamUuid, username)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_DeleteUserMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserMembership'
type MockManagementClient_DeleteUserMembership_Call struct {
	*mock.Call
}

// DeleteUserMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - teamUuid string
//   - username string
func (_e *MockManagementClient_Expecter) DeleteUserMembership(ctx interface{}, teamUuid interface{}, username interface{}) *MockManagementClient_DeleteUserMembership_Call {
	return &MockManagementClient_DeleteUserMembership_Call{Call: _e.mock.On("DeleteUserMembership", ctx, teamUuid, username)}
}

func (_c *MockManagementClient_DeleteUserMembership_Call) Run(run func(ctx context.Context, teamUuid string, username string)) *MockManagementClient_DeleteUserMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockManagementClient_DeleteUserMembership_Call) Return(err error) *MockManagementClient_DeleteUserMembership_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_DeleteUserMembership_Call) RunAndReturn(run func(ctx context.Context, teamUuid string, username string) error) *MockManagementClient_DeleteUserMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateApiKey provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) GenerateApiKey(ctx context.Context, uuid string) (string, error) {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GenerateApiKey")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, uuid)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_GenerateApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateApiKey'
type MockManagementClient_GenerateApiKey_Call struct {
	*mock.Call
}

// GenerateApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockManagementClient_Expecter) GenerateApiKey(ctx interface{}, uuid interface{}) *MockManagementClient_GenerateApiKey_Call {
	return &MockManagementClient_GenerateApiKey_Call{Call: _e.mock.On("GenerateApiKey", ctx, uuid)}
}

func (_c *MockManagementClient_GenerateApiKey_Call) Run(run func(ctx context.Context, uuid string)) *MockManagementClient_GenerateApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_GenerateApiKey_Call) Return(s string, err error) *MockManagementClient_GenerateApiKey_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockManagementClient_GenerateApiKey_Call) RunAndReturn(run func(ctx context.Context, uuid string) (string, error)) *MockManagementClient_GenerateApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigProperties provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) GetConfigProperties(ctx context.Context) ([]dependencytrack.ConfigProperty, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigProperties")
	}

	var r0 []dependencytrack.ConfigProperty
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]dependencytrack.ConfigProperty, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []dependencytrack.ConfigProperty); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dependencytrack.ConfigProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_GetConfigProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigProperties'
type MockManagementClient_GetConfigProperties_Call struct {
	*mock.Call
}

// GetConfigProperties is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) GetConfigProperties(ctx interface{}) *MockManagementClient_GetConfigProperties_Call {
	return &MockManagementClient_GetConfigProperties_Call{Call: _e.mock.On("GetConfigProperties", ctx)}
}

func (_c *MockManagementClient_GetConfigProperties_Call) Run(run func(ctx context.Context)) *MockManagementClient_GetConfigProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagementClient_GetConfigProperties_Call) Return(configPropertys []dependencytrack.ConfigProperty, err error) *MockManagementClient_GetConfigProperties_Call {
	_c.Call.Return(configPropertys, err)
	return _c
}

func (_c *MockManagementClient_GetConfigProperties_Call) RunAndReturn(run func(ctx context.Context) ([]dependencytrack.ConfigProperty, error)) *MockManagementClient_GetConfigProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetEcosystems provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) GetEcosystems(ctx context.Context) ([]string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEcosystems")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_GetEcosystems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEcosystems'
type MockManagementClient_GetEcosystems_Call struct {
	*mock.Call
}

// GetEcosystems is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) GetEcosystems(ctx interface{}) *MockManagementClient_GetEcosystems_Call {
	return &MockManagementClient_GetEcosystems_Call{Call: _e.mock.On("GetEcosystems", ctx)}
}

func (_c *MockManagementClient_GetEcosystems_Call) Run(run func(ctx context.Context)) *MockManagementClient_GetEcosystems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagementClient_GetEcosystems_Call) Return(strings []string, err error) *MockManagementClient_GetEcosystems_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockManagementClient_GetEcosystems_Call) RunAndReturn(run func(ctx context.Context) ([]string, error)) *MockManagementClient_GetEcosystems_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUser provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) GetOidcUser(ctx context.Context, username string) (*dependencytrack.User, error) {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUser")
	}

	var r0 *dependencytrack.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dependencytrack.User, error)); ok {
		return returnFunc(ctx, username)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dependencytrack.User); ok {
		r0 = returnFunc(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dependencytrack.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, username)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_GetOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUser'
type MockManagementClient_GetOidcUser_Call struct {
	*mock.Call
}

// GetOidcUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockManagementClient_Expecter) GetOidcUser(ctx interface{}, username interface{}) *MockManagementClient_GetOidcUser_Call {
	return &MockManagementClient_GetOidcUser_Call{Call: _e.mock.On("GetOidcUser", ctx, username)}
}

func (_c *MockManagementClient_GetOidcUser_Call) Run(run func(ctx context.Context, username string)) *MockManagementClient_GetOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_GetOidcUser_Call) Return(user *dependencytrack.User, err error) *MockManagementClient_GetOidcUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockManagementClient_GetOidcUser_Call) RunAndReturn(run func(ctx context.Context, username string) (*dependencytrack.User, error)) *MockManagementClient_GetOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUsers provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) GetOidcUsers(ctx context.Context) ([]*dependencytrack.User, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUsers")
	}

	var r0 []*dependencytrack.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*dependencytrack.User, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*dependencytrack.User); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dependencytrack.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_GetOidcUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUsers'
type MockManagementClient_GetOidcUsers_Call struct {
	*mock.Call
}

// GetOidcUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) GetOidcUsers(ctx interface{}) *MockManagementClient_GetOidcUsers_Call {
	return &MockManagementClient_GetOidcUsers_Call{Call: _e.mock.On("GetOidcUsers", ctx)}
}

func (_c *MockManagementClient_GetOidcUsers_Call) Run(run func(ctx context.Context)) *MockManagementClient_GetOidcUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagementClient_GetOidcUsers_Call) Return(users []*dependencytrack.User, err error) *MockManagementClient_GetOidcUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockManagementClient_GetOidcUsers_Call) RunAndReturn(run func(ctx context.Context) ([]*dependencytrack.User, error)) *MockManagementClient_GetOidcUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) GetTeam(ctx context.Context, team string) (*dependencytrack.Team, error) {
	ret := _mock.Called(ctx, team)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *dependencytrack.Team
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*dependencytrack.Team, error)); ok {
		return returnFunc(ctx, team)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *dependencytrack.Team); ok {
		r0 = returnFunc(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dependencytrack.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, team)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockManagementClient_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - team string
func (_e *MockManagementClient_Expecter) GetTeam(ctx interface{}, team interface{}) *MockManagementClient_GetTeam_Call {
	return &MockManagementClient_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, team)}
}

func (_c *MockManagementClient_GetTeam_Call) Run(run func(ctx context.Context, team string)) *MockManagementClient_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_GetTeam_Call) Return(team1 *dependencytrack.Team, err error) *MockManagementClient_GetTeam_Call {
	_c.Call.Return(team1, err)
	return _c
}

func (_c *MockManagementClient_GetTeam_Call) RunAndReturn(run func(ctx context.Context, team string) (*dependencytrack.Team, error)) *MockManagementClient_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) GetTeams(ctx context.Context) ([]*dependencytrack.Team, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []*dependencytrack.Team
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]*dependencytrack.Team, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []*dependencytrack.Team); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dependencytrack.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockManagementClient_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) GetTeams(ctx interface{}) *MockManagementClient_GetTeams_Call {
	return &MockManagementClient_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockManagementClient_GetTeams_Call) Run(run func(ctx context.Context)) *MockManagementClient_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagementClient_GetTeams_Call) Return(teams []*dependencytrack.Team, err error) *MockManagementClient_GetTeams_Call {
	_c.Call.Return(teams, err)
	return _c
}

func (_c *MockManagementClient_GetTeams_Call) RunAndReturn(run func(ctx context.Context) ([]*dependencytrack.Team, error)) *MockManagementClient_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectMetricsRefresh provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) ProjectMetricsRefresh(ctx context.Context, uuid string) error {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ProjectMetricsRefresh")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_ProjectMetricsRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectMetricsRefresh'
type MockManagementClient_ProjectMetricsRefresh_Call struct {
	*mock.Call
}

// ProjectMetricsRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockManagementClient_Expecter) ProjectMetricsRefresh(ctx interface{}, uuid interface{}) *MockManagementClient_ProjectMetricsRefresh_Call {
	return &MockManagementClient_ProjectMetricsRefresh_Call{Call: _e.mock.On("ProjectMetricsRefresh", ctx, uuid)}
}

func (_c *MockManagementClient_ProjectMetricsRefresh_Call) Run(run func(ctx context.Context, uuid string)) *MockManagementClient_ProjectMetricsRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_ProjectMetricsRefresh_Call) Return(err error) *MockManagementClient_ProjectMetricsRefresh_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_ProjectMetricsRefresh_Call) RunAndReturn(run func(ctx context.Context, uuid string) error) *MockManagementClient_ProjectMetricsRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAdminUser provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) RemoveAdminUser(ctx context.Context, username string) error {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAdminUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, username)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_RemoveAdminUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAdminUser'
type MockManagementClient_RemoveAdminUser_Call struct {
	*mock.Call
}

// RemoveAdminUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockManagementClient_Expecter) RemoveAdminUser(ctx interface{}, username interface{}) *MockManagementClient_RemoveAdminUser_Call {
	return &MockManagementClient_RemoveAdminUser_Call{Call: _e.mock.On("RemoveAdminUser", ctx, username)}
}

func (_c *MockManagementClient_RemoveAdminUser_Call) Run(run func(ctx context.Context, username string)) *MockManagementClient_RemoveAdminUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_RemoveAdminUser_Call) Return(err error) *MockManagementClient_RemoveAdminUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_RemoveAdminUser_Call) RunAndReturn(run func(ctx context.Context, username string) error) *MockManagementClient_RemoveAdminUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAdminUsers provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) RemoveAdminUsers(ctx context.Context, users []*dependencytrack.AdminUser) error {
	ret := _mock.Called(ctx, users)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAdminUsers")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []*dependencytrack.AdminUser) error); ok {
		r0 = returnFunc(ctx, users)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockManagementClient_RemoveAdminUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAdminUsers'
type MockManagementClient_RemoveAdminUsers_Call struct {
	*mock.Call
}

// RemoveAdminUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - users []*dependencytrack.AdminUser
func (_e *MockManagementClient_Expecter) RemoveAdminUsers(ctx interface{}, users interface{}) *MockManagementClient_RemoveAdminUsers_Call {
	return &MockManagementClient_RemoveAdminUsers_Call{Call: _e.mock.On("RemoveAdminUsers", ctx, users)}
}

func (_c *MockManagementClient_RemoveAdminUsers_Call) Run(run func(ctx context.Context, users []*dependencytrack.AdminUser)) *MockManagementClient_RemoveAdminUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []*dependencytrack.AdminUser
		if args[1] != nil {
			arg1 = args[1].([]*dependencytrack.AdminUser)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockManagementClient_RemoveAdminUsers_Call) Return(err error) *MockManagementClient_RemoveAdminUsers_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockManagementClient_RemoveAdminUsers_Call) RunAndReturn(run func(ctx context.Context, users []*dependencytrack.AdminUser) error) *MockManagementClient_RemoveAdminUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function for the type MockManagementClient
func (_mock *MockManagementClient) Version(ctx context.Context) (string, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockManagementClient_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockManagementClient_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) Version(ctx interface{}) *MockManagementClient_Version_Call {
	return &MockManagementClient_Version_Call{Call: _e.mock.On("Version", ctx)}
}

func (_c *MockManagementClient_Version_Call) Run(run func(ctx context.Context)) *MockManagementClient_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockManagementClient_Version_Call) Return(s string, err error) *MockManagementClient_Version_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockManagementClient_Version_Call) RunAndReturn(run func(ctx context.Context) (string, error)) *MockManagementClient_Version_Call {
	_c.Call.Return(run)
	return _c
}
