// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package clientmock

import (
	"context"
	"net/http"

	"github.com/nais/dependencytrack/pkg/dependencytrack/client"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAclAPI creates a new instance of MockAclAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAclAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAclAPI {
	mock := &MockAclAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAclAPI is an autogenerated mock type for the AclAPI type
type MockAclAPI struct {
	mock.Mock
}

type MockAclAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAclAPI) EXPECT() *MockAclAPI_Expecter {
	return &MockAclAPI_Expecter{mock: &_m.Mock}
}

// AddMapping provides a mock function for the type MockAclAPI
func (_mock *MockAclAPI) AddMapping(ctx context.Context) client.ApiAddMappingRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping")
	}

	var r0 client.ApiAddMappingRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiAddMappingRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiAddMappingRequest)
	}
	return r0
}

// MockAclAPI_AddMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping'
type MockAclAPI_AddMapping_Call struct {
	*mock.Call
}

// AddMapping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAclAPI_Expecter) AddMapping(ctx interface{}) *MockAclAPI_AddMapping_Call {
	return &MockAclAPI_AddMapping_Call{Call: _e.mock.On("AddMapping", ctx)}
}

func (_c *MockAclAPI_AddMapping_Call) Run(run func(ctx context.Context)) *MockAclAPI_AddMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAclAPI_AddMapping_Call) Return(apiAddMappingRequest client.ApiAddMappingRequest) *MockAclAPI_AddMapping_Call {
	_c.Call.Return(apiAddMappingRequest)
	return _c
}

func (_c *MockAclAPI_AddMapping_Call) RunAndReturn(run func(ctx context.Context) client.ApiAddMappingRequest) *MockAclAPI_AddMapping_Call {
	_c.Call.Return(run)
	return _c
}

// AddMappingExecute provides a mock function for the type MockAclAPI
func (_mock *MockAclAPI) AddMappingExecute(r client.ApiAddMappingRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddMappingExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddMappingRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddMappingRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddMappingRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAclAPI_AddMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMappingExecute'
type MockAclAPI_AddMappingExecute_Call struct {
	*mock.Call
}

// AddMappingExecute is a helper method to define mock.On call
//   - r client.ApiAddMappingRequest
func (_e *MockAclAPI_Expecter) AddMappingExecute(r interface{}) *MockAclAPI_AddMappingExecute_Call {
	return &MockAclAPI_AddMappingExecute_Call{Call: _e.mock.On("AddMappingExecute", r)}
}

func (_c *MockAclAPI_AddMappingExecute_Call) Run(run func(r client.ApiAddMappingRequest)) *MockAclAPI_AddMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddMappingRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddMappingRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAclAPI_AddMappingExecute_Call) Return(response *http.Response, err error) *MockAclAPI_AddMappingExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockAclAPI_AddMappingExecute_Call) RunAndReturn(run func(r client.ApiAddMappingRequest) (*http.Response, error)) *MockAclAPI_AddMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping provides a mock function for the type MockAclAPI
func (_mock *MockAclAPI) DeleteMapping(ctx context.Context, teamUuid string, projectUuid string) client.ApiDeleteMappingRequest {
	ret := _mock.Called(ctx, teamUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping")
	}

	var r0 client.ApiDeleteMappingRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiDeleteMappingRequest); ok {
		r0 = returnFunc(ctx, teamUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteMappingRequest)
	}
	return r0
}

// MockAclAPI_DeleteMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping'
type MockAclAPI_DeleteMapping_Call struct {
	*mock.Call
}

// DeleteMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - teamUuid string
//   - projectUuid string
func (_e *MockAclAPI_Expecter) DeleteMapping(ctx interface{}, teamUuid interface{}, projectUuid interface{}) *MockAclAPI_DeleteMapping_Call {
	return &MockAclAPI_DeleteMapping_Call{Call: _e.mock.On("DeleteMapping", ctx, teamUuid, projectUuid)}
}

func (_c *MockAclAPI_DeleteMapping_Call) Run(run func(ctx context.Context, teamUuid string, projectUuid string)) *MockAclAPI_DeleteMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAclAPI_DeleteMapping_Call) Return(apiDeleteMappingRequest client.ApiDeleteMappingRequest) *MockAclAPI_DeleteMapping_Call {
	_c.Call.Return(apiDeleteMappingRequest)
	return _c
}

func (_c *MockAclAPI_DeleteMapping_Call) RunAndReturn(run func(ctx context.Context, teamUuid string, projectUuid string) client.ApiDeleteMappingRequest) *MockAclAPI_DeleteMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMappingExecute provides a mock function for the type MockAclAPI
func (_mock *MockAclAPI) DeleteMappingExecute(r client.ApiDeleteMappingRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMappingExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteMappingRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteMappingRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteMappingRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAclAPI_DeleteMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMappingExecute'
type MockAclAPI_DeleteMappingExecute_Call struct {
	*mock.Call
}

// DeleteMappingExecute is a helper method to define mock.On call
//   - r client.ApiDeleteMappingRequest
func (_e *MockAclAPI_Expecter) DeleteMappingExecute(r interface{}) *MockAclAPI_DeleteMappingExecute_Call {
	return &MockAclAPI_DeleteMappingExecute_Call{Call: _e.mock.On("DeleteMappingExecute", r)}
}

func (_c *MockAclAPI_DeleteMappingExecute_Call) Run(run func(r client.ApiDeleteMappingRequest)) *MockAclAPI_DeleteMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteMappingRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteMappingRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAclAPI_DeleteMappingExecute_Call) Return(response *http.Response, err error) *MockAclAPI_DeleteMappingExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockAclAPI_DeleteMappingExecute_Call) RunAndReturn(run func(r client.ApiDeleteMappingRequest) (*http.Response, error)) *MockAclAPI_DeleteMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveProjects provides a mock function for the type MockAclAPI
func (_mock *MockAclAPI) RetrieveProjects(ctx context.Context, uuid string) client.ApiRetrieveProjectsRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveProjects")
	}

	var r0 client.ApiRetrieveProjectsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiRetrieveProjectsRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiRetrieveProjectsRequest)
	}
	return r0
}

// MockAclAPI_RetrieveProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveProjects'
type MockAclAPI_RetrieveProjects_Call struct {
	*mock.Call
}

// RetrieveProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockAclAPI_Expecter) RetrieveProjects(ctx interface{}, uuid interface{}) *MockAclAPI_RetrieveProjects_Call {
	return &MockAclAPI_RetrieveProjects_Call{Call: _e.mock.On("RetrieveProjects", ctx, uuid)}
}

func (_c *MockAclAPI_RetrieveProjects_Call) Run(run func(ctx context.Context, uuid string)) *MockAclAPI_RetrieveProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAclAPI_RetrieveProjects_Call) Return(apiRetrieveProjectsRequest client.ApiRetrieveProjectsRequest) *MockAclAPI_RetrieveProjects_Call {
	_c.Call.Return(apiRetrieveProjectsRequest)
	return _c
}

func (_c *MockAclAPI_RetrieveProjects_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiRetrieveProjectsRequest) *MockAclAPI_RetrieveProjects_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveProjectsExecute provides a mock function for the type MockAclAPI
func (_mock *MockAclAPI) RetrieveProjectsExecute(r client.ApiRetrieveProjectsRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveProjectsExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveProjectsRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveProjectsRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRetrieveProjectsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRetrieveProjectsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAclAPI_RetrieveProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveProjectsExecute'
type MockAclAPI_RetrieveProjectsExecute_Call struct {
	*mock.Call
}

// RetrieveProjectsExecute is a helper method to define mock.On call
//   - r client.ApiRetrieveProjectsRequest
func (_e *MockAclAPI_Expecter) RetrieveProjectsExecute(r interface{}) *MockAclAPI_RetrieveProjectsExecute_Call {
	return &MockAclAPI_RetrieveProjectsExecute_Call{Call: _e.mock.On("RetrieveProjectsExecute", r)}
}

func (_c *MockAclAPI_RetrieveProjectsExecute_Call) Run(run func(r client.ApiRetrieveProjectsRequest)) *MockAclAPI_RetrieveProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRetrieveProjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRetrieveProjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAclAPI_RetrieveProjectsExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockAclAPI_RetrieveProjectsExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockAclAPI_RetrieveProjectsExecute_Call) RunAndReturn(run func(r client.ApiRetrieveProjectsRequest) ([]client.Project, *http.Response, error)) *MockAclAPI_RetrieveProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAnalysisAPI creates a new instance of MockAnalysisAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalysisAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalysisAPI {
	mock := &MockAnalysisAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAnalysisAPI is an autogenerated mock type for the AnalysisAPI type
type MockAnalysisAPI struct {
	mock.Mock
}

type MockAnalysisAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalysisAPI) EXPECT() *MockAnalysisAPI_Expecter {
	return &MockAnalysisAPI_Expecter{mock: &_m.Mock}
}

// RetrieveAnalysis provides a mock function for the type MockAnalysisAPI
func (_mock *MockAnalysisAPI) RetrieveAnalysis(ctx context.Context) client.ApiRetrieveAnalysisRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAnalysis")
	}

	var r0 client.ApiRetrieveAnalysisRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiRetrieveAnalysisRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiRetrieveAnalysisRequest)
	}
	return r0
}

// MockAnalysisAPI_RetrieveAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAnalysis'
type MockAnalysisAPI_RetrieveAnalysis_Call struct {
	*mock.Call
}

// RetrieveAnalysis is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAnalysisAPI_Expecter) RetrieveAnalysis(ctx interface{}) *MockAnalysisAPI_RetrieveAnalysis_Call {
	return &MockAnalysisAPI_RetrieveAnalysis_Call{Call: _e.mock.On("RetrieveAnalysis", ctx)}
}

func (_c *MockAnalysisAPI_RetrieveAnalysis_Call) Run(run func(ctx context.Context)) *MockAnalysisAPI_RetrieveAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnalysisAPI_RetrieveAnalysis_Call) Return(apiRetrieveAnalysisRequest client.ApiRetrieveAnalysisRequest) *MockAnalysisAPI_RetrieveAnalysis_Call {
	_c.Call.Return(apiRetrieveAnalysisRequest)
	return _c
}

func (_c *MockAnalysisAPI_RetrieveAnalysis_Call) RunAndReturn(run func(ctx context.Context) client.ApiRetrieveAnalysisRequest) *MockAnalysisAPI_RetrieveAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAnalysisExecute provides a mock function for the type MockAnalysisAPI
func (_mock *MockAnalysisAPI) RetrieveAnalysisExecute(r client.ApiRetrieveAnalysisRequest) (*client.Analysis, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAnalysisExecute")
	}

	var r0 *client.Analysis
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveAnalysisRequest) (*client.Analysis, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveAnalysisRequest) *client.Analysis); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Analysis)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRetrieveAnalysisRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRetrieveAnalysisRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAnalysisAPI_RetrieveAnalysisExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAnalysisExecute'
type MockAnalysisAPI_RetrieveAnalysisExecute_Call struct {
	*mock.Call
}

// RetrieveAnalysisExecute is a helper method to define mock.On call
//   - r client.ApiRetrieveAnalysisRequest
func (_e *MockAnalysisAPI_Expecter) RetrieveAnalysisExecute(r interface{}) *MockAnalysisAPI_RetrieveAnalysisExecute_Call {
	return &MockAnalysisAPI_RetrieveAnalysisExecute_Call{Call: _e.mock.On("RetrieveAnalysisExecute", r)}
}

func (_c *MockAnalysisAPI_RetrieveAnalysisExecute_Call) Run(run func(r client.ApiRetrieveAnalysisRequest)) *MockAnalysisAPI_RetrieveAnalysisExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRetrieveAnalysisRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRetrieveAnalysisRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnalysisAPI_RetrieveAnalysisExecute_Call) Return(analysis *client.Analysis, response *http.Response, err error) *MockAnalysisAPI_RetrieveAnalysisExecute_Call {
	_c.Call.Return(analysis, response, err)
	return _c
}

func (_c *MockAnalysisAPI_RetrieveAnalysisExecute_Call) RunAndReturn(run func(r client.ApiRetrieveAnalysisRequest) (*client.Analysis, *http.Response, error)) *MockAnalysisAPI_RetrieveAnalysisExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalysis provides a mock function for the type MockAnalysisAPI
func (_mock *MockAnalysisAPI) UpdateAnalysis(ctx context.Context) client.ApiUpdateAnalysisRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysis")
	}

	var r0 client.ApiUpdateAnalysisRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateAnalysisRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateAnalysisRequest)
	}
	return r0
}

// MockAnalysisAPI_UpdateAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalysis'
type MockAnalysisAPI_UpdateAnalysis_Call struct {
	*mock.Call
}

// UpdateAnalysis is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAnalysisAPI_Expecter) UpdateAnalysis(ctx interface{}) *MockAnalysisAPI_UpdateAnalysis_Call {
	return &MockAnalysisAPI_UpdateAnalysis_Call{Call: _e.mock.On("UpdateAnalysis", ctx)}
}

func (_c *MockAnalysisAPI_UpdateAnalysis_Call) Run(run func(ctx context.Context)) *MockAnalysisAPI_UpdateAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnalysisAPI_UpdateAnalysis_Call) Return(apiUpdateAnalysisRequest client.ApiUpdateAnalysisRequest) *MockAnalysisAPI_UpdateAnalysis_Call {
	_c.Call.Return(apiUpdateAnalysisRequest)
	return _c
}

func (_c *MockAnalysisAPI_UpdateAnalysis_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateAnalysisRequest) *MockAnalysisAPI_UpdateAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalysisExecute provides a mock function for the type MockAnalysisAPI
func (_mock *MockAnalysisAPI) UpdateAnalysisExecute(r client.ApiUpdateAnalysisRequest) (*client.Analysis, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysisExecute")
	}

	var r0 *client.Analysis
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateAnalysisRequest) (*client.Analysis, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateAnalysisRequest) *client.Analysis); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Analysis)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateAnalysisRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateAnalysisRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAnalysisAPI_UpdateAnalysisExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalysisExecute'
type MockAnalysisAPI_UpdateAnalysisExecute_Call struct {
	*mock.Call
}

// UpdateAnalysisExecute is a helper method to define mock.On call
//   - r client.ApiUpdateAnalysisRequest
func (_e *MockAnalysisAPI_Expecter) UpdateAnalysisExecute(r interface{}) *MockAnalysisAPI_UpdateAnalysisExecute_Call {
	return &MockAnalysisAPI_UpdateAnalysisExecute_Call{Call: _e.mock.On("UpdateAnalysisExecute", r)}
}

func (_c *MockAnalysisAPI_UpdateAnalysisExecute_Call) Run(run func(r client.ApiUpdateAnalysisRequest)) *MockAnalysisAPI_UpdateAnalysisExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateAnalysisRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateAnalysisRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockAnalysisAPI_UpdateAnalysisExecute_Call) Return(analysis *client.Analysis, response *http.Response, err error) *MockAnalysisAPI_UpdateAnalysisExecute_Call {
	_c.Call.Return(analysis, response, err)
	return _c
}

func (_c *MockAnalysisAPI_UpdateAnalysisExecute_Call) RunAndReturn(run func(r client.ApiUpdateAnalysisRequest) (*client.Analysis, *http.Response, error)) *MockAnalysisAPI_UpdateAnalysisExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBadgeAPI creates a new instance of MockBadgeAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBadgeAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBadgeAPI {
	mock := &MockBadgeAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBadgeAPI is an autogenerated mock type for the BadgeAPI type
type MockBadgeAPI struct {
	mock.Mock
}

type MockBadgeAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBadgeAPI) EXPECT() *MockBadgeAPI_Expecter {
	return &MockBadgeAPI_Expecter{mock: &_m.Mock}
}

// GetProjectPolicyViolationsBadge provides a mock function for the type MockBadgeAPI
func (_mock *MockBadgeAPI) GetProjectPolicyViolationsBadge(ctx context.Context, uuid string) client.ApiGetProjectPolicyViolationsBadgeRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPolicyViolationsBadge")
	}

	var r0 client.ApiGetProjectPolicyViolationsBadgeRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetProjectPolicyViolationsBadgeRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectPolicyViolationsBadgeRequest)
	}
	return r0
}

// MockBadgeAPI_GetProjectPolicyViolationsBadge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPolicyViolationsBadge'
type MockBadgeAPI_GetProjectPolicyViolationsBadge_Call struct {
	*mock.Call
}

// GetProjectPolicyViolationsBadge is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBadgeAPI_Expecter) GetProjectPolicyViolationsBadge(ctx interface{}, uuid interface{}) *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call {
	return &MockBadgeAPI_GetProjectPolicyViolationsBadge_Call{Call: _e.mock.On("GetProjectPolicyViolationsBadge", ctx, uuid)}
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call) Run(run func(ctx context.Context, uuid string)) *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call) Return(apiGetProjectPolicyViolationsBadgeRequest client.ApiGetProjectPolicyViolationsBadgeRequest) *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call {
	_c.Call.Return(apiGetProjectPolicyViolationsBadgeRequest)
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetProjectPolicyViolationsBadgeRequest) *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectPolicyViolationsBadge1 provides a mock function for the type MockBadgeAPI
func (_mock *MockBadgeAPI) GetProjectPolicyViolationsBadge1(ctx context.Context, name string, version string) client.ApiGetProjectPolicyViolationsBadge1Request {
	ret := _mock.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPolicyViolationsBadge1")
	}

	var r0 client.ApiGetProjectPolicyViolationsBadge1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetProjectPolicyViolationsBadge1Request); ok {
		r0 = returnFunc(ctx, name, version)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectPolicyViolationsBadge1Request)
	}
	return r0
}

// MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPolicyViolationsBadge1'
type MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call struct {
	*mock.Call
}

// GetProjectPolicyViolationsBadge1 is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockBadgeAPI_Expecter) GetProjectPolicyViolationsBadge1(ctx interface{}, name interface{}, version interface{}) *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call {
	return &MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call{Call: _e.mock.On("GetProjectPolicyViolationsBadge1", ctx, name, version)}
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call) Run(run func(ctx context.Context, name string, version string)) *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call) Return(apiGetProjectPolicyViolationsBadge1Request client.ApiGetProjectPolicyViolationsBadge1Request) *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call {
	_c.Call.Return(apiGetProjectPolicyViolationsBadge1Request)
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call) RunAndReturn(run func(ctx context.Context, name string, version string) client.ApiGetProjectPolicyViolationsBadge1Request) *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectPolicyViolationsBadge1Execute provides a mock function for the type MockBadgeAPI
func (_mock *MockBadgeAPI) GetProjectPolicyViolationsBadge1Execute(r client.ApiGetProjectPolicyViolationsBadge1Request) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPolicyViolationsBadge1Execute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectPolicyViolationsBadge1Request) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectPolicyViolationsBadge1Request) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectPolicyViolationsBadge1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectPolicyViolationsBadge1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPolicyViolationsBadge1Execute'
type MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call struct {
	*mock.Call
}

// GetProjectPolicyViolationsBadge1Execute is a helper method to define mock.On call
//   - r client.ApiGetProjectPolicyViolationsBadge1Request
func (_e *MockBadgeAPI_Expecter) GetProjectPolicyViolationsBadge1Execute(r interface{}) *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call {
	return &MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call{Call: _e.mock.On("GetProjectPolicyViolationsBadge1Execute", r)}
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call) Run(run func(r client.ApiGetProjectPolicyViolationsBadge1Request)) *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectPolicyViolationsBadge1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectPolicyViolationsBadge1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call) Return(s string, response *http.Response, err error) *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call) RunAndReturn(run func(r client.ApiGetProjectPolicyViolationsBadge1Request) (string, *http.Response, error)) *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectPolicyViolationsBadgeExecute provides a mock function for the type MockBadgeAPI
func (_mock *MockBadgeAPI) GetProjectPolicyViolationsBadgeExecute(r client.ApiGetProjectPolicyViolationsBadgeRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPolicyViolationsBadgeExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectPolicyViolationsBadgeRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectPolicyViolationsBadgeRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectPolicyViolationsBadgeRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectPolicyViolationsBadgeRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPolicyViolationsBadgeExecute'
type MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call struct {
	*mock.Call
}

// GetProjectPolicyViolationsBadgeExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectPolicyViolationsBadgeRequest
func (_e *MockBadgeAPI_Expecter) GetProjectPolicyViolationsBadgeExecute(r interface{}) *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call {
	return &MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call{Call: _e.mock.On("GetProjectPolicyViolationsBadgeExecute", r)}
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call) Run(run func(r client.ApiGetProjectPolicyViolationsBadgeRequest)) *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectPolicyViolationsBadgeRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectPolicyViolationsBadgeRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call) Return(s string, response *http.Response, err error) *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call) RunAndReturn(run func(r client.ApiGetProjectPolicyViolationsBadgeRequest) (string, *http.Response, error)) *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectVulnerabilitiesBadge provides a mock function for the type MockBadgeAPI
func (_mock *MockBadgeAPI) GetProjectVulnerabilitiesBadge(ctx context.Context, uuid string) client.ApiGetProjectVulnerabilitiesBadgeRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVulnerabilitiesBadge")
	}

	var r0 client.ApiGetProjectVulnerabilitiesBadgeRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetProjectVulnerabilitiesBadgeRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectVulnerabilitiesBadgeRequest)
	}
	return r0
}

// MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectVulnerabilitiesBadge'
type MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call struct {
	*mock.Call
}

// GetProjectVulnerabilitiesBadge is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBadgeAPI_Expecter) GetProjectVulnerabilitiesBadge(ctx interface{}, uuid interface{}) *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call {
	return &MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call{Call: _e.mock.On("GetProjectVulnerabilitiesBadge", ctx, uuid)}
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call) Run(run func(ctx context.Context, uuid string)) *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call) Return(apiGetProjectVulnerabilitiesBadgeRequest client.ApiGetProjectVulnerabilitiesBadgeRequest) *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call {
	_c.Call.Return(apiGetProjectVulnerabilitiesBadgeRequest)
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetProjectVulnerabilitiesBadgeRequest) *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectVulnerabilitiesBadge1 provides a mock function for the type MockBadgeAPI
func (_mock *MockBadgeAPI) GetProjectVulnerabilitiesBadge1(ctx context.Context, name string, version string) client.ApiGetProjectVulnerabilitiesBadge1Request {
	ret := _mock.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVulnerabilitiesBadge1")
	}

	var r0 client.ApiGetProjectVulnerabilitiesBadge1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetProjectVulnerabilitiesBadge1Request); ok {
		r0 = returnFunc(ctx, name, version)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectVulnerabilitiesBadge1Request)
	}
	return r0
}

// MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectVulnerabilitiesBadge1'
type MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call struct {
	*mock.Call
}

// GetProjectVulnerabilitiesBadge1 is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockBadgeAPI_Expecter) GetProjectVulnerabilitiesBadge1(ctx interface{}, name interface{}, version interface{}) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call {
	return &MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call{Call: _e.mock.On("GetProjectVulnerabilitiesBadge1", ctx, name, version)}
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call) Run(run func(ctx context.Context, name string, version string)) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call) Return(apiGetProjectVulnerabilitiesBadge1Request client.ApiGetProjectVulnerabilitiesBadge1Request) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call {
	_c.Call.Return(apiGetProjectVulnerabilitiesBadge1Request)
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call) RunAndReturn(run func(ctx context.Context, name string, version string) client.ApiGetProjectVulnerabilitiesBadge1Request) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectVulnerabilitiesBadge1Execute provides a mock function for the type MockBadgeAPI
func (_mock *MockBadgeAPI) GetProjectVulnerabilitiesBadge1Execute(r client.ApiGetProjectVulnerabilitiesBadge1Request) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVulnerabilitiesBadge1Execute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectVulnerabilitiesBadge1Request) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectVulnerabilitiesBadge1Request) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectVulnerabilitiesBadge1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectVulnerabilitiesBadge1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectVulnerabilitiesBadge1Execute'
type MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call struct {
	*mock.Call
}

// GetProjectVulnerabilitiesBadge1Execute is a helper method to define mock.On call
//   - r client.ApiGetProjectVulnerabilitiesBadge1Request
func (_e *MockBadgeAPI_Expecter) GetProjectVulnerabilitiesBadge1Execute(r interface{}) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call {
	return &MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call{Call: _e.mock.On("GetProjectVulnerabilitiesBadge1Execute", r)}
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call) Run(run func(r client.ApiGetProjectVulnerabilitiesBadge1Request)) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectVulnerabilitiesBadge1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectVulnerabilitiesBadge1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call) Return(s string, response *http.Response, err error) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call) RunAndReturn(run func(r client.ApiGetProjectVulnerabilitiesBadge1Request) (string, *http.Response, error)) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectVulnerabilitiesBadgeExecute provides a mock function for the type MockBadgeAPI
func (_mock *MockBadgeAPI) GetProjectVulnerabilitiesBadgeExecute(r client.ApiGetProjectVulnerabilitiesBadgeRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVulnerabilitiesBadgeExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectVulnerabilitiesBadgeRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectVulnerabilitiesBadgeRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectVulnerabilitiesBadgeRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectVulnerabilitiesBadgeRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectVulnerabilitiesBadgeExecute'
type MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call struct {
	*mock.Call
}

// GetProjectVulnerabilitiesBadgeExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectVulnerabilitiesBadgeRequest
func (_e *MockBadgeAPI_Expecter) GetProjectVulnerabilitiesBadgeExecute(r interface{}) *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call {
	return &MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call{Call: _e.mock.On("GetProjectVulnerabilitiesBadgeExecute", r)}
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call) Run(run func(r client.ApiGetProjectVulnerabilitiesBadgeRequest)) *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectVulnerabilitiesBadgeRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectVulnerabilitiesBadgeRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call) Return(s string, response *http.Response, err error) *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call) RunAndReturn(run func(r client.ApiGetProjectVulnerabilitiesBadgeRequest) (string, *http.Response, error)) *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBomAPI creates a new instance of MockBomAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBomAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBomAPI {
	mock := &MockBomAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBomAPI is an autogenerated mock type for the BomAPI type
type MockBomAPI struct {
	mock.Mock
}

type MockBomAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBomAPI) EXPECT() *MockBomAPI_Expecter {
	return &MockBomAPI_Expecter{mock: &_m.Mock}
}

// ExportComponentAsCycloneDx provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) ExportComponentAsCycloneDx(ctx context.Context, uuid string) client.ApiExportComponentAsCycloneDxRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ExportComponentAsCycloneDx")
	}

	var r0 client.ApiExportComponentAsCycloneDxRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiExportComponentAsCycloneDxRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiExportComponentAsCycloneDxRequest)
	}
	return r0
}

// MockBomAPI_ExportComponentAsCycloneDx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportComponentAsCycloneDx'
type MockBomAPI_ExportComponentAsCycloneDx_Call struct {
	*mock.Call
}

// ExportComponentAsCycloneDx is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBomAPI_Expecter) ExportComponentAsCycloneDx(ctx interface{}, uuid interface{}) *MockBomAPI_ExportComponentAsCycloneDx_Call {
	return &MockBomAPI_ExportComponentAsCycloneDx_Call{Call: _e.mock.On("ExportComponentAsCycloneDx", ctx, uuid)}
}

func (_c *MockBomAPI_ExportComponentAsCycloneDx_Call) Run(run func(ctx context.Context, uuid string)) *MockBomAPI_ExportComponentAsCycloneDx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBomAPI_ExportComponentAsCycloneDx_Call) Return(apiExportComponentAsCycloneDxRequest client.ApiExportComponentAsCycloneDxRequest) *MockBomAPI_ExportComponentAsCycloneDx_Call {
	_c.Call.Return(apiExportComponentAsCycloneDxRequest)
	return _c
}

func (_c *MockBomAPI_ExportComponentAsCycloneDx_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiExportComponentAsCycloneDxRequest) *MockBomAPI_ExportComponentAsCycloneDx_Call {
	_c.Call.Return(run)
	return _c
}

// ExportComponentAsCycloneDxExecute provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) ExportComponentAsCycloneDxExecute(r client.ApiExportComponentAsCycloneDxRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ExportComponentAsCycloneDxExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiExportComponentAsCycloneDxRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiExportComponentAsCycloneDxRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiExportComponentAsCycloneDxRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiExportComponentAsCycloneDxRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBomAPI_ExportComponentAsCycloneDxExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportComponentAsCycloneDxExecute'
type MockBomAPI_ExportComponentAsCycloneDxExecute_Call struct {
	*mock.Call
}

// ExportComponentAsCycloneDxExecute is a helper method to define mock.On call
//   - r client.ApiExportComponentAsCycloneDxRequest
func (_e *MockBomAPI_Expecter) ExportComponentAsCycloneDxExecute(r interface{}) *MockBomAPI_ExportComponentAsCycloneDxExecute_Call {
	return &MockBomAPI_ExportComponentAsCycloneDxExecute_Call{Call: _e.mock.On("ExportComponentAsCycloneDxExecute", r)}
}

func (_c *MockBomAPI_ExportComponentAsCycloneDxExecute_Call) Run(run func(r client.ApiExportComponentAsCycloneDxRequest)) *MockBomAPI_ExportComponentAsCycloneDxExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiExportComponentAsCycloneDxRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiExportComponentAsCycloneDxRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBomAPI_ExportComponentAsCycloneDxExecute_Call) Return(s string, response *http.Response, err error) *MockBomAPI_ExportComponentAsCycloneDxExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockBomAPI_ExportComponentAsCycloneDxExecute_Call) RunAndReturn(run func(r client.ApiExportComponentAsCycloneDxRequest) (string, *http.Response, error)) *MockBomAPI_ExportComponentAsCycloneDxExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ExportProjectAsCycloneDx provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) ExportProjectAsCycloneDx(ctx context.Context, uuid string) client.ApiExportProjectAsCycloneDxRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ExportProjectAsCycloneDx")
	}

	var r0 client.ApiExportProjectAsCycloneDxRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiExportProjectAsCycloneDxRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiExportProjectAsCycloneDxRequest)
	}
	return r0
}

// MockBomAPI_ExportProjectAsCycloneDx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportProjectAsCycloneDx'
type MockBomAPI_ExportProjectAsCycloneDx_Call struct {
	*mock.Call
}

// ExportProjectAsCycloneDx is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBomAPI_Expecter) ExportProjectAsCycloneDx(ctx interface{}, uuid interface{}) *MockBomAPI_ExportProjectAsCycloneDx_Call {
	return &MockBomAPI_ExportProjectAsCycloneDx_Call{Call: _e.mock.On("ExportProjectAsCycloneDx", ctx, uuid)}
}

func (_c *MockBomAPI_ExportProjectAsCycloneDx_Call) Run(run func(ctx context.Context, uuid string)) *MockBomAPI_ExportProjectAsCycloneDx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBomAPI_ExportProjectAsCycloneDx_Call) Return(apiExportProjectAsCycloneDxRequest client.ApiExportProjectAsCycloneDxRequest) *MockBomAPI_ExportProjectAsCycloneDx_Call {
	_c.Call.Return(apiExportProjectAsCycloneDxRequest)
	return _c
}

func (_c *MockBomAPI_ExportProjectAsCycloneDx_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiExportProjectAsCycloneDxRequest) *MockBomAPI_ExportProjectAsCycloneDx_Call {
	_c.Call.Return(run)
	return _c
}

// ExportProjectAsCycloneDxExecute provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) ExportProjectAsCycloneDxExecute(r client.ApiExportProjectAsCycloneDxRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ExportProjectAsCycloneDxExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiExportProjectAsCycloneDxRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiExportProjectAsCycloneDxRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiExportProjectAsCycloneDxRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiExportProjectAsCycloneDxRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBomAPI_ExportProjectAsCycloneDxExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportProjectAsCycloneDxExecute'
type MockBomAPI_ExportProjectAsCycloneDxExecute_Call struct {
	*mock.Call
}

// ExportProjectAsCycloneDxExecute is a helper method to define mock.On call
//   - r client.ApiExportProjectAsCycloneDxRequest
func (_e *MockBomAPI_Expecter) ExportProjectAsCycloneDxExecute(r interface{}) *MockBomAPI_ExportProjectAsCycloneDxExecute_Call {
	return &MockBomAPI_ExportProjectAsCycloneDxExecute_Call{Call: _e.mock.On("ExportProjectAsCycloneDxExecute", r)}
}

func (_c *MockBomAPI_ExportProjectAsCycloneDxExecute_Call) Run(run func(r client.ApiExportProjectAsCycloneDxRequest)) *MockBomAPI_ExportProjectAsCycloneDxExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiExportProjectAsCycloneDxRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiExportProjectAsCycloneDxRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBomAPI_ExportProjectAsCycloneDxExecute_Call) Return(s string, response *http.Response, err error) *MockBomAPI_ExportProjectAsCycloneDxExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockBomAPI_ExportProjectAsCycloneDxExecute_Call) RunAndReturn(run func(r client.ApiExportProjectAsCycloneDxRequest) (string, *http.Response, error)) *MockBomAPI_ExportProjectAsCycloneDxExecute_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenBeingProcessed provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) IsTokenBeingProcessed(ctx context.Context, uuid string) client.ApiIsTokenBeingProcessedRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBeingProcessed")
	}

	var r0 client.ApiIsTokenBeingProcessedRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiIsTokenBeingProcessedRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiIsTokenBeingProcessedRequest)
	}
	return r0
}

// MockBomAPI_IsTokenBeingProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenBeingProcessed'
type MockBomAPI_IsTokenBeingProcessed_Call struct {
	*mock.Call
}

// IsTokenBeingProcessed is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBomAPI_Expecter) IsTokenBeingProcessed(ctx interface{}, uuid interface{}) *MockBomAPI_IsTokenBeingProcessed_Call {
	return &MockBomAPI_IsTokenBeingProcessed_Call{Call: _e.mock.On("IsTokenBeingProcessed", ctx, uuid)}
}

func (_c *MockBomAPI_IsTokenBeingProcessed_Call) Run(run func(ctx context.Context, uuid string)) *MockBomAPI_IsTokenBeingProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockBomAPI_IsTokenBeingProcessed_Call) Return(apiIsTokenBeingProcessedRequest client.ApiIsTokenBeingProcessedRequest) *MockBomAPI_IsTokenBeingProcessed_Call {
	_c.Call.Return(apiIsTokenBeingProcessedRequest)
	return _c
}

func (_c *MockBomAPI_IsTokenBeingProcessed_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiIsTokenBeingProcessedRequest) *MockBomAPI_IsTokenBeingProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenBeingProcessedExecute provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) IsTokenBeingProcessedExecute(r client.ApiIsTokenBeingProcessedRequest) (*client.IsTokenBeingProcessedResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBeingProcessedExecute")
	}

	var r0 *client.IsTokenBeingProcessedResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiIsTokenBeingProcessedRequest) (*client.IsTokenBeingProcessedResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiIsTokenBeingProcessedRequest) *client.IsTokenBeingProcessedResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IsTokenBeingProcessedResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiIsTokenBeingProcessedRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiIsTokenBeingProcessedRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBomAPI_IsTokenBeingProcessedExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenBeingProcessedExecute'
type MockBomAPI_IsTokenBeingProcessedExecute_Call struct {
	*mock.Call
}

// IsTokenBeingProcessedExecute is a helper method to define mock.On call
//   - r client.ApiIsTokenBeingProcessedRequest
func (_e *MockBomAPI_Expecter) IsTokenBeingProcessedExecute(r interface{}) *MockBomAPI_IsTokenBeingProcessedExecute_Call {
	return &MockBomAPI_IsTokenBeingProcessedExecute_Call{Call: _e.mock.On("IsTokenBeingProcessedExecute", r)}
}

func (_c *MockBomAPI_IsTokenBeingProcessedExecute_Call) Run(run func(r client.ApiIsTokenBeingProcessedRequest)) *MockBomAPI_IsTokenBeingProcessedExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiIsTokenBeingProcessedRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiIsTokenBeingProcessedRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBomAPI_IsTokenBeingProcessedExecute_Call) Return(isTokenBeingProcessedResponse *client.IsTokenBeingProcessedResponse, response *http.Response, err error) *MockBomAPI_IsTokenBeingProcessedExecute_Call {
	_c.Call.Return(isTokenBeingProcessedResponse, response, err)
	return _c
}

func (_c *MockBomAPI_IsTokenBeingProcessedExecute_Call) RunAndReturn(run func(r client.ApiIsTokenBeingProcessedRequest) (*client.IsTokenBeingProcessedResponse, *http.Response, error)) *MockBomAPI_IsTokenBeingProcessedExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBom provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) UploadBom(ctx context.Context) client.ApiUploadBomRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UploadBom")
	}

	var r0 client.ApiUploadBomRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUploadBomRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUploadBomRequest)
	}
	return r0
}

// MockBomAPI_UploadBom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBom'
type MockBomAPI_UploadBom_Call struct {
	*mock.Call
}

// UploadBom is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBomAPI_Expecter) UploadBom(ctx interface{}) *MockBomAPI_UploadBom_Call {
	return &MockBomAPI_UploadBom_Call{Call: _e.mock.On("UploadBom", ctx)}
}

func (_c *MockBomAPI_UploadBom_Call) Run(run func(ctx context.Context)) *MockBomAPI_UploadBom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBomAPI_UploadBom_Call) Return(apiUploadBomRequest client.ApiUploadBomRequest) *MockBomAPI_UploadBom_Call {
	_c.Call.Return(apiUploadBomRequest)
	return _c
}

func (_c *MockBomAPI_UploadBom_Call) RunAndReturn(run func(ctx context.Context) client.ApiUploadBomRequest) *MockBomAPI_UploadBom_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBomBase64Encoded provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) UploadBomBase64Encoded(ctx context.Context) client.ApiUploadBomBase64EncodedRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UploadBomBase64Encoded")
	}

	var r0 client.ApiUploadBomBase64EncodedRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUploadBomBase64EncodedRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUploadBomBase64EncodedRequest)
	}
	return r0
}

// MockBomAPI_UploadBomBase64Encoded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBomBase64Encoded'
type MockBomAPI_UploadBomBase64Encoded_Call struct {
	*mock.Call
}

// UploadBomBase64Encoded is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBomAPI_Expecter) UploadBomBase64Encoded(ctx interface{}) *MockBomAPI_UploadBomBase64Encoded_Call {
	return &MockBomAPI_UploadBomBase64Encoded_Call{Call: _e.mock.On("UploadBomBase64Encoded", ctx)}
}

func (_c *MockBomAPI_UploadBomBase64Encoded_Call) Run(run func(ctx context.Context)) *MockBomAPI_UploadBomBase64Encoded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBomAPI_UploadBomBase64Encoded_Call) Return(apiUploadBomBase64EncodedRequest client.ApiUploadBomBase64EncodedRequest) *MockBomAPI_UploadBomBase64Encoded_Call {
	_c.Call.Return(apiUploadBomBase64EncodedRequest)
	return _c
}

func (_c *MockBomAPI_UploadBomBase64Encoded_Call) RunAndReturn(run func(ctx context.Context) client.ApiUploadBomBase64EncodedRequest) *MockBomAPI_UploadBomBase64Encoded_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBomBase64EncodedExecute provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) UploadBomBase64EncodedExecute(r client.ApiUploadBomBase64EncodedRequest) (*client.BomUploadResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UploadBomBase64EncodedExecute")
	}

	var r0 *client.BomUploadResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUploadBomBase64EncodedRequest) (*client.BomUploadResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUploadBomBase64EncodedRequest) *client.BomUploadResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BomUploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUploadBomBase64EncodedRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUploadBomBase64EncodedRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBomAPI_UploadBomBase64EncodedExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBomBase64EncodedExecute'
type MockBomAPI_UploadBomBase64EncodedExecute_Call struct {
	*mock.Call
}

// UploadBomBase64EncodedExecute is a helper method to define mock.On call
//   - r client.ApiUploadBomBase64EncodedRequest
func (_e *MockBomAPI_Expecter) UploadBomBase64EncodedExecute(r interface{}) *MockBomAPI_UploadBomBase64EncodedExecute_Call {
	return &MockBomAPI_UploadBomBase64EncodedExecute_Call{Call: _e.mock.On("UploadBomBase64EncodedExecute", r)}
}

func (_c *MockBomAPI_UploadBomBase64EncodedExecute_Call) Run(run func(r client.ApiUploadBomBase64EncodedRequest)) *MockBomAPI_UploadBomBase64EncodedExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUploadBomBase64EncodedRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUploadBomBase64EncodedRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBomAPI_UploadBomBase64EncodedExecute_Call) Return(bomUploadResponse *client.BomUploadResponse, response *http.Response, err error) *MockBomAPI_UploadBomBase64EncodedExecute_Call {
	_c.Call.Return(bomUploadResponse, response, err)
	return _c
}

func (_c *MockBomAPI_UploadBomBase64EncodedExecute_Call) RunAndReturn(run func(r client.ApiUploadBomBase64EncodedRequest) (*client.BomUploadResponse, *http.Response, error)) *MockBomAPI_UploadBomBase64EncodedExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBomExecute provides a mock function for the type MockBomAPI
func (_mock *MockBomAPI) UploadBomExecute(r client.ApiUploadBomRequest) (*client.BomUploadResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UploadBomExecute")
	}

	var r0 *client.BomUploadResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUploadBomRequest) (*client.BomUploadResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUploadBomRequest) *client.BomUploadResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BomUploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUploadBomRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUploadBomRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockBomAPI_UploadBomExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBomExecute'
type MockBomAPI_UploadBomExecute_Call struct {
	*mock.Call
}

// UploadBomExecute is a helper method to define mock.On call
//   - r client.ApiUploadBomRequest
func (_e *MockBomAPI_Expecter) UploadBomExecute(r interface{}) *MockBomAPI_UploadBomExecute_Call {
	return &MockBomAPI_UploadBomExecute_Call{Call: _e.mock.On("UploadBomExecute", r)}
}

func (_c *MockBomAPI_UploadBomExecute_Call) Run(run func(r client.ApiUploadBomRequest)) *MockBomAPI_UploadBomExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUploadBomRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUploadBomRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBomAPI_UploadBomExecute_Call) Return(bomUploadResponse *client.BomUploadResponse, response *http.Response, err error) *MockBomAPI_UploadBomExecute_Call {
	_c.Call.Return(bomUploadResponse, response, err)
	return _c
}

func (_c *MockBomAPI_UploadBomExecute_Call) RunAndReturn(run func(r client.ApiUploadBomRequest) (*client.BomUploadResponse, *http.Response, error)) *MockBomAPI_UploadBomExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCalculatorAPI creates a new instance of MockCalculatorAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCalculatorAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCalculatorAPI {
	mock := &MockCalculatorAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCalculatorAPI is an autogenerated mock type for the CalculatorAPI type
type MockCalculatorAPI struct {
	mock.Mock
}

type MockCalculatorAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCalculatorAPI) EXPECT() *MockCalculatorAPI_Expecter {
	return &MockCalculatorAPI_Expecter{mock: &_m.Mock}
}

// GetCvssScores provides a mock function for the type MockCalculatorAPI
func (_mock *MockCalculatorAPI) GetCvssScores(ctx context.Context) client.ApiGetCvssScoresRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCvssScores")
	}

	var r0 client.ApiGetCvssScoresRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetCvssScoresRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetCvssScoresRequest)
	}
	return r0
}

// MockCalculatorAPI_GetCvssScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCvssScores'
type MockCalculatorAPI_GetCvssScores_Call struct {
	*mock.Call
}

// GetCvssScores is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCalculatorAPI_Expecter) GetCvssScores(ctx interface{}) *MockCalculatorAPI_GetCvssScores_Call {
	return &MockCalculatorAPI_GetCvssScores_Call{Call: _e.mock.On("GetCvssScores", ctx)}
}

func (_c *MockCalculatorAPI_GetCvssScores_Call) Run(run func(ctx context.Context)) *MockCalculatorAPI_GetCvssScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCalculatorAPI_GetCvssScores_Call) Return(apiGetCvssScoresRequest client.ApiGetCvssScoresRequest) *MockCalculatorAPI_GetCvssScores_Call {
	_c.Call.Return(apiGetCvssScoresRequest)
	return _c
}

func (_c *MockCalculatorAPI_GetCvssScores_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetCvssScoresRequest) *MockCalculatorAPI_GetCvssScores_Call {
	_c.Call.Return(run)
	return _c
}

// GetCvssScoresExecute provides a mock function for the type MockCalculatorAPI
func (_mock *MockCalculatorAPI) GetCvssScoresExecute(r client.ApiGetCvssScoresRequest) (*client.Score, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCvssScoresExecute")
	}

	var r0 *client.Score
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetCvssScoresRequest) (*client.Score, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetCvssScoresRequest) *client.Score); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Score)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetCvssScoresRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetCvssScoresRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCalculatorAPI_GetCvssScoresExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCvssScoresExecute'
type MockCalculatorAPI_GetCvssScoresExecute_Call struct {
	*mock.Call
}

// GetCvssScoresExecute is a helper method to define mock.On call
//   - r client.ApiGetCvssScoresRequest
func (_e *MockCalculatorAPI_Expecter) GetCvssScoresExecute(r interface{}) *MockCalculatorAPI_GetCvssScoresExecute_Call {
	return &MockCalculatorAPI_GetCvssScoresExecute_Call{Call: _e.mock.On("GetCvssScoresExecute", r)}
}

func (_c *MockCalculatorAPI_GetCvssScoresExecute_Call) Run(run func(r client.ApiGetCvssScoresRequest)) *MockCalculatorAPI_GetCvssScoresExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetCvssScoresRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetCvssScoresRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCalculatorAPI_GetCvssScoresExecute_Call) Return(score *client.Score, response *http.Response, err error) *MockCalculatorAPI_GetCvssScoresExecute_Call {
	_c.Call.Return(score, response, err)
	return _c
}

func (_c *MockCalculatorAPI_GetCvssScoresExecute_Call) RunAndReturn(run func(r client.ApiGetCvssScoresRequest) (*client.Score, *http.Response, error)) *MockCalculatorAPI_GetCvssScoresExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwaspRRScores provides a mock function for the type MockCalculatorAPI
func (_mock *MockCalculatorAPI) GetOwaspRRScores(ctx context.Context) client.ApiGetOwaspRRScoresRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOwaspRRScores")
	}

	var r0 client.ApiGetOwaspRRScoresRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetOwaspRRScoresRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetOwaspRRScoresRequest)
	}
	return r0
}

// MockCalculatorAPI_GetOwaspRRScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwaspRRScores'
type MockCalculatorAPI_GetOwaspRRScores_Call struct {
	*mock.Call
}

// GetOwaspRRScores is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCalculatorAPI_Expecter) GetOwaspRRScores(ctx interface{}) *MockCalculatorAPI_GetOwaspRRScores_Call {
	return &MockCalculatorAPI_GetOwaspRRScores_Call{Call: _e.mock.On("GetOwaspRRScores", ctx)}
}

func (_c *MockCalculatorAPI_GetOwaspRRScores_Call) Run(run func(ctx context.Context)) *MockCalculatorAPI_GetOwaspRRScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCalculatorAPI_GetOwaspRRScores_Call) Return(apiGetOwaspRRScoresRequest client.ApiGetOwaspRRScoresRequest) *MockCalculatorAPI_GetOwaspRRScores_Call {
	_c.Call.Return(apiGetOwaspRRScoresRequest)
	return _c
}

func (_c *MockCalculatorAPI_GetOwaspRRScores_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetOwaspRRScoresRequest) *MockCalculatorAPI_GetOwaspRRScores_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwaspRRScoresExecute provides a mock function for the type MockCalculatorAPI
func (_mock *MockCalculatorAPI) GetOwaspRRScoresExecute(r client.ApiGetOwaspRRScoresRequest) (*client.Score, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOwaspRRScoresExecute")
	}

	var r0 *client.Score
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetOwaspRRScoresRequest) (*client.Score, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetOwaspRRScoresRequest) *client.Score); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Score)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetOwaspRRScoresRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetOwaspRRScoresRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCalculatorAPI_GetOwaspRRScoresExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwaspRRScoresExecute'
type MockCalculatorAPI_GetOwaspRRScoresExecute_Call struct {
	*mock.Call
}

// GetOwaspRRScoresExecute is a helper method to define mock.On call
//   - r client.ApiGetOwaspRRScoresRequest
func (_e *MockCalculatorAPI_Expecter) GetOwaspRRScoresExecute(r interface{}) *MockCalculatorAPI_GetOwaspRRScoresExecute_Call {
	return &MockCalculatorAPI_GetOwaspRRScoresExecute_Call{Call: _e.mock.On("GetOwaspRRScoresExecute", r)}
}

func (_c *MockCalculatorAPI_GetOwaspRRScoresExecute_Call) Run(run func(r client.ApiGetOwaspRRScoresRequest)) *MockCalculatorAPI_GetOwaspRRScoresExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetOwaspRRScoresRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetOwaspRRScoresRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCalculatorAPI_GetOwaspRRScoresExecute_Call) Return(score *client.Score, response *http.Response, err error) *MockCalculatorAPI_GetOwaspRRScoresExecute_Call {
	_c.Call.Return(score, response, err)
	return _c
}

func (_c *MockCalculatorAPI_GetOwaspRRScoresExecute_Call) RunAndReturn(run func(r client.ApiGetOwaspRRScoresRequest) (*client.Score, *http.Response, error)) *MockCalculatorAPI_GetOwaspRRScoresExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponentAPI creates a new instance of MockComponentAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentAPI {
	mock := &MockComponentAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockComponentAPI is an autogenerated mock type for the ComponentAPI type
type MockComponentAPI struct {
	mock.Mock
}

type MockComponentAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentAPI) EXPECT() *MockComponentAPI_Expecter {
	return &MockComponentAPI_Expecter{mock: &_m.Mock}
}

// CreateComponent provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) CreateComponent(ctx context.Context, uuid string) client.ApiCreateComponentRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 client.ApiCreateComponentRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiCreateComponentRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiCreateComponentRequest)
	}
	return r0
}

// MockComponentAPI_CreateComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponent'
type MockComponentAPI_CreateComponent_Call struct {
	*mock.Call
}

// CreateComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentAPI_Expecter) CreateComponent(ctx interface{}, uuid interface{}) *MockComponentAPI_CreateComponent_Call {
	return &MockComponentAPI_CreateComponent_Call{Call: _e.mock.On("CreateComponent", ctx, uuid)}
}

func (_c *MockComponentAPI_CreateComponent_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentAPI_CreateComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockComponentAPI_CreateComponent_Call) Return(apiCreateComponentRequest client.ApiCreateComponentRequest) *MockComponentAPI_CreateComponent_Call {
	_c.Call.Return(apiCreateComponentRequest)
	return _c
}

func (_c *MockComponentAPI_CreateComponent_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiCreateComponentRequest) *MockComponentAPI_CreateComponent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponentExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) CreateComponentExecute(r client.ApiCreateComponentRequest) (*client.Component, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentExecute")
	}

	var r0 *client.Component
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateComponentRequest) (*client.Component, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateComponentRequest) *client.Component); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Component)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateComponentRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateComponentRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentAPI_CreateComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponentExecute'
type MockComponentAPI_CreateComponentExecute_Call struct {
	*mock.Call
}

// CreateComponentExecute is a helper method to define mock.On call
//   - r client.ApiCreateComponentRequest
func (_e *MockComponentAPI_Expecter) CreateComponentExecute(r interface{}) *MockComponentAPI_CreateComponentExecute_Call {
	return &MockComponentAPI_CreateComponentExecute_Call{Call: _e.mock.On("CreateComponentExecute", r)}
}

func (_c *MockComponentAPI_CreateComponentExecute_Call) Run(run func(r client.ApiCreateComponentRequest)) *MockComponentAPI_CreateComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateComponentRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateComponentRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_CreateComponentExecute_Call) Return(component *client.Component, response *http.Response, err error) *MockComponentAPI_CreateComponentExecute_Call {
	_c.Call.Return(component, response, err)
	return _c
}

func (_c *MockComponentAPI_CreateComponentExecute_Call) RunAndReturn(run func(r client.ApiCreateComponentRequest) (*client.Component, *http.Response, error)) *MockComponentAPI_CreateComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponent provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) DeleteComponent(ctx context.Context, uuid string) client.ApiDeleteComponentRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponent")
	}

	var r0 client.ApiDeleteComponentRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteComponentRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteComponentRequest)
	}
	return r0
}

// MockComponentAPI_DeleteComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponent'
type MockComponentAPI_DeleteComponent_Call struct {
	*mock.Call
}

// DeleteComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentAPI_Expecter) DeleteComponent(ctx interface{}, uuid interface{}) *MockComponentAPI_DeleteComponent_Call {
	return &MockComponentAPI_DeleteComponent_Call{Call: _e.mock.On("DeleteComponent", ctx, uuid)}
}

func (_c *MockComponentAPI_DeleteComponent_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentAPI_DeleteComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockComponentAPI_DeleteComponent_Call) Return(apiDeleteComponentRequest client.ApiDeleteComponentRequest) *MockComponentAPI_DeleteComponent_Call {
	_c.Call.Return(apiDeleteComponentRequest)
	return _c
}

func (_c *MockComponentAPI_DeleteComponent_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteComponentRequest) *MockComponentAPI_DeleteComponent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponentExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) DeleteComponentExecute(r client.ApiDeleteComponentRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponentExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteComponentRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteComponentRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteComponentRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComponentAPI_DeleteComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponentExecute'
type MockComponentAPI_DeleteComponentExecute_Call struct {
	*mock.Call
}

// DeleteComponentExecute is a helper method to define mock.On call
//   - r client.ApiDeleteComponentRequest
func (_e *MockComponentAPI_Expecter) DeleteComponentExecute(r interface{}) *MockComponentAPI_DeleteComponentExecute_Call {
	return &MockComponentAPI_DeleteComponentExecute_Call{Call: _e.mock.On("DeleteComponentExecute", r)}
}

func (_c *MockComponentAPI_DeleteComponentExecute_Call) Run(run func(r client.ApiDeleteComponentRequest)) *MockComponentAPI_DeleteComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteComponentRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteComponentRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_DeleteComponentExecute_Call) Return(response *http.Response, err error) *MockComponentAPI_DeleteComponentExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockComponentAPI_DeleteComponentExecute_Call) RunAndReturn(run func(r client.ApiDeleteComponentRequest) (*http.Response, error)) *MockComponentAPI_DeleteComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComponents provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetAllComponents(ctx context.Context, uuid string) client.ApiGetAllComponentsRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComponents")
	}

	var r0 client.ApiGetAllComponentsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetAllComponentsRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllComponentsRequest)
	}
	return r0
}

// MockComponentAPI_GetAllComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComponents'
type MockComponentAPI_GetAllComponents_Call struct {
	*mock.Call
}

// GetAllComponents is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentAPI_Expecter) GetAllComponents(ctx interface{}, uuid interface{}) *MockComponentAPI_GetAllComponents_Call {
	return &MockComponentAPI_GetAllComponents_Call{Call: _e.mock.On("GetAllComponents", ctx, uuid)}
}

func (_c *MockComponentAPI_GetAllComponents_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentAPI_GetAllComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetAllComponents_Call) Return(apiGetAllComponentsRequest client.ApiGetAllComponentsRequest) *MockComponentAPI_GetAllComponents_Call {
	_c.Call.Return(apiGetAllComponentsRequest)
	return _c
}

func (_c *MockComponentAPI_GetAllComponents_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetAllComponentsRequest) *MockComponentAPI_GetAllComponents_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComponentsExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetAllComponentsExecute(r client.ApiGetAllComponentsRequest) ([]client.Component, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComponentsExecute")
	}

	var r0 []client.Component
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllComponentsRequest) ([]client.Component, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllComponentsRequest) []client.Component); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Component)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllComponentsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllComponentsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentAPI_GetAllComponentsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComponentsExecute'
type MockComponentAPI_GetAllComponentsExecute_Call struct {
	*mock.Call
}

// GetAllComponentsExecute is a helper method to define mock.On call
//   - r client.ApiGetAllComponentsRequest
func (_e *MockComponentAPI_Expecter) GetAllComponentsExecute(r interface{}) *MockComponentAPI_GetAllComponentsExecute_Call {
	return &MockComponentAPI_GetAllComponentsExecute_Call{Call: _e.mock.On("GetAllComponentsExecute", r)}
}

func (_c *MockComponentAPI_GetAllComponentsExecute_Call) Run(run func(r client.ApiGetAllComponentsRequest)) *MockComponentAPI_GetAllComponentsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllComponentsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllComponentsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetAllComponentsExecute_Call) Return(components []client.Component, response *http.Response, err error) *MockComponentAPI_GetAllComponentsExecute_Call {
	_c.Call.Return(components, response, err)
	return _c
}

func (_c *MockComponentAPI_GetAllComponentsExecute_Call) RunAndReturn(run func(r client.ApiGetAllComponentsRequest) ([]client.Component, *http.Response, error)) *MockComponentAPI_GetAllComponentsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByHash provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetComponentByHash(ctx context.Context, hash string) client.ApiGetComponentByHashRequest {
	ret := _mock.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByHash")
	}

	var r0 client.ApiGetComponentByHashRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetComponentByHashRequest); ok {
		r0 = returnFunc(ctx, hash)
	} else {
		r0 = ret.Get(0).(client.ApiGetComponentByHashRequest)
	}
	return r0
}

// MockComponentAPI_GetComponentByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByHash'
type MockComponentAPI_GetComponentByHash_Call struct {
	*mock.Call
}

// GetComponentByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
func (_e *MockComponentAPI_Expecter) GetComponentByHash(ctx interface{}, hash interface{}) *MockComponentAPI_GetComponentByHash_Call {
	return &MockComponentAPI_GetComponentByHash_Call{Call: _e.mock.On("GetComponentByHash", ctx, hash)}
}

func (_c *MockComponentAPI_GetComponentByHash_Call) Run(run func(ctx context.Context, hash string)) *MockComponentAPI_GetComponentByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByHash_Call) Return(apiGetComponentByHashRequest client.ApiGetComponentByHashRequest) *MockComponentAPI_GetComponentByHash_Call {
	_c.Call.Return(apiGetComponentByHashRequest)
	return _c
}

func (_c *MockComponentAPI_GetComponentByHash_Call) RunAndReturn(run func(ctx context.Context, hash string) client.ApiGetComponentByHashRequest) *MockComponentAPI_GetComponentByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByHashExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetComponentByHashExecute(r client.ApiGetComponentByHashRequest) ([]client.Component, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByHashExecute")
	}

	var r0 []client.Component
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentByHashRequest) ([]client.Component, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentByHashRequest) []client.Component); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Component)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetComponentByHashRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetComponentByHashRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentAPI_GetComponentByHashExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByHashExecute'
type MockComponentAPI_GetComponentByHashExecute_Call struct {
	*mock.Call
}

// GetComponentByHashExecute is a helper method to define mock.On call
//   - r client.ApiGetComponentByHashRequest
func (_e *MockComponentAPI_Expecter) GetComponentByHashExecute(r interface{}) *MockComponentAPI_GetComponentByHashExecute_Call {
	return &MockComponentAPI_GetComponentByHashExecute_Call{Call: _e.mock.On("GetComponentByHashExecute", r)}
}

func (_c *MockComponentAPI_GetComponentByHashExecute_Call) Run(run func(r client.ApiGetComponentByHashRequest)) *MockComponentAPI_GetComponentByHashExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetComponentByHashRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetComponentByHashRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByHashExecute_Call) Return(components []client.Component, response *http.Response, err error) *MockComponentAPI_GetComponentByHashExecute_Call {
	_c.Call.Return(components, response, err)
	return _c
}

func (_c *MockComponentAPI_GetComponentByHashExecute_Call) RunAndReturn(run func(r client.ApiGetComponentByHashRequest) ([]client.Component, *http.Response, error)) *MockComponentAPI_GetComponentByHashExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByIdentity provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetComponentByIdentity(ctx context.Context) client.ApiGetComponentByIdentityRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByIdentity")
	}

	var r0 client.ApiGetComponentByIdentityRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetComponentByIdentityRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetComponentByIdentityRequest)
	}
	return r0
}

// MockComponentAPI_GetComponentByIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByIdentity'
type MockComponentAPI_GetComponentByIdentity_Call struct {
	*mock.Call
}

// GetComponentByIdentity is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockComponentAPI_Expecter) GetComponentByIdentity(ctx interface{}) *MockComponentAPI_GetComponentByIdentity_Call {
	return &MockComponentAPI_GetComponentByIdentity_Call{Call: _e.mock.On("GetComponentByIdentity", ctx)}
}

func (_c *MockComponentAPI_GetComponentByIdentity_Call) Run(run func(ctx context.Context)) *MockComponentAPI_GetComponentByIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByIdentity_Call) Return(apiGetComponentByIdentityRequest client.ApiGetComponentByIdentityRequest) *MockComponentAPI_GetComponentByIdentity_Call {
	_c.Call.Return(apiGetComponentByIdentityRequest)
	return _c
}

func (_c *MockComponentAPI_GetComponentByIdentity_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetComponentByIdentityRequest) *MockComponentAPI_GetComponentByIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByIdentityExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetComponentByIdentityExecute(r client.ApiGetComponentByIdentityRequest) ([]client.Component, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByIdentityExecute")
	}

	var r0 []client.Component
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentByIdentityRequest) ([]client.Component, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentByIdentityRequest) []client.Component); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Component)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetComponentByIdentityRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetComponentByIdentityRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentAPI_GetComponentByIdentityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByIdentityExecute'
type MockComponentAPI_GetComponentByIdentityExecute_Call struct {
	*mock.Call
}

// GetComponentByIdentityExecute is a helper method to define mock.On call
//   - r client.ApiGetComponentByIdentityRequest
func (_e *MockComponentAPI_Expecter) GetComponentByIdentityExecute(r interface{}) *MockComponentAPI_GetComponentByIdentityExecute_Call {
	return &MockComponentAPI_GetComponentByIdentityExecute_Call{Call: _e.mock.On("GetComponentByIdentityExecute", r)}
}

func (_c *MockComponentAPI_GetComponentByIdentityExecute_Call) Run(run func(r client.ApiGetComponentByIdentityRequest)) *MockComponentAPI_GetComponentByIdentityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetComponentByIdentityRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetComponentByIdentityRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByIdentityExecute_Call) Return(components []client.Component, response *http.Response, err error) *MockComponentAPI_GetComponentByIdentityExecute_Call {
	_c.Call.Return(components, response, err)
	return _c
}

func (_c *MockComponentAPI_GetComponentByIdentityExecute_Call) RunAndReturn(run func(r client.ApiGetComponentByIdentityRequest) ([]client.Component, *http.Response, error)) *MockComponentAPI_GetComponentByIdentityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByUuid provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetComponentByUuid(ctx context.Context, uuid string) client.ApiGetComponentByUuidRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByUuid")
	}

	var r0 client.ApiGetComponentByUuidRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetComponentByUuidRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetComponentByUuidRequest)
	}
	return r0
}

// MockComponentAPI_GetComponentByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByUuid'
type MockComponentAPI_GetComponentByUuid_Call struct {
	*mock.Call
}

// GetComponentByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentAPI_Expecter) GetComponentByUuid(ctx interface{}, uuid interface{}) *MockComponentAPI_GetComponentByUuid_Call {
	return &MockComponentAPI_GetComponentByUuid_Call{Call: _e.mock.On("GetComponentByUuid", ctx, uuid)}
}

func (_c *MockComponentAPI_GetComponentByUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentAPI_GetComponentByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByUuid_Call) Return(apiGetComponentByUuidRequest client.ApiGetComponentByUuidRequest) *MockComponentAPI_GetComponentByUuid_Call {
	_c.Call.Return(apiGetComponentByUuidRequest)
	return _c
}

func (_c *MockComponentAPI_GetComponentByUuid_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetComponentByUuidRequest) *MockComponentAPI_GetComponentByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByUuidExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetComponentByUuidExecute(r client.ApiGetComponentByUuidRequest) (*client.Component, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByUuidExecute")
	}

	var r0 *client.Component
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentByUuidRequest) (*client.Component, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentByUuidRequest) *client.Component); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Component)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetComponentByUuidRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetComponentByUuidRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentAPI_GetComponentByUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByUuidExecute'
type MockComponentAPI_GetComponentByUuidExecute_Call struct {
	*mock.Call
}

// GetComponentByUuidExecute is a helper method to define mock.On call
//   - r client.ApiGetComponentByUuidRequest
func (_e *MockComponentAPI_Expecter) GetComponentByUuidExecute(r interface{}) *MockComponentAPI_GetComponentByUuidExecute_Call {
	return &MockComponentAPI_GetComponentByUuidExecute_Call{Call: _e.mock.On("GetComponentByUuidExecute", r)}
}

func (_c *MockComponentAPI_GetComponentByUuidExecute_Call) Run(run func(r client.ApiGetComponentByUuidRequest)) *MockComponentAPI_GetComponentByUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetComponentByUuidRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetComponentByUuidRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByUuidExecute_Call) Return(component *client.Component, response *http.Response, err error) *MockComponentAPI_GetComponentByUuidExecute_Call {
	_c.Call.Return(component, response, err)
	return _c
}

func (_c *MockComponentAPI_GetComponentByUuidExecute_Call) RunAndReturn(run func(r client.ApiGetComponentByUuidRequest) (*client.Component, *http.Response, error)) *MockComponentAPI_GetComponentByUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyGraphForComponent provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetDependencyGraphForComponent(ctx context.Context, projectUuid string, componentUuids string) client.ApiGetDependencyGraphForComponentRequest {
	ret := _mock.Called(ctx, projectUuid, componentUuids)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyGraphForComponent")
	}

	var r0 client.ApiGetDependencyGraphForComponentRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetDependencyGraphForComponentRequest); ok {
		r0 = returnFunc(ctx, projectUuid, componentUuids)
	} else {
		r0 = ret.Get(0).(client.ApiGetDependencyGraphForComponentRequest)
	}
	return r0
}

// MockComponentAPI_GetDependencyGraphForComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyGraphForComponent'
type MockComponentAPI_GetDependencyGraphForComponent_Call struct {
	*mock.Call
}

// GetDependencyGraphForComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - projectUuid string
//   - componentUuids string
func (_e *MockComponentAPI_Expecter) GetDependencyGraphForComponent(ctx interface{}, projectUuid interface{}, componentUuids interface{}) *MockComponentAPI_GetDependencyGraphForComponent_Call {
	return &MockComponentAPI_GetDependencyGraphForComponent_Call{Call: _e.mock.On("GetDependencyGraphForComponent", ctx, projectUuid, componentUuids)}
}

func (_c *MockComponentAPI_GetDependencyGraphForComponent_Call) Run(run func(ctx context.Context, projectUuid string, componentUuids string)) *MockComponentAPI_GetDependencyGraphForComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetDependencyGraphForComponent_Call) Return(apiGetDependencyGraphForComponentRequest client.ApiGetDependencyGraphForComponentRequest) *MockComponentAPI_GetDependencyGraphForComponent_Call {
	_c.Call.Return(apiGetDependencyGraphForComponentRequest)
	return _c
}

func (_c *MockComponentAPI_GetDependencyGraphForComponent_Call) RunAndReturn(run func(ctx context.Context, projectUuid string, componentUuids string) client.ApiGetDependencyGraphForComponentRequest) *MockComponentAPI_GetDependencyGraphForComponent_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyGraphForComponentExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) GetDependencyGraphForComponentExecute(r client.ApiGetDependencyGraphForComponentRequest) (map[string]interface{}, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyGraphForComponentExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetDependencyGraphForComponentRequest) (map[string]interface{}, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetDependencyGraphForComponentRequest) map[string]interface{}); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetDependencyGraphForComponentRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetDependencyGraphForComponentRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentAPI_GetDependencyGraphForComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyGraphForComponentExecute'
type MockComponentAPI_GetDependencyGraphForComponentExecute_Call struct {
	*mock.Call
}

// GetDependencyGraphForComponentExecute is a helper method to define mock.On call
//   - r client.ApiGetDependencyGraphForComponentRequest
func (_e *MockComponentAPI_Expecter) GetDependencyGraphForComponentExecute(r interface{}) *MockComponentAPI_GetDependencyGraphForComponentExecute_Call {
	return &MockComponentAPI_GetDependencyGraphForComponentExecute_Call{Call: _e.mock.On("GetDependencyGraphForComponentExecute", r)}
}

func (_c *MockComponentAPI_GetDependencyGraphForComponentExecute_Call) Run(run func(r client.ApiGetDependencyGraphForComponentRequest)) *MockComponentAPI_GetDependencyGraphForComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetDependencyGraphForComponentRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetDependencyGraphForComponentRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_GetDependencyGraphForComponentExecute_Call) Return(stringToIfaceVal map[string]interface{}, response *http.Response, err error) *MockComponentAPI_GetDependencyGraphForComponentExecute_Call {
	_c.Call.Return(stringToIfaceVal, response, err)
	return _c
}

func (_c *MockComponentAPI_GetDependencyGraphForComponentExecute_Call) RunAndReturn(run func(r client.ApiGetDependencyGraphForComponentRequest) (map[string]interface{}, *http.Response, error)) *MockComponentAPI_GetDependencyGraphForComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// IdentifyInternalComponents provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) IdentifyInternalComponents(ctx context.Context) client.ApiIdentifyInternalComponentsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyInternalComponents")
	}

	var r0 client.ApiIdentifyInternalComponentsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiIdentifyInternalComponentsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiIdentifyInternalComponentsRequest)
	}
	return r0
}

// MockComponentAPI_IdentifyInternalComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentifyInternalComponents'
type MockComponentAPI_IdentifyInternalComponents_Call struct {
	*mock.Call
}

// IdentifyInternalComponents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockComponentAPI_Expecter) IdentifyInternalComponents(ctx interface{}) *MockComponentAPI_IdentifyInternalComponents_Call {
	return &MockComponentAPI_IdentifyInternalComponents_Call{Call: _e.mock.On("IdentifyInternalComponents", ctx)}
}

func (_c *MockComponentAPI_IdentifyInternalComponents_Call) Run(run func(ctx context.Context)) *MockComponentAPI_IdentifyInternalComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_IdentifyInternalComponents_Call) Return(apiIdentifyInternalComponentsRequest client.ApiIdentifyInternalComponentsRequest) *MockComponentAPI_IdentifyInternalComponents_Call {
	_c.Call.Return(apiIdentifyInternalComponentsRequest)
	return _c
}

func (_c *MockComponentAPI_IdentifyInternalComponents_Call) RunAndReturn(run func(ctx context.Context) client.ApiIdentifyInternalComponentsRequest) *MockComponentAPI_IdentifyInternalComponents_Call {
	_c.Call.Return(run)
	return _c
}

// IdentifyInternalComponentsExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) IdentifyInternalComponentsExecute(r client.ApiIdentifyInternalComponentsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyInternalComponentsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiIdentifyInternalComponentsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiIdentifyInternalComponentsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiIdentifyInternalComponentsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComponentAPI_IdentifyInternalComponentsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentifyInternalComponentsExecute'
type MockComponentAPI_IdentifyInternalComponentsExecute_Call struct {
	*mock.Call
}

// IdentifyInternalComponentsExecute is a helper method to define mock.On call
//   - r client.ApiIdentifyInternalComponentsRequest
func (_e *MockComponentAPI_Expecter) IdentifyInternalComponentsExecute(r interface{}) *MockComponentAPI_IdentifyInternalComponentsExecute_Call {
	return &MockComponentAPI_IdentifyInternalComponentsExecute_Call{Call: _e.mock.On("IdentifyInternalComponentsExecute", r)}
}

func (_c *MockComponentAPI_IdentifyInternalComponentsExecute_Call) Run(run func(r client.ApiIdentifyInternalComponentsRequest)) *MockComponentAPI_IdentifyInternalComponentsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiIdentifyInternalComponentsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiIdentifyInternalComponentsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_IdentifyInternalComponentsExecute_Call) Return(response *http.Response, err error) *MockComponentAPI_IdentifyInternalComponentsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockComponentAPI_IdentifyInternalComponentsExecute_Call) RunAndReturn(run func(r client.ApiIdentifyInternalComponentsRequest) (*http.Response, error)) *MockComponentAPI_IdentifyInternalComponentsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponent provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) UpdateComponent(ctx context.Context) client.ApiUpdateComponentRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponent")
	}

	var r0 client.ApiUpdateComponentRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateComponentRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateComponentRequest)
	}
	return r0
}

// MockComponentAPI_UpdateComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponent'
type MockComponentAPI_UpdateComponent_Call struct {
	*mock.Call
}

// UpdateComponent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockComponentAPI_Expecter) UpdateComponent(ctx interface{}) *MockComponentAPI_UpdateComponent_Call {
	return &MockComponentAPI_UpdateComponent_Call{Call: _e.mock.On("UpdateComponent", ctx)}
}

func (_c *MockComponentAPI_UpdateComponent_Call) Run(run func(ctx context.Context)) *MockComponentAPI_UpdateComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_UpdateComponent_Call) Return(apiUpdateComponentRequest client.ApiUpdateComponentRequest) *MockComponentAPI_UpdateComponent_Call {
	_c.Call.Return(apiUpdateComponentRequest)
	return _c
}

func (_c *MockComponentAPI_UpdateComponent_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateComponentRequest) *MockComponentAPI_UpdateComponent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponentExecute provides a mock function for the type MockComponentAPI
func (_mock *MockComponentAPI) UpdateComponentExecute(r client.ApiUpdateComponentRequest) (*client.Component, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponentExecute")
	}

	var r0 *client.Component
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateComponentRequest) (*client.Component, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateComponentRequest) *client.Component); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Component)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateComponentRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateComponentRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentAPI_UpdateComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponentExecute'
type MockComponentAPI_UpdateComponentExecute_Call struct {
	*mock.Call
}

// UpdateComponentExecute is a helper method to define mock.On call
//   - r client.ApiUpdateComponentRequest
func (_e *MockComponentAPI_Expecter) UpdateComponentExecute(r interface{}) *MockComponentAPI_UpdateComponentExecute_Call {
	return &MockComponentAPI_UpdateComponentExecute_Call{Call: _e.mock.On("UpdateComponentExecute", r)}
}

func (_c *MockComponentAPI_UpdateComponentExecute_Call) Run(run func(r client.ApiUpdateComponentRequest)) *MockComponentAPI_UpdateComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateComponentRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateComponentRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentAPI_UpdateComponentExecute_Call) Return(component *client.Component, response *http.Response, err error) *MockComponentAPI_UpdateComponentExecute_Call {
	_c.Call.Return(component, response, err)
	return _c
}

func (_c *MockComponentAPI_UpdateComponentExecute_Call) RunAndReturn(run func(r client.ApiUpdateComponentRequest) (*client.Component, *http.Response, error)) *MockComponentAPI_UpdateComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponentPropertyAPI creates a new instance of MockComponentPropertyAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentPropertyAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentPropertyAPI {
	mock := &MockComponentPropertyAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockComponentPropertyAPI is an autogenerated mock type for the ComponentPropertyAPI type
type MockComponentPropertyAPI struct {
	mock.Mock
}

type MockComponentPropertyAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentPropertyAPI) EXPECT() *MockComponentPropertyAPI_Expecter {
	return &MockComponentPropertyAPI_Expecter{mock: &_m.Mock}
}

// CreateProperty provides a mock function for the type MockComponentPropertyAPI
func (_mock *MockComponentPropertyAPI) CreateProperty(ctx context.Context, uuid string) client.ApiCreatePropertyRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateProperty")
	}

	var r0 client.ApiCreatePropertyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiCreatePropertyRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiCreatePropertyRequest)
	}
	return r0
}

// MockComponentPropertyAPI_CreateProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProperty'
type MockComponentPropertyAPI_CreateProperty_Call struct {
	*mock.Call
}

// CreateProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentPropertyAPI_Expecter) CreateProperty(ctx interface{}, uuid interface{}) *MockComponentPropertyAPI_CreateProperty_Call {
	return &MockComponentPropertyAPI_CreateProperty_Call{Call: _e.mock.On("CreateProperty", ctx, uuid)}
}

func (_c *MockComponentPropertyAPI_CreateProperty_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentPropertyAPI_CreateProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockComponentPropertyAPI_CreateProperty_Call) Return(apiCreatePropertyRequest client.ApiCreatePropertyRequest) *MockComponentPropertyAPI_CreateProperty_Call {
	_c.Call.Return(apiCreatePropertyRequest)
	return _c
}

func (_c *MockComponentPropertyAPI_CreateProperty_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiCreatePropertyRequest) *MockComponentPropertyAPI_CreateProperty_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePropertyExecute provides a mock function for the type MockComponentPropertyAPI
func (_mock *MockComponentPropertyAPI) CreatePropertyExecute(r client.ApiCreatePropertyRequest) (*client.ComponentProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePropertyExecute")
	}

	var r0 *client.ComponentProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreatePropertyRequest) (*client.ComponentProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreatePropertyRequest) *client.ComponentProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ComponentProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreatePropertyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreatePropertyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentPropertyAPI_CreatePropertyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePropertyExecute'
type MockComponentPropertyAPI_CreatePropertyExecute_Call struct {
	*mock.Call
}

// CreatePropertyExecute is a helper method to define mock.On call
//   - r client.ApiCreatePropertyRequest
func (_e *MockComponentPropertyAPI_Expecter) CreatePropertyExecute(r interface{}) *MockComponentPropertyAPI_CreatePropertyExecute_Call {
	return &MockComponentPropertyAPI_CreatePropertyExecute_Call{Call: _e.mock.On("CreatePropertyExecute", r)}
}

func (_c *MockComponentPropertyAPI_CreatePropertyExecute_Call) Run(run func(r client.ApiCreatePropertyRequest)) *MockComponentPropertyAPI_CreatePropertyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreatePropertyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreatePropertyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentPropertyAPI_CreatePropertyExecute_Call) Return(componentProperty *client.ComponentProperty, response *http.Response, err error) *MockComponentPropertyAPI_CreatePropertyExecute_Call {
	_c.Call.Return(componentProperty, response, err)
	return _c
}

func (_c *MockComponentPropertyAPI_CreatePropertyExecute_Call) RunAndReturn(run func(r client.ApiCreatePropertyRequest) (*client.ComponentProperty, *http.Response, error)) *MockComponentPropertyAPI_CreatePropertyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProperty provides a mock function for the type MockComponentPropertyAPI
func (_mock *MockComponentPropertyAPI) DeleteProperty(ctx context.Context, uuid string, propertyUuid string) client.ApiDeletePropertyRequest {
	ret := _mock.Called(ctx, uuid, propertyUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProperty")
	}

	var r0 client.ApiDeletePropertyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiDeletePropertyRequest); ok {
		r0 = returnFunc(ctx, uuid, propertyUuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeletePropertyRequest)
	}
	return r0
}

// MockComponentPropertyAPI_DeleteProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProperty'
type MockComponentPropertyAPI_DeleteProperty_Call struct {
	*mock.Call
}

// DeleteProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - propertyUuid string
func (_e *MockComponentPropertyAPI_Expecter) DeleteProperty(ctx interface{}, uuid interface{}, propertyUuid interface{}) *MockComponentPropertyAPI_DeleteProperty_Call {
	return &MockComponentPropertyAPI_DeleteProperty_Call{Call: _e.mock.On("DeleteProperty", ctx, uuid, propertyUuid)}
}

func (_c *MockComponentPropertyAPI_DeleteProperty_Call) Run(run func(ctx context.Context, uuid string, propertyUuid string)) *MockComponentPropertyAPI_DeleteProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockComponentPropertyAPI_DeleteProperty_Call) Return(apiDeletePropertyRequest client.ApiDeletePropertyRequest) *MockComponentPropertyAPI_DeleteProperty_Call {
	_c.Call.Return(apiDeletePropertyRequest)
	return _c
}

func (_c *MockComponentPropertyAPI_DeleteProperty_Call) RunAndReturn(run func(ctx context.Context, uuid string, propertyUuid string) client.ApiDeletePropertyRequest) *MockComponentPropertyAPI_DeleteProperty_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePropertyExecute provides a mock function for the type MockComponentPropertyAPI
func (_mock *MockComponentPropertyAPI) DeletePropertyExecute(r client.ApiDeletePropertyRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePropertyExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeletePropertyRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeletePropertyRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeletePropertyRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockComponentPropertyAPI_DeletePropertyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePropertyExecute'
type MockComponentPropertyAPI_DeletePropertyExecute_Call struct {
	*mock.Call
}

// DeletePropertyExecute is a helper method to define mock.On call
//   - r client.ApiDeletePropertyRequest
func (_e *MockComponentPropertyAPI_Expecter) DeletePropertyExecute(r interface{}) *MockComponentPropertyAPI_DeletePropertyExecute_Call {
	return &MockComponentPropertyAPI_DeletePropertyExecute_Call{Call: _e.mock.On("DeletePropertyExecute", r)}
}

func (_c *MockComponentPropertyAPI_DeletePropertyExecute_Call) Run(run func(r client.ApiDeletePropertyRequest)) *MockComponentPropertyAPI_DeletePropertyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeletePropertyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeletePropertyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentPropertyAPI_DeletePropertyExecute_Call) Return(response *http.Response, err error) *MockComponentPropertyAPI_DeletePropertyExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockComponentPropertyAPI_DeletePropertyExecute_Call) RunAndReturn(run func(r client.ApiDeletePropertyRequest) (*http.Response, error)) *MockComponentPropertyAPI_DeletePropertyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProperties provides a mock function for the type MockComponentPropertyAPI
func (_mock *MockComponentPropertyAPI) GetProperties(ctx context.Context, uuid string) client.ApiGetPropertiesRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProperties")
	}

	var r0 client.ApiGetPropertiesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetPropertiesRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetPropertiesRequest)
	}
	return r0
}

// MockComponentPropertyAPI_GetProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperties'
type MockComponentPropertyAPI_GetProperties_Call struct {
	*mock.Call
}

// GetProperties is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentPropertyAPI_Expecter) GetProperties(ctx interface{}, uuid interface{}) *MockComponentPropertyAPI_GetProperties_Call {
	return &MockComponentPropertyAPI_GetProperties_Call{Call: _e.mock.On("GetProperties", ctx, uuid)}
}

func (_c *MockComponentPropertyAPI_GetProperties_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentPropertyAPI_GetProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockComponentPropertyAPI_GetProperties_Call) Return(apiGetPropertiesRequest client.ApiGetPropertiesRequest) *MockComponentPropertyAPI_GetProperties_Call {
	_c.Call.Return(apiGetPropertiesRequest)
	return _c
}

func (_c *MockComponentPropertyAPI_GetProperties_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetPropertiesRequest) *MockComponentPropertyAPI_GetProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetPropertiesExecute provides a mock function for the type MockComponentPropertyAPI
func (_mock *MockComponentPropertyAPI) GetPropertiesExecute(r client.ApiGetPropertiesRequest) ([]client.ComponentProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertiesExecute")
	}

	var r0 []client.ComponentProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPropertiesRequest) ([]client.ComponentProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPropertiesRequest) []client.ComponentProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ComponentProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetPropertiesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetPropertiesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockComponentPropertyAPI_GetPropertiesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPropertiesExecute'
type MockComponentPropertyAPI_GetPropertiesExecute_Call struct {
	*mock.Call
}

// GetPropertiesExecute is a helper method to define mock.On call
//   - r client.ApiGetPropertiesRequest
func (_e *MockComponentPropertyAPI_Expecter) GetPropertiesExecute(r interface{}) *MockComponentPropertyAPI_GetPropertiesExecute_Call {
	return &MockComponentPropertyAPI_GetPropertiesExecute_Call{Call: _e.mock.On("GetPropertiesExecute", r)}
}

func (_c *MockComponentPropertyAPI_GetPropertiesExecute_Call) Run(run func(r client.ApiGetPropertiesRequest)) *MockComponentPropertyAPI_GetPropertiesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetPropertiesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetPropertiesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockComponentPropertyAPI_GetPropertiesExecute_Call) Return(componentPropertys []client.ComponentProperty, response *http.Response, err error) *MockComponentPropertyAPI_GetPropertiesExecute_Call {
	_c.Call.Return(componentPropertys, response, err)
	return _c
}

func (_c *MockComponentPropertyAPI_GetPropertiesExecute_Call) RunAndReturn(run func(r client.ApiGetPropertiesRequest) ([]client.ComponentProperty, *http.Response, error)) *MockComponentPropertyAPI_GetPropertiesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigPropertyAPI creates a new instance of MockConfigPropertyAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigPropertyAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigPropertyAPI {
	mock := &MockConfigPropertyAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigPropertyAPI is an autogenerated mock type for the ConfigPropertyAPI type
type MockConfigPropertyAPI struct {
	mock.Mock
}

type MockConfigPropertyAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigPropertyAPI) EXPECT() *MockConfigPropertyAPI_Expecter {
	return &MockConfigPropertyAPI_Expecter{mock: &_m.Mock}
}

// GetConfigProperties provides a mock function for the type MockConfigPropertyAPI
func (_mock *MockConfigPropertyAPI) GetConfigProperties(ctx context.Context) client.ApiGetConfigPropertiesRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigProperties")
	}

	var r0 client.ApiGetConfigPropertiesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetConfigPropertiesRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetConfigPropertiesRequest)
	}
	return r0
}

// MockConfigPropertyAPI_GetConfigProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigProperties'
type MockConfigPropertyAPI_GetConfigProperties_Call struct {
	*mock.Call
}

// GetConfigProperties is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigPropertyAPI_Expecter) GetConfigProperties(ctx interface{}) *MockConfigPropertyAPI_GetConfigProperties_Call {
	return &MockConfigPropertyAPI_GetConfigProperties_Call{Call: _e.mock.On("GetConfigProperties", ctx)}
}

func (_c *MockConfigPropertyAPI_GetConfigProperties_Call) Run(run func(ctx context.Context)) *MockConfigPropertyAPI_GetConfigProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigPropertyAPI_GetConfigProperties_Call) Return(apiGetConfigPropertiesRequest client.ApiGetConfigPropertiesRequest) *MockConfigPropertyAPI_GetConfigProperties_Call {
	_c.Call.Return(apiGetConfigPropertiesRequest)
	return _c
}

func (_c *MockConfigPropertyAPI_GetConfigProperties_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetConfigPropertiesRequest) *MockConfigPropertyAPI_GetConfigProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigPropertiesExecute provides a mock function for the type MockConfigPropertyAPI
func (_mock *MockConfigPropertyAPI) GetConfigPropertiesExecute(r client.ApiGetConfigPropertiesRequest) ([]client.ConfigProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigPropertiesExecute")
	}

	var r0 []client.ConfigProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetConfigPropertiesRequest) ([]client.ConfigProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetConfigPropertiesRequest) []client.ConfigProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ConfigProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetConfigPropertiesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetConfigPropertiesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockConfigPropertyAPI_GetConfigPropertiesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigPropertiesExecute'
type MockConfigPropertyAPI_GetConfigPropertiesExecute_Call struct {
	*mock.Call
}

// GetConfigPropertiesExecute is a helper method to define mock.On call
//   - r client.ApiGetConfigPropertiesRequest
func (_e *MockConfigPropertyAPI_Expecter) GetConfigPropertiesExecute(r interface{}) *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call {
	return &MockConfigPropertyAPI_GetConfigPropertiesExecute_Call{Call: _e.mock.On("GetConfigPropertiesExecute", r)}
}

func (_c *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call) Run(run func(r client.ApiGetConfigPropertiesRequest)) *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetConfigPropertiesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetConfigPropertiesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call) Return(configPropertys []client.ConfigProperty, response *http.Response, err error) *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call {
	_c.Call.Return(configPropertys, response, err)
	return _c
}

func (_c *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call) RunAndReturn(run func(r client.ApiGetConfigPropertiesRequest) ([]client.ConfigProperty, *http.Response, error)) *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicConfigProperty provides a mock function for the type MockConfigPropertyAPI
func (_mock *MockConfigPropertyAPI) GetPublicConfigProperty(ctx context.Context, groupName string, propertyName string) client.ApiGetPublicConfigPropertyRequest {
	ret := _mock.Called(ctx, groupName, propertyName)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicConfigProperty")
	}

	var r0 client.ApiGetPublicConfigPropertyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetPublicConfigPropertyRequest); ok {
		r0 = returnFunc(ctx, groupName, propertyName)
	} else {
		r0 = ret.Get(0).(client.ApiGetPublicConfigPropertyRequest)
	}
	return r0
}

// MockConfigPropertyAPI_GetPublicConfigProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicConfigProperty'
type MockConfigPropertyAPI_GetPublicConfigProperty_Call struct {
	*mock.Call
}

// GetPublicConfigProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
//   - propertyName string
func (_e *MockConfigPropertyAPI_Expecter) GetPublicConfigProperty(ctx interface{}, groupName interface{}, propertyName interface{}) *MockConfigPropertyAPI_GetPublicConfigProperty_Call {
	return &MockConfigPropertyAPI_GetPublicConfigProperty_Call{Call: _e.mock.On("GetPublicConfigProperty", ctx, groupName, propertyName)}
}

func (_c *MockConfigPropertyAPI_GetPublicConfigProperty_Call) Run(run func(ctx context.Context, groupName string, propertyName string)) *MockConfigPropertyAPI_GetPublicConfigProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockConfigPropertyAPI_GetPublicConfigProperty_Call) Return(apiGetPublicConfigPropertyRequest client.ApiGetPublicConfigPropertyRequest) *MockConfigPropertyAPI_GetPublicConfigProperty_Call {
	_c.Call.Return(apiGetPublicConfigPropertyRequest)
	return _c
}

func (_c *MockConfigPropertyAPI_GetPublicConfigProperty_Call) RunAndReturn(run func(ctx context.Context, groupName string, propertyName string) client.ApiGetPublicConfigPropertyRequest) *MockConfigPropertyAPI_GetPublicConfigProperty_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicConfigPropertyExecute provides a mock function for the type MockConfigPropertyAPI
func (_mock *MockConfigPropertyAPI) GetPublicConfigPropertyExecute(r client.ApiGetPublicConfigPropertyRequest) (*client.ConfigProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicConfigPropertyExecute")
	}

	var r0 *client.ConfigProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPublicConfigPropertyRequest) (*client.ConfigProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPublicConfigPropertyRequest) *client.ConfigProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConfigProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetPublicConfigPropertyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetPublicConfigPropertyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicConfigPropertyExecute'
type MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call struct {
	*mock.Call
}

// GetPublicConfigPropertyExecute is a helper method to define mock.On call
//   - r client.ApiGetPublicConfigPropertyRequest
func (_e *MockConfigPropertyAPI_Expecter) GetPublicConfigPropertyExecute(r interface{}) *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call {
	return &MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call{Call: _e.mock.On("GetPublicConfigPropertyExecute", r)}
}

func (_c *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call) Run(run func(r client.ApiGetPublicConfigPropertyRequest)) *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetPublicConfigPropertyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetPublicConfigPropertyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call) Return(configProperty *client.ConfigProperty, response *http.Response, err error) *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call {
	_c.Call.Return(configProperty, response, err)
	return _c
}

func (_c *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call) RunAndReturn(run func(r client.ApiGetPublicConfigPropertyRequest) (*client.ConfigProperty, *http.Response, error)) *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigProperty provides a mock function for the type MockConfigPropertyAPI
func (_mock *MockConfigPropertyAPI) UpdateConfigProperty(ctx context.Context) client.ApiUpdateConfigPropertyRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigProperty")
	}

	var r0 client.ApiUpdateConfigPropertyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateConfigPropertyRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateConfigPropertyRequest)
	}
	return r0
}

// MockConfigPropertyAPI_UpdateConfigProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigProperty'
type MockConfigPropertyAPI_UpdateConfigProperty_Call struct {
	*mock.Call
}

// UpdateConfigProperty is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigPropertyAPI_Expecter) UpdateConfigProperty(ctx interface{}) *MockConfigPropertyAPI_UpdateConfigProperty_Call {
	return &MockConfigPropertyAPI_UpdateConfigProperty_Call{Call: _e.mock.On("UpdateConfigProperty", ctx)}
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty_Call) Run(run func(ctx context.Context)) *MockConfigPropertyAPI_UpdateConfigProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty_Call) Return(apiUpdateConfigPropertyRequest client.ApiUpdateConfigPropertyRequest) *MockConfigPropertyAPI_UpdateConfigProperty_Call {
	_c.Call.Return(apiUpdateConfigPropertyRequest)
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateConfigPropertyRequest) *MockConfigPropertyAPI_UpdateConfigProperty_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigProperty1 provides a mock function for the type MockConfigPropertyAPI
func (_mock *MockConfigPropertyAPI) UpdateConfigProperty1(ctx context.Context) client.ApiUpdateConfigProperty1Request {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigProperty1")
	}

	var r0 client.ApiUpdateConfigProperty1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateConfigProperty1Request); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateConfigProperty1Request)
	}
	return r0
}

// MockConfigPropertyAPI_UpdateConfigProperty1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigProperty1'
type MockConfigPropertyAPI_UpdateConfigProperty1_Call struct {
	*mock.Call
}

// UpdateConfigProperty1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigPropertyAPI_Expecter) UpdateConfigProperty1(ctx interface{}) *MockConfigPropertyAPI_UpdateConfigProperty1_Call {
	return &MockConfigPropertyAPI_UpdateConfigProperty1_Call{Call: _e.mock.On("UpdateConfigProperty1", ctx)}
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1_Call) Run(run func(ctx context.Context)) *MockConfigPropertyAPI_UpdateConfigProperty1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1_Call) Return(apiUpdateConfigProperty1Request client.ApiUpdateConfigProperty1Request) *MockConfigPropertyAPI_UpdateConfigProperty1_Call {
	_c.Call.Return(apiUpdateConfigProperty1Request)
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateConfigProperty1Request) *MockConfigPropertyAPI_UpdateConfigProperty1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigProperty1Execute provides a mock function for the type MockConfigPropertyAPI
func (_mock *MockConfigPropertyAPI) UpdateConfigProperty1Execute(r client.ApiUpdateConfigProperty1Request) ([]client.ConfigProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigProperty1Execute")
	}

	var r0 []client.ConfigProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateConfigProperty1Request) ([]client.ConfigProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateConfigProperty1Request) []client.ConfigProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ConfigProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateConfigProperty1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateConfigProperty1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigProperty1Execute'
type MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call struct {
	*mock.Call
}

// UpdateConfigProperty1Execute is a helper method to define mock.On call
//   - r client.ApiUpdateConfigProperty1Request
func (_e *MockConfigPropertyAPI_Expecter) UpdateConfigProperty1Execute(r interface{}) *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call {
	return &MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call{Call: _e.mock.On("UpdateConfigProperty1Execute", r)}
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call) Run(run func(r client.ApiUpdateConfigProperty1Request)) *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateConfigProperty1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateConfigProperty1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call) Return(configPropertys []client.ConfigProperty, response *http.Response, err error) *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call {
	_c.Call.Return(configPropertys, response, err)
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call) RunAndReturn(run func(r client.ApiUpdateConfigProperty1Request) ([]client.ConfigProperty, *http.Response, error)) *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigPropertyExecute provides a mock function for the type MockConfigPropertyAPI
func (_mock *MockConfigPropertyAPI) UpdateConfigPropertyExecute(r client.ApiUpdateConfigPropertyRequest) (*client.ConfigProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigPropertyExecute")
	}

	var r0 *client.ConfigProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateConfigPropertyRequest) (*client.ConfigProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateConfigPropertyRequest) *client.ConfigProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ConfigProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateConfigPropertyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateConfigPropertyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigPropertyExecute'
type MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call struct {
	*mock.Call
}

// UpdateConfigPropertyExecute is a helper method to define mock.On call
//   - r client.ApiUpdateConfigPropertyRequest
func (_e *MockConfigPropertyAPI_Expecter) UpdateConfigPropertyExecute(r interface{}) *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call {
	return &MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call{Call: _e.mock.On("UpdateConfigPropertyExecute", r)}
}

func (_c *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call) Run(run func(r client.ApiUpdateConfigPropertyRequest)) *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateConfigPropertyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateConfigPropertyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call) Return(configProperty *client.ConfigProperty, response *http.Response, err error) *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call {
	_c.Call.Return(configProperty, response, err)
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call) RunAndReturn(run func(r client.ApiUpdateConfigPropertyRequest) (*client.ConfigProperty, *http.Response, error)) *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCweAPI creates a new instance of MockCweAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCweAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCweAPI {
	mock := &MockCweAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCweAPI is an autogenerated mock type for the CweAPI type
type MockCweAPI struct {
	mock.Mock
}

type MockCweAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCweAPI) EXPECT() *MockCweAPI_Expecter {
	return &MockCweAPI_Expecter{mock: &_m.Mock}
}

// GetCwe provides a mock function for the type MockCweAPI
func (_mock *MockCweAPI) GetCwe(ctx context.Context, cweId int32) client.ApiGetCweRequest {
	ret := _mock.Called(ctx, cweId)

	if len(ret) == 0 {
		panic("no return value specified for GetCwe")
	}

	var r0 client.ApiGetCweRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) client.ApiGetCweRequest); ok {
		r0 = returnFunc(ctx, cweId)
	} else {
		r0 = ret.Get(0).(client.ApiGetCweRequest)
	}
	return r0
}

// MockCweAPI_GetCwe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCwe'
type MockCweAPI_GetCwe_Call struct {
	*mock.Call
}

// GetCwe is a helper method to define mock.On call
//   - ctx context.Context
//   - cweId int32
func (_e *MockCweAPI_Expecter) GetCwe(ctx interface{}, cweId interface{}) *MockCweAPI_GetCwe_Call {
	return &MockCweAPI_GetCwe_Call{Call: _e.mock.On("GetCwe", ctx, cweId)}
}

func (_c *MockCweAPI_GetCwe_Call) Run(run func(ctx context.Context, cweId int32)) *MockCweAPI_GetCwe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCweAPI_GetCwe_Call) Return(apiGetCweRequest client.ApiGetCweRequest) *MockCweAPI_GetCwe_Call {
	_c.Call.Return(apiGetCweRequest)
	return _c
}

func (_c *MockCweAPI_GetCwe_Call) RunAndReturn(run func(ctx context.Context, cweId int32) client.ApiGetCweRequest) *MockCweAPI_GetCwe_Call {
	_c.Call.Return(run)
	return _c
}

// GetCweExecute provides a mock function for the type MockCweAPI
func (_mock *MockCweAPI) GetCweExecute(r client.ApiGetCweRequest) (*client.Cwe, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCweExecute")
	}

	var r0 *client.Cwe
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetCweRequest) (*client.Cwe, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetCweRequest) *client.Cwe); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Cwe)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetCweRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetCweRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCweAPI_GetCweExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCweExecute'
type MockCweAPI_GetCweExecute_Call struct {
	*mock.Call
}

// GetCweExecute is a helper method to define mock.On call
//   - r client.ApiGetCweRequest
func (_e *MockCweAPI_Expecter) GetCweExecute(r interface{}) *MockCweAPI_GetCweExecute_Call {
	return &MockCweAPI_GetCweExecute_Call{Call: _e.mock.On("GetCweExecute", r)}
}

func (_c *MockCweAPI_GetCweExecute_Call) Run(run func(r client.ApiGetCweRequest)) *MockCweAPI_GetCweExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetCweRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetCweRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCweAPI_GetCweExecute_Call) Return(cwe *client.Cwe, response *http.Response, err error) *MockCweAPI_GetCweExecute_Call {
	_c.Call.Return(cwe, response, err)
	return _c
}

func (_c *MockCweAPI_GetCweExecute_Call) RunAndReturn(run func(r client.ApiGetCweRequest) (*client.Cwe, *http.Response, error)) *MockCweAPI_GetCweExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetCwes provides a mock function for the type MockCweAPI
func (_mock *MockCweAPI) GetCwes(ctx context.Context) client.ApiGetCwesRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCwes")
	}

	var r0 client.ApiGetCwesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetCwesRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetCwesRequest)
	}
	return r0
}

// MockCweAPI_GetCwes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCwes'
type MockCweAPI_GetCwes_Call struct {
	*mock.Call
}

// GetCwes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCweAPI_Expecter) GetCwes(ctx interface{}) *MockCweAPI_GetCwes_Call {
	return &MockCweAPI_GetCwes_Call{Call: _e.mock.On("GetCwes", ctx)}
}

func (_c *MockCweAPI_GetCwes_Call) Run(run func(ctx context.Context)) *MockCweAPI_GetCwes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCweAPI_GetCwes_Call) Return(apiGetCwesRequest client.ApiGetCwesRequest) *MockCweAPI_GetCwes_Call {
	_c.Call.Return(apiGetCwesRequest)
	return _c
}

func (_c *MockCweAPI_GetCwes_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetCwesRequest) *MockCweAPI_GetCwes_Call {
	_c.Call.Return(run)
	return _c
}

// GetCwesExecute provides a mock function for the type MockCweAPI
func (_mock *MockCweAPI) GetCwesExecute(r client.ApiGetCwesRequest) ([]client.Cwe, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCwesExecute")
	}

	var r0 []client.Cwe
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetCwesRequest) ([]client.Cwe, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetCwesRequest) []client.Cwe); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Cwe)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetCwesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetCwesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockCweAPI_GetCwesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCwesExecute'
type MockCweAPI_GetCwesExecute_Call struct {
	*mock.Call
}

// GetCwesExecute is a helper method to define mock.On call
//   - r client.ApiGetCwesRequest
func (_e *MockCweAPI_Expecter) GetCwesExecute(r interface{}) *MockCweAPI_GetCwesExecute_Call {
	return &MockCweAPI_GetCwesExecute_Call{Call: _e.mock.On("GetCwesExecute", r)}
}

func (_c *MockCweAPI_GetCwesExecute_Call) Run(run func(r client.ApiGetCwesRequest)) *MockCweAPI_GetCwesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetCwesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetCwesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCweAPI_GetCwesExecute_Call) Return(cwes []client.Cwe, response *http.Response, err error) *MockCweAPI_GetCwesExecute_Call {
	_c.Call.Return(cwes, response, err)
	return _c
}

func (_c *MockCweAPI_GetCwesExecute_Call) RunAndReturn(run func(r client.ApiGetCwesRequest) ([]client.Cwe, *http.Response, error)) *MockCweAPI_GetCwesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDependencyGraphAPI creates a new instance of MockDependencyGraphAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDependencyGraphAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDependencyGraphAPI {
	mock := &MockDependencyGraphAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDependencyGraphAPI is an autogenerated mock type for the DependencyGraphAPI type
type MockDependencyGraphAPI struct {
	mock.Mock
}

type MockDependencyGraphAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDependencyGraphAPI) EXPECT() *MockDependencyGraphAPI_Expecter {
	return &MockDependencyGraphAPI_Expecter{mock: &_m.Mock}
}

// GetComponentsAndServicesByComponentUuid provides a mock function for the type MockDependencyGraphAPI
func (_mock *MockDependencyGraphAPI) GetComponentsAndServicesByComponentUuid(ctx context.Context, uuid string) client.ApiGetComponentsAndServicesByComponentUuidRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsAndServicesByComponentUuid")
	}

	var r0 client.ApiGetComponentsAndServicesByComponentUuidRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetComponentsAndServicesByComponentUuidRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetComponentsAndServicesByComponentUuidRequest)
	}
	return r0
}

// MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentsAndServicesByComponentUuid'
type MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call struct {
	*mock.Call
}

// GetComponentsAndServicesByComponentUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockDependencyGraphAPI_Expecter) GetComponentsAndServicesByComponentUuid(ctx interface{}, uuid interface{}) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call {
	return &MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call{Call: _e.mock.On("GetComponentsAndServicesByComponentUuid", ctx, uuid)}
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call) Return(apiGetComponentsAndServicesByComponentUuidRequest client.ApiGetComponentsAndServicesByComponentUuidRequest) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call {
	_c.Call.Return(apiGetComponentsAndServicesByComponentUuidRequest)
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetComponentsAndServicesByComponentUuidRequest) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentsAndServicesByComponentUuidExecute provides a mock function for the type MockDependencyGraphAPI
func (_mock *MockDependencyGraphAPI) GetComponentsAndServicesByComponentUuidExecute(r client.ApiGetComponentsAndServicesByComponentUuidRequest) ([]client.DependencyGraphResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsAndServicesByComponentUuidExecute")
	}

	var r0 []client.DependencyGraphResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentsAndServicesByComponentUuidRequest) ([]client.DependencyGraphResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentsAndServicesByComponentUuidRequest) []client.DependencyGraphResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.DependencyGraphResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetComponentsAndServicesByComponentUuidRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetComponentsAndServicesByComponentUuidRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentsAndServicesByComponentUuidExecute'
type MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call struct {
	*mock.Call
}

// GetComponentsAndServicesByComponentUuidExecute is a helper method to define mock.On call
//   - r client.ApiGetComponentsAndServicesByComponentUuidRequest
func (_e *MockDependencyGraphAPI_Expecter) GetComponentsAndServicesByComponentUuidExecute(r interface{}) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call {
	return &MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call{Call: _e.mock.On("GetComponentsAndServicesByComponentUuidExecute", r)}
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call) Run(run func(r client.ApiGetComponentsAndServicesByComponentUuidRequest)) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetComponentsAndServicesByComponentUuidRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetComponentsAndServicesByComponentUuidRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call) Return(dependencyGraphResponses []client.DependencyGraphResponse, response *http.Response, err error) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call {
	_c.Call.Return(dependencyGraphResponses, response, err)
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call) RunAndReturn(run func(r client.ApiGetComponentsAndServicesByComponentUuidRequest) ([]client.DependencyGraphResponse, *http.Response, error)) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentsAndServicesByProjectUuid provides a mock function for the type MockDependencyGraphAPI
func (_mock *MockDependencyGraphAPI) GetComponentsAndServicesByProjectUuid(ctx context.Context, uuid string) client.ApiGetComponentsAndServicesByProjectUuidRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsAndServicesByProjectUuid")
	}

	var r0 client.ApiGetComponentsAndServicesByProjectUuidRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetComponentsAndServicesByProjectUuidRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetComponentsAndServicesByProjectUuidRequest)
	}
	return r0
}

// MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentsAndServicesByProjectUuid'
type MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call struct {
	*mock.Call
}

// GetComponentsAndServicesByProjectUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockDependencyGraphAPI_Expecter) GetComponentsAndServicesByProjectUuid(ctx interface{}, uuid interface{}) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call {
	return &MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call{Call: _e.mock.On("GetComponentsAndServicesByProjectUuid", ctx, uuid)}
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call) Return(apiGetComponentsAndServicesByProjectUuidRequest client.ApiGetComponentsAndServicesByProjectUuidRequest) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call {
	_c.Call.Return(apiGetComponentsAndServicesByProjectUuidRequest)
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetComponentsAndServicesByProjectUuidRequest) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentsAndServicesByProjectUuidExecute provides a mock function for the type MockDependencyGraphAPI
func (_mock *MockDependencyGraphAPI) GetComponentsAndServicesByProjectUuidExecute(r client.ApiGetComponentsAndServicesByProjectUuidRequest) ([]client.DependencyGraphResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsAndServicesByProjectUuidExecute")
	}

	var r0 []client.DependencyGraphResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentsAndServicesByProjectUuidRequest) ([]client.DependencyGraphResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentsAndServicesByProjectUuidRequest) []client.DependencyGraphResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.DependencyGraphResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetComponentsAndServicesByProjectUuidRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetComponentsAndServicesByProjectUuidRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentsAndServicesByProjectUuidExecute'
type MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call struct {
	*mock.Call
}

// GetComponentsAndServicesByProjectUuidExecute is a helper method to define mock.On call
//   - r client.ApiGetComponentsAndServicesByProjectUuidRequest
func (_e *MockDependencyGraphAPI_Expecter) GetComponentsAndServicesByProjectUuidExecute(r interface{}) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call {
	return &MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call{Call: _e.mock.On("GetComponentsAndServicesByProjectUuidExecute", r)}
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call) Run(run func(r client.ApiGetComponentsAndServicesByProjectUuidRequest)) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetComponentsAndServicesByProjectUuidRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetComponentsAndServicesByProjectUuidRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call) Return(dependencyGraphResponses []client.DependencyGraphResponse, response *http.Response, err error) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call {
	_c.Call.Return(dependencyGraphResponses, response, err)
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call) RunAndReturn(run func(r client.ApiGetComponentsAndServicesByProjectUuidRequest) ([]client.DependencyGraphResponse, *http.Response, error)) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventAPI creates a new instance of MockEventAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventAPI {
	mock := &MockEventAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventAPI is an autogenerated mock type for the EventAPI type
type MockEventAPI struct {
	mock.Mock
}

type MockEventAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventAPI) EXPECT() *MockEventAPI_Expecter {
	return &MockEventAPI_Expecter{mock: &_m.Mock}
}

// IsTokenBeingProcessed1 provides a mock function for the type MockEventAPI
func (_mock *MockEventAPI) IsTokenBeingProcessed1(ctx context.Context, uuid string) client.ApiIsTokenBeingProcessed1Request {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBeingProcessed1")
	}

	var r0 client.ApiIsTokenBeingProcessed1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiIsTokenBeingProcessed1Request); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiIsTokenBeingProcessed1Request)
	}
	return r0
}

// MockEventAPI_IsTokenBeingProcessed1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenBeingProcessed1'
type MockEventAPI_IsTokenBeingProcessed1_Call struct {
	*mock.Call
}

// IsTokenBeingProcessed1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockEventAPI_Expecter) IsTokenBeingProcessed1(ctx interface{}, uuid interface{}) *MockEventAPI_IsTokenBeingProcessed1_Call {
	return &MockEventAPI_IsTokenBeingProcessed1_Call{Call: _e.mock.On("IsTokenBeingProcessed1", ctx, uuid)}
}

func (_c *MockEventAPI_IsTokenBeingProcessed1_Call) Run(run func(ctx context.Context, uuid string)) *MockEventAPI_IsTokenBeingProcessed1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventAPI_IsTokenBeingProcessed1_Call) Return(apiIsTokenBeingProcessed1Request client.ApiIsTokenBeingProcessed1Request) *MockEventAPI_IsTokenBeingProcessed1_Call {
	_c.Call.Return(apiIsTokenBeingProcessed1Request)
	return _c
}

func (_c *MockEventAPI_IsTokenBeingProcessed1_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiIsTokenBeingProcessed1Request) *MockEventAPI_IsTokenBeingProcessed1_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenBeingProcessed1Execute provides a mock function for the type MockEventAPI
func (_mock *MockEventAPI) IsTokenBeingProcessed1Execute(r client.ApiIsTokenBeingProcessed1Request) (*client.IsTokenBeingProcessedResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBeingProcessed1Execute")
	}

	var r0 *client.IsTokenBeingProcessedResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiIsTokenBeingProcessed1Request) (*client.IsTokenBeingProcessedResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiIsTokenBeingProcessed1Request) *client.IsTokenBeingProcessedResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.IsTokenBeingProcessedResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiIsTokenBeingProcessed1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiIsTokenBeingProcessed1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockEventAPI_IsTokenBeingProcessed1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenBeingProcessed1Execute'
type MockEventAPI_IsTokenBeingProcessed1Execute_Call struct {
	*mock.Call
}

// IsTokenBeingProcessed1Execute is a helper method to define mock.On call
//   - r client.ApiIsTokenBeingProcessed1Request
func (_e *MockEventAPI_Expecter) IsTokenBeingProcessed1Execute(r interface{}) *MockEventAPI_IsTokenBeingProcessed1Execute_Call {
	return &MockEventAPI_IsTokenBeingProcessed1Execute_Call{Call: _e.mock.On("IsTokenBeingProcessed1Execute", r)}
}

func (_c *MockEventAPI_IsTokenBeingProcessed1Execute_Call) Run(run func(r client.ApiIsTokenBeingProcessed1Request)) *MockEventAPI_IsTokenBeingProcessed1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiIsTokenBeingProcessed1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiIsTokenBeingProcessed1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEventAPI_IsTokenBeingProcessed1Execute_Call) Return(isTokenBeingProcessedResponse *client.IsTokenBeingProcessedResponse, response *http.Response, err error) *MockEventAPI_IsTokenBeingProcessed1Execute_Call {
	_c.Call.Return(isTokenBeingProcessedResponse, response, err)
	return _c
}

func (_c *MockEventAPI_IsTokenBeingProcessed1Execute_Call) RunAndReturn(run func(r client.ApiIsTokenBeingProcessed1Request) (*client.IsTokenBeingProcessedResponse, *http.Response, error)) *MockEventAPI_IsTokenBeingProcessed1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFindingAPI creates a new instance of MockFindingAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFindingAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFindingAPI {
	mock := &MockFindingAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFindingAPI is an autogenerated mock type for the FindingAPI type
type MockFindingAPI struct {
	mock.Mock
}

type MockFindingAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFindingAPI) EXPECT() *MockFindingAPI_Expecter {
	return &MockFindingAPI_Expecter{mock: &_m.Mock}
}

// AnalyzeProject provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) AnalyzeProject(ctx context.Context, uuid string) client.ApiAnalyzeProjectRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeProject")
	}

	var r0 client.ApiAnalyzeProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiAnalyzeProjectRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiAnalyzeProjectRequest)
	}
	return r0
}

// MockFindingAPI_AnalyzeProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnalyzeProject'
type MockFindingAPI_AnalyzeProject_Call struct {
	*mock.Call
}

// AnalyzeProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockFindingAPI_Expecter) AnalyzeProject(ctx interface{}, uuid interface{}) *MockFindingAPI_AnalyzeProject_Call {
	return &MockFindingAPI_AnalyzeProject_Call{Call: _e.mock.On("AnalyzeProject", ctx, uuid)}
}

func (_c *MockFindingAPI_AnalyzeProject_Call) Run(run func(ctx context.Context, uuid string)) *MockFindingAPI_AnalyzeProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFindingAPI_AnalyzeProject_Call) Return(apiAnalyzeProjectRequest client.ApiAnalyzeProjectRequest) *MockFindingAPI_AnalyzeProject_Call {
	_c.Call.Return(apiAnalyzeProjectRequest)
	return _c
}

func (_c *MockFindingAPI_AnalyzeProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiAnalyzeProjectRequest) *MockFindingAPI_AnalyzeProject_Call {
	_c.Call.Return(run)
	return _c
}

// AnalyzeProjectExecute provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) AnalyzeProjectExecute(r client.ApiAnalyzeProjectRequest) (*client.BomUploadResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeProjectExecute")
	}

	var r0 *client.BomUploadResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAnalyzeProjectRequest) (*client.BomUploadResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAnalyzeProjectRequest) *client.BomUploadResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BomUploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAnalyzeProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAnalyzeProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFindingAPI_AnalyzeProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnalyzeProjectExecute'
type MockFindingAPI_AnalyzeProjectExecute_Call struct {
	*mock.Call
}

// AnalyzeProjectExecute is a helper method to define mock.On call
//   - r client.ApiAnalyzeProjectRequest
func (_e *MockFindingAPI_Expecter) AnalyzeProjectExecute(r interface{}) *MockFindingAPI_AnalyzeProjectExecute_Call {
	return &MockFindingAPI_AnalyzeProjectExecute_Call{Call: _e.mock.On("AnalyzeProjectExecute", r)}
}

func (_c *MockFindingAPI_AnalyzeProjectExecute_Call) Run(run func(r client.ApiAnalyzeProjectRequest)) *MockFindingAPI_AnalyzeProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAnalyzeProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAnalyzeProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindingAPI_AnalyzeProjectExecute_Call) Return(bomUploadResponse *client.BomUploadResponse, response *http.Response, err error) *MockFindingAPI_AnalyzeProjectExecute_Call {
	_c.Call.Return(bomUploadResponse, response, err)
	return _c
}

func (_c *MockFindingAPI_AnalyzeProjectExecute_Call) RunAndReturn(run func(r client.ApiAnalyzeProjectRequest) (*client.BomUploadResponse, *http.Response, error)) *MockFindingAPI_AnalyzeProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ExportFindingsByProject provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) ExportFindingsByProject(ctx context.Context, uuid string) client.ApiExportFindingsByProjectRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ExportFindingsByProject")
	}

	var r0 client.ApiExportFindingsByProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiExportFindingsByProjectRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiExportFindingsByProjectRequest)
	}
	return r0
}

// MockFindingAPI_ExportFindingsByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportFindingsByProject'
type MockFindingAPI_ExportFindingsByProject_Call struct {
	*mock.Call
}

// ExportFindingsByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockFindingAPI_Expecter) ExportFindingsByProject(ctx interface{}, uuid interface{}) *MockFindingAPI_ExportFindingsByProject_Call {
	return &MockFindingAPI_ExportFindingsByProject_Call{Call: _e.mock.On("ExportFindingsByProject", ctx, uuid)}
}

func (_c *MockFindingAPI_ExportFindingsByProject_Call) Run(run func(ctx context.Context, uuid string)) *MockFindingAPI_ExportFindingsByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFindingAPI_ExportFindingsByProject_Call) Return(apiExportFindingsByProjectRequest client.ApiExportFindingsByProjectRequest) *MockFindingAPI_ExportFindingsByProject_Call {
	_c.Call.Return(apiExportFindingsByProjectRequest)
	return _c
}

func (_c *MockFindingAPI_ExportFindingsByProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiExportFindingsByProjectRequest) *MockFindingAPI_ExportFindingsByProject_Call {
	_c.Call.Return(run)
	return _c
}

// ExportFindingsByProjectExecute provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) ExportFindingsByProjectExecute(r client.ApiExportFindingsByProjectRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ExportFindingsByProjectExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiExportFindingsByProjectRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiExportFindingsByProjectRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiExportFindingsByProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiExportFindingsByProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFindingAPI_ExportFindingsByProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportFindingsByProjectExecute'
type MockFindingAPI_ExportFindingsByProjectExecute_Call struct {
	*mock.Call
}

// ExportFindingsByProjectExecute is a helper method to define mock.On call
//   - r client.ApiExportFindingsByProjectRequest
func (_e *MockFindingAPI_Expecter) ExportFindingsByProjectExecute(r interface{}) *MockFindingAPI_ExportFindingsByProjectExecute_Call {
	return &MockFindingAPI_ExportFindingsByProjectExecute_Call{Call: _e.mock.On("ExportFindingsByProjectExecute", r)}
}

func (_c *MockFindingAPI_ExportFindingsByProjectExecute_Call) Run(run func(r client.ApiExportFindingsByProjectRequest)) *MockFindingAPI_ExportFindingsByProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiExportFindingsByProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiExportFindingsByProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindingAPI_ExportFindingsByProjectExecute_Call) Return(s string, response *http.Response, err error) *MockFindingAPI_ExportFindingsByProjectExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockFindingAPI_ExportFindingsByProjectExecute_Call) RunAndReturn(run func(r client.ApiExportFindingsByProjectRequest) (string, *http.Response, error)) *MockFindingAPI_ExportFindingsByProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFindings provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) GetAllFindings(ctx context.Context) client.ApiGetAllFindingsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFindings")
	}

	var r0 client.ApiGetAllFindingsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetAllFindingsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllFindingsRequest)
	}
	return r0
}

// MockFindingAPI_GetAllFindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFindings'
type MockFindingAPI_GetAllFindings_Call struct {
	*mock.Call
}

// GetAllFindings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFindingAPI_Expecter) GetAllFindings(ctx interface{}) *MockFindingAPI_GetAllFindings_Call {
	return &MockFindingAPI_GetAllFindings_Call{Call: _e.mock.On("GetAllFindings", ctx)}
}

func (_c *MockFindingAPI_GetAllFindings_Call) Run(run func(ctx context.Context)) *MockFindingAPI_GetAllFindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindingAPI_GetAllFindings_Call) Return(apiGetAllFindingsRequest client.ApiGetAllFindingsRequest) *MockFindingAPI_GetAllFindings_Call {
	_c.Call.Return(apiGetAllFindingsRequest)
	return _c
}

func (_c *MockFindingAPI_GetAllFindings_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetAllFindingsRequest) *MockFindingAPI_GetAllFindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFindings1 provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) GetAllFindings1(ctx context.Context) client.ApiGetAllFindings1Request {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFindings1")
	}

	var r0 client.ApiGetAllFindings1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetAllFindings1Request); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllFindings1Request)
	}
	return r0
}

// MockFindingAPI_GetAllFindings1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFindings1'
type MockFindingAPI_GetAllFindings1_Call struct {
	*mock.Call
}

// GetAllFindings1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFindingAPI_Expecter) GetAllFindings1(ctx interface{}) *MockFindingAPI_GetAllFindings1_Call {
	return &MockFindingAPI_GetAllFindings1_Call{Call: _e.mock.On("GetAllFindings1", ctx)}
}

func (_c *MockFindingAPI_GetAllFindings1_Call) Run(run func(ctx context.Context)) *MockFindingAPI_GetAllFindings1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindingAPI_GetAllFindings1_Call) Return(apiGetAllFindings1Request client.ApiGetAllFindings1Request) *MockFindingAPI_GetAllFindings1_Call {
	_c.Call.Return(apiGetAllFindings1Request)
	return _c
}

func (_c *MockFindingAPI_GetAllFindings1_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetAllFindings1Request) *MockFindingAPI_GetAllFindings1_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFindings1Execute provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) GetAllFindings1Execute(r client.ApiGetAllFindings1Request) ([]client.Finding, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFindings1Execute")
	}

	var r0 []client.Finding
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllFindings1Request) ([]client.Finding, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllFindings1Request) []client.Finding); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Finding)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllFindings1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllFindings1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFindingAPI_GetAllFindings1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFindings1Execute'
type MockFindingAPI_GetAllFindings1Execute_Call struct {
	*mock.Call
}

// GetAllFindings1Execute is a helper method to define mock.On call
//   - r client.ApiGetAllFindings1Request
func (_e *MockFindingAPI_Expecter) GetAllFindings1Execute(r interface{}) *MockFindingAPI_GetAllFindings1Execute_Call {
	return &MockFindingAPI_GetAllFindings1Execute_Call{Call: _e.mock.On("GetAllFindings1Execute", r)}
}

func (_c *MockFindingAPI_GetAllFindings1Execute_Call) Run(run func(r client.ApiGetAllFindings1Request)) *MockFindingAPI_GetAllFindings1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllFindings1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllFindings1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindingAPI_GetAllFindings1Execute_Call) Return(findings []client.Finding, response *http.Response, err error) *MockFindingAPI_GetAllFindings1Execute_Call {
	_c.Call.Return(findings, response, err)
	return _c
}

func (_c *MockFindingAPI_GetAllFindings1Execute_Call) RunAndReturn(run func(r client.ApiGetAllFindings1Request) ([]client.Finding, *http.Response, error)) *MockFindingAPI_GetAllFindings1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFindingsExecute provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) GetAllFindingsExecute(r client.ApiGetAllFindingsRequest) ([]client.Finding, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFindingsExecute")
	}

	var r0 []client.Finding
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllFindingsRequest) ([]client.Finding, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllFindingsRequest) []client.Finding); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Finding)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllFindingsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllFindingsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFindingAPI_GetAllFindingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFindingsExecute'
type MockFindingAPI_GetAllFindingsExecute_Call struct {
	*mock.Call
}

// GetAllFindingsExecute is a helper method to define mock.On call
//   - r client.ApiGetAllFindingsRequest
func (_e *MockFindingAPI_Expecter) GetAllFindingsExecute(r interface{}) *MockFindingAPI_GetAllFindingsExecute_Call {
	return &MockFindingAPI_GetAllFindingsExecute_Call{Call: _e.mock.On("GetAllFindingsExecute", r)}
}

func (_c *MockFindingAPI_GetAllFindingsExecute_Call) Run(run func(r client.ApiGetAllFindingsRequest)) *MockFindingAPI_GetAllFindingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllFindingsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllFindingsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindingAPI_GetAllFindingsExecute_Call) Return(findings []client.Finding, response *http.Response, err error) *MockFindingAPI_GetAllFindingsExecute_Call {
	_c.Call.Return(findings, response, err)
	return _c
}

func (_c *MockFindingAPI_GetAllFindingsExecute_Call) RunAndReturn(run func(r client.ApiGetAllFindingsRequest) ([]client.Finding, *http.Response, error)) *MockFindingAPI_GetAllFindingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetFindingsByProject provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) GetFindingsByProject(ctx context.Context, uuid string) client.ApiGetFindingsByProjectRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingsByProject")
	}

	var r0 client.ApiGetFindingsByProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetFindingsByProjectRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetFindingsByProjectRequest)
	}
	return r0
}

// MockFindingAPI_GetFindingsByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindingsByProject'
type MockFindingAPI_GetFindingsByProject_Call struct {
	*mock.Call
}

// GetFindingsByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockFindingAPI_Expecter) GetFindingsByProject(ctx interface{}, uuid interface{}) *MockFindingAPI_GetFindingsByProject_Call {
	return &MockFindingAPI_GetFindingsByProject_Call{Call: _e.mock.On("GetFindingsByProject", ctx, uuid)}
}

func (_c *MockFindingAPI_GetFindingsByProject_Call) Run(run func(ctx context.Context, uuid string)) *MockFindingAPI_GetFindingsByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFindingAPI_GetFindingsByProject_Call) Return(apiGetFindingsByProjectRequest client.ApiGetFindingsByProjectRequest) *MockFindingAPI_GetFindingsByProject_Call {
	_c.Call.Return(apiGetFindingsByProjectRequest)
	return _c
}

func (_c *MockFindingAPI_GetFindingsByProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetFindingsByProjectRequest) *MockFindingAPI_GetFindingsByProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetFindingsByProjectExecute provides a mock function for the type MockFindingAPI
func (_mock *MockFindingAPI) GetFindingsByProjectExecute(r client.ApiGetFindingsByProjectRequest) ([]client.Finding, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingsByProjectExecute")
	}

	var r0 []client.Finding
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetFindingsByProjectRequest) ([]client.Finding, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetFindingsByProjectRequest) []client.Finding); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Finding)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetFindingsByProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetFindingsByProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockFindingAPI_GetFindingsByProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindingsByProjectExecute'
type MockFindingAPI_GetFindingsByProjectExecute_Call struct {
	*mock.Call
}

// GetFindingsByProjectExecute is a helper method to define mock.On call
//   - r client.ApiGetFindingsByProjectRequest
func (_e *MockFindingAPI_Expecter) GetFindingsByProjectExecute(r interface{}) *MockFindingAPI_GetFindingsByProjectExecute_Call {
	return &MockFindingAPI_GetFindingsByProjectExecute_Call{Call: _e.mock.On("GetFindingsByProjectExecute", r)}
}

func (_c *MockFindingAPI_GetFindingsByProjectExecute_Call) Run(run func(r client.ApiGetFindingsByProjectRequest)) *MockFindingAPI_GetFindingsByProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetFindingsByProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetFindingsByProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFindingAPI_GetFindingsByProjectExecute_Call) Return(findings []client.Finding, response *http.Response, err error) *MockFindingAPI_GetFindingsByProjectExecute_Call {
	_c.Call.Return(findings, response, err)
	return _c
}

func (_c *MockFindingAPI_GetFindingsByProjectExecute_Call) RunAndReturn(run func(r client.ApiGetFindingsByProjectRequest) ([]client.Finding, *http.Response, error)) *MockFindingAPI_GetFindingsByProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIntegrationAPI creates a new instance of MockIntegrationAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIntegrationAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIntegrationAPI {
	mock := &MockIntegrationAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIntegrationAPI is an autogenerated mock type for the IntegrationAPI type
type MockIntegrationAPI struct {
	mock.Mock
}

type MockIntegrationAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIntegrationAPI) EXPECT() *MockIntegrationAPI_Expecter {
	return &MockIntegrationAPI_Expecter{mock: &_m.Mock}
}

// GetAllEcosystems provides a mock function for the type MockIntegrationAPI
func (_mock *MockIntegrationAPI) GetAllEcosystems(ctx context.Context) client.ApiGetAllEcosystemsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEcosystems")
	}

	var r0 client.ApiGetAllEcosystemsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetAllEcosystemsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllEcosystemsRequest)
	}
	return r0
}

// MockIntegrationAPI_GetAllEcosystems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEcosystems'
type MockIntegrationAPI_GetAllEcosystems_Call struct {
	*mock.Call
}

// GetAllEcosystems is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIntegrationAPI_Expecter) GetAllEcosystems(ctx interface{}) *MockIntegrationAPI_GetAllEcosystems_Call {
	return &MockIntegrationAPI_GetAllEcosystems_Call{Call: _e.mock.On("GetAllEcosystems", ctx)}
}

func (_c *MockIntegrationAPI_GetAllEcosystems_Call) Run(run func(ctx context.Context)) *MockIntegrationAPI_GetAllEcosystems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIntegrationAPI_GetAllEcosystems_Call) Return(apiGetAllEcosystemsRequest client.ApiGetAllEcosystemsRequest) *MockIntegrationAPI_GetAllEcosystems_Call {
	_c.Call.Return(apiGetAllEcosystemsRequest)
	return _c
}

func (_c *MockIntegrationAPI_GetAllEcosystems_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetAllEcosystemsRequest) *MockIntegrationAPI_GetAllEcosystems_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEcosystemsExecute provides a mock function for the type MockIntegrationAPI
func (_mock *MockIntegrationAPI) GetAllEcosystemsExecute(r client.ApiGetAllEcosystemsRequest) ([]string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEcosystemsExecute")
	}

	var r0 []string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllEcosystemsRequest) ([]string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllEcosystemsRequest) []string); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllEcosystemsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllEcosystemsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIntegrationAPI_GetAllEcosystemsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEcosystemsExecute'
type MockIntegrationAPI_GetAllEcosystemsExecute_Call struct {
	*mock.Call
}

// GetAllEcosystemsExecute is a helper method to define mock.On call
//   - r client.ApiGetAllEcosystemsRequest
func (_e *MockIntegrationAPI_Expecter) GetAllEcosystemsExecute(r interface{}) *MockIntegrationAPI_GetAllEcosystemsExecute_Call {
	return &MockIntegrationAPI_GetAllEcosystemsExecute_Call{Call: _e.mock.On("GetAllEcosystemsExecute", r)}
}

func (_c *MockIntegrationAPI_GetAllEcosystemsExecute_Call) Run(run func(r client.ApiGetAllEcosystemsRequest)) *MockIntegrationAPI_GetAllEcosystemsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllEcosystemsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllEcosystemsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIntegrationAPI_GetAllEcosystemsExecute_Call) Return(strings []string, response *http.Response, err error) *MockIntegrationAPI_GetAllEcosystemsExecute_Call {
	_c.Call.Return(strings, response, err)
	return _c
}

func (_c *MockIntegrationAPI_GetAllEcosystemsExecute_Call) RunAndReturn(run func(r client.ApiGetAllEcosystemsRequest) ([]string, *http.Response, error)) *MockIntegrationAPI_GetAllEcosystemsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetInactiveEcosystems provides a mock function for the type MockIntegrationAPI
func (_mock *MockIntegrationAPI) GetInactiveEcosystems(ctx context.Context) client.ApiGetInactiveEcosystemsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInactiveEcosystems")
	}

	var r0 client.ApiGetInactiveEcosystemsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetInactiveEcosystemsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetInactiveEcosystemsRequest)
	}
	return r0
}

// MockIntegrationAPI_GetInactiveEcosystems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInactiveEcosystems'
type MockIntegrationAPI_GetInactiveEcosystems_Call struct {
	*mock.Call
}

// GetInactiveEcosystems is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIntegrationAPI_Expecter) GetInactiveEcosystems(ctx interface{}) *MockIntegrationAPI_GetInactiveEcosystems_Call {
	return &MockIntegrationAPI_GetInactiveEcosystems_Call{Call: _e.mock.On("GetInactiveEcosystems", ctx)}
}

func (_c *MockIntegrationAPI_GetInactiveEcosystems_Call) Run(run func(ctx context.Context)) *MockIntegrationAPI_GetInactiveEcosystems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIntegrationAPI_GetInactiveEcosystems_Call) Return(apiGetInactiveEcosystemsRequest client.ApiGetInactiveEcosystemsRequest) *MockIntegrationAPI_GetInactiveEcosystems_Call {
	_c.Call.Return(apiGetInactiveEcosystemsRequest)
	return _c
}

func (_c *MockIntegrationAPI_GetInactiveEcosystems_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetInactiveEcosystemsRequest) *MockIntegrationAPI_GetInactiveEcosystems_Call {
	_c.Call.Return(run)
	return _c
}

// GetInactiveEcosystemsExecute provides a mock function for the type MockIntegrationAPI
func (_mock *MockIntegrationAPI) GetInactiveEcosystemsExecute(r client.ApiGetInactiveEcosystemsRequest) ([]string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetInactiveEcosystemsExecute")
	}

	var r0 []string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetInactiveEcosystemsRequest) ([]string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetInactiveEcosystemsRequest) []string); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetInactiveEcosystemsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetInactiveEcosystemsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockIntegrationAPI_GetInactiveEcosystemsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInactiveEcosystemsExecute'
type MockIntegrationAPI_GetInactiveEcosystemsExecute_Call struct {
	*mock.Call
}

// GetInactiveEcosystemsExecute is a helper method to define mock.On call
//   - r client.ApiGetInactiveEcosystemsRequest
func (_e *MockIntegrationAPI_Expecter) GetInactiveEcosystemsExecute(r interface{}) *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call {
	return &MockIntegrationAPI_GetInactiveEcosystemsExecute_Call{Call: _e.mock.On("GetInactiveEcosystemsExecute", r)}
}

func (_c *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call) Run(run func(r client.ApiGetInactiveEcosystemsRequest)) *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetInactiveEcosystemsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetInactiveEcosystemsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call) Return(strings []string, response *http.Response, err error) *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call {
	_c.Call.Return(strings, response, err)
	return _c
}

func (_c *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call) RunAndReturn(run func(r client.ApiGetInactiveEcosystemsRequest) ([]string, *http.Response, error)) *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLdapAPI creates a new instance of MockLdapAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLdapAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLdapAPI {
	mock := &MockLdapAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLdapAPI is an autogenerated mock type for the LdapAPI type
type MockLdapAPI struct {
	mock.Mock
}

type MockLdapAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLdapAPI) EXPECT() *MockLdapAPI_Expecter {
	return &MockLdapAPI_Expecter{mock: &_m.Mock}
}

// AddMapping1 provides a mock function for the type MockLdapAPI
func (_mock *MockLdapAPI) AddMapping1(ctx context.Context) client.ApiAddMapping1Request {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping1")
	}

	var r0 client.ApiAddMapping1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiAddMapping1Request); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiAddMapping1Request)
	}
	return r0
}

// MockLdapAPI_AddMapping1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping1'
type MockLdapAPI_AddMapping1_Call struct {
	*mock.Call
}

// AddMapping1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLdapAPI_Expecter) AddMapping1(ctx interface{}) *MockLdapAPI_AddMapping1_Call {
	return &MockLdapAPI_AddMapping1_Call{Call: _e.mock.On("AddMapping1", ctx)}
}

func (_c *MockLdapAPI_AddMapping1_Call) Run(run func(ctx context.Context)) *MockLdapAPI_AddMapping1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLdapAPI_AddMapping1_Call) Return(apiAddMapping1Request client.ApiAddMapping1Request) *MockLdapAPI_AddMapping1_Call {
	_c.Call.Return(apiAddMapping1Request)
	return _c
}

func (_c *MockLdapAPI_AddMapping1_Call) RunAndReturn(run func(ctx context.Context) client.ApiAddMapping1Request) *MockLdapAPI_AddMapping1_Call {
	_c.Call.Return(run)
	return _c
}

// AddMapping1Execute provides a mock function for the type MockLdapAPI
func (_mock *MockLdapAPI) AddMapping1Execute(r client.ApiAddMapping1Request) (*client.MappedLdapGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping1Execute")
	}

	var r0 *client.MappedLdapGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddMapping1Request) (*client.MappedLdapGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddMapping1Request) *client.MappedLdapGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MappedLdapGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddMapping1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddMapping1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLdapAPI_AddMapping1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping1Execute'
type MockLdapAPI_AddMapping1Execute_Call struct {
	*mock.Call
}

// AddMapping1Execute is a helper method to define mock.On call
//   - r client.ApiAddMapping1Request
func (_e *MockLdapAPI_Expecter) AddMapping1Execute(r interface{}) *MockLdapAPI_AddMapping1Execute_Call {
	return &MockLdapAPI_AddMapping1Execute_Call{Call: _e.mock.On("AddMapping1Execute", r)}
}

func (_c *MockLdapAPI_AddMapping1Execute_Call) Run(run func(r client.ApiAddMapping1Request)) *MockLdapAPI_AddMapping1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddMapping1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddMapping1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLdapAPI_AddMapping1Execute_Call) Return(mappedLdapGroup *client.MappedLdapGroup, response *http.Response, err error) *MockLdapAPI_AddMapping1Execute_Call {
	_c.Call.Return(mappedLdapGroup, response, err)
	return _c
}

func (_c *MockLdapAPI_AddMapping1Execute_Call) RunAndReturn(run func(r client.ApiAddMapping1Request) (*client.MappedLdapGroup, *http.Response, error)) *MockLdapAPI_AddMapping1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping1 provides a mock function for the type MockLdapAPI
func (_mock *MockLdapAPI) DeleteMapping1(ctx context.Context, uuid string) client.ApiDeleteMapping1Request {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping1")
	}

	var r0 client.ApiDeleteMapping1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteMapping1Request); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteMapping1Request)
	}
	return r0
}

// MockLdapAPI_DeleteMapping1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping1'
type MockLdapAPI_DeleteMapping1_Call struct {
	*mock.Call
}

// DeleteMapping1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockLdapAPI_Expecter) DeleteMapping1(ctx interface{}, uuid interface{}) *MockLdapAPI_DeleteMapping1_Call {
	return &MockLdapAPI_DeleteMapping1_Call{Call: _e.mock.On("DeleteMapping1", ctx, uuid)}
}

func (_c *MockLdapAPI_DeleteMapping1_Call) Run(run func(ctx context.Context, uuid string)) *MockLdapAPI_DeleteMapping1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLdapAPI_DeleteMapping1_Call) Return(apiDeleteMapping1Request client.ApiDeleteMapping1Request) *MockLdapAPI_DeleteMapping1_Call {
	_c.Call.Return(apiDeleteMapping1Request)
	return _c
}

func (_c *MockLdapAPI_DeleteMapping1_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteMapping1Request) *MockLdapAPI_DeleteMapping1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping1Execute provides a mock function for the type MockLdapAPI
func (_mock *MockLdapAPI) DeleteMapping1Execute(r client.ApiDeleteMapping1Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping1Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteMapping1Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteMapping1Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteMapping1Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLdapAPI_DeleteMapping1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping1Execute'
type MockLdapAPI_DeleteMapping1Execute_Call struct {
	*mock.Call
}

// DeleteMapping1Execute is a helper method to define mock.On call
//   - r client.ApiDeleteMapping1Request
func (_e *MockLdapAPI_Expecter) DeleteMapping1Execute(r interface{}) *MockLdapAPI_DeleteMapping1Execute_Call {
	return &MockLdapAPI_DeleteMapping1Execute_Call{Call: _e.mock.On("DeleteMapping1Execute", r)}
}

func (_c *MockLdapAPI_DeleteMapping1Execute_Call) Run(run func(r client.ApiDeleteMapping1Request)) *MockLdapAPI_DeleteMapping1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteMapping1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteMapping1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLdapAPI_DeleteMapping1Execute_Call) Return(response *http.Response, err error) *MockLdapAPI_DeleteMapping1Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockLdapAPI_DeleteMapping1Execute_Call) RunAndReturn(run func(r client.ApiDeleteMapping1Request) (*http.Response, error)) *MockLdapAPI_DeleteMapping1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLdapGroups provides a mock function for the type MockLdapAPI
func (_mock *MockLdapAPI) RetrieveLdapGroups(ctx context.Context) client.ApiRetrieveLdapGroupsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLdapGroups")
	}

	var r0 client.ApiRetrieveLdapGroupsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiRetrieveLdapGroupsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiRetrieveLdapGroupsRequest)
	}
	return r0
}

// MockLdapAPI_RetrieveLdapGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLdapGroups'
type MockLdapAPI_RetrieveLdapGroups_Call struct {
	*mock.Call
}

// RetrieveLdapGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLdapAPI_Expecter) RetrieveLdapGroups(ctx interface{}) *MockLdapAPI_RetrieveLdapGroups_Call {
	return &MockLdapAPI_RetrieveLdapGroups_Call{Call: _e.mock.On("RetrieveLdapGroups", ctx)}
}

func (_c *MockLdapAPI_RetrieveLdapGroups_Call) Run(run func(ctx context.Context)) *MockLdapAPI_RetrieveLdapGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups_Call) Return(apiRetrieveLdapGroupsRequest client.ApiRetrieveLdapGroupsRequest) *MockLdapAPI_RetrieveLdapGroups_Call {
	_c.Call.Return(apiRetrieveLdapGroupsRequest)
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups_Call) RunAndReturn(run func(ctx context.Context) client.ApiRetrieveLdapGroupsRequest) *MockLdapAPI_RetrieveLdapGroups_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLdapGroups1 provides a mock function for the type MockLdapAPI
func (_mock *MockLdapAPI) RetrieveLdapGroups1(ctx context.Context, uuid string) client.ApiRetrieveLdapGroups1Request {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLdapGroups1")
	}

	var r0 client.ApiRetrieveLdapGroups1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiRetrieveLdapGroups1Request); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiRetrieveLdapGroups1Request)
	}
	return r0
}

// MockLdapAPI_RetrieveLdapGroups1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLdapGroups1'
type MockLdapAPI_RetrieveLdapGroups1_Call struct {
	*mock.Call
}

// RetrieveLdapGroups1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockLdapAPI_Expecter) RetrieveLdapGroups1(ctx interface{}, uuid interface{}) *MockLdapAPI_RetrieveLdapGroups1_Call {
	return &MockLdapAPI_RetrieveLdapGroups1_Call{Call: _e.mock.On("RetrieveLdapGroups1", ctx, uuid)}
}

func (_c *MockLdapAPI_RetrieveLdapGroups1_Call) Run(run func(ctx context.Context, uuid string)) *MockLdapAPI_RetrieveLdapGroups1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups1_Call) Return(apiRetrieveLdapGroups1Request client.ApiRetrieveLdapGroups1Request) *MockLdapAPI_RetrieveLdapGroups1_Call {
	_c.Call.Return(apiRetrieveLdapGroups1Request)
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups1_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiRetrieveLdapGroups1Request) *MockLdapAPI_RetrieveLdapGroups1_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLdapGroups1Execute provides a mock function for the type MockLdapAPI
func (_mock *MockLdapAPI) RetrieveLdapGroups1Execute(r client.ApiRetrieveLdapGroups1Request) ([]client.MappedLdapGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLdapGroups1Execute")
	}

	var r0 []client.MappedLdapGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveLdapGroups1Request) ([]client.MappedLdapGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveLdapGroups1Request) []client.MappedLdapGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.MappedLdapGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRetrieveLdapGroups1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRetrieveLdapGroups1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLdapAPI_RetrieveLdapGroups1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLdapGroups1Execute'
type MockLdapAPI_RetrieveLdapGroups1Execute_Call struct {
	*mock.Call
}

// RetrieveLdapGroups1Execute is a helper method to define mock.On call
//   - r client.ApiRetrieveLdapGroups1Request
func (_e *MockLdapAPI_Expecter) RetrieveLdapGroups1Execute(r interface{}) *MockLdapAPI_RetrieveLdapGroups1Execute_Call {
	return &MockLdapAPI_RetrieveLdapGroups1Execute_Call{Call: _e.mock.On("RetrieveLdapGroups1Execute", r)}
}

func (_c *MockLdapAPI_RetrieveLdapGroups1Execute_Call) Run(run func(r client.ApiRetrieveLdapGroups1Request)) *MockLdapAPI_RetrieveLdapGroups1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRetrieveLdapGroups1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiRetrieveLdapGroups1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups1Execute_Call) Return(mappedLdapGroups []client.MappedLdapGroup, response *http.Response, err error) *MockLdapAPI_RetrieveLdapGroups1Execute_Call {
	_c.Call.Return(mappedLdapGroups, response, err)
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups1Execute_Call) RunAndReturn(run func(r client.ApiRetrieveLdapGroups1Request) ([]client.MappedLdapGroup, *http.Response, error)) *MockLdapAPI_RetrieveLdapGroups1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLdapGroupsExecute provides a mock function for the type MockLdapAPI
func (_mock *MockLdapAPI) RetrieveLdapGroupsExecute(r client.ApiRetrieveLdapGroupsRequest) ([]string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLdapGroupsExecute")
	}

	var r0 []string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveLdapGroupsRequest) ([]string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveLdapGroupsRequest) []string); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRetrieveLdapGroupsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRetrieveLdapGroupsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLdapAPI_RetrieveLdapGroupsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLdapGroupsExecute'
type MockLdapAPI_RetrieveLdapGroupsExecute_Call struct {
	*mock.Call
}

// RetrieveLdapGroupsExecute is a helper method to define mock.On call
//   - r client.ApiRetrieveLdapGroupsRequest
func (_e *MockLdapAPI_Expecter) RetrieveLdapGroupsExecute(r interface{}) *MockLdapAPI_RetrieveLdapGroupsExecute_Call {
	return &MockLdapAPI_RetrieveLdapGroupsExecute_Call{Call: _e.mock.On("RetrieveLdapGroupsExecute", r)}
}

func (_c *MockLdapAPI_RetrieveLdapGroupsExecute_Call) Run(run func(r client.ApiRetrieveLdapGroupsRequest)) *MockLdapAPI_RetrieveLdapGroupsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRetrieveLdapGroupsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRetrieveLdapGroupsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroupsExecute_Call) Return(strings []string, response *http.Response, err error) *MockLdapAPI_RetrieveLdapGroupsExecute_Call {
	_c.Call.Return(strings, response, err)
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroupsExecute_Call) RunAndReturn(run func(r client.ApiRetrieveLdapGroupsRequest) ([]string, *http.Response, error)) *MockLdapAPI_RetrieveLdapGroupsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLicenseAPI creates a new instance of MockLicenseAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLicenseAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLicenseAPI {
	mock := &MockLicenseAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLicenseAPI is an autogenerated mock type for the LicenseAPI type
type MockLicenseAPI struct {
	mock.Mock
}

type MockLicenseAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLicenseAPI) EXPECT() *MockLicenseAPI_Expecter {
	return &MockLicenseAPI_Expecter{mock: &_m.Mock}
}

// CreateLicense provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) CreateLicense(ctx context.Context) client.ApiCreateLicenseRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicense")
	}

	var r0 client.ApiCreateLicenseRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateLicenseRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateLicenseRequest)
	}
	return r0
}

// MockLicenseAPI_CreateLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLicense'
type MockLicenseAPI_CreateLicense_Call struct {
	*mock.Call
}

// CreateLicense is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseAPI_Expecter) CreateLicense(ctx interface{}) *MockLicenseAPI_CreateLicense_Call {
	return &MockLicenseAPI_CreateLicense_Call{Call: _e.mock.On("CreateLicense", ctx)}
}

func (_c *MockLicenseAPI_CreateLicense_Call) Run(run func(ctx context.Context)) *MockLicenseAPI_CreateLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_CreateLicense_Call) Return(apiCreateLicenseRequest client.ApiCreateLicenseRequest) *MockLicenseAPI_CreateLicense_Call {
	_c.Call.Return(apiCreateLicenseRequest)
	return _c
}

func (_c *MockLicenseAPI_CreateLicense_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateLicenseRequest) *MockLicenseAPI_CreateLicense_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLicenseExecute provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) CreateLicenseExecute(r client.ApiCreateLicenseRequest) (*client.License, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseExecute")
	}

	var r0 *client.License
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateLicenseRequest) (*client.License, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateLicenseRequest) *client.License); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.License)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateLicenseRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateLicenseRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseAPI_CreateLicenseExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLicenseExecute'
type MockLicenseAPI_CreateLicenseExecute_Call struct {
	*mock.Call
}

// CreateLicenseExecute is a helper method to define mock.On call
//   - r client.ApiCreateLicenseRequest
func (_e *MockLicenseAPI_Expecter) CreateLicenseExecute(r interface{}) *MockLicenseAPI_CreateLicenseExecute_Call {
	return &MockLicenseAPI_CreateLicenseExecute_Call{Call: _e.mock.On("CreateLicenseExecute", r)}
}

func (_c *MockLicenseAPI_CreateLicenseExecute_Call) Run(run func(r client.ApiCreateLicenseRequest)) *MockLicenseAPI_CreateLicenseExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateLicenseRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateLicenseRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_CreateLicenseExecute_Call) Return(license *client.License, response *http.Response, err error) *MockLicenseAPI_CreateLicenseExecute_Call {
	_c.Call.Return(license, response, err)
	return _c
}

func (_c *MockLicenseAPI_CreateLicenseExecute_Call) RunAndReturn(run func(r client.ApiCreateLicenseRequest) (*client.License, *http.Response, error)) *MockLicenseAPI_CreateLicenseExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLicense provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) DeleteLicense(ctx context.Context, licenseId string) client.ApiDeleteLicenseRequest {
	ret := _mock.Called(ctx, licenseId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicense")
	}

	var r0 client.ApiDeleteLicenseRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteLicenseRequest); ok {
		r0 = returnFunc(ctx, licenseId)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteLicenseRequest)
	}
	return r0
}

// MockLicenseAPI_DeleteLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLicense'
type MockLicenseAPI_DeleteLicense_Call struct {
	*mock.Call
}

// DeleteLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - licenseId string
func (_e *MockLicenseAPI_Expecter) DeleteLicense(ctx interface{}, licenseId interface{}) *MockLicenseAPI_DeleteLicense_Call {
	return &MockLicenseAPI_DeleteLicense_Call{Call: _e.mock.On("DeleteLicense", ctx, licenseId)}
}

func (_c *MockLicenseAPI_DeleteLicense_Call) Run(run func(ctx context.Context, licenseId string)) *MockLicenseAPI_DeleteLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_DeleteLicense_Call) Return(apiDeleteLicenseRequest client.ApiDeleteLicenseRequest) *MockLicenseAPI_DeleteLicense_Call {
	_c.Call.Return(apiDeleteLicenseRequest)
	return _c
}

func (_c *MockLicenseAPI_DeleteLicense_Call) RunAndReturn(run func(ctx context.Context, licenseId string) client.ApiDeleteLicenseRequest) *MockLicenseAPI_DeleteLicense_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLicenseExecute provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) DeleteLicenseExecute(r client.ApiDeleteLicenseRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicenseExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteLicenseRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteLicenseRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteLicenseRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicenseAPI_DeleteLicenseExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLicenseExecute'
type MockLicenseAPI_DeleteLicenseExecute_Call struct {
	*mock.Call
}

// DeleteLicenseExecute is a helper method to define mock.On call
//   - r client.ApiDeleteLicenseRequest
func (_e *MockLicenseAPI_Expecter) DeleteLicenseExecute(r interface{}) *MockLicenseAPI_DeleteLicenseExecute_Call {
	return &MockLicenseAPI_DeleteLicenseExecute_Call{Call: _e.mock.On("DeleteLicenseExecute", r)}
}

func (_c *MockLicenseAPI_DeleteLicenseExecute_Call) Run(run func(r client.ApiDeleteLicenseRequest)) *MockLicenseAPI_DeleteLicenseExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteLicenseRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteLicenseRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_DeleteLicenseExecute_Call) Return(response *http.Response, err error) *MockLicenseAPI_DeleteLicenseExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockLicenseAPI_DeleteLicenseExecute_Call) RunAndReturn(run func(r client.ApiDeleteLicenseRequest) (*http.Response, error)) *MockLicenseAPI_DeleteLicenseExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicense provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) GetLicense(ctx context.Context, licenseId string) client.ApiGetLicenseRequest {
	ret := _mock.Called(ctx, licenseId)

	if len(ret) == 0 {
		panic("no return value specified for GetLicense")
	}

	var r0 client.ApiGetLicenseRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetLicenseRequest); ok {
		r0 = returnFunc(ctx, licenseId)
	} else {
		r0 = ret.Get(0).(client.ApiGetLicenseRequest)
	}
	return r0
}

// MockLicenseAPI_GetLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicense'
type MockLicenseAPI_GetLicense_Call struct {
	*mock.Call
}

// GetLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - licenseId string
func (_e *MockLicenseAPI_Expecter) GetLicense(ctx interface{}, licenseId interface{}) *MockLicenseAPI_GetLicense_Call {
	return &MockLicenseAPI_GetLicense_Call{Call: _e.mock.On("GetLicense", ctx, licenseId)}
}

func (_c *MockLicenseAPI_GetLicense_Call) Run(run func(ctx context.Context, licenseId string)) *MockLicenseAPI_GetLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicense_Call) Return(apiGetLicenseRequest client.ApiGetLicenseRequest) *MockLicenseAPI_GetLicense_Call {
	_c.Call.Return(apiGetLicenseRequest)
	return _c
}

func (_c *MockLicenseAPI_GetLicense_Call) RunAndReturn(run func(ctx context.Context, licenseId string) client.ApiGetLicenseRequest) *MockLicenseAPI_GetLicense_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseExecute provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) GetLicenseExecute(r client.ApiGetLicenseRequest) (*client.License, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseExecute")
	}

	var r0 *client.License
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicenseRequest) (*client.License, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicenseRequest) *client.License); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.License)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetLicenseRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetLicenseRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseAPI_GetLicenseExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseExecute'
type MockLicenseAPI_GetLicenseExecute_Call struct {
	*mock.Call
}

// GetLicenseExecute is a helper method to define mock.On call
//   - r client.ApiGetLicenseRequest
func (_e *MockLicenseAPI_Expecter) GetLicenseExecute(r interface{}) *MockLicenseAPI_GetLicenseExecute_Call {
	return &MockLicenseAPI_GetLicenseExecute_Call{Call: _e.mock.On("GetLicenseExecute", r)}
}

func (_c *MockLicenseAPI_GetLicenseExecute_Call) Run(run func(r client.ApiGetLicenseRequest)) *MockLicenseAPI_GetLicenseExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetLicenseRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetLicenseRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicenseExecute_Call) Return(license *client.License, response *http.Response, err error) *MockLicenseAPI_GetLicenseExecute_Call {
	_c.Call.Return(license, response, err)
	return _c
}

func (_c *MockLicenseAPI_GetLicenseExecute_Call) RunAndReturn(run func(r client.ApiGetLicenseRequest) (*client.License, *http.Response, error)) *MockLicenseAPI_GetLicenseExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseListing provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) GetLicenseListing(ctx context.Context) client.ApiGetLicenseListingRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseListing")
	}

	var r0 client.ApiGetLicenseListingRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetLicenseListingRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetLicenseListingRequest)
	}
	return r0
}

// MockLicenseAPI_GetLicenseListing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseListing'
type MockLicenseAPI_GetLicenseListing_Call struct {
	*mock.Call
}

// GetLicenseListing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseAPI_Expecter) GetLicenseListing(ctx interface{}) *MockLicenseAPI_GetLicenseListing_Call {
	return &MockLicenseAPI_GetLicenseListing_Call{Call: _e.mock.On("GetLicenseListing", ctx)}
}

func (_c *MockLicenseAPI_GetLicenseListing_Call) Run(run func(ctx context.Context)) *MockLicenseAPI_GetLicenseListing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicenseListing_Call) Return(apiGetLicenseListingRequest client.ApiGetLicenseListingRequest) *MockLicenseAPI_GetLicenseListing_Call {
	_c.Call.Return(apiGetLicenseListingRequest)
	return _c
}

func (_c *MockLicenseAPI_GetLicenseListing_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetLicenseListingRequest) *MockLicenseAPI_GetLicenseListing_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseListingExecute provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) GetLicenseListingExecute(r client.ApiGetLicenseListingRequest) ([]client.License, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseListingExecute")
	}

	var r0 []client.License
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicenseListingRequest) ([]client.License, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicenseListingRequest) []client.License); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.License)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetLicenseListingRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetLicenseListingRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseAPI_GetLicenseListingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseListingExecute'
type MockLicenseAPI_GetLicenseListingExecute_Call struct {
	*mock.Call
}

// GetLicenseListingExecute is a helper method to define mock.On call
//   - r client.ApiGetLicenseListingRequest
func (_e *MockLicenseAPI_Expecter) GetLicenseListingExecute(r interface{}) *MockLicenseAPI_GetLicenseListingExecute_Call {
	return &MockLicenseAPI_GetLicenseListingExecute_Call{Call: _e.mock.On("GetLicenseListingExecute", r)}
}

func (_c *MockLicenseAPI_GetLicenseListingExecute_Call) Run(run func(r client.ApiGetLicenseListingRequest)) *MockLicenseAPI_GetLicenseListingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetLicenseListingRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetLicenseListingRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicenseListingExecute_Call) Return(licenses []client.License, response *http.Response, err error) *MockLicenseAPI_GetLicenseListingExecute_Call {
	_c.Call.Return(licenses, response, err)
	return _c
}

func (_c *MockLicenseAPI_GetLicenseListingExecute_Call) RunAndReturn(run func(r client.ApiGetLicenseListingRequest) ([]client.License, *http.Response, error)) *MockLicenseAPI_GetLicenseListingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenses provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) GetLicenses(ctx context.Context) client.ApiGetLicensesRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenses")
	}

	var r0 client.ApiGetLicensesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetLicensesRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetLicensesRequest)
	}
	return r0
}

// MockLicenseAPI_GetLicenses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenses'
type MockLicenseAPI_GetLicenses_Call struct {
	*mock.Call
}

// GetLicenses is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseAPI_Expecter) GetLicenses(ctx interface{}) *MockLicenseAPI_GetLicenses_Call {
	return &MockLicenseAPI_GetLicenses_Call{Call: _e.mock.On("GetLicenses", ctx)}
}

func (_c *MockLicenseAPI_GetLicenses_Call) Run(run func(ctx context.Context)) *MockLicenseAPI_GetLicenses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicenses_Call) Return(apiGetLicensesRequest client.ApiGetLicensesRequest) *MockLicenseAPI_GetLicenses_Call {
	_c.Call.Return(apiGetLicensesRequest)
	return _c
}

func (_c *MockLicenseAPI_GetLicenses_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetLicensesRequest) *MockLicenseAPI_GetLicenses_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicensesExecute provides a mock function for the type MockLicenseAPI
func (_mock *MockLicenseAPI) GetLicensesExecute(r client.ApiGetLicensesRequest) ([]client.License, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLicensesExecute")
	}

	var r0 []client.License
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicensesRequest) ([]client.License, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicensesRequest) []client.License); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.License)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetLicensesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetLicensesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseAPI_GetLicensesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicensesExecute'
type MockLicenseAPI_GetLicensesExecute_Call struct {
	*mock.Call
}

// GetLicensesExecute is a helper method to define mock.On call
//   - r client.ApiGetLicensesRequest
func (_e *MockLicenseAPI_Expecter) GetLicensesExecute(r interface{}) *MockLicenseAPI_GetLicensesExecute_Call {
	return &MockLicenseAPI_GetLicensesExecute_Call{Call: _e.mock.On("GetLicensesExecute", r)}
}

func (_c *MockLicenseAPI_GetLicensesExecute_Call) Run(run func(r client.ApiGetLicensesRequest)) *MockLicenseAPI_GetLicensesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetLicensesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetLicensesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicensesExecute_Call) Return(licenses []client.License, response *http.Response, err error) *MockLicenseAPI_GetLicensesExecute_Call {
	_c.Call.Return(licenses, response, err)
	return _c
}

func (_c *MockLicenseAPI_GetLicensesExecute_Call) RunAndReturn(run func(r client.ApiGetLicensesRequest) ([]client.License, *http.Response, error)) *MockLicenseAPI_GetLicensesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLicenseGroupAPI creates a new instance of MockLicenseGroupAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLicenseGroupAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLicenseGroupAPI {
	mock := &MockLicenseGroupAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockLicenseGroupAPI is an autogenerated mock type for the LicenseGroupAPI type
type MockLicenseGroupAPI struct {
	mock.Mock
}

type MockLicenseGroupAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLicenseGroupAPI) EXPECT() *MockLicenseGroupAPI_Expecter {
	return &MockLicenseGroupAPI_Expecter{mock: &_m.Mock}
}

// AddLicenseToLicenseGroup provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) AddLicenseToLicenseGroup(ctx context.Context, uuid string, licenseUuid string) client.ApiAddLicenseToLicenseGroupRequest {
	ret := _mock.Called(ctx, uuid, licenseUuid)

	if len(ret) == 0 {
		panic("no return value specified for AddLicenseToLicenseGroup")
	}

	var r0 client.ApiAddLicenseToLicenseGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiAddLicenseToLicenseGroupRequest); ok {
		r0 = returnFunc(ctx, uuid, licenseUuid)
	} else {
		r0 = ret.Get(0).(client.ApiAddLicenseToLicenseGroupRequest)
	}
	return r0
}

// MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLicenseToLicenseGroup'
type MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call struct {
	*mock.Call
}

// AddLicenseToLicenseGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - licenseUuid string
func (_e *MockLicenseGroupAPI_Expecter) AddLicenseToLicenseGroup(ctx interface{}, uuid interface{}, licenseUuid interface{}) *MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call {
	return &MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call{Call: _e.mock.On("AddLicenseToLicenseGroup", ctx, uuid, licenseUuid)}
}

func (_c *MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call) Run(run func(ctx context.Context, uuid string, licenseUuid string)) *MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call) Return(apiAddLicenseToLicenseGroupRequest client.ApiAddLicenseToLicenseGroupRequest) *MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call {
	_c.Call.Return(apiAddLicenseToLicenseGroupRequest)
	return _c
}

func (_c *MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call) RunAndReturn(run func(ctx context.Context, uuid string, licenseUuid string) client.ApiAddLicenseToLicenseGroupRequest) *MockLicenseGroupAPI_AddLicenseToLicenseGroup_Call {
	_c.Call.Return(run)
	return _c
}

// AddLicenseToLicenseGroupExecute provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) AddLicenseToLicenseGroupExecute(r client.ApiAddLicenseToLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddLicenseToLicenseGroupExecute")
	}

	var r0 *client.LicenseGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddLicenseToLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddLicenseToLicenseGroupRequest) *client.LicenseGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LicenseGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddLicenseToLicenseGroupRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddLicenseToLicenseGroupRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddLicenseToLicenseGroupExecute'
type MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call struct {
	*mock.Call
}

// AddLicenseToLicenseGroupExecute is a helper method to define mock.On call
//   - r client.ApiAddLicenseToLicenseGroupRequest
func (_e *MockLicenseGroupAPI_Expecter) AddLicenseToLicenseGroupExecute(r interface{}) *MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call {
	return &MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call{Call: _e.mock.On("AddLicenseToLicenseGroupExecute", r)}
}

func (_c *MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call) Run(run func(r client.ApiAddLicenseToLicenseGroupRequest)) *MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddLicenseToLicenseGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddLicenseToLicenseGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call) Return(licenseGroup *client.LicenseGroup, response *http.Response, err error) *MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call {
	_c.Call.Return(licenseGroup, response, err)
	return _c
}

func (_c *MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call) RunAndReturn(run func(r client.ApiAddLicenseToLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)) *MockLicenseGroupAPI_AddLicenseToLicenseGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLicenseGroup provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) CreateLicenseGroup(ctx context.Context) client.ApiCreateLicenseGroupRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseGroup")
	}

	var r0 client.ApiCreateLicenseGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateLicenseGroupRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateLicenseGroupRequest)
	}
	return r0
}

// MockLicenseGroupAPI_CreateLicenseGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLicenseGroup'
type MockLicenseGroupAPI_CreateLicenseGroup_Call struct {
	*mock.Call
}

// CreateLicenseGroup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseGroupAPI_Expecter) CreateLicenseGroup(ctx interface{}) *MockLicenseGroupAPI_CreateLicenseGroup_Call {
	return &MockLicenseGroupAPI_CreateLicenseGroup_Call{Call: _e.mock.On("CreateLicenseGroup", ctx)}
}

func (_c *MockLicenseGroupAPI_CreateLicenseGroup_Call) Run(run func(ctx context.Context)) *MockLicenseGroupAPI_CreateLicenseGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_CreateLicenseGroup_Call) Return(apiCreateLicenseGroupRequest client.ApiCreateLicenseGroupRequest) *MockLicenseGroupAPI_CreateLicenseGroup_Call {
	_c.Call.Return(apiCreateLicenseGroupRequest)
	return _c
}

func (_c *MockLicenseGroupAPI_CreateLicenseGroup_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateLicenseGroupRequest) *MockLicenseGroupAPI_CreateLicenseGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLicenseGroupExecute provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) CreateLicenseGroupExecute(r client.ApiCreateLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseGroupExecute")
	}

	var r0 *client.LicenseGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateLicenseGroupRequest) *client.LicenseGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LicenseGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateLicenseGroupRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateLicenseGroupRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseGroupAPI_CreateLicenseGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLicenseGroupExecute'
type MockLicenseGroupAPI_CreateLicenseGroupExecute_Call struct {
	*mock.Call
}

// CreateLicenseGroupExecute is a helper method to define mock.On call
//   - r client.ApiCreateLicenseGroupRequest
func (_e *MockLicenseGroupAPI_Expecter) CreateLicenseGroupExecute(r interface{}) *MockLicenseGroupAPI_CreateLicenseGroupExecute_Call {
	return &MockLicenseGroupAPI_CreateLicenseGroupExecute_Call{Call: _e.mock.On("CreateLicenseGroupExecute", r)}
}

func (_c *MockLicenseGroupAPI_CreateLicenseGroupExecute_Call) Run(run func(r client.ApiCreateLicenseGroupRequest)) *MockLicenseGroupAPI_CreateLicenseGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateLicenseGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateLicenseGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_CreateLicenseGroupExecute_Call) Return(licenseGroup *client.LicenseGroup, response *http.Response, err error) *MockLicenseGroupAPI_CreateLicenseGroupExecute_Call {
	_c.Call.Return(licenseGroup, response, err)
	return _c
}

func (_c *MockLicenseGroupAPI_CreateLicenseGroupExecute_Call) RunAndReturn(run func(r client.ApiCreateLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)) *MockLicenseGroupAPI_CreateLicenseGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLicenseGroup provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) DeleteLicenseGroup(ctx context.Context, uuid string) client.ApiDeleteLicenseGroupRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicenseGroup")
	}

	var r0 client.ApiDeleteLicenseGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteLicenseGroupRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteLicenseGroupRequest)
	}
	return r0
}

// MockLicenseGroupAPI_DeleteLicenseGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLicenseGroup'
type MockLicenseGroupAPI_DeleteLicenseGroup_Call struct {
	*mock.Call
}

// DeleteLicenseGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockLicenseGroupAPI_Expecter) DeleteLicenseGroup(ctx interface{}, uuid interface{}) *MockLicenseGroupAPI_DeleteLicenseGroup_Call {
	return &MockLicenseGroupAPI_DeleteLicenseGroup_Call{Call: _e.mock.On("DeleteLicenseGroup", ctx, uuid)}
}

func (_c *MockLicenseGroupAPI_DeleteLicenseGroup_Call) Run(run func(ctx context.Context, uuid string)) *MockLicenseGroupAPI_DeleteLicenseGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_DeleteLicenseGroup_Call) Return(apiDeleteLicenseGroupRequest client.ApiDeleteLicenseGroupRequest) *MockLicenseGroupAPI_DeleteLicenseGroup_Call {
	_c.Call.Return(apiDeleteLicenseGroupRequest)
	return _c
}

func (_c *MockLicenseGroupAPI_DeleteLicenseGroup_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteLicenseGroupRequest) *MockLicenseGroupAPI_DeleteLicenseGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLicenseGroupExecute provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) DeleteLicenseGroupExecute(r client.ApiDeleteLicenseGroupRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicenseGroupExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteLicenseGroupRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteLicenseGroupRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteLicenseGroupRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLicenseGroupExecute'
type MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call struct {
	*mock.Call
}

// DeleteLicenseGroupExecute is a helper method to define mock.On call
//   - r client.ApiDeleteLicenseGroupRequest
func (_e *MockLicenseGroupAPI_Expecter) DeleteLicenseGroupExecute(r interface{}) *MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call {
	return &MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call{Call: _e.mock.On("DeleteLicenseGroupExecute", r)}
}

func (_c *MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call) Run(run func(r client.ApiDeleteLicenseGroupRequest)) *MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteLicenseGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteLicenseGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call) Return(response *http.Response, err error) *MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call) RunAndReturn(run func(r client.ApiDeleteLicenseGroupRequest) (*http.Response, error)) *MockLicenseGroupAPI_DeleteLicenseGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseGroup provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) GetLicenseGroup(ctx context.Context, uuid string) client.ApiGetLicenseGroupRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseGroup")
	}

	var r0 client.ApiGetLicenseGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetLicenseGroupRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetLicenseGroupRequest)
	}
	return r0
}

// MockLicenseGroupAPI_GetLicenseGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseGroup'
type MockLicenseGroupAPI_GetLicenseGroup_Call struct {
	*mock.Call
}

// GetLicenseGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockLicenseGroupAPI_Expecter) GetLicenseGroup(ctx interface{}, uuid interface{}) *MockLicenseGroupAPI_GetLicenseGroup_Call {
	return &MockLicenseGroupAPI_GetLicenseGroup_Call{Call: _e.mock.On("GetLicenseGroup", ctx, uuid)}
}

func (_c *MockLicenseGroupAPI_GetLicenseGroup_Call) Run(run func(ctx context.Context, uuid string)) *MockLicenseGroupAPI_GetLicenseGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_GetLicenseGroup_Call) Return(apiGetLicenseGroupRequest client.ApiGetLicenseGroupRequest) *MockLicenseGroupAPI_GetLicenseGroup_Call {
	_c.Call.Return(apiGetLicenseGroupRequest)
	return _c
}

func (_c *MockLicenseGroupAPI_GetLicenseGroup_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetLicenseGroupRequest) *MockLicenseGroupAPI_GetLicenseGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseGroupExecute provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) GetLicenseGroupExecute(r client.ApiGetLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseGroupExecute")
	}

	var r0 *client.LicenseGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicenseGroupRequest) *client.LicenseGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LicenseGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetLicenseGroupRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetLicenseGroupRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseGroupAPI_GetLicenseGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseGroupExecute'
type MockLicenseGroupAPI_GetLicenseGroupExecute_Call struct {
	*mock.Call
}

// GetLicenseGroupExecute is a helper method to define mock.On call
//   - r client.ApiGetLicenseGroupRequest
func (_e *MockLicenseGroupAPI_Expecter) GetLicenseGroupExecute(r interface{}) *MockLicenseGroupAPI_GetLicenseGroupExecute_Call {
	return &MockLicenseGroupAPI_GetLicenseGroupExecute_Call{Call: _e.mock.On("GetLicenseGroupExecute", r)}
}

func (_c *MockLicenseGroupAPI_GetLicenseGroupExecute_Call) Run(run func(r client.ApiGetLicenseGroupRequest)) *MockLicenseGroupAPI_GetLicenseGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetLicenseGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetLicenseGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_GetLicenseGroupExecute_Call) Return(licenseGroup *client.LicenseGroup, response *http.Response, err error) *MockLicenseGroupAPI_GetLicenseGroupExecute_Call {
	_c.Call.Return(licenseGroup, response, err)
	return _c
}

func (_c *MockLicenseGroupAPI_GetLicenseGroupExecute_Call) RunAndReturn(run func(r client.ApiGetLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)) *MockLicenseGroupAPI_GetLicenseGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseGroups provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) GetLicenseGroups(ctx context.Context) client.ApiGetLicenseGroupsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseGroups")
	}

	var r0 client.ApiGetLicenseGroupsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetLicenseGroupsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetLicenseGroupsRequest)
	}
	return r0
}

// MockLicenseGroupAPI_GetLicenseGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseGroups'
type MockLicenseGroupAPI_GetLicenseGroups_Call struct {
	*mock.Call
}

// GetLicenseGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseGroupAPI_Expecter) GetLicenseGroups(ctx interface{}) *MockLicenseGroupAPI_GetLicenseGroups_Call {
	return &MockLicenseGroupAPI_GetLicenseGroups_Call{Call: _e.mock.On("GetLicenseGroups", ctx)}
}

func (_c *MockLicenseGroupAPI_GetLicenseGroups_Call) Run(run func(ctx context.Context)) *MockLicenseGroupAPI_GetLicenseGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_GetLicenseGroups_Call) Return(apiGetLicenseGroupsRequest client.ApiGetLicenseGroupsRequest) *MockLicenseGroupAPI_GetLicenseGroups_Call {
	_c.Call.Return(apiGetLicenseGroupsRequest)
	return _c
}

func (_c *MockLicenseGroupAPI_GetLicenseGroups_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetLicenseGroupsRequest) *MockLicenseGroupAPI_GetLicenseGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseGroupsExecute provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) GetLicenseGroupsExecute(r client.ApiGetLicenseGroupsRequest) ([]client.LicenseGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseGroupsExecute")
	}

	var r0 []client.LicenseGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicenseGroupsRequest) ([]client.LicenseGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLicenseGroupsRequest) []client.LicenseGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.LicenseGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetLicenseGroupsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetLicenseGroupsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseGroupAPI_GetLicenseGroupsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseGroupsExecute'
type MockLicenseGroupAPI_GetLicenseGroupsExecute_Call struct {
	*mock.Call
}

// GetLicenseGroupsExecute is a helper method to define mock.On call
//   - r client.ApiGetLicenseGroupsRequest
func (_e *MockLicenseGroupAPI_Expecter) GetLicenseGroupsExecute(r interface{}) *MockLicenseGroupAPI_GetLicenseGroupsExecute_Call {
	return &MockLicenseGroupAPI_GetLicenseGroupsExecute_Call{Call: _e.mock.On("GetLicenseGroupsExecute", r)}
}

func (_c *MockLicenseGroupAPI_GetLicenseGroupsExecute_Call) Run(run func(r client.ApiGetLicenseGroupsRequest)) *MockLicenseGroupAPI_GetLicenseGroupsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetLicenseGroupsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetLicenseGroupsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_GetLicenseGroupsExecute_Call) Return(licenseGroups []client.LicenseGroup, response *http.Response, err error) *MockLicenseGroupAPI_GetLicenseGroupsExecute_Call {
	_c.Call.Return(licenseGroups, response, err)
	return _c
}

func (_c *MockLicenseGroupAPI_GetLicenseGroupsExecute_Call) RunAndReturn(run func(r client.ApiGetLicenseGroupsRequest) ([]client.LicenseGroup, *http.Response, error)) *MockLicenseGroupAPI_GetLicenseGroupsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLicenseFromLicenseGroup provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) RemoveLicenseFromLicenseGroup(ctx context.Context, uuid string, licenseUuid string) client.ApiRemoveLicenseFromLicenseGroupRequest {
	ret := _mock.Called(ctx, uuid, licenseUuid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLicenseFromLicenseGroup")
	}

	var r0 client.ApiRemoveLicenseFromLicenseGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiRemoveLicenseFromLicenseGroupRequest); ok {
		r0 = returnFunc(ctx, uuid, licenseUuid)
	} else {
		r0 = ret.Get(0).(client.ApiRemoveLicenseFromLicenseGroupRequest)
	}
	return r0
}

// MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLicenseFromLicenseGroup'
type MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call struct {
	*mock.Call
}

// RemoveLicenseFromLicenseGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - licenseUuid string
func (_e *MockLicenseGroupAPI_Expecter) RemoveLicenseFromLicenseGroup(ctx interface{}, uuid interface{}, licenseUuid interface{}) *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call {
	return &MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call{Call: _e.mock.On("RemoveLicenseFromLicenseGroup", ctx, uuid, licenseUuid)}
}

func (_c *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call) Run(run func(ctx context.Context, uuid string, licenseUuid string)) *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call) Return(apiRemoveLicenseFromLicenseGroupRequest client.ApiRemoveLicenseFromLicenseGroupRequest) *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call {
	_c.Call.Return(apiRemoveLicenseFromLicenseGroupRequest)
	return _c
}

func (_c *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call) RunAndReturn(run func(ctx context.Context, uuid string, licenseUuid string) client.ApiRemoveLicenseFromLicenseGroupRequest) *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveLicenseFromLicenseGroupExecute provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) RemoveLicenseFromLicenseGroupExecute(r client.ApiRemoveLicenseFromLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveLicenseFromLicenseGroupExecute")
	}

	var r0 *client.LicenseGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveLicenseFromLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveLicenseFromLicenseGroupRequest) *client.LicenseGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LicenseGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRemoveLicenseFromLicenseGroupRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRemoveLicenseFromLicenseGroupRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveLicenseFromLicenseGroupExecute'
type MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call struct {
	*mock.Call
}

// RemoveLicenseFromLicenseGroupExecute is a helper method to define mock.On call
//   - r client.ApiRemoveLicenseFromLicenseGroupRequest
func (_e *MockLicenseGroupAPI_Expecter) RemoveLicenseFromLicenseGroupExecute(r interface{}) *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call {
	return &MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call{Call: _e.mock.On("RemoveLicenseFromLicenseGroupExecute", r)}
}

func (_c *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call) Run(run func(r client.ApiRemoveLicenseFromLicenseGroupRequest)) *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRemoveLicenseFromLicenseGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRemoveLicenseFromLicenseGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call) Return(licenseGroup *client.LicenseGroup, response *http.Response, err error) *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call {
	_c.Call.Return(licenseGroup, response, err)
	return _c
}

func (_c *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call) RunAndReturn(run func(r client.ApiRemoveLicenseFromLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)) *MockLicenseGroupAPI_RemoveLicenseFromLicenseGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLicenseGroup provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) UpdateLicenseGroup(ctx context.Context) client.ApiUpdateLicenseGroupRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicenseGroup")
	}

	var r0 client.ApiUpdateLicenseGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateLicenseGroupRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateLicenseGroupRequest)
	}
	return r0
}

// MockLicenseGroupAPI_UpdateLicenseGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLicenseGroup'
type MockLicenseGroupAPI_UpdateLicenseGroup_Call struct {
	*mock.Call
}

// UpdateLicenseGroup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseGroupAPI_Expecter) UpdateLicenseGroup(ctx interface{}) *MockLicenseGroupAPI_UpdateLicenseGroup_Call {
	return &MockLicenseGroupAPI_UpdateLicenseGroup_Call{Call: _e.mock.On("UpdateLicenseGroup", ctx)}
}

func (_c *MockLicenseGroupAPI_UpdateLicenseGroup_Call) Run(run func(ctx context.Context)) *MockLicenseGroupAPI_UpdateLicenseGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_UpdateLicenseGroup_Call) Return(apiUpdateLicenseGroupRequest client.ApiUpdateLicenseGroupRequest) *MockLicenseGroupAPI_UpdateLicenseGroup_Call {
	_c.Call.Return(apiUpdateLicenseGroupRequest)
	return _c
}

func (_c *MockLicenseGroupAPI_UpdateLicenseGroup_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateLicenseGroupRequest) *MockLicenseGroupAPI_UpdateLicenseGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLicenseGroupExecute provides a mock function for the type MockLicenseGroupAPI
func (_mock *MockLicenseGroupAPI) UpdateLicenseGroupExecute(r client.ApiUpdateLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLicenseGroupExecute")
	}

	var r0 *client.LicenseGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateLicenseGroupRequest) *client.LicenseGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LicenseGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateLicenseGroupRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateLicenseGroupRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLicenseGroupExecute'
type MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call struct {
	*mock.Call
}

// UpdateLicenseGroupExecute is a helper method to define mock.On call
//   - r client.ApiUpdateLicenseGroupRequest
func (_e *MockLicenseGroupAPI_Expecter) UpdateLicenseGroupExecute(r interface{}) *MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call {
	return &MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call{Call: _e.mock.On("UpdateLicenseGroupExecute", r)}
}

func (_c *MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call) Run(run func(r client.ApiUpdateLicenseGroupRequest)) *MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateLicenseGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateLicenseGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call) Return(licenseGroup *client.LicenseGroup, response *http.Response, err error) *MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call {
	_c.Call.Return(licenseGroup, response, err)
	return _c
}

func (_c *MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call) RunAndReturn(run func(r client.ApiUpdateLicenseGroupRequest) (*client.LicenseGroup, *http.Response, error)) *MockLicenseGroupAPI_UpdateLicenseGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricsAPI creates a new instance of MockMetricsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsAPI {
	mock := &MockMetricsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMetricsAPI is an autogenerated mock type for the MetricsAPI type
type MockMetricsAPI struct {
	mock.Mock
}

type MockMetricsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsAPI) EXPECT() *MockMetricsAPI_Expecter {
	return &MockMetricsAPI_Expecter{mock: &_m.Mock}
}

// GetComponentCurrentMetrics provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetComponentCurrentMetrics(ctx context.Context, uuid string) client.ApiGetComponentCurrentMetricsRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentCurrentMetrics")
	}

	var r0 client.ApiGetComponentCurrentMetricsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetComponentCurrentMetricsRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetComponentCurrentMetricsRequest)
	}
	return r0
}

// MockMetricsAPI_GetComponentCurrentMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentCurrentMetrics'
type MockMetricsAPI_GetComponentCurrentMetrics_Call struct {
	*mock.Call
}

// GetComponentCurrentMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockMetricsAPI_Expecter) GetComponentCurrentMetrics(ctx interface{}, uuid interface{}) *MockMetricsAPI_GetComponentCurrentMetrics_Call {
	return &MockMetricsAPI_GetComponentCurrentMetrics_Call{Call: _e.mock.On("GetComponentCurrentMetrics", ctx, uuid)}
}

func (_c *MockMetricsAPI_GetComponentCurrentMetrics_Call) Run(run func(ctx context.Context, uuid string)) *MockMetricsAPI_GetComponentCurrentMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentCurrentMetrics_Call) Return(apiGetComponentCurrentMetricsRequest client.ApiGetComponentCurrentMetricsRequest) *MockMetricsAPI_GetComponentCurrentMetrics_Call {
	_c.Call.Return(apiGetComponentCurrentMetricsRequest)
	return _c
}

func (_c *MockMetricsAPI_GetComponentCurrentMetrics_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetComponentCurrentMetricsRequest) *MockMetricsAPI_GetComponentCurrentMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentCurrentMetricsExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetComponentCurrentMetricsExecute(r client.ApiGetComponentCurrentMetricsRequest) (*client.DependencyMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentCurrentMetricsExecute")
	}

	var r0 *client.DependencyMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentCurrentMetricsRequest) (*client.DependencyMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentCurrentMetricsRequest) *client.DependencyMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.DependencyMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetComponentCurrentMetricsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetComponentCurrentMetricsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetComponentCurrentMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentCurrentMetricsExecute'
type MockMetricsAPI_GetComponentCurrentMetricsExecute_Call struct {
	*mock.Call
}

// GetComponentCurrentMetricsExecute is a helper method to define mock.On call
//   - r client.ApiGetComponentCurrentMetricsRequest
func (_e *MockMetricsAPI_Expecter) GetComponentCurrentMetricsExecute(r interface{}) *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call {
	return &MockMetricsAPI_GetComponentCurrentMetricsExecute_Call{Call: _e.mock.On("GetComponentCurrentMetricsExecute", r)}
}

func (_c *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call) Run(run func(r client.ApiGetComponentCurrentMetricsRequest)) *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetComponentCurrentMetricsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetComponentCurrentMetricsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call) Return(dependencyMetrics *client.DependencyMetrics, response *http.Response, err error) *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call {
	_c.Call.Return(dependencyMetrics, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call) RunAndReturn(run func(r client.ApiGetComponentCurrentMetricsRequest) (*client.DependencyMetrics, *http.Response, error)) *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentMetricsSince provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetComponentMetricsSince(ctx context.Context, uuid string, date string) client.ApiGetComponentMetricsSinceRequest {
	ret := _mock.Called(ctx, uuid, date)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentMetricsSince")
	}

	var r0 client.ApiGetComponentMetricsSinceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetComponentMetricsSinceRequest); ok {
		r0 = returnFunc(ctx, uuid, date)
	} else {
		r0 = ret.Get(0).(client.ApiGetComponentMetricsSinceRequest)
	}
	return r0
}

// MockMetricsAPI_GetComponentMetricsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentMetricsSince'
type MockMetricsAPI_GetComponentMetricsSince_Call struct {
	*mock.Call
}

// GetComponentMetricsSince is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - date string
func (_e *MockMetricsAPI_Expecter) GetComponentMetricsSince(ctx interface{}, uuid interface{}, date interface{}) *MockMetricsAPI_GetComponentMetricsSince_Call {
	return &MockMetricsAPI_GetComponentMetricsSince_Call{Call: _e.mock.On("GetComponentMetricsSince", ctx, uuid, date)}
}

func (_c *MockMetricsAPI_GetComponentMetricsSince_Call) Run(run func(ctx context.Context, uuid string, date string)) *MockMetricsAPI_GetComponentMetricsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsSince_Call) Return(apiGetComponentMetricsSinceRequest client.ApiGetComponentMetricsSinceRequest) *MockMetricsAPI_GetComponentMetricsSince_Call {
	_c.Call.Return(apiGetComponentMetricsSinceRequest)
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsSince_Call) RunAndReturn(run func(ctx context.Context, uuid string, date string) client.ApiGetComponentMetricsSinceRequest) *MockMetricsAPI_GetComponentMetricsSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentMetricsSinceExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetComponentMetricsSinceExecute(r client.ApiGetComponentMetricsSinceRequest) ([]client.DependencyMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentMetricsSinceExecute")
	}

	var r0 []client.DependencyMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentMetricsSinceRequest) ([]client.DependencyMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentMetricsSinceRequest) []client.DependencyMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.DependencyMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetComponentMetricsSinceRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetComponentMetricsSinceRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetComponentMetricsSinceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentMetricsSinceExecute'
type MockMetricsAPI_GetComponentMetricsSinceExecute_Call struct {
	*mock.Call
}

// GetComponentMetricsSinceExecute is a helper method to define mock.On call
//   - r client.ApiGetComponentMetricsSinceRequest
func (_e *MockMetricsAPI_Expecter) GetComponentMetricsSinceExecute(r interface{}) *MockMetricsAPI_GetComponentMetricsSinceExecute_Call {
	return &MockMetricsAPI_GetComponentMetricsSinceExecute_Call{Call: _e.mock.On("GetComponentMetricsSinceExecute", r)}
}

func (_c *MockMetricsAPI_GetComponentMetricsSinceExecute_Call) Run(run func(r client.ApiGetComponentMetricsSinceRequest)) *MockMetricsAPI_GetComponentMetricsSinceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetComponentMetricsSinceRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetComponentMetricsSinceRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsSinceExecute_Call) Return(dependencyMetricss []client.DependencyMetrics, response *http.Response, err error) *MockMetricsAPI_GetComponentMetricsSinceExecute_Call {
	_c.Call.Return(dependencyMetricss, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsSinceExecute_Call) RunAndReturn(run func(r client.ApiGetComponentMetricsSinceRequest) ([]client.DependencyMetrics, *http.Response, error)) *MockMetricsAPI_GetComponentMetricsSinceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentMetricsXDays provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetComponentMetricsXDays(ctx context.Context, uuid string, days int32) client.ApiGetComponentMetricsXDaysRequest {
	ret := _mock.Called(ctx, uuid, days)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentMetricsXDays")
	}

	var r0 client.ApiGetComponentMetricsXDaysRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int32) client.ApiGetComponentMetricsXDaysRequest); ok {
		r0 = returnFunc(ctx, uuid, days)
	} else {
		r0 = ret.Get(0).(client.ApiGetComponentMetricsXDaysRequest)
	}
	return r0
}

// MockMetricsAPI_GetComponentMetricsXDays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentMetricsXDays'
type MockMetricsAPI_GetComponentMetricsXDays_Call struct {
	*mock.Call
}

// GetComponentMetricsXDays is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - days int32
func (_e *MockMetricsAPI_Expecter) GetComponentMetricsXDays(ctx interface{}, uuid interface{}, days interface{}) *MockMetricsAPI_GetComponentMetricsXDays_Call {
	return &MockMetricsAPI_GetComponentMetricsXDays_Call{Call: _e.mock.On("GetComponentMetricsXDays", ctx, uuid, days)}
}

func (_c *MockMetricsAPI_GetComponentMetricsXDays_Call) Run(run func(ctx context.Context, uuid string, days int32)) *MockMetricsAPI_GetComponentMetricsXDays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int32
		if args[2] != nil {
			arg2 = args[2].(int32)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsXDays_Call) Return(apiGetComponentMetricsXDaysRequest client.ApiGetComponentMetricsXDaysRequest) *MockMetricsAPI_GetComponentMetricsXDays_Call {
	_c.Call.Return(apiGetComponentMetricsXDaysRequest)
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsXDays_Call) RunAndReturn(run func(ctx context.Context, uuid string, days int32) client.ApiGetComponentMetricsXDaysRequest) *MockMetricsAPI_GetComponentMetricsXDays_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentMetricsXDaysExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetComponentMetricsXDaysExecute(r client.ApiGetComponentMetricsXDaysRequest) ([]client.DependencyMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentMetricsXDaysExecute")
	}

	var r0 []client.DependencyMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentMetricsXDaysRequest) ([]client.DependencyMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetComponentMetricsXDaysRequest) []client.DependencyMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.DependencyMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetComponentMetricsXDaysRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetComponentMetricsXDaysRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetComponentMetricsXDaysExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentMetricsXDaysExecute'
type MockMetricsAPI_GetComponentMetricsXDaysExecute_Call struct {
	*mock.Call
}

// GetComponentMetricsXDaysExecute is a helper method to define mock.On call
//   - r client.ApiGetComponentMetricsXDaysRequest
func (_e *MockMetricsAPI_Expecter) GetComponentMetricsXDaysExecute(r interface{}) *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call {
	return &MockMetricsAPI_GetComponentMetricsXDaysExecute_Call{Call: _e.mock.On("GetComponentMetricsXDaysExecute", r)}
}

func (_c *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call) Run(run func(r client.ApiGetComponentMetricsXDaysRequest)) *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetComponentMetricsXDaysRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetComponentMetricsXDaysRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call) Return(dependencyMetricss []client.DependencyMetrics, response *http.Response, err error) *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call {
	_c.Call.Return(dependencyMetricss, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call) RunAndReturn(run func(r client.ApiGetComponentMetricsXDaysRequest) ([]client.DependencyMetrics, *http.Response, error)) *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioCurrentMetrics provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetPortfolioCurrentMetrics(ctx context.Context) client.ApiGetPortfolioCurrentMetricsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioCurrentMetrics")
	}

	var r0 client.ApiGetPortfolioCurrentMetricsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetPortfolioCurrentMetricsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetPortfolioCurrentMetricsRequest)
	}
	return r0
}

// MockMetricsAPI_GetPortfolioCurrentMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioCurrentMetrics'
type MockMetricsAPI_GetPortfolioCurrentMetrics_Call struct {
	*mock.Call
}

// GetPortfolioCurrentMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsAPI_Expecter) GetPortfolioCurrentMetrics(ctx interface{}) *MockMetricsAPI_GetPortfolioCurrentMetrics_Call {
	return &MockMetricsAPI_GetPortfolioCurrentMetrics_Call{Call: _e.mock.On("GetPortfolioCurrentMetrics", ctx)}
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetrics_Call) Run(run func(ctx context.Context)) *MockMetricsAPI_GetPortfolioCurrentMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetrics_Call) Return(apiGetPortfolioCurrentMetricsRequest client.ApiGetPortfolioCurrentMetricsRequest) *MockMetricsAPI_GetPortfolioCurrentMetrics_Call {
	_c.Call.Return(apiGetPortfolioCurrentMetricsRequest)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetrics_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetPortfolioCurrentMetricsRequest) *MockMetricsAPI_GetPortfolioCurrentMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioCurrentMetricsExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetPortfolioCurrentMetricsExecute(r client.ApiGetPortfolioCurrentMetricsRequest) (*client.PortfolioMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioCurrentMetricsExecute")
	}

	var r0 *client.PortfolioMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPortfolioCurrentMetricsRequest) (*client.PortfolioMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPortfolioCurrentMetricsRequest) *client.PortfolioMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PortfolioMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetPortfolioCurrentMetricsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetPortfolioCurrentMetricsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioCurrentMetricsExecute'
type MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call struct {
	*mock.Call
}

// GetPortfolioCurrentMetricsExecute is a helper method to define mock.On call
//   - r client.ApiGetPortfolioCurrentMetricsRequest
func (_e *MockMetricsAPI_Expecter) GetPortfolioCurrentMetricsExecute(r interface{}) *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call {
	return &MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call{Call: _e.mock.On("GetPortfolioCurrentMetricsExecute", r)}
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call) Run(run func(r client.ApiGetPortfolioCurrentMetricsRequest)) *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetPortfolioCurrentMetricsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetPortfolioCurrentMetricsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call) Return(portfolioMetrics *client.PortfolioMetrics, response *http.Response, err error) *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call {
	_c.Call.Return(portfolioMetrics, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call) RunAndReturn(run func(r client.ApiGetPortfolioCurrentMetricsRequest) (*client.PortfolioMetrics, *http.Response, error)) *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioMetricsSince provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetPortfolioMetricsSince(ctx context.Context, date string) client.ApiGetPortfolioMetricsSinceRequest {
	ret := _mock.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioMetricsSince")
	}

	var r0 client.ApiGetPortfolioMetricsSinceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetPortfolioMetricsSinceRequest); ok {
		r0 = returnFunc(ctx, date)
	} else {
		r0 = ret.Get(0).(client.ApiGetPortfolioMetricsSinceRequest)
	}
	return r0
}

// MockMetricsAPI_GetPortfolioMetricsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioMetricsSince'
type MockMetricsAPI_GetPortfolioMetricsSince_Call struct {
	*mock.Call
}

// GetPortfolioMetricsSince is a helper method to define mock.On call
//   - ctx context.Context
//   - date string
func (_e *MockMetricsAPI_Expecter) GetPortfolioMetricsSince(ctx interface{}, date interface{}) *MockMetricsAPI_GetPortfolioMetricsSince_Call {
	return &MockMetricsAPI_GetPortfolioMetricsSince_Call{Call: _e.mock.On("GetPortfolioMetricsSince", ctx, date)}
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSince_Call) Run(run func(ctx context.Context, date string)) *MockMetricsAPI_GetPortfolioMetricsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSince_Call) Return(apiGetPortfolioMetricsSinceRequest client.ApiGetPortfolioMetricsSinceRequest) *MockMetricsAPI_GetPortfolioMetricsSince_Call {
	_c.Call.Return(apiGetPortfolioMetricsSinceRequest)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSince_Call) RunAndReturn(run func(ctx context.Context, date string) client.ApiGetPortfolioMetricsSinceRequest) *MockMetricsAPI_GetPortfolioMetricsSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioMetricsSinceExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetPortfolioMetricsSinceExecute(r client.ApiGetPortfolioMetricsSinceRequest) ([]client.PortfolioMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioMetricsSinceExecute")
	}

	var r0 []client.PortfolioMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPortfolioMetricsSinceRequest) ([]client.PortfolioMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPortfolioMetricsSinceRequest) []client.PortfolioMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PortfolioMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetPortfolioMetricsSinceRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetPortfolioMetricsSinceRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioMetricsSinceExecute'
type MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call struct {
	*mock.Call
}

// GetPortfolioMetricsSinceExecute is a helper method to define mock.On call
//   - r client.ApiGetPortfolioMetricsSinceRequest
func (_e *MockMetricsAPI_Expecter) GetPortfolioMetricsSinceExecute(r interface{}) *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call {
	return &MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call{Call: _e.mock.On("GetPortfolioMetricsSinceExecute", r)}
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call) Run(run func(r client.ApiGetPortfolioMetricsSinceRequest)) *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetPortfolioMetricsSinceRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetPortfolioMetricsSinceRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call) Return(portfolioMetricss []client.PortfolioMetrics, response *http.Response, err error) *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call {
	_c.Call.Return(portfolioMetricss, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call) RunAndReturn(run func(r client.ApiGetPortfolioMetricsSinceRequest) ([]client.PortfolioMetrics, *http.Response, error)) *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioMetricsXDays provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetPortfolioMetricsXDays(ctx context.Context, days int32) client.ApiGetPortfolioMetricsXDaysRequest {
	ret := _mock.Called(ctx, days)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioMetricsXDays")
	}

	var r0 client.ApiGetPortfolioMetricsXDaysRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, int32) client.ApiGetPortfolioMetricsXDaysRequest); ok {
		r0 = returnFunc(ctx, days)
	} else {
		r0 = ret.Get(0).(client.ApiGetPortfolioMetricsXDaysRequest)
	}
	return r0
}

// MockMetricsAPI_GetPortfolioMetricsXDays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioMetricsXDays'
type MockMetricsAPI_GetPortfolioMetricsXDays_Call struct {
	*mock.Call
}

// GetPortfolioMetricsXDays is a helper method to define mock.On call
//   - ctx context.Context
//   - days int32
func (_e *MockMetricsAPI_Expecter) GetPortfolioMetricsXDays(ctx interface{}, days interface{}) *MockMetricsAPI_GetPortfolioMetricsXDays_Call {
	return &MockMetricsAPI_GetPortfolioMetricsXDays_Call{Call: _e.mock.On("GetPortfolioMetricsXDays", ctx, days)}
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDays_Call) Run(run func(ctx context.Context, days int32)) *MockMetricsAPI_GetPortfolioMetricsXDays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int32
		if args[1] != nil {
			arg1 = args[1].(int32)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDays_Call) Return(apiGetPortfolioMetricsXDaysRequest client.ApiGetPortfolioMetricsXDaysRequest) *MockMetricsAPI_GetPortfolioMetricsXDays_Call {
	_c.Call.Return(apiGetPortfolioMetricsXDaysRequest)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDays_Call) RunAndReturn(run func(ctx context.Context, days int32) client.ApiGetPortfolioMetricsXDaysRequest) *MockMetricsAPI_GetPortfolioMetricsXDays_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioMetricsXDaysExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetPortfolioMetricsXDaysExecute(r client.ApiGetPortfolioMetricsXDaysRequest) ([]client.PortfolioMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioMetricsXDaysExecute")
	}

	var r0 []client.PortfolioMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPortfolioMetricsXDaysRequest) ([]client.PortfolioMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPortfolioMetricsXDaysRequest) []client.PortfolioMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PortfolioMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetPortfolioMetricsXDaysRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetPortfolioMetricsXDaysRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioMetricsXDaysExecute'
type MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call struct {
	*mock.Call
}

// GetPortfolioMetricsXDaysExecute is a helper method to define mock.On call
//   - r client.ApiGetPortfolioMetricsXDaysRequest
func (_e *MockMetricsAPI_Expecter) GetPortfolioMetricsXDaysExecute(r interface{}) *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call {
	return &MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call{Call: _e.mock.On("GetPortfolioMetricsXDaysExecute", r)}
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call) Run(run func(r client.ApiGetPortfolioMetricsXDaysRequest)) *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetPortfolioMetricsXDaysRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetPortfolioMetricsXDaysRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call) Return(portfolioMetricss []client.PortfolioMetrics, response *http.Response, err error) *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call {
	_c.Call.Return(portfolioMetricss, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call) RunAndReturn(run func(r client.ApiGetPortfolioMetricsXDaysRequest) ([]client.PortfolioMetrics, *http.Response, error)) *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectCurrentMetrics provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetProjectCurrentMetrics(ctx context.Context, uuid string) client.ApiGetProjectCurrentMetricsRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectCurrentMetrics")
	}

	var r0 client.ApiGetProjectCurrentMetricsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetProjectCurrentMetricsRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectCurrentMetricsRequest)
	}
	return r0
}

// MockMetricsAPI_GetProjectCurrentMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectCurrentMetrics'
type MockMetricsAPI_GetProjectCurrentMetrics_Call struct {
	*mock.Call
}

// GetProjectCurrentMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockMetricsAPI_Expecter) GetProjectCurrentMetrics(ctx interface{}, uuid interface{}) *MockMetricsAPI_GetProjectCurrentMetrics_Call {
	return &MockMetricsAPI_GetProjectCurrentMetrics_Call{Call: _e.mock.On("GetProjectCurrentMetrics", ctx, uuid)}
}

func (_c *MockMetricsAPI_GetProjectCurrentMetrics_Call) Run(run func(ctx context.Context, uuid string)) *MockMetricsAPI_GetProjectCurrentMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectCurrentMetrics_Call) Return(apiGetProjectCurrentMetricsRequest client.ApiGetProjectCurrentMetricsRequest) *MockMetricsAPI_GetProjectCurrentMetrics_Call {
	_c.Call.Return(apiGetProjectCurrentMetricsRequest)
	return _c
}

func (_c *MockMetricsAPI_GetProjectCurrentMetrics_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetProjectCurrentMetricsRequest) *MockMetricsAPI_GetProjectCurrentMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectCurrentMetricsExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetProjectCurrentMetricsExecute(r client.ApiGetProjectCurrentMetricsRequest) (*client.ProjectMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectCurrentMetricsExecute")
	}

	var r0 *client.ProjectMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectCurrentMetricsRequest) (*client.ProjectMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectCurrentMetricsRequest) *client.ProjectMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ProjectMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectCurrentMetricsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectCurrentMetricsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetProjectCurrentMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectCurrentMetricsExecute'
type MockMetricsAPI_GetProjectCurrentMetricsExecute_Call struct {
	*mock.Call
}

// GetProjectCurrentMetricsExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectCurrentMetricsRequest
func (_e *MockMetricsAPI_Expecter) GetProjectCurrentMetricsExecute(r interface{}) *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call {
	return &MockMetricsAPI_GetProjectCurrentMetricsExecute_Call{Call: _e.mock.On("GetProjectCurrentMetricsExecute", r)}
}

func (_c *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call) Run(run func(r client.ApiGetProjectCurrentMetricsRequest)) *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectCurrentMetricsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectCurrentMetricsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call) Return(projectMetrics *client.ProjectMetrics, response *http.Response, err error) *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call {
	_c.Call.Return(projectMetrics, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call) RunAndReturn(run func(r client.ApiGetProjectCurrentMetricsRequest) (*client.ProjectMetrics, *http.Response, error)) *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsSince provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetProjectMetricsSince(ctx context.Context, uuid string, date string) client.ApiGetProjectMetricsSinceRequest {
	ret := _mock.Called(ctx, uuid, date)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsSince")
	}

	var r0 client.ApiGetProjectMetricsSinceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetProjectMetricsSinceRequest); ok {
		r0 = returnFunc(ctx, uuid, date)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectMetricsSinceRequest)
	}
	return r0
}

// MockMetricsAPI_GetProjectMetricsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsSince'
type MockMetricsAPI_GetProjectMetricsSince_Call struct {
	*mock.Call
}

// GetProjectMetricsSince is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - date string
func (_e *MockMetricsAPI_Expecter) GetProjectMetricsSince(ctx interface{}, uuid interface{}, date interface{}) *MockMetricsAPI_GetProjectMetricsSince_Call {
	return &MockMetricsAPI_GetProjectMetricsSince_Call{Call: _e.mock.On("GetProjectMetricsSince", ctx, uuid, date)}
}

func (_c *MockMetricsAPI_GetProjectMetricsSince_Call) Run(run func(ctx context.Context, uuid string, date string)) *MockMetricsAPI_GetProjectMetricsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsSince_Call) Return(apiGetProjectMetricsSinceRequest client.ApiGetProjectMetricsSinceRequest) *MockMetricsAPI_GetProjectMetricsSince_Call {
	_c.Call.Return(apiGetProjectMetricsSinceRequest)
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsSince_Call) RunAndReturn(run func(ctx context.Context, uuid string, date string) client.ApiGetProjectMetricsSinceRequest) *MockMetricsAPI_GetProjectMetricsSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsSinceExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetProjectMetricsSinceExecute(r client.ApiGetProjectMetricsSinceRequest) ([]client.ProjectMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsSinceExecute")
	}

	var r0 []client.ProjectMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectMetricsSinceRequest) ([]client.ProjectMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectMetricsSinceRequest) []client.ProjectMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ProjectMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectMetricsSinceRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectMetricsSinceRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetProjectMetricsSinceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsSinceExecute'
type MockMetricsAPI_GetProjectMetricsSinceExecute_Call struct {
	*mock.Call
}

// GetProjectMetricsSinceExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectMetricsSinceRequest
func (_e *MockMetricsAPI_Expecter) GetProjectMetricsSinceExecute(r interface{}) *MockMetricsAPI_GetProjectMetricsSinceExecute_Call {
	return &MockMetricsAPI_GetProjectMetricsSinceExecute_Call{Call: _e.mock.On("GetProjectMetricsSinceExecute", r)}
}

func (_c *MockMetricsAPI_GetProjectMetricsSinceExecute_Call) Run(run func(r client.ApiGetProjectMetricsSinceRequest)) *MockMetricsAPI_GetProjectMetricsSinceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectMetricsSinceRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectMetricsSinceRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsSinceExecute_Call) Return(projectMetricss []client.ProjectMetrics, response *http.Response, err error) *MockMetricsAPI_GetProjectMetricsSinceExecute_Call {
	_c.Call.Return(projectMetricss, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsSinceExecute_Call) RunAndReturn(run func(r client.ApiGetProjectMetricsSinceRequest) ([]client.ProjectMetrics, *http.Response, error)) *MockMetricsAPI_GetProjectMetricsSinceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsXDays provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetProjectMetricsXDays(ctx context.Context, uuid string, days int32) client.ApiGetProjectMetricsXDaysRequest {
	ret := _mock.Called(ctx, uuid, days)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsXDays")
	}

	var r0 client.ApiGetProjectMetricsXDaysRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int32) client.ApiGetProjectMetricsXDaysRequest); ok {
		r0 = returnFunc(ctx, uuid, days)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectMetricsXDaysRequest)
	}
	return r0
}

// MockMetricsAPI_GetProjectMetricsXDays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsXDays'
type MockMetricsAPI_GetProjectMetricsXDays_Call struct {
	*mock.Call
}

// GetProjectMetricsXDays is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - days int32
func (_e *MockMetricsAPI_Expecter) GetProjectMetricsXDays(ctx interface{}, uuid interface{}, days interface{}) *MockMetricsAPI_GetProjectMetricsXDays_Call {
	return &MockMetricsAPI_GetProjectMetricsXDays_Call{Call: _e.mock.On("GetProjectMetricsXDays", ctx, uuid, days)}
}

func (_c *MockMetricsAPI_GetProjectMetricsXDays_Call) Run(run func(ctx context.Context, uuid string, days int32)) *MockMetricsAPI_GetProjectMetricsXDays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int32
		if args[2] != nil {
			arg2 = args[2].(int32)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsXDays_Call) Return(apiGetProjectMetricsXDaysRequest client.ApiGetProjectMetricsXDaysRequest) *MockMetricsAPI_GetProjectMetricsXDays_Call {
	_c.Call.Return(apiGetProjectMetricsXDaysRequest)
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsXDays_Call) RunAndReturn(run func(ctx context.Context, uuid string, days int32) client.ApiGetProjectMetricsXDaysRequest) *MockMetricsAPI_GetProjectMetricsXDays_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsXDaysExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetProjectMetricsXDaysExecute(r client.ApiGetProjectMetricsXDaysRequest) ([]client.ProjectMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsXDaysExecute")
	}

	var r0 []client.ProjectMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectMetricsXDaysRequest) ([]client.ProjectMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectMetricsXDaysRequest) []client.ProjectMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ProjectMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectMetricsXDaysRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectMetricsXDaysRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetProjectMetricsXDaysExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsXDaysExecute'
type MockMetricsAPI_GetProjectMetricsXDaysExecute_Call struct {
	*mock.Call
}

// GetProjectMetricsXDaysExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectMetricsXDaysRequest
func (_e *MockMetricsAPI_Expecter) GetProjectMetricsXDaysExecute(r interface{}) *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call {
	return &MockMetricsAPI_GetProjectMetricsXDaysExecute_Call{Call: _e.mock.On("GetProjectMetricsXDaysExecute", r)}
}

func (_c *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call) Run(run func(r client.ApiGetProjectMetricsXDaysRequest)) *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectMetricsXDaysRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectMetricsXDaysRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call) Return(projectMetricss []client.ProjectMetrics, response *http.Response, err error) *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call {
	_c.Call.Return(projectMetricss, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call) RunAndReturn(run func(r client.ApiGetProjectMetricsXDaysRequest) ([]client.ProjectMetrics, *http.Response, error)) *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityMetrics provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetVulnerabilityMetrics(ctx context.Context) client.ApiGetVulnerabilityMetricsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityMetrics")
	}

	var r0 client.ApiGetVulnerabilityMetricsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetVulnerabilityMetricsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetVulnerabilityMetricsRequest)
	}
	return r0
}

// MockMetricsAPI_GetVulnerabilityMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityMetrics'
type MockMetricsAPI_GetVulnerabilityMetrics_Call struct {
	*mock.Call
}

// GetVulnerabilityMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsAPI_Expecter) GetVulnerabilityMetrics(ctx interface{}) *MockMetricsAPI_GetVulnerabilityMetrics_Call {
	return &MockMetricsAPI_GetVulnerabilityMetrics_Call{Call: _e.mock.On("GetVulnerabilityMetrics", ctx)}
}

func (_c *MockMetricsAPI_GetVulnerabilityMetrics_Call) Run(run func(ctx context.Context)) *MockMetricsAPI_GetVulnerabilityMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetVulnerabilityMetrics_Call) Return(apiGetVulnerabilityMetricsRequest client.ApiGetVulnerabilityMetricsRequest) *MockMetricsAPI_GetVulnerabilityMetrics_Call {
	_c.Call.Return(apiGetVulnerabilityMetricsRequest)
	return _c
}

func (_c *MockMetricsAPI_GetVulnerabilityMetrics_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetVulnerabilityMetricsRequest) *MockMetricsAPI_GetVulnerabilityMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityMetricsExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) GetVulnerabilityMetricsExecute(r client.ApiGetVulnerabilityMetricsRequest) ([]client.VulnerabilityMetrics, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityMetricsExecute")
	}

	var r0 []client.VulnerabilityMetrics
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilityMetricsRequest) ([]client.VulnerabilityMetrics, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilityMetricsRequest) []client.VulnerabilityMetrics); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.VulnerabilityMetrics)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetVulnerabilityMetricsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetVulnerabilityMetricsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockMetricsAPI_GetVulnerabilityMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityMetricsExecute'
type MockMetricsAPI_GetVulnerabilityMetricsExecute_Call struct {
	*mock.Call
}

// GetVulnerabilityMetricsExecute is a helper method to define mock.On call
//   - r client.ApiGetVulnerabilityMetricsRequest
func (_e *MockMetricsAPI_Expecter) GetVulnerabilityMetricsExecute(r interface{}) *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call {
	return &MockMetricsAPI_GetVulnerabilityMetricsExecute_Call{Call: _e.mock.On("GetVulnerabilityMetricsExecute", r)}
}

func (_c *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call) Run(run func(r client.ApiGetVulnerabilityMetricsRequest)) *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetVulnerabilityMetricsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetVulnerabilityMetricsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call) Return(vulnerabilityMetricss []client.VulnerabilityMetrics, response *http.Response, err error) *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call {
	_c.Call.Return(vulnerabilityMetricss, response, err)
	return _c
}

func (_c *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call) RunAndReturn(run func(r client.ApiGetVulnerabilityMetricsRequest) ([]client.VulnerabilityMetrics, *http.Response, error)) *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshComponentMetrics provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) RefreshComponentMetrics(ctx context.Context, uuid string) client.ApiRefreshComponentMetricsRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RefreshComponentMetrics")
	}

	var r0 client.ApiRefreshComponentMetricsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiRefreshComponentMetricsRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiRefreshComponentMetricsRequest)
	}
	return r0
}

// MockMetricsAPI_RefreshComponentMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshComponentMetrics'
type MockMetricsAPI_RefreshComponentMetrics_Call struct {
	*mock.Call
}

// RefreshComponentMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockMetricsAPI_Expecter) RefreshComponentMetrics(ctx interface{}, uuid interface{}) *MockMetricsAPI_RefreshComponentMetrics_Call {
	return &MockMetricsAPI_RefreshComponentMetrics_Call{Call: _e.mock.On("RefreshComponentMetrics", ctx, uuid)}
}

func (_c *MockMetricsAPI_RefreshComponentMetrics_Call) Run(run func(ctx context.Context, uuid string)) *MockMetricsAPI_RefreshComponentMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshComponentMetrics_Call) Return(apiRefreshComponentMetricsRequest client.ApiRefreshComponentMetricsRequest) *MockMetricsAPI_RefreshComponentMetrics_Call {
	_c.Call.Return(apiRefreshComponentMetricsRequest)
	return _c
}

func (_c *MockMetricsAPI_RefreshComponentMetrics_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiRefreshComponentMetricsRequest) *MockMetricsAPI_RefreshComponentMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshComponentMetricsExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) RefreshComponentMetricsExecute(r client.ApiRefreshComponentMetricsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RefreshComponentMetricsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRefreshComponentMetricsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRefreshComponentMetricsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRefreshComponentMetricsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsAPI_RefreshComponentMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshComponentMetricsExecute'
type MockMetricsAPI_RefreshComponentMetricsExecute_Call struct {
	*mock.Call
}

// RefreshComponentMetricsExecute is a helper method to define mock.On call
//   - r client.ApiRefreshComponentMetricsRequest
func (_e *MockMetricsAPI_Expecter) RefreshComponentMetricsExecute(r interface{}) *MockMetricsAPI_RefreshComponentMetricsExecute_Call {
	return &MockMetricsAPI_RefreshComponentMetricsExecute_Call{Call: _e.mock.On("RefreshComponentMetricsExecute", r)}
}

func (_c *MockMetricsAPI_RefreshComponentMetricsExecute_Call) Run(run func(r client.ApiRefreshComponentMetricsRequest)) *MockMetricsAPI_RefreshComponentMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRefreshComponentMetricsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRefreshComponentMetricsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshComponentMetricsExecute_Call) Return(response *http.Response, err error) *MockMetricsAPI_RefreshComponentMetricsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockMetricsAPI_RefreshComponentMetricsExecute_Call) RunAndReturn(run func(r client.ApiRefreshComponentMetricsRequest) (*http.Response, error)) *MockMetricsAPI_RefreshComponentMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshPortfolioMetrics provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) RefreshPortfolioMetrics(ctx context.Context) client.ApiRefreshPortfolioMetricsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshPortfolioMetrics")
	}

	var r0 client.ApiRefreshPortfolioMetricsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiRefreshPortfolioMetricsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiRefreshPortfolioMetricsRequest)
	}
	return r0
}

// MockMetricsAPI_RefreshPortfolioMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshPortfolioMetrics'
type MockMetricsAPI_RefreshPortfolioMetrics_Call struct {
	*mock.Call
}

// RefreshPortfolioMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsAPI_Expecter) RefreshPortfolioMetrics(ctx interface{}) *MockMetricsAPI_RefreshPortfolioMetrics_Call {
	return &MockMetricsAPI_RefreshPortfolioMetrics_Call{Call: _e.mock.On("RefreshPortfolioMetrics", ctx)}
}

func (_c *MockMetricsAPI_RefreshPortfolioMetrics_Call) Run(run func(ctx context.Context)) *MockMetricsAPI_RefreshPortfolioMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshPortfolioMetrics_Call) Return(apiRefreshPortfolioMetricsRequest client.ApiRefreshPortfolioMetricsRequest) *MockMetricsAPI_RefreshPortfolioMetrics_Call {
	_c.Call.Return(apiRefreshPortfolioMetricsRequest)
	return _c
}

func (_c *MockMetricsAPI_RefreshPortfolioMetrics_Call) RunAndReturn(run func(ctx context.Context) client.ApiRefreshPortfolioMetricsRequest) *MockMetricsAPI_RefreshPortfolioMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshPortfolioMetricsExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) RefreshPortfolioMetricsExecute(r client.ApiRefreshPortfolioMetricsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RefreshPortfolioMetricsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRefreshPortfolioMetricsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRefreshPortfolioMetricsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRefreshPortfolioMetricsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsAPI_RefreshPortfolioMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshPortfolioMetricsExecute'
type MockMetricsAPI_RefreshPortfolioMetricsExecute_Call struct {
	*mock.Call
}

// RefreshPortfolioMetricsExecute is a helper method to define mock.On call
//   - r client.ApiRefreshPortfolioMetricsRequest
func (_e *MockMetricsAPI_Expecter) RefreshPortfolioMetricsExecute(r interface{}) *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call {
	return &MockMetricsAPI_RefreshPortfolioMetricsExecute_Call{Call: _e.mock.On("RefreshPortfolioMetricsExecute", r)}
}

func (_c *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call) Run(run func(r client.ApiRefreshPortfolioMetricsRequest)) *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRefreshPortfolioMetricsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRefreshPortfolioMetricsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call) Return(response *http.Response, err error) *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call) RunAndReturn(run func(r client.ApiRefreshPortfolioMetricsRequest) (*http.Response, error)) *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshProjectMetrics provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) RefreshProjectMetrics(ctx context.Context, uuid string) client.ApiRefreshProjectMetricsRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RefreshProjectMetrics")
	}

	var r0 client.ApiRefreshProjectMetricsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiRefreshProjectMetricsRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiRefreshProjectMetricsRequest)
	}
	return r0
}

// MockMetricsAPI_RefreshProjectMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshProjectMetrics'
type MockMetricsAPI_RefreshProjectMetrics_Call struct {
	*mock.Call
}

// RefreshProjectMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockMetricsAPI_Expecter) RefreshProjectMetrics(ctx interface{}, uuid interface{}) *MockMetricsAPI_RefreshProjectMetrics_Call {
	return &MockMetricsAPI_RefreshProjectMetrics_Call{Call: _e.mock.On("RefreshProjectMetrics", ctx, uuid)}
}

func (_c *MockMetricsAPI_RefreshProjectMetrics_Call) Run(run func(ctx context.Context, uuid string)) *MockMetricsAPI_RefreshProjectMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshProjectMetrics_Call) Return(apiRefreshProjectMetricsRequest client.ApiRefreshProjectMetricsRequest) *MockMetricsAPI_RefreshProjectMetrics_Call {
	_c.Call.Return(apiRefreshProjectMetricsRequest)
	return _c
}

func (_c *MockMetricsAPI_RefreshProjectMetrics_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiRefreshProjectMetricsRequest) *MockMetricsAPI_RefreshProjectMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshProjectMetricsExecute provides a mock function for the type MockMetricsAPI
func (_mock *MockMetricsAPI) RefreshProjectMetricsExecute(r client.ApiRefreshProjectMetricsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RefreshProjectMetricsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRefreshProjectMetricsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRefreshProjectMetricsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRefreshProjectMetricsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockMetricsAPI_RefreshProjectMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshProjectMetricsExecute'
type MockMetricsAPI_RefreshProjectMetricsExecute_Call struct {
	*mock.Call
}

// RefreshProjectMetricsExecute is a helper method to define mock.On call
//   - r client.ApiRefreshProjectMetricsRequest
func (_e *MockMetricsAPI_Expecter) RefreshProjectMetricsExecute(r interface{}) *MockMetricsAPI_RefreshProjectMetricsExecute_Call {
	return &MockMetricsAPI_RefreshProjectMetricsExecute_Call{Call: _e.mock.On("RefreshProjectMetricsExecute", r)}
}

func (_c *MockMetricsAPI_RefreshProjectMetricsExecute_Call) Run(run func(r client.ApiRefreshProjectMetricsRequest)) *MockMetricsAPI_RefreshProjectMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRefreshProjectMetricsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRefreshProjectMetricsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshProjectMetricsExecute_Call) Return(response *http.Response, err error) *MockMetricsAPI_RefreshProjectMetricsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockMetricsAPI_RefreshProjectMetricsExecute_Call) RunAndReturn(run func(r client.ApiRefreshProjectMetricsRequest) (*http.Response, error)) *MockMetricsAPI_RefreshProjectMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationAPI creates a new instance of MockNotificationAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationAPI {
	mock := &MockNotificationAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockNotificationAPI is an autogenerated mock type for the NotificationAPI type
type MockNotificationAPI struct {
	mock.Mock
}

type MockNotificationAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationAPI) EXPECT() *MockNotificationAPI_Expecter {
	return &MockNotificationAPI_Expecter{mock: &_m.Mock}
}

// AddProjectToRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) AddProjectToRule(ctx context.Context, ruleUuid string, projectUuid string) client.ApiAddProjectToRuleRequest {
	ret := _mock.Called(ctx, ruleUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToRule")
	}

	var r0 client.ApiAddProjectToRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiAddProjectToRuleRequest); ok {
		r0 = returnFunc(ctx, ruleUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(client.ApiAddProjectToRuleRequest)
	}
	return r0
}

// MockNotificationAPI_AddProjectToRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToRule'
type MockNotificationAPI_AddProjectToRule_Call struct {
	*mock.Call
}

// AddProjectToRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleUuid string
//   - projectUuid string
func (_e *MockNotificationAPI_Expecter) AddProjectToRule(ctx interface{}, ruleUuid interface{}, projectUuid interface{}) *MockNotificationAPI_AddProjectToRule_Call {
	return &MockNotificationAPI_AddProjectToRule_Call{Call: _e.mock.On("AddProjectToRule", ctx, ruleUuid, projectUuid)}
}

func (_c *MockNotificationAPI_AddProjectToRule_Call) Run(run func(ctx context.Context, ruleUuid string, projectUuid string)) *MockNotificationAPI_AddProjectToRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_AddProjectToRule_Call) Return(apiAddProjectToRuleRequest client.ApiAddProjectToRuleRequest) *MockNotificationAPI_AddProjectToRule_Call {
	_c.Call.Return(apiAddProjectToRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_AddProjectToRule_Call) RunAndReturn(run func(ctx context.Context, ruleUuid string, projectUuid string) client.ApiAddProjectToRuleRequest) *MockNotificationAPI_AddProjectToRule_Call {
	_c.Call.Return(run)
	return _c
}

// AddProjectToRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) AddProjectToRuleExecute(r client.ApiAddProjectToRuleRequest) (*client.NotificationRule, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToRuleExecute")
	}

	var r0 *client.NotificationRule
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddProjectToRuleRequest) (*client.NotificationRule, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddProjectToRuleRequest) *client.NotificationRule); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddProjectToRuleRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddProjectToRuleRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_AddProjectToRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToRuleExecute'
type MockNotificationAPI_AddProjectToRuleExecute_Call struct {
	*mock.Call
}

// AddProjectToRuleExecute is a helper method to define mock.On call
//   - r client.ApiAddProjectToRuleRequest
func (_e *MockNotificationAPI_Expecter) AddProjectToRuleExecute(r interface{}) *MockNotificationAPI_AddProjectToRuleExecute_Call {
	return &MockNotificationAPI_AddProjectToRuleExecute_Call{Call: _e.mock.On("AddProjectToRuleExecute", r)}
}

func (_c *MockNotificationAPI_AddProjectToRuleExecute_Call) Run(run func(r client.ApiAddProjectToRuleRequest)) *MockNotificationAPI_AddProjectToRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddProjectToRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddProjectToRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_AddProjectToRuleExecute_Call) Return(notificationRule *client.NotificationRule, response *http.Response, err error) *MockNotificationAPI_AddProjectToRuleExecute_Call {
	_c.Call.Return(notificationRule, response, err)
	return _c
}

func (_c *MockNotificationAPI_AddProjectToRuleExecute_Call) RunAndReturn(run func(r client.ApiAddProjectToRuleRequest) (*client.NotificationRule, *http.Response, error)) *MockNotificationAPI_AddProjectToRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamToRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) AddTeamToRule(ctx context.Context, ruleUuid string, teamUuid string) client.ApiAddTeamToRuleRequest {
	ret := _mock.Called(ctx, ruleUuid, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamToRule")
	}

	var r0 client.ApiAddTeamToRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiAddTeamToRuleRequest); ok {
		r0 = returnFunc(ctx, ruleUuid, teamUuid)
	} else {
		r0 = ret.Get(0).(client.ApiAddTeamToRuleRequest)
	}
	return r0
}

// MockNotificationAPI_AddTeamToRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamToRule'
type MockNotificationAPI_AddTeamToRule_Call struct {
	*mock.Call
}

// AddTeamToRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleUuid string
//   - teamUuid string
func (_e *MockNotificationAPI_Expecter) AddTeamToRule(ctx interface{}, ruleUuid interface{}, teamUuid interface{}) *MockNotificationAPI_AddTeamToRule_Call {
	return &MockNotificationAPI_AddTeamToRule_Call{Call: _e.mock.On("AddTeamToRule", ctx, ruleUuid, teamUuid)}
}

func (_c *MockNotificationAPI_AddTeamToRule_Call) Run(run func(ctx context.Context, ruleUuid string, teamUuid string)) *MockNotificationAPI_AddTeamToRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_AddTeamToRule_Call) Return(apiAddTeamToRuleRequest client.ApiAddTeamToRuleRequest) *MockNotificationAPI_AddTeamToRule_Call {
	_c.Call.Return(apiAddTeamToRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_AddTeamToRule_Call) RunAndReturn(run func(ctx context.Context, ruleUuid string, teamUuid string) client.ApiAddTeamToRuleRequest) *MockNotificationAPI_AddTeamToRule_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamToRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) AddTeamToRuleExecute(r client.ApiAddTeamToRuleRequest) (*client.NotificationRule, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamToRuleExecute")
	}

	var r0 *client.NotificationRule
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddTeamToRuleRequest) (*client.NotificationRule, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddTeamToRuleRequest) *client.NotificationRule); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddTeamToRuleRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddTeamToRuleRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_AddTeamToRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamToRuleExecute'
type MockNotificationAPI_AddTeamToRuleExecute_Call struct {
	*mock.Call
}

// AddTeamToRuleExecute is a helper method to define mock.On call
//   - r client.ApiAddTeamToRuleRequest
func (_e *MockNotificationAPI_Expecter) AddTeamToRuleExecute(r interface{}) *MockNotificationAPI_AddTeamToRuleExecute_Call {
	return &MockNotificationAPI_AddTeamToRuleExecute_Call{Call: _e.mock.On("AddTeamToRuleExecute", r)}
}

func (_c *MockNotificationAPI_AddTeamToRuleExecute_Call) Run(run func(r client.ApiAddTeamToRuleRequest)) *MockNotificationAPI_AddTeamToRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddTeamToRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddTeamToRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_AddTeamToRuleExecute_Call) Return(notificationRule *client.NotificationRule, response *http.Response, err error) *MockNotificationAPI_AddTeamToRuleExecute_Call {
	_c.Call.Return(notificationRule, response, err)
	return _c
}

func (_c *MockNotificationAPI_AddTeamToRuleExecute_Call) RunAndReturn(run func(r client.ApiAddTeamToRuleRequest) (*client.NotificationRule, *http.Response, error)) *MockNotificationAPI_AddTeamToRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationPublisher provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) CreateNotificationPublisher(ctx context.Context) client.ApiCreateNotificationPublisherRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationPublisher")
	}

	var r0 client.ApiCreateNotificationPublisherRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateNotificationPublisherRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateNotificationPublisherRequest)
	}
	return r0
}

// MockNotificationAPI_CreateNotificationPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationPublisher'
type MockNotificationAPI_CreateNotificationPublisher_Call struct {
	*mock.Call
}

// CreateNotificationPublisher is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) CreateNotificationPublisher(ctx interface{}) *MockNotificationAPI_CreateNotificationPublisher_Call {
	return &MockNotificationAPI_CreateNotificationPublisher_Call{Call: _e.mock.On("CreateNotificationPublisher", ctx)}
}

func (_c *MockNotificationAPI_CreateNotificationPublisher_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_CreateNotificationPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationPublisher_Call) Return(apiCreateNotificationPublisherRequest client.ApiCreateNotificationPublisherRequest) *MockNotificationAPI_CreateNotificationPublisher_Call {
	_c.Call.Return(apiCreateNotificationPublisherRequest)
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationPublisher_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateNotificationPublisherRequest) *MockNotificationAPI_CreateNotificationPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationPublisherExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) CreateNotificationPublisherExecute(r client.ApiCreateNotificationPublisherRequest) (*client.NotificationPublisher, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationPublisherExecute")
	}

	var r0 *client.NotificationPublisher
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateNotificationPublisherRequest) (*client.NotificationPublisher, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateNotificationPublisherRequest) *client.NotificationPublisher); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationPublisher)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateNotificationPublisherRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateNotificationPublisherRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_CreateNotificationPublisherExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationPublisherExecute'
type MockNotificationAPI_CreateNotificationPublisherExecute_Call struct {
	*mock.Call
}

// CreateNotificationPublisherExecute is a helper method to define mock.On call
//   - r client.ApiCreateNotificationPublisherRequest
func (_e *MockNotificationAPI_Expecter) CreateNotificationPublisherExecute(r interface{}) *MockNotificationAPI_CreateNotificationPublisherExecute_Call {
	return &MockNotificationAPI_CreateNotificationPublisherExecute_Call{Call: _e.mock.On("CreateNotificationPublisherExecute", r)}
}

func (_c *MockNotificationAPI_CreateNotificationPublisherExecute_Call) Run(run func(r client.ApiCreateNotificationPublisherRequest)) *MockNotificationAPI_CreateNotificationPublisherExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateNotificationPublisherRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateNotificationPublisherRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationPublisherExecute_Call) Return(notificationPublisher *client.NotificationPublisher, response *http.Response, err error) *MockNotificationAPI_CreateNotificationPublisherExecute_Call {
	_c.Call.Return(notificationPublisher, response, err)
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationPublisherExecute_Call) RunAndReturn(run func(r client.ApiCreateNotificationPublisherRequest) (*client.NotificationPublisher, *http.Response, error)) *MockNotificationAPI_CreateNotificationPublisherExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) CreateNotificationRule(ctx context.Context) client.ApiCreateNotificationRuleRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationRule")
	}

	var r0 client.ApiCreateNotificationRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateNotificationRuleRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateNotificationRuleRequest)
	}
	return r0
}

// MockNotificationAPI_CreateNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRule'
type MockNotificationAPI_CreateNotificationRule_Call struct {
	*mock.Call
}

// CreateNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) CreateNotificationRule(ctx interface{}) *MockNotificationAPI_CreateNotificationRule_Call {
	return &MockNotificationAPI_CreateNotificationRule_Call{Call: _e.mock.On("CreateNotificationRule", ctx)}
}

func (_c *MockNotificationAPI_CreateNotificationRule_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_CreateNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationRule_Call) Return(apiCreateNotificationRuleRequest client.ApiCreateNotificationRuleRequest) *MockNotificationAPI_CreateNotificationRule_Call {
	_c.Call.Return(apiCreateNotificationRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationRule_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateNotificationRuleRequest) *MockNotificationAPI_CreateNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) CreateNotificationRuleExecute(r client.ApiCreateNotificationRuleRequest) (*client.NotificationRule, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationRuleExecute")
	}

	var r0 *client.NotificationRule
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateNotificationRuleRequest) (*client.NotificationRule, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateNotificationRuleRequest) *client.NotificationRule); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateNotificationRuleRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateNotificationRuleRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_CreateNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRuleExecute'
type MockNotificationAPI_CreateNotificationRuleExecute_Call struct {
	*mock.Call
}

// CreateNotificationRuleExecute is a helper method to define mock.On call
//   - r client.ApiCreateNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) CreateNotificationRuleExecute(r interface{}) *MockNotificationAPI_CreateNotificationRuleExecute_Call {
	return &MockNotificationAPI_CreateNotificationRuleExecute_Call{Call: _e.mock.On("CreateNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_CreateNotificationRuleExecute_Call) Run(run func(r client.ApiCreateNotificationRuleRequest)) *MockNotificationAPI_CreateNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateNotificationRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateNotificationRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationRuleExecute_Call) Return(notificationRule *client.NotificationRule, response *http.Response, err error) *MockNotificationAPI_CreateNotificationRuleExecute_Call {
	_c.Call.Return(notificationRule, response, err)
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationRuleExecute_Call) RunAndReturn(run func(r client.ApiCreateNotificationRuleRequest) (*client.NotificationRule, *http.Response, error)) *MockNotificationAPI_CreateNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScheduledNotificationRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) CreateScheduledNotificationRule(ctx context.Context) client.ApiCreateScheduledNotificationRuleRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduledNotificationRule")
	}

	var r0 client.ApiCreateScheduledNotificationRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateScheduledNotificationRuleRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateScheduledNotificationRuleRequest)
	}
	return r0
}

// MockNotificationAPI_CreateScheduledNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScheduledNotificationRule'
type MockNotificationAPI_CreateScheduledNotificationRule_Call struct {
	*mock.Call
}

// CreateScheduledNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) CreateScheduledNotificationRule(ctx interface{}) *MockNotificationAPI_CreateScheduledNotificationRule_Call {
	return &MockNotificationAPI_CreateScheduledNotificationRule_Call{Call: _e.mock.On("CreateScheduledNotificationRule", ctx)}
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRule_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_CreateScheduledNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRule_Call) Return(apiCreateScheduledNotificationRuleRequest client.ApiCreateScheduledNotificationRuleRequest) *MockNotificationAPI_CreateScheduledNotificationRule_Call {
	_c.Call.Return(apiCreateScheduledNotificationRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRule_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateScheduledNotificationRuleRequest) *MockNotificationAPI_CreateScheduledNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScheduledNotificationRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) CreateScheduledNotificationRuleExecute(r client.ApiCreateScheduledNotificationRuleRequest) (*client.NotificationRule, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduledNotificationRuleExecute")
	}

	var r0 *client.NotificationRule
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateScheduledNotificationRuleRequest) (*client.NotificationRule, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateScheduledNotificationRuleRequest) *client.NotificationRule); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateScheduledNotificationRuleRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateScheduledNotificationRuleRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScheduledNotificationRuleExecute'
type MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call struct {
	*mock.Call
}

// CreateScheduledNotificationRuleExecute is a helper method to define mock.On call
//   - r client.ApiCreateScheduledNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) CreateScheduledNotificationRuleExecute(r interface{}) *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call {
	return &MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call{Call: _e.mock.On("CreateScheduledNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call) Run(run func(r client.ApiCreateScheduledNotificationRuleRequest)) *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateScheduledNotificationRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateScheduledNotificationRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call) Return(notificationRule *client.NotificationRule, response *http.Response, err error) *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call {
	_c.Call.Return(notificationRule, response, err)
	return _c
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call) RunAndReturn(run func(r client.ApiCreateScheduledNotificationRuleRequest) (*client.NotificationRule, *http.Response, error)) *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationPublisher provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) DeleteNotificationPublisher(ctx context.Context, notificationPublisherUuid string) client.ApiDeleteNotificationPublisherRequest {
	ret := _mock.Called(ctx, notificationPublisherUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationPublisher")
	}

	var r0 client.ApiDeleteNotificationPublisherRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteNotificationPublisherRequest); ok {
		r0 = returnFunc(ctx, notificationPublisherUuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteNotificationPublisherRequest)
	}
	return r0
}

// MockNotificationAPI_DeleteNotificationPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationPublisher'
type MockNotificationAPI_DeleteNotificationPublisher_Call struct {
	*mock.Call
}

// DeleteNotificationPublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationPublisherUuid string
func (_e *MockNotificationAPI_Expecter) DeleteNotificationPublisher(ctx interface{}, notificationPublisherUuid interface{}) *MockNotificationAPI_DeleteNotificationPublisher_Call {
	return &MockNotificationAPI_DeleteNotificationPublisher_Call{Call: _e.mock.On("DeleteNotificationPublisher", ctx, notificationPublisherUuid)}
}

func (_c *MockNotificationAPI_DeleteNotificationPublisher_Call) Run(run func(ctx context.Context, notificationPublisherUuid string)) *MockNotificationAPI_DeleteNotificationPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationPublisher_Call) Return(apiDeleteNotificationPublisherRequest client.ApiDeleteNotificationPublisherRequest) *MockNotificationAPI_DeleteNotificationPublisher_Call {
	_c.Call.Return(apiDeleteNotificationPublisherRequest)
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationPublisher_Call) RunAndReturn(run func(ctx context.Context, notificationPublisherUuid string) client.ApiDeleteNotificationPublisherRequest) *MockNotificationAPI_DeleteNotificationPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationPublisherExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) DeleteNotificationPublisherExecute(r client.ApiDeleteNotificationPublisherRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationPublisherExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteNotificationPublisherRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteNotificationPublisherRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteNotificationPublisherRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationAPI_DeleteNotificationPublisherExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationPublisherExecute'
type MockNotificationAPI_DeleteNotificationPublisherExecute_Call struct {
	*mock.Call
}

// DeleteNotificationPublisherExecute is a helper method to define mock.On call
//   - r client.ApiDeleteNotificationPublisherRequest
func (_e *MockNotificationAPI_Expecter) DeleteNotificationPublisherExecute(r interface{}) *MockNotificationAPI_DeleteNotificationPublisherExecute_Call {
	return &MockNotificationAPI_DeleteNotificationPublisherExecute_Call{Call: _e.mock.On("DeleteNotificationPublisherExecute", r)}
}

func (_c *MockNotificationAPI_DeleteNotificationPublisherExecute_Call) Run(run func(r client.ApiDeleteNotificationPublisherRequest)) *MockNotificationAPI_DeleteNotificationPublisherExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteNotificationPublisherRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteNotificationPublisherRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationPublisherExecute_Call) Return(response *http.Response, err error) *MockNotificationAPI_DeleteNotificationPublisherExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationPublisherExecute_Call) RunAndReturn(run func(r client.ApiDeleteNotificationPublisherRequest) (*http.Response, error)) *MockNotificationAPI_DeleteNotificationPublisherExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) DeleteNotificationRule(ctx context.Context) client.ApiDeleteNotificationRuleRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationRule")
	}

	var r0 client.ApiDeleteNotificationRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiDeleteNotificationRuleRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteNotificationRuleRequest)
	}
	return r0
}

// MockNotificationAPI_DeleteNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRule'
type MockNotificationAPI_DeleteNotificationRule_Call struct {
	*mock.Call
}

// DeleteNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) DeleteNotificationRule(ctx interface{}) *MockNotificationAPI_DeleteNotificationRule_Call {
	return &MockNotificationAPI_DeleteNotificationRule_Call{Call: _e.mock.On("DeleteNotificationRule", ctx)}
}

func (_c *MockNotificationAPI_DeleteNotificationRule_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_DeleteNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationRule_Call) Return(apiDeleteNotificationRuleRequest client.ApiDeleteNotificationRuleRequest) *MockNotificationAPI_DeleteNotificationRule_Call {
	_c.Call.Return(apiDeleteNotificationRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationRule_Call) RunAndReturn(run func(ctx context.Context) client.ApiDeleteNotificationRuleRequest) *MockNotificationAPI_DeleteNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) DeleteNotificationRuleExecute(r client.ApiDeleteNotificationRuleRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationRuleExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteNotificationRuleRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteNotificationRuleRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteNotificationRuleRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationAPI_DeleteNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRuleExecute'
type MockNotificationAPI_DeleteNotificationRuleExecute_Call struct {
	*mock.Call
}

// DeleteNotificationRuleExecute is a helper method to define mock.On call
//   - r client.ApiDeleteNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) DeleteNotificationRuleExecute(r interface{}) *MockNotificationAPI_DeleteNotificationRuleExecute_Call {
	return &MockNotificationAPI_DeleteNotificationRuleExecute_Call{Call: _e.mock.On("DeleteNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_DeleteNotificationRuleExecute_Call) Run(run func(r client.ApiDeleteNotificationRuleRequest)) *MockNotificationAPI_DeleteNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteNotificationRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteNotificationRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationRuleExecute_Call) Return(response *http.Response, err error) *MockNotificationAPI_DeleteNotificationRuleExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationRuleExecute_Call) RunAndReturn(run func(r client.ApiDeleteNotificationRuleRequest) (*http.Response, error)) *MockNotificationAPI_DeleteNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotificationPublishers provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) GetAllNotificationPublishers(ctx context.Context) client.ApiGetAllNotificationPublishersRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotificationPublishers")
	}

	var r0 client.ApiGetAllNotificationPublishersRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetAllNotificationPublishersRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllNotificationPublishersRequest)
	}
	return r0
}

// MockNotificationAPI_GetAllNotificationPublishers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotificationPublishers'
type MockNotificationAPI_GetAllNotificationPublishers_Call struct {
	*mock.Call
}

// GetAllNotificationPublishers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) GetAllNotificationPublishers(ctx interface{}) *MockNotificationAPI_GetAllNotificationPublishers_Call {
	return &MockNotificationAPI_GetAllNotificationPublishers_Call{Call: _e.mock.On("GetAllNotificationPublishers", ctx)}
}

func (_c *MockNotificationAPI_GetAllNotificationPublishers_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_GetAllNotificationPublishers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationPublishers_Call) Return(apiGetAllNotificationPublishersRequest client.ApiGetAllNotificationPublishersRequest) *MockNotificationAPI_GetAllNotificationPublishers_Call {
	_c.Call.Return(apiGetAllNotificationPublishersRequest)
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationPublishers_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetAllNotificationPublishersRequest) *MockNotificationAPI_GetAllNotificationPublishers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotificationPublishersExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) GetAllNotificationPublishersExecute(r client.ApiGetAllNotificationPublishersRequest) ([]client.NotificationPublisher, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotificationPublishersExecute")
	}

	var r0 []client.NotificationPublisher
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllNotificationPublishersRequest) ([]client.NotificationPublisher, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllNotificationPublishersRequest) []client.NotificationPublisher); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.NotificationPublisher)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllNotificationPublishersRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllNotificationPublishersRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_GetAllNotificationPublishersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotificationPublishersExecute'
type MockNotificationAPI_GetAllNotificationPublishersExecute_Call struct {
	*mock.Call
}

// GetAllNotificationPublishersExecute is a helper method to define mock.On call
//   - r client.ApiGetAllNotificationPublishersRequest
func (_e *MockNotificationAPI_Expecter) GetAllNotificationPublishersExecute(r interface{}) *MockNotificationAPI_GetAllNotificationPublishersExecute_Call {
	return &MockNotificationAPI_GetAllNotificationPublishersExecute_Call{Call: _e.mock.On("GetAllNotificationPublishersExecute", r)}
}

func (_c *MockNotificationAPI_GetAllNotificationPublishersExecute_Call) Run(run func(r client.ApiGetAllNotificationPublishersRequest)) *MockNotificationAPI_GetAllNotificationPublishersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllNotificationPublishersRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllNotificationPublishersRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationPublishersExecute_Call) Return(notificationPublishers []client.NotificationPublisher, response *http.Response, err error) *MockNotificationAPI_GetAllNotificationPublishersExecute_Call {
	_c.Call.Return(notificationPublishers, response, err)
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationPublishersExecute_Call) RunAndReturn(run func(r client.ApiGetAllNotificationPublishersRequest) ([]client.NotificationPublisher, *http.Response, error)) *MockNotificationAPI_GetAllNotificationPublishersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotificationRules provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) GetAllNotificationRules(ctx context.Context) client.ApiGetAllNotificationRulesRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotificationRules")
	}

	var r0 client.ApiGetAllNotificationRulesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetAllNotificationRulesRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllNotificationRulesRequest)
	}
	return r0
}

// MockNotificationAPI_GetAllNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotificationRules'
type MockNotificationAPI_GetAllNotificationRules_Call struct {
	*mock.Call
}

// GetAllNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) GetAllNotificationRules(ctx interface{}) *MockNotificationAPI_GetAllNotificationRules_Call {
	return &MockNotificationAPI_GetAllNotificationRules_Call{Call: _e.mock.On("GetAllNotificationRules", ctx)}
}

func (_c *MockNotificationAPI_GetAllNotificationRules_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_GetAllNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationRules_Call) Return(apiGetAllNotificationRulesRequest client.ApiGetAllNotificationRulesRequest) *MockNotificationAPI_GetAllNotificationRules_Call {
	_c.Call.Return(apiGetAllNotificationRulesRequest)
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationRules_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetAllNotificationRulesRequest) *MockNotificationAPI_GetAllNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotificationRulesExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) GetAllNotificationRulesExecute(r client.ApiGetAllNotificationRulesRequest) ([]client.NotificationRule, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotificationRulesExecute")
	}

	var r0 []client.NotificationRule
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllNotificationRulesRequest) ([]client.NotificationRule, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllNotificationRulesRequest) []client.NotificationRule); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.NotificationRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllNotificationRulesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllNotificationRulesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_GetAllNotificationRulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotificationRulesExecute'
type MockNotificationAPI_GetAllNotificationRulesExecute_Call struct {
	*mock.Call
}

// GetAllNotificationRulesExecute is a helper method to define mock.On call
//   - r client.ApiGetAllNotificationRulesRequest
func (_e *MockNotificationAPI_Expecter) GetAllNotificationRulesExecute(r interface{}) *MockNotificationAPI_GetAllNotificationRulesExecute_Call {
	return &MockNotificationAPI_GetAllNotificationRulesExecute_Call{Call: _e.mock.On("GetAllNotificationRulesExecute", r)}
}

func (_c *MockNotificationAPI_GetAllNotificationRulesExecute_Call) Run(run func(r client.ApiGetAllNotificationRulesRequest)) *MockNotificationAPI_GetAllNotificationRulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllNotificationRulesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllNotificationRulesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationRulesExecute_Call) Return(notificationRules []client.NotificationRule, response *http.Response, err error) *MockNotificationAPI_GetAllNotificationRulesExecute_Call {
	_c.Call.Return(notificationRules, response, err)
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationRulesExecute_Call) RunAndReturn(run func(r client.ApiGetAllNotificationRulesRequest) ([]client.NotificationRule, *http.Response, error)) *MockNotificationAPI_GetAllNotificationRulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) RemoveProjectFromRule(ctx context.Context, ruleUuid string, projectUuid string) client.ApiRemoveProjectFromRuleRequest {
	ret := _mock.Called(ctx, ruleUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromRule")
	}

	var r0 client.ApiRemoveProjectFromRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiRemoveProjectFromRuleRequest); ok {
		r0 = returnFunc(ctx, ruleUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(client.ApiRemoveProjectFromRuleRequest)
	}
	return r0
}

// MockNotificationAPI_RemoveProjectFromRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromRule'
type MockNotificationAPI_RemoveProjectFromRule_Call struct {
	*mock.Call
}

// RemoveProjectFromRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleUuid string
//   - projectUuid string
func (_e *MockNotificationAPI_Expecter) RemoveProjectFromRule(ctx interface{}, ruleUuid interface{}, projectUuid interface{}) *MockNotificationAPI_RemoveProjectFromRule_Call {
	return &MockNotificationAPI_RemoveProjectFromRule_Call{Call: _e.mock.On("RemoveProjectFromRule", ctx, ruleUuid, projectUuid)}
}

func (_c *MockNotificationAPI_RemoveProjectFromRule_Call) Run(run func(ctx context.Context, ruleUuid string, projectUuid string)) *MockNotificationAPI_RemoveProjectFromRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_RemoveProjectFromRule_Call) Return(apiRemoveProjectFromRuleRequest client.ApiRemoveProjectFromRuleRequest) *MockNotificationAPI_RemoveProjectFromRule_Call {
	_c.Call.Return(apiRemoveProjectFromRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_RemoveProjectFromRule_Call) RunAndReturn(run func(ctx context.Context, ruleUuid string, projectUuid string) client.ApiRemoveProjectFromRuleRequest) *MockNotificationAPI_RemoveProjectFromRule_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) RemoveProjectFromRuleExecute(r client.ApiRemoveProjectFromRuleRequest) (*client.NotificationRule, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromRuleExecute")
	}

	var r0 *client.NotificationRule
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveProjectFromRuleRequest) (*client.NotificationRule, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveProjectFromRuleRequest) *client.NotificationRule); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRemoveProjectFromRuleRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRemoveProjectFromRuleRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_RemoveProjectFromRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromRuleExecute'
type MockNotificationAPI_RemoveProjectFromRuleExecute_Call struct {
	*mock.Call
}

// RemoveProjectFromRuleExecute is a helper method to define mock.On call
//   - r client.ApiRemoveProjectFromRuleRequest
func (_e *MockNotificationAPI_Expecter) RemoveProjectFromRuleExecute(r interface{}) *MockNotificationAPI_RemoveProjectFromRuleExecute_Call {
	return &MockNotificationAPI_RemoveProjectFromRuleExecute_Call{Call: _e.mock.On("RemoveProjectFromRuleExecute", r)}
}

func (_c *MockNotificationAPI_RemoveProjectFromRuleExecute_Call) Run(run func(r client.ApiRemoveProjectFromRuleRequest)) *MockNotificationAPI_RemoveProjectFromRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRemoveProjectFromRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRemoveProjectFromRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_RemoveProjectFromRuleExecute_Call) Return(notificationRule *client.NotificationRule, response *http.Response, err error) *MockNotificationAPI_RemoveProjectFromRuleExecute_Call {
	_c.Call.Return(notificationRule, response, err)
	return _c
}

func (_c *MockNotificationAPI_RemoveProjectFromRuleExecute_Call) RunAndReturn(run func(r client.ApiRemoveProjectFromRuleRequest) (*client.NotificationRule, *http.Response, error)) *MockNotificationAPI_RemoveProjectFromRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamFromRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) RemoveTeamFromRule(ctx context.Context, ruleUuid string, teamUuid string) client.ApiRemoveTeamFromRuleRequest {
	ret := _mock.Called(ctx, ruleUuid, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamFromRule")
	}

	var r0 client.ApiRemoveTeamFromRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiRemoveTeamFromRuleRequest); ok {
		r0 = returnFunc(ctx, ruleUuid, teamUuid)
	} else {
		r0 = ret.Get(0).(client.ApiRemoveTeamFromRuleRequest)
	}
	return r0
}

// MockNotificationAPI_RemoveTeamFromRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamFromRule'
type MockNotificationAPI_RemoveTeamFromRule_Call struct {
	*mock.Call
}

// RemoveTeamFromRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleUuid string
//   - teamUuid string
func (_e *MockNotificationAPI_Expecter) RemoveTeamFromRule(ctx interface{}, ruleUuid interface{}, teamUuid interface{}) *MockNotificationAPI_RemoveTeamFromRule_Call {
	return &MockNotificationAPI_RemoveTeamFromRule_Call{Call: _e.mock.On("RemoveTeamFromRule", ctx, ruleUuid, teamUuid)}
}

func (_c *MockNotificationAPI_RemoveTeamFromRule_Call) Run(run func(ctx context.Context, ruleUuid string, teamUuid string)) *MockNotificationAPI_RemoveTeamFromRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_RemoveTeamFromRule_Call) Return(apiRemoveTeamFromRuleRequest client.ApiRemoveTeamFromRuleRequest) *MockNotificationAPI_RemoveTeamFromRule_Call {
	_c.Call.Return(apiRemoveTeamFromRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_RemoveTeamFromRule_Call) RunAndReturn(run func(ctx context.Context, ruleUuid string, teamUuid string) client.ApiRemoveTeamFromRuleRequest) *MockNotificationAPI_RemoveTeamFromRule_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamFromRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) RemoveTeamFromRuleExecute(r client.ApiRemoveTeamFromRuleRequest) (*client.NotificationRule, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamFromRuleExecute")
	}

	var r0 *client.NotificationRule
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveTeamFromRuleRequest) (*client.NotificationRule, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveTeamFromRuleRequest) *client.NotificationRule); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRemoveTeamFromRuleRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRemoveTeamFromRuleRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_RemoveTeamFromRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamFromRuleExecute'
type MockNotificationAPI_RemoveTeamFromRuleExecute_Call struct {
	*mock.Call
}

// RemoveTeamFromRuleExecute is a helper method to define mock.On call
//   - r client.ApiRemoveTeamFromRuleRequest
func (_e *MockNotificationAPI_Expecter) RemoveTeamFromRuleExecute(r interface{}) *MockNotificationAPI_RemoveTeamFromRuleExecute_Call {
	return &MockNotificationAPI_RemoveTeamFromRuleExecute_Call{Call: _e.mock.On("RemoveTeamFromRuleExecute", r)}
}

func (_c *MockNotificationAPI_RemoveTeamFromRuleExecute_Call) Run(run func(r client.ApiRemoveTeamFromRuleRequest)) *MockNotificationAPI_RemoveTeamFromRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRemoveTeamFromRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRemoveTeamFromRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_RemoveTeamFromRuleExecute_Call) Return(notificationRule *client.NotificationRule, response *http.Response, err error) *MockNotificationAPI_RemoveTeamFromRuleExecute_Call {
	_c.Call.Return(notificationRule, response, err)
	return _c
}

func (_c *MockNotificationAPI_RemoveTeamFromRuleExecute_Call) RunAndReturn(run func(r client.ApiRemoveTeamFromRuleRequest) (*client.NotificationRule, *http.Response, error)) *MockNotificationAPI_RemoveTeamFromRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreDefaultTemplates provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) RestoreDefaultTemplates(ctx context.Context) client.ApiRestoreDefaultTemplatesRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDefaultTemplates")
	}

	var r0 client.ApiRestoreDefaultTemplatesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiRestoreDefaultTemplatesRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiRestoreDefaultTemplatesRequest)
	}
	return r0
}

// MockNotificationAPI_RestoreDefaultTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreDefaultTemplates'
type MockNotificationAPI_RestoreDefaultTemplates_Call struct {
	*mock.Call
}

// RestoreDefaultTemplates is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) RestoreDefaultTemplates(ctx interface{}) *MockNotificationAPI_RestoreDefaultTemplates_Call {
	return &MockNotificationAPI_RestoreDefaultTemplates_Call{Call: _e.mock.On("RestoreDefaultTemplates", ctx)}
}

func (_c *MockNotificationAPI_RestoreDefaultTemplates_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_RestoreDefaultTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_RestoreDefaultTemplates_Call) Return(apiRestoreDefaultTemplatesRequest client.ApiRestoreDefaultTemplatesRequest) *MockNotificationAPI_RestoreDefaultTemplates_Call {
	_c.Call.Return(apiRestoreDefaultTemplatesRequest)
	return _c
}

func (_c *MockNotificationAPI_RestoreDefaultTemplates_Call) RunAndReturn(run func(ctx context.Context) client.ApiRestoreDefaultTemplatesRequest) *MockNotificationAPI_RestoreDefaultTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreDefaultTemplatesExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) RestoreDefaultTemplatesExecute(r client.ApiRestoreDefaultTemplatesRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDefaultTemplatesExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRestoreDefaultTemplatesRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRestoreDefaultTemplatesRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRestoreDefaultTemplatesRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationAPI_RestoreDefaultTemplatesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreDefaultTemplatesExecute'
type MockNotificationAPI_RestoreDefaultTemplatesExecute_Call struct {
	*mock.Call
}

// RestoreDefaultTemplatesExecute is a helper method to define mock.On call
//   - r client.ApiRestoreDefaultTemplatesRequest
func (_e *MockNotificationAPI_Expecter) RestoreDefaultTemplatesExecute(r interface{}) *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call {
	return &MockNotificationAPI_RestoreDefaultTemplatesExecute_Call{Call: _e.mock.On("RestoreDefaultTemplatesExecute", r)}
}

func (_c *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call) Run(run func(r client.ApiRestoreDefaultTemplatesRequest)) *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRestoreDefaultTemplatesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRestoreDefaultTemplatesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call) Return(response *http.Response, err error) *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call) RunAndReturn(run func(r client.ApiRestoreDefaultTemplatesRequest) (*http.Response, error)) *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TestNotificationRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) TestNotificationRule(ctx context.Context, uuid string) client.ApiTestNotificationRuleRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for TestNotificationRule")
	}

	var r0 client.ApiTestNotificationRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiTestNotificationRuleRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiTestNotificationRuleRequest)
	}
	return r0
}

// MockNotificationAPI_TestNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestNotificationRule'
type MockNotificationAPI_TestNotificationRule_Call struct {
	*mock.Call
}

// TestNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockNotificationAPI_Expecter) TestNotificationRule(ctx interface{}, uuid interface{}) *MockNotificationAPI_TestNotificationRule_Call {
	return &MockNotificationAPI_TestNotificationRule_Call{Call: _e.mock.On("TestNotificationRule", ctx, uuid)}
}

func (_c *MockNotificationAPI_TestNotificationRule_Call) Run(run func(ctx context.Context, uuid string)) *MockNotificationAPI_TestNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_TestNotificationRule_Call) Return(apiTestNotificationRuleRequest client.ApiTestNotificationRuleRequest) *MockNotificationAPI_TestNotificationRule_Call {
	_c.Call.Return(apiTestNotificationRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_TestNotificationRule_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiTestNotificationRuleRequest) *MockNotificationAPI_TestNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// TestNotificationRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) TestNotificationRuleExecute(r client.ApiTestNotificationRuleRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TestNotificationRuleExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiTestNotificationRuleRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiTestNotificationRuleRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiTestNotificationRuleRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationAPI_TestNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestNotificationRuleExecute'
type MockNotificationAPI_TestNotificationRuleExecute_Call struct {
	*mock.Call
}

// TestNotificationRuleExecute is a helper method to define mock.On call
//   - r client.ApiTestNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) TestNotificationRuleExecute(r interface{}) *MockNotificationAPI_TestNotificationRuleExecute_Call {
	return &MockNotificationAPI_TestNotificationRuleExecute_Call{Call: _e.mock.On("TestNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_TestNotificationRuleExecute_Call) Run(run func(r client.ApiTestNotificationRuleRequest)) *MockNotificationAPI_TestNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiTestNotificationRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiTestNotificationRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_TestNotificationRuleExecute_Call) Return(response *http.Response, err error) *MockNotificationAPI_TestNotificationRuleExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockNotificationAPI_TestNotificationRuleExecute_Call) RunAndReturn(run func(r client.ApiTestNotificationRuleRequest) (*http.Response, error)) *MockNotificationAPI_TestNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TestSmtpPublisherConfig provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) TestSmtpPublisherConfig(ctx context.Context) client.ApiTestSmtpPublisherConfigRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TestSmtpPublisherConfig")
	}

	var r0 client.ApiTestSmtpPublisherConfigRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiTestSmtpPublisherConfigRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiTestSmtpPublisherConfigRequest)
	}
	return r0
}

// MockNotificationAPI_TestSmtpPublisherConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestSmtpPublisherConfig'
type MockNotificationAPI_TestSmtpPublisherConfig_Call struct {
	*mock.Call
}

// TestSmtpPublisherConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) TestSmtpPublisherConfig(ctx interface{}) *MockNotificationAPI_TestSmtpPublisherConfig_Call {
	return &MockNotificationAPI_TestSmtpPublisherConfig_Call{Call: _e.mock.On("TestSmtpPublisherConfig", ctx)}
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfig_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_TestSmtpPublisherConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfig_Call) Return(apiTestSmtpPublisherConfigRequest client.ApiTestSmtpPublisherConfigRequest) *MockNotificationAPI_TestSmtpPublisherConfig_Call {
	_c.Call.Return(apiTestSmtpPublisherConfigRequest)
	return _c
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfig_Call) RunAndReturn(run func(ctx context.Context) client.ApiTestSmtpPublisherConfigRequest) *MockNotificationAPI_TestSmtpPublisherConfig_Call {
	_c.Call.Return(run)
	return _c
}

// TestSmtpPublisherConfigExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) TestSmtpPublisherConfigExecute(r client.ApiTestSmtpPublisherConfigRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TestSmtpPublisherConfigExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiTestSmtpPublisherConfigRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiTestSmtpPublisherConfigRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiTestSmtpPublisherConfigRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockNotificationAPI_TestSmtpPublisherConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestSmtpPublisherConfigExecute'
type MockNotificationAPI_TestSmtpPublisherConfigExecute_Call struct {
	*mock.Call
}

// TestSmtpPublisherConfigExecute is a helper method to define mock.On call
//   - r client.ApiTestSmtpPublisherConfigRequest
func (_e *MockNotificationAPI_Expecter) TestSmtpPublisherConfigExecute(r interface{}) *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call {
	return &MockNotificationAPI_TestSmtpPublisherConfigExecute_Call{Call: _e.mock.On("TestSmtpPublisherConfigExecute", r)}
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call) Run(run func(r client.ApiTestSmtpPublisherConfigRequest)) *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiTestSmtpPublisherConfigRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiTestSmtpPublisherConfigRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call) Return(response *http.Response, err error) *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call) RunAndReturn(run func(r client.ApiTestSmtpPublisherConfigRequest) (*http.Response, error)) *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationPublisher provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) UpdateNotificationPublisher(ctx context.Context) client.ApiUpdateNotificationPublisherRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationPublisher")
	}

	var r0 client.ApiUpdateNotificationPublisherRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateNotificationPublisherRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateNotificationPublisherRequest)
	}
	return r0
}

// MockNotificationAPI_UpdateNotificationPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationPublisher'
type MockNotificationAPI_UpdateNotificationPublisher_Call struct {
	*mock.Call
}

// UpdateNotificationPublisher is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) UpdateNotificationPublisher(ctx interface{}) *MockNotificationAPI_UpdateNotificationPublisher_Call {
	return &MockNotificationAPI_UpdateNotificationPublisher_Call{Call: _e.mock.On("UpdateNotificationPublisher", ctx)}
}

func (_c *MockNotificationAPI_UpdateNotificationPublisher_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_UpdateNotificationPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationPublisher_Call) Return(apiUpdateNotificationPublisherRequest client.ApiUpdateNotificationPublisherRequest) *MockNotificationAPI_UpdateNotificationPublisher_Call {
	_c.Call.Return(apiUpdateNotificationPublisherRequest)
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationPublisher_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateNotificationPublisherRequest) *MockNotificationAPI_UpdateNotificationPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationPublisherExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) UpdateNotificationPublisherExecute(r client.ApiUpdateNotificationPublisherRequest) (*client.NotificationPublisher, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationPublisherExecute")
	}

	var r0 *client.NotificationPublisher
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateNotificationPublisherRequest) (*client.NotificationPublisher, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateNotificationPublisherRequest) *client.NotificationPublisher); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationPublisher)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateNotificationPublisherRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateNotificationPublisherRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_UpdateNotificationPublisherExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationPublisherExecute'
type MockNotificationAPI_UpdateNotificationPublisherExecute_Call struct {
	*mock.Call
}

// UpdateNotificationPublisherExecute is a helper method to define mock.On call
//   - r client.ApiUpdateNotificationPublisherRequest
func (_e *MockNotificationAPI_Expecter) UpdateNotificationPublisherExecute(r interface{}) *MockNotificationAPI_UpdateNotificationPublisherExecute_Call {
	return &MockNotificationAPI_UpdateNotificationPublisherExecute_Call{Call: _e.mock.On("UpdateNotificationPublisherExecute", r)}
}

func (_c *MockNotificationAPI_UpdateNotificationPublisherExecute_Call) Run(run func(r client.ApiUpdateNotificationPublisherRequest)) *MockNotificationAPI_UpdateNotificationPublisherExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateNotificationPublisherRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateNotificationPublisherRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationPublisherExecute_Call) Return(notificationPublisher *client.NotificationPublisher, response *http.Response, err error) *MockNotificationAPI_UpdateNotificationPublisherExecute_Call {
	_c.Call.Return(notificationPublisher, response, err)
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationPublisherExecute_Call) RunAndReturn(run func(r client.ApiUpdateNotificationPublisherRequest) (*client.NotificationPublisher, *http.Response, error)) *MockNotificationAPI_UpdateNotificationPublisherExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationRule provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) UpdateNotificationRule(ctx context.Context) client.ApiUpdateNotificationRuleRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationRule")
	}

	var r0 client.ApiUpdateNotificationRuleRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateNotificationRuleRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateNotificationRuleRequest)
	}
	return r0
}

// MockNotificationAPI_UpdateNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationRule'
type MockNotificationAPI_UpdateNotificationRule_Call struct {
	*mock.Call
}

// UpdateNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) UpdateNotificationRule(ctx interface{}) *MockNotificationAPI_UpdateNotificationRule_Call {
	return &MockNotificationAPI_UpdateNotificationRule_Call{Call: _e.mock.On("UpdateNotificationRule", ctx)}
}

func (_c *MockNotificationAPI_UpdateNotificationRule_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_UpdateNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationRule_Call) Return(apiUpdateNotificationRuleRequest client.ApiUpdateNotificationRuleRequest) *MockNotificationAPI_UpdateNotificationRule_Call {
	_c.Call.Return(apiUpdateNotificationRuleRequest)
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationRule_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateNotificationRuleRequest) *MockNotificationAPI_UpdateNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationRuleExecute provides a mock function for the type MockNotificationAPI
func (_mock *MockNotificationAPI) UpdateNotificationRuleExecute(r client.ApiUpdateNotificationRuleRequest) (*client.NotificationRule, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationRuleExecute")
	}

	var r0 *client.NotificationRule
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateNotificationRuleRequest) (*client.NotificationRule, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateNotificationRuleRequest) *client.NotificationRule); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.NotificationRule)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateNotificationRuleRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateNotificationRuleRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockNotificationAPI_UpdateNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationRuleExecute'
type MockNotificationAPI_UpdateNotificationRuleExecute_Call struct {
	*mock.Call
}

// UpdateNotificationRuleExecute is a helper method to define mock.On call
//   - r client.ApiUpdateNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) UpdateNotificationRuleExecute(r interface{}) *MockNotificationAPI_UpdateNotificationRuleExecute_Call {
	return &MockNotificationAPI_UpdateNotificationRuleExecute_Call{Call: _e.mock.On("UpdateNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_UpdateNotificationRuleExecute_Call) Run(run func(r client.ApiUpdateNotificationRuleRequest)) *MockNotificationAPI_UpdateNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateNotificationRuleRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateNotificationRuleRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationRuleExecute_Call) Return(notificationRule *client.NotificationRule, response *http.Response, err error) *MockNotificationAPI_UpdateNotificationRuleExecute_Call {
	_c.Call.Return(notificationRule, response, err)
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationRuleExecute_Call) RunAndReturn(run func(r client.ApiUpdateNotificationRuleRequest) (*client.NotificationRule, *http.Response, error)) *MockNotificationAPI_UpdateNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOidcAPI creates a new instance of MockOidcAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOidcAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOidcAPI {
	mock := &MockOidcAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockOidcAPI is an autogenerated mock type for the OidcAPI type
type MockOidcAPI struct {
	mock.Mock
}

type MockOidcAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOidcAPI) EXPECT() *MockOidcAPI_Expecter {
	return &MockOidcAPI_Expecter{mock: &_m.Mock}
}

// AddMapping2 provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) AddMapping2(ctx context.Context) client.ApiAddMapping2Request {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping2")
	}

	var r0 client.ApiAddMapping2Request
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiAddMapping2Request); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiAddMapping2Request)
	}
	return r0
}

// MockOidcAPI_AddMapping2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping2'
type MockOidcAPI_AddMapping2_Call struct {
	*mock.Call
}

// AddMapping2 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) AddMapping2(ctx interface{}) *MockOidcAPI_AddMapping2_Call {
	return &MockOidcAPI_AddMapping2_Call{Call: _e.mock.On("AddMapping2", ctx)}
}

func (_c *MockOidcAPI_AddMapping2_Call) Run(run func(ctx context.Context)) *MockOidcAPI_AddMapping2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_AddMapping2_Call) Return(apiAddMapping2Request client.ApiAddMapping2Request) *MockOidcAPI_AddMapping2_Call {
	_c.Call.Return(apiAddMapping2Request)
	return _c
}

func (_c *MockOidcAPI_AddMapping2_Call) RunAndReturn(run func(ctx context.Context) client.ApiAddMapping2Request) *MockOidcAPI_AddMapping2_Call {
	_c.Call.Return(run)
	return _c
}

// AddMapping2Execute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) AddMapping2Execute(r client.ApiAddMapping2Request) (*client.MappedOidcGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping2Execute")
	}

	var r0 *client.MappedOidcGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddMapping2Request) (*client.MappedOidcGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddMapping2Request) *client.MappedOidcGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MappedOidcGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddMapping2Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddMapping2Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOidcAPI_AddMapping2Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping2Execute'
type MockOidcAPI_AddMapping2Execute_Call struct {
	*mock.Call
}

// AddMapping2Execute is a helper method to define mock.On call
//   - r client.ApiAddMapping2Request
func (_e *MockOidcAPI_Expecter) AddMapping2Execute(r interface{}) *MockOidcAPI_AddMapping2Execute_Call {
	return &MockOidcAPI_AddMapping2Execute_Call{Call: _e.mock.On("AddMapping2Execute", r)}
}

func (_c *MockOidcAPI_AddMapping2Execute_Call) Run(run func(r client.ApiAddMapping2Request)) *MockOidcAPI_AddMapping2Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddMapping2Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddMapping2Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_AddMapping2Execute_Call) Return(mappedOidcGroup *client.MappedOidcGroup, response *http.Response, err error) *MockOidcAPI_AddMapping2Execute_Call {
	_c.Call.Return(mappedOidcGroup, response, err)
	return _c
}

func (_c *MockOidcAPI_AddMapping2Execute_Call) RunAndReturn(run func(r client.ApiAddMapping2Request) (*client.MappedOidcGroup, *http.Response, error)) *MockOidcAPI_AddMapping2Execute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) CreateGroup(ctx context.Context) client.ApiCreateGroupRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 client.ApiCreateGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateGroupRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateGroupRequest)
	}
	return r0
}

// MockOidcAPI_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockOidcAPI_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) CreateGroup(ctx interface{}) *MockOidcAPI_CreateGroup_Call {
	return &MockOidcAPI_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx)}
}

func (_c *MockOidcAPI_CreateGroup_Call) Run(run func(ctx context.Context)) *MockOidcAPI_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_CreateGroup_Call) Return(apiCreateGroupRequest client.ApiCreateGroupRequest) *MockOidcAPI_CreateGroup_Call {
	_c.Call.Return(apiCreateGroupRequest)
	return _c
}

func (_c *MockOidcAPI_CreateGroup_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateGroupRequest) *MockOidcAPI_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupExecute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) CreateGroupExecute(r client.ApiCreateGroupRequest) (*client.OidcGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupExecute")
	}

	var r0 *client.OidcGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateGroupRequest) (*client.OidcGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateGroupRequest) *client.OidcGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OidcGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateGroupRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateGroupRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOidcAPI_CreateGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupExecute'
type MockOidcAPI_CreateGroupExecute_Call struct {
	*mock.Call
}

// CreateGroupExecute is a helper method to define mock.On call
//   - r client.ApiCreateGroupRequest
func (_e *MockOidcAPI_Expecter) CreateGroupExecute(r interface{}) *MockOidcAPI_CreateGroupExecute_Call {
	return &MockOidcAPI_CreateGroupExecute_Call{Call: _e.mock.On("CreateGroupExecute", r)}
}

func (_c *MockOidcAPI_CreateGroupExecute_Call) Run(run func(r client.ApiCreateGroupRequest)) *MockOidcAPI_CreateGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_CreateGroupExecute_Call) Return(oidcGroup *client.OidcGroup, response *http.Response, err error) *MockOidcAPI_CreateGroupExecute_Call {
	_c.Call.Return(oidcGroup, response, err)
	return _c
}

func (_c *MockOidcAPI_CreateGroupExecute_Call) RunAndReturn(run func(r client.ApiCreateGroupRequest) (*client.OidcGroup, *http.Response, error)) *MockOidcAPI_CreateGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) DeleteGroup(ctx context.Context, uuid string) client.ApiDeleteGroupRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 client.ApiDeleteGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteGroupRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteGroupRequest)
	}
	return r0
}

// MockOidcAPI_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockOidcAPI_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockOidcAPI_Expecter) DeleteGroup(ctx interface{}, uuid interface{}) *MockOidcAPI_DeleteGroup_Call {
	return &MockOidcAPI_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, uuid)}
}

func (_c *MockOidcAPI_DeleteGroup_Call) Run(run func(ctx context.Context, uuid string)) *MockOidcAPI_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOidcAPI_DeleteGroup_Call) Return(apiDeleteGroupRequest client.ApiDeleteGroupRequest) *MockOidcAPI_DeleteGroup_Call {
	_c.Call.Return(apiDeleteGroupRequest)
	return _c
}

func (_c *MockOidcAPI_DeleteGroup_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteGroupRequest) *MockOidcAPI_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupExecute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) DeleteGroupExecute(r client.ApiDeleteGroupRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteGroupRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteGroupRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteGroupRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOidcAPI_DeleteGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupExecute'
type MockOidcAPI_DeleteGroupExecute_Call struct {
	*mock.Call
}

// DeleteGroupExecute is a helper method to define mock.On call
//   - r client.ApiDeleteGroupRequest
func (_e *MockOidcAPI_Expecter) DeleteGroupExecute(r interface{}) *MockOidcAPI_DeleteGroupExecute_Call {
	return &MockOidcAPI_DeleteGroupExecute_Call{Call: _e.mock.On("DeleteGroupExecute", r)}
}

func (_c *MockOidcAPI_DeleteGroupExecute_Call) Run(run func(r client.ApiDeleteGroupRequest)) *MockOidcAPI_DeleteGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_DeleteGroupExecute_Call) Return(response *http.Response, err error) *MockOidcAPI_DeleteGroupExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockOidcAPI_DeleteGroupExecute_Call) RunAndReturn(run func(r client.ApiDeleteGroupRequest) (*http.Response, error)) *MockOidcAPI_DeleteGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping2 provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) DeleteMapping2(ctx context.Context, groupUuid string, teamUuid string) client.ApiDeleteMapping2Request {
	ret := _mock.Called(ctx, groupUuid, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping2")
	}

	var r0 client.ApiDeleteMapping2Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiDeleteMapping2Request); ok {
		r0 = returnFunc(ctx, groupUuid, teamUuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteMapping2Request)
	}
	return r0
}

// MockOidcAPI_DeleteMapping2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping2'
type MockOidcAPI_DeleteMapping2_Call struct {
	*mock.Call
}

// DeleteMapping2 is a helper method to define mock.On call
//   - ctx context.Context
//   - groupUuid string
//   - teamUuid string
func (_e *MockOidcAPI_Expecter) DeleteMapping2(ctx interface{}, groupUuid interface{}, teamUuid interface{}) *MockOidcAPI_DeleteMapping2_Call {
	return &MockOidcAPI_DeleteMapping2_Call{Call: _e.mock.On("DeleteMapping2", ctx, groupUuid, teamUuid)}
}

func (_c *MockOidcAPI_DeleteMapping2_Call) Run(run func(ctx context.Context, groupUuid string, teamUuid string)) *MockOidcAPI_DeleteMapping2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockOidcAPI_DeleteMapping2_Call) Return(apiDeleteMapping2Request client.ApiDeleteMapping2Request) *MockOidcAPI_DeleteMapping2_Call {
	_c.Call.Return(apiDeleteMapping2Request)
	return _c
}

func (_c *MockOidcAPI_DeleteMapping2_Call) RunAndReturn(run func(ctx context.Context, groupUuid string, teamUuid string) client.ApiDeleteMapping2Request) *MockOidcAPI_DeleteMapping2_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping2Execute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) DeleteMapping2Execute(r client.ApiDeleteMapping2Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping2Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteMapping2Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteMapping2Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteMapping2Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOidcAPI_DeleteMapping2Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping2Execute'
type MockOidcAPI_DeleteMapping2Execute_Call struct {
	*mock.Call
}

// DeleteMapping2Execute is a helper method to define mock.On call
//   - r client.ApiDeleteMapping2Request
func (_e *MockOidcAPI_Expecter) DeleteMapping2Execute(r interface{}) *MockOidcAPI_DeleteMapping2Execute_Call {
	return &MockOidcAPI_DeleteMapping2Execute_Call{Call: _e.mock.On("DeleteMapping2Execute", r)}
}

func (_c *MockOidcAPI_DeleteMapping2Execute_Call) Run(run func(r client.ApiDeleteMapping2Request)) *MockOidcAPI_DeleteMapping2Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteMapping2Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteMapping2Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_DeleteMapping2Execute_Call) Return(response *http.Response, err error) *MockOidcAPI_DeleteMapping2Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockOidcAPI_DeleteMapping2Execute_Call) RunAndReturn(run func(r client.ApiDeleteMapping2Request) (*http.Response, error)) *MockOidcAPI_DeleteMapping2Execute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMappingByUuid provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) DeleteMappingByUuid(ctx context.Context, uuid string) client.ApiDeleteMappingByUuidRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMappingByUuid")
	}

	var r0 client.ApiDeleteMappingByUuidRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteMappingByUuidRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteMappingByUuidRequest)
	}
	return r0
}

// MockOidcAPI_DeleteMappingByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMappingByUuid'
type MockOidcAPI_DeleteMappingByUuid_Call struct {
	*mock.Call
}

// DeleteMappingByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockOidcAPI_Expecter) DeleteMappingByUuid(ctx interface{}, uuid interface{}) *MockOidcAPI_DeleteMappingByUuid_Call {
	return &MockOidcAPI_DeleteMappingByUuid_Call{Call: _e.mock.On("DeleteMappingByUuid", ctx, uuid)}
}

func (_c *MockOidcAPI_DeleteMappingByUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockOidcAPI_DeleteMappingByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOidcAPI_DeleteMappingByUuid_Call) Return(apiDeleteMappingByUuidRequest client.ApiDeleteMappingByUuidRequest) *MockOidcAPI_DeleteMappingByUuid_Call {
	_c.Call.Return(apiDeleteMappingByUuidRequest)
	return _c
}

func (_c *MockOidcAPI_DeleteMappingByUuid_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteMappingByUuidRequest) *MockOidcAPI_DeleteMappingByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMappingByUuidExecute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) DeleteMappingByUuidExecute(r client.ApiDeleteMappingByUuidRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMappingByUuidExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteMappingByUuidRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteMappingByUuidRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteMappingByUuidRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockOidcAPI_DeleteMappingByUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMappingByUuidExecute'
type MockOidcAPI_DeleteMappingByUuidExecute_Call struct {
	*mock.Call
}

// DeleteMappingByUuidExecute is a helper method to define mock.On call
//   - r client.ApiDeleteMappingByUuidRequest
func (_e *MockOidcAPI_Expecter) DeleteMappingByUuidExecute(r interface{}) *MockOidcAPI_DeleteMappingByUuidExecute_Call {
	return &MockOidcAPI_DeleteMappingByUuidExecute_Call{Call: _e.mock.On("DeleteMappingByUuidExecute", r)}
}

func (_c *MockOidcAPI_DeleteMappingByUuidExecute_Call) Run(run func(r client.ApiDeleteMappingByUuidRequest)) *MockOidcAPI_DeleteMappingByUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteMappingByUuidRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteMappingByUuidRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_DeleteMappingByUuidExecute_Call) Return(response *http.Response, err error) *MockOidcAPI_DeleteMappingByUuidExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockOidcAPI_DeleteMappingByUuidExecute_Call) RunAndReturn(run func(r client.ApiDeleteMappingByUuidRequest) (*http.Response, error)) *MockOidcAPI_DeleteMappingByUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// IsAvailable provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) IsAvailable(ctx context.Context) client.ApiIsAvailableRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsAvailable")
	}

	var r0 client.ApiIsAvailableRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiIsAvailableRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiIsAvailableRequest)
	}
	return r0
}

// MockOidcAPI_IsAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAvailable'
type MockOidcAPI_IsAvailable_Call struct {
	*mock.Call
}

// IsAvailable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) IsAvailable(ctx interface{}) *MockOidcAPI_IsAvailable_Call {
	return &MockOidcAPI_IsAvailable_Call{Call: _e.mock.On("IsAvailable", ctx)}
}

func (_c *MockOidcAPI_IsAvailable_Call) Run(run func(ctx context.Context)) *MockOidcAPI_IsAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_IsAvailable_Call) Return(apiIsAvailableRequest client.ApiIsAvailableRequest) *MockOidcAPI_IsAvailable_Call {
	_c.Call.Return(apiIsAvailableRequest)
	return _c
}

func (_c *MockOidcAPI_IsAvailable_Call) RunAndReturn(run func(ctx context.Context) client.ApiIsAvailableRequest) *MockOidcAPI_IsAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// IsAvailableExecute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) IsAvailableExecute(r client.ApiIsAvailableRequest) (bool, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IsAvailableExecute")
	}

	var r0 bool
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiIsAvailableRequest) (bool, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiIsAvailableRequest) bool); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiIsAvailableRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiIsAvailableRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOidcAPI_IsAvailableExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAvailableExecute'
type MockOidcAPI_IsAvailableExecute_Call struct {
	*mock.Call
}

// IsAvailableExecute is a helper method to define mock.On call
//   - r client.ApiIsAvailableRequest
func (_e *MockOidcAPI_Expecter) IsAvailableExecute(r interface{}) *MockOidcAPI_IsAvailableExecute_Call {
	return &MockOidcAPI_IsAvailableExecute_Call{Call: _e.mock.On("IsAvailableExecute", r)}
}

func (_c *MockOidcAPI_IsAvailableExecute_Call) Run(run func(r client.ApiIsAvailableRequest)) *MockOidcAPI_IsAvailableExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiIsAvailableRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiIsAvailableRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_IsAvailableExecute_Call) Return(b bool, response *http.Response, err error) *MockOidcAPI_IsAvailableExecute_Call {
	_c.Call.Return(b, response, err)
	return _c
}

func (_c *MockOidcAPI_IsAvailableExecute_Call) RunAndReturn(run func(r client.ApiIsAvailableRequest) (bool, *http.Response, error)) *MockOidcAPI_IsAvailableExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveGroups provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) RetrieveGroups(ctx context.Context) client.ApiRetrieveGroupsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveGroups")
	}

	var r0 client.ApiRetrieveGroupsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiRetrieveGroupsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiRetrieveGroupsRequest)
	}
	return r0
}

// MockOidcAPI_RetrieveGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveGroups'
type MockOidcAPI_RetrieveGroups_Call struct {
	*mock.Call
}

// RetrieveGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) RetrieveGroups(ctx interface{}) *MockOidcAPI_RetrieveGroups_Call {
	return &MockOidcAPI_RetrieveGroups_Call{Call: _e.mock.On("RetrieveGroups", ctx)}
}

func (_c *MockOidcAPI_RetrieveGroups_Call) Run(run func(ctx context.Context)) *MockOidcAPI_RetrieveGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_RetrieveGroups_Call) Return(apiRetrieveGroupsRequest client.ApiRetrieveGroupsRequest) *MockOidcAPI_RetrieveGroups_Call {
	_c.Call.Return(apiRetrieveGroupsRequest)
	return _c
}

func (_c *MockOidcAPI_RetrieveGroups_Call) RunAndReturn(run func(ctx context.Context) client.ApiRetrieveGroupsRequest) *MockOidcAPI_RetrieveGroups_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveGroupsExecute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) RetrieveGroupsExecute(r client.ApiRetrieveGroupsRequest) ([]client.OidcGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveGroupsExecute")
	}

	var r0 []client.OidcGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveGroupsRequest) ([]client.OidcGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveGroupsRequest) []client.OidcGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.OidcGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRetrieveGroupsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRetrieveGroupsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOidcAPI_RetrieveGroupsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveGroupsExecute'
type MockOidcAPI_RetrieveGroupsExecute_Call struct {
	*mock.Call
}

// RetrieveGroupsExecute is a helper method to define mock.On call
//   - r client.ApiRetrieveGroupsRequest
func (_e *MockOidcAPI_Expecter) RetrieveGroupsExecute(r interface{}) *MockOidcAPI_RetrieveGroupsExecute_Call {
	return &MockOidcAPI_RetrieveGroupsExecute_Call{Call: _e.mock.On("RetrieveGroupsExecute", r)}
}

func (_c *MockOidcAPI_RetrieveGroupsExecute_Call) Run(run func(r client.ApiRetrieveGroupsRequest)) *MockOidcAPI_RetrieveGroupsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRetrieveGroupsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRetrieveGroupsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_RetrieveGroupsExecute_Call) Return(oidcGroups []client.OidcGroup, response *http.Response, err error) *MockOidcAPI_RetrieveGroupsExecute_Call {
	_c.Call.Return(oidcGroups, response, err)
	return _c
}

func (_c *MockOidcAPI_RetrieveGroupsExecute_Call) RunAndReturn(run func(r client.ApiRetrieveGroupsRequest) ([]client.OidcGroup, *http.Response, error)) *MockOidcAPI_RetrieveGroupsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveTeamsMappedToGroup provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) RetrieveTeamsMappedToGroup(ctx context.Context, uuid string) client.ApiRetrieveTeamsMappedToGroupRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveTeamsMappedToGroup")
	}

	var r0 client.ApiRetrieveTeamsMappedToGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiRetrieveTeamsMappedToGroupRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiRetrieveTeamsMappedToGroupRequest)
	}
	return r0
}

// MockOidcAPI_RetrieveTeamsMappedToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveTeamsMappedToGroup'
type MockOidcAPI_RetrieveTeamsMappedToGroup_Call struct {
	*mock.Call
}

// RetrieveTeamsMappedToGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockOidcAPI_Expecter) RetrieveTeamsMappedToGroup(ctx interface{}, uuid interface{}) *MockOidcAPI_RetrieveTeamsMappedToGroup_Call {
	return &MockOidcAPI_RetrieveTeamsMappedToGroup_Call{Call: _e.mock.On("RetrieveTeamsMappedToGroup", ctx, uuid)}
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroup_Call) Run(run func(ctx context.Context, uuid string)) *MockOidcAPI_RetrieveTeamsMappedToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroup_Call) Return(apiRetrieveTeamsMappedToGroupRequest client.ApiRetrieveTeamsMappedToGroupRequest) *MockOidcAPI_RetrieveTeamsMappedToGroup_Call {
	_c.Call.Return(apiRetrieveTeamsMappedToGroupRequest)
	return _c
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroup_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiRetrieveTeamsMappedToGroupRequest) *MockOidcAPI_RetrieveTeamsMappedToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveTeamsMappedToGroupExecute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) RetrieveTeamsMappedToGroupExecute(r client.ApiRetrieveTeamsMappedToGroupRequest) ([]client.Team, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveTeamsMappedToGroupExecute")
	}

	var r0 []client.Team
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveTeamsMappedToGroupRequest) ([]client.Team, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveTeamsMappedToGroupRequest) []client.Team); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRetrieveTeamsMappedToGroupRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRetrieveTeamsMappedToGroupRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveTeamsMappedToGroupExecute'
type MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call struct {
	*mock.Call
}

// RetrieveTeamsMappedToGroupExecute is a helper method to define mock.On call
//   - r client.ApiRetrieveTeamsMappedToGroupRequest
func (_e *MockOidcAPI_Expecter) RetrieveTeamsMappedToGroupExecute(r interface{}) *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call {
	return &MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call{Call: _e.mock.On("RetrieveTeamsMappedToGroupExecute", r)}
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call) Run(run func(r client.ApiRetrieveTeamsMappedToGroupRequest)) *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRetrieveTeamsMappedToGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRetrieveTeamsMappedToGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call) Return(teams []client.Team, response *http.Response, err error) *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call {
	_c.Call.Return(teams, response, err)
	return _c
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call) RunAndReturn(run func(r client.ApiRetrieveTeamsMappedToGroupRequest) ([]client.Team, *http.Response, error)) *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) UpdateGroup(ctx context.Context) client.ApiUpdateGroupRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 client.ApiUpdateGroupRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateGroupRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateGroupRequest)
	}
	return r0
}

// MockOidcAPI_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockOidcAPI_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) UpdateGroup(ctx interface{}) *MockOidcAPI_UpdateGroup_Call {
	return &MockOidcAPI_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", ctx)}
}

func (_c *MockOidcAPI_UpdateGroup_Call) Run(run func(ctx context.Context)) *MockOidcAPI_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_UpdateGroup_Call) Return(apiUpdateGroupRequest client.ApiUpdateGroupRequest) *MockOidcAPI_UpdateGroup_Call {
	_c.Call.Return(apiUpdateGroupRequest)
	return _c
}

func (_c *MockOidcAPI_UpdateGroup_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateGroupRequest) *MockOidcAPI_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupExecute provides a mock function for the type MockOidcAPI
func (_mock *MockOidcAPI) UpdateGroupExecute(r client.ApiUpdateGroupRequest) (*client.OidcGroup, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupExecute")
	}

	var r0 *client.OidcGroup
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateGroupRequest) (*client.OidcGroup, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateGroupRequest) *client.OidcGroup); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OidcGroup)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateGroupRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateGroupRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockOidcAPI_UpdateGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupExecute'
type MockOidcAPI_UpdateGroupExecute_Call struct {
	*mock.Call
}

// UpdateGroupExecute is a helper method to define mock.On call
//   - r client.ApiUpdateGroupRequest
func (_e *MockOidcAPI_Expecter) UpdateGroupExecute(r interface{}) *MockOidcAPI_UpdateGroupExecute_Call {
	return &MockOidcAPI_UpdateGroupExecute_Call{Call: _e.mock.On("UpdateGroupExecute", r)}
}

func (_c *MockOidcAPI_UpdateGroupExecute_Call) Run(run func(r client.ApiUpdateGroupRequest)) *MockOidcAPI_UpdateGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateGroupRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockOidcAPI_UpdateGroupExecute_Call) Return(oidcGroup *client.OidcGroup, response *http.Response, err error) *MockOidcAPI_UpdateGroupExecute_Call {
	_c.Call.Return(oidcGroup, response, err)
	return _c
}

func (_c *MockOidcAPI_UpdateGroupExecute_Call) RunAndReturn(run func(r client.ApiUpdateGroupRequest) (*client.OidcGroup, *http.Response, error)) *MockOidcAPI_UpdateGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPermissionAPI creates a new instance of MockPermissionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionAPI {
	mock := &MockPermissionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPermissionAPI is an autogenerated mock type for the PermissionAPI type
type MockPermissionAPI struct {
	mock.Mock
}

type MockPermissionAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionAPI) EXPECT() *MockPermissionAPI_Expecter {
	return &MockPermissionAPI_Expecter{mock: &_m.Mock}
}

// AddPermissionToTeam provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) AddPermissionToTeam(ctx context.Context, uuid string, permission string) client.ApiAddPermissionToTeamRequest {
	ret := _mock.Called(ctx, uuid, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToTeam")
	}

	var r0 client.ApiAddPermissionToTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiAddPermissionToTeamRequest); ok {
		r0 = returnFunc(ctx, uuid, permission)
	} else {
		r0 = ret.Get(0).(client.ApiAddPermissionToTeamRequest)
	}
	return r0
}

// MockPermissionAPI_AddPermissionToTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToTeam'
type MockPermissionAPI_AddPermissionToTeam_Call struct {
	*mock.Call
}

// AddPermissionToTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - permission string
func (_e *MockPermissionAPI_Expecter) AddPermissionToTeam(ctx interface{}, uuid interface{}, permission interface{}) *MockPermissionAPI_AddPermissionToTeam_Call {
	return &MockPermissionAPI_AddPermissionToTeam_Call{Call: _e.mock.On("AddPermissionToTeam", ctx, uuid, permission)}
}

func (_c *MockPermissionAPI_AddPermissionToTeam_Call) Run(run func(ctx context.Context, uuid string, permission string)) *MockPermissionAPI_AddPermissionToTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToTeam_Call) Return(apiAddPermissionToTeamRequest client.ApiAddPermissionToTeamRequest) *MockPermissionAPI_AddPermissionToTeam_Call {
	_c.Call.Return(apiAddPermissionToTeamRequest)
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToTeam_Call) RunAndReturn(run func(ctx context.Context, uuid string, permission string) client.ApiAddPermissionToTeamRequest) *MockPermissionAPI_AddPermissionToTeam_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionToTeamExecute provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) AddPermissionToTeamExecute(r client.ApiAddPermissionToTeamRequest) (*client.Team, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToTeamExecute")
	}

	var r0 *client.Team
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddPermissionToTeamRequest) (*client.Team, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddPermissionToTeamRequest) *client.Team); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddPermissionToTeamRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddPermissionToTeamRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPermissionAPI_AddPermissionToTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToTeamExecute'
type MockPermissionAPI_AddPermissionToTeamExecute_Call struct {
	*mock.Call
}

// AddPermissionToTeamExecute is a helper method to define mock.On call
//   - r client.ApiAddPermissionToTeamRequest
func (_e *MockPermissionAPI_Expecter) AddPermissionToTeamExecute(r interface{}) *MockPermissionAPI_AddPermissionToTeamExecute_Call {
	return &MockPermissionAPI_AddPermissionToTeamExecute_Call{Call: _e.mock.On("AddPermissionToTeamExecute", r)}
}

func (_c *MockPermissionAPI_AddPermissionToTeamExecute_Call) Run(run func(r client.ApiAddPermissionToTeamRequest)) *MockPermissionAPI_AddPermissionToTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddPermissionToTeamRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddPermissionToTeamRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToTeamExecute_Call) Return(team *client.Team, response *http.Response, err error) *MockPermissionAPI_AddPermissionToTeamExecute_Call {
	_c.Call.Return(team, response, err)
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToTeamExecute_Call) RunAndReturn(run func(r client.ApiAddPermissionToTeamRequest) (*client.Team, *http.Response, error)) *MockPermissionAPI_AddPermissionToTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionToUser provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) AddPermissionToUser(ctx context.Context, username string, permission string) client.ApiAddPermissionToUserRequest {
	ret := _mock.Called(ctx, username, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToUser")
	}

	var r0 client.ApiAddPermissionToUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiAddPermissionToUserRequest); ok {
		r0 = returnFunc(ctx, username, permission)
	} else {
		r0 = ret.Get(0).(client.ApiAddPermissionToUserRequest)
	}
	return r0
}

// MockPermissionAPI_AddPermissionToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToUser'
type MockPermissionAPI_AddPermissionToUser_Call struct {
	*mock.Call
}

// AddPermissionToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - permission string
func (_e *MockPermissionAPI_Expecter) AddPermissionToUser(ctx interface{}, username interface{}, permission interface{}) *MockPermissionAPI_AddPermissionToUser_Call {
	return &MockPermissionAPI_AddPermissionToUser_Call{Call: _e.mock.On("AddPermissionToUser", ctx, username, permission)}
}

func (_c *MockPermissionAPI_AddPermissionToUser_Call) Run(run func(ctx context.Context, username string, permission string)) *MockPermissionAPI_AddPermissionToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToUser_Call) Return(apiAddPermissionToUserRequest client.ApiAddPermissionToUserRequest) *MockPermissionAPI_AddPermissionToUser_Call {
	_c.Call.Return(apiAddPermissionToUserRequest)
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToUser_Call) RunAndReturn(run func(ctx context.Context, username string, permission string) client.ApiAddPermissionToUserRequest) *MockPermissionAPI_AddPermissionToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionToUserExecute provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) AddPermissionToUserExecute(r client.ApiAddPermissionToUserRequest) (*client.UserPrincipal, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToUserExecute")
	}

	var r0 *client.UserPrincipal
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddPermissionToUserRequest) (*client.UserPrincipal, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddPermissionToUserRequest) *client.UserPrincipal); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserPrincipal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddPermissionToUserRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddPermissionToUserRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPermissionAPI_AddPermissionToUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToUserExecute'
type MockPermissionAPI_AddPermissionToUserExecute_Call struct {
	*mock.Call
}

// AddPermissionToUserExecute is a helper method to define mock.On call
//   - r client.ApiAddPermissionToUserRequest
func (_e *MockPermissionAPI_Expecter) AddPermissionToUserExecute(r interface{}) *MockPermissionAPI_AddPermissionToUserExecute_Call {
	return &MockPermissionAPI_AddPermissionToUserExecute_Call{Call: _e.mock.On("AddPermissionToUserExecute", r)}
}

func (_c *MockPermissionAPI_AddPermissionToUserExecute_Call) Run(run func(r client.ApiAddPermissionToUserRequest)) *MockPermissionAPI_AddPermissionToUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddPermissionToUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddPermissionToUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToUserExecute_Call) Return(userPrincipal *client.UserPrincipal, response *http.Response, err error) *MockPermissionAPI_AddPermissionToUserExecute_Call {
	_c.Call.Return(userPrincipal, response, err)
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToUserExecute_Call) RunAndReturn(run func(r client.ApiAddPermissionToUserRequest) (*client.UserPrincipal, *http.Response, error)) *MockPermissionAPI_AddPermissionToUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPermissions provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) GetAllPermissions(ctx context.Context) client.ApiGetAllPermissionsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPermissions")
	}

	var r0 client.ApiGetAllPermissionsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetAllPermissionsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllPermissionsRequest)
	}
	return r0
}

// MockPermissionAPI_GetAllPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPermissions'
type MockPermissionAPI_GetAllPermissions_Call struct {
	*mock.Call
}

// GetAllPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPermissionAPI_Expecter) GetAllPermissions(ctx interface{}) *MockPermissionAPI_GetAllPermissions_Call {
	return &MockPermissionAPI_GetAllPermissions_Call{Call: _e.mock.On("GetAllPermissions", ctx)}
}

func (_c *MockPermissionAPI_GetAllPermissions_Call) Run(run func(ctx context.Context)) *MockPermissionAPI_GetAllPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_GetAllPermissions_Call) Return(apiGetAllPermissionsRequest client.ApiGetAllPermissionsRequest) *MockPermissionAPI_GetAllPermissions_Call {
	_c.Call.Return(apiGetAllPermissionsRequest)
	return _c
}

func (_c *MockPermissionAPI_GetAllPermissions_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetAllPermissionsRequest) *MockPermissionAPI_GetAllPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPermissionsExecute provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) GetAllPermissionsExecute(r client.ApiGetAllPermissionsRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPermissionsExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllPermissionsRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllPermissionsRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllPermissionsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllPermissionsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPermissionAPI_GetAllPermissionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPermissionsExecute'
type MockPermissionAPI_GetAllPermissionsExecute_Call struct {
	*mock.Call
}

// GetAllPermissionsExecute is a helper method to define mock.On call
//   - r client.ApiGetAllPermissionsRequest
func (_e *MockPermissionAPI_Expecter) GetAllPermissionsExecute(r interface{}) *MockPermissionAPI_GetAllPermissionsExecute_Call {
	return &MockPermissionAPI_GetAllPermissionsExecute_Call{Call: _e.mock.On("GetAllPermissionsExecute", r)}
}

func (_c *MockPermissionAPI_GetAllPermissionsExecute_Call) Run(run func(r client.ApiGetAllPermissionsRequest)) *MockPermissionAPI_GetAllPermissionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllPermissionsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllPermissionsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_GetAllPermissionsExecute_Call) Return(s string, response *http.Response, err error) *MockPermissionAPI_GetAllPermissionsExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockPermissionAPI_GetAllPermissionsExecute_Call) RunAndReturn(run func(r client.ApiGetAllPermissionsRequest) (string, *http.Response, error)) *MockPermissionAPI_GetAllPermissionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromTeam provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) RemovePermissionFromTeam(ctx context.Context, uuid string, permission string) client.ApiRemovePermissionFromTeamRequest {
	ret := _mock.Called(ctx, uuid, permission)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromTeam")
	}

	var r0 client.ApiRemovePermissionFromTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiRemovePermissionFromTeamRequest); ok {
		r0 = returnFunc(ctx, uuid, permission)
	} else {
		r0 = ret.Get(0).(client.ApiRemovePermissionFromTeamRequest)
	}
	return r0
}

// MockPermissionAPI_RemovePermissionFromTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromTeam'
type MockPermissionAPI_RemovePermissionFromTeam_Call struct {
	*mock.Call
}

// RemovePermissionFromTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - permission string
func (_e *MockPermissionAPI_Expecter) RemovePermissionFromTeam(ctx interface{}, uuid interface{}, permission interface{}) *MockPermissionAPI_RemovePermissionFromTeam_Call {
	return &MockPermissionAPI_RemovePermissionFromTeam_Call{Call: _e.mock.On("RemovePermissionFromTeam", ctx, uuid, permission)}
}

func (_c *MockPermissionAPI_RemovePermissionFromTeam_Call) Run(run func(ctx context.Context, uuid string, permission string)) *MockPermissionAPI_RemovePermissionFromTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromTeam_Call) Return(apiRemovePermissionFromTeamRequest client.ApiRemovePermissionFromTeamRequest) *MockPermissionAPI_RemovePermissionFromTeam_Call {
	_c.Call.Return(apiRemovePermissionFromTeamRequest)
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromTeam_Call) RunAndReturn(run func(ctx context.Context, uuid string, permission string) client.ApiRemovePermissionFromTeamRequest) *MockPermissionAPI_RemovePermissionFromTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromTeamExecute provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) RemovePermissionFromTeamExecute(r client.ApiRemovePermissionFromTeamRequest) (*client.Team, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromTeamExecute")
	}

	var r0 *client.Team
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemovePermissionFromTeamRequest) (*client.Team, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemovePermissionFromTeamRequest) *client.Team); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRemovePermissionFromTeamRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRemovePermissionFromTeamRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPermissionAPI_RemovePermissionFromTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromTeamExecute'
type MockPermissionAPI_RemovePermissionFromTeamExecute_Call struct {
	*mock.Call
}

// RemovePermissionFromTeamExecute is a helper method to define mock.On call
//   - r client.ApiRemovePermissionFromTeamRequest
func (_e *MockPermissionAPI_Expecter) RemovePermissionFromTeamExecute(r interface{}) *MockPermissionAPI_RemovePermissionFromTeamExecute_Call {
	return &MockPermissionAPI_RemovePermissionFromTeamExecute_Call{Call: _e.mock.On("RemovePermissionFromTeamExecute", r)}
}

func (_c *MockPermissionAPI_RemovePermissionFromTeamExecute_Call) Run(run func(r client.ApiRemovePermissionFromTeamRequest)) *MockPermissionAPI_RemovePermissionFromTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRemovePermissionFromTeamRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRemovePermissionFromTeamRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromTeamExecute_Call) Return(team *client.Team, response *http.Response, err error) *MockPermissionAPI_RemovePermissionFromTeamExecute_Call {
	_c.Call.Return(team, response, err)
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromTeamExecute_Call) RunAndReturn(run func(r client.ApiRemovePermissionFromTeamRequest) (*client.Team, *http.Response, error)) *MockPermissionAPI_RemovePermissionFromTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromUser provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) RemovePermissionFromUser(ctx context.Context, username string, permission string) client.ApiRemovePermissionFromUserRequest {
	ret := _mock.Called(ctx, username, permission)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromUser")
	}

	var r0 client.ApiRemovePermissionFromUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiRemovePermissionFromUserRequest); ok {
		r0 = returnFunc(ctx, username, permission)
	} else {
		r0 = ret.Get(0).(client.ApiRemovePermissionFromUserRequest)
	}
	return r0
}

// MockPermissionAPI_RemovePermissionFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromUser'
type MockPermissionAPI_RemovePermissionFromUser_Call struct {
	*mock.Call
}

// RemovePermissionFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - permission string
func (_e *MockPermissionAPI_Expecter) RemovePermissionFromUser(ctx interface{}, username interface{}, permission interface{}) *MockPermissionAPI_RemovePermissionFromUser_Call {
	return &MockPermissionAPI_RemovePermissionFromUser_Call{Call: _e.mock.On("RemovePermissionFromUser", ctx, username, permission)}
}

func (_c *MockPermissionAPI_RemovePermissionFromUser_Call) Run(run func(ctx context.Context, username string, permission string)) *MockPermissionAPI_RemovePermissionFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromUser_Call) Return(apiRemovePermissionFromUserRequest client.ApiRemovePermissionFromUserRequest) *MockPermissionAPI_RemovePermissionFromUser_Call {
	_c.Call.Return(apiRemovePermissionFromUserRequest)
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromUser_Call) RunAndReturn(run func(ctx context.Context, username string, permission string) client.ApiRemovePermissionFromUserRequest) *MockPermissionAPI_RemovePermissionFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromUserExecute provides a mock function for the type MockPermissionAPI
func (_mock *MockPermissionAPI) RemovePermissionFromUserExecute(r client.ApiRemovePermissionFromUserRequest) (*client.UserPrincipal, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromUserExecute")
	}

	var r0 *client.UserPrincipal
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemovePermissionFromUserRequest) (*client.UserPrincipal, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemovePermissionFromUserRequest) *client.UserPrincipal); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserPrincipal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRemovePermissionFromUserRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRemovePermissionFromUserRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPermissionAPI_RemovePermissionFromUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromUserExecute'
type MockPermissionAPI_RemovePermissionFromUserExecute_Call struct {
	*mock.Call
}

// RemovePermissionFromUserExecute is a helper method to define mock.On call
//   - r client.ApiRemovePermissionFromUserRequest
func (_e *MockPermissionAPI_Expecter) RemovePermissionFromUserExecute(r interface{}) *MockPermissionAPI_RemovePermissionFromUserExecute_Call {
	return &MockPermissionAPI_RemovePermissionFromUserExecute_Call{Call: _e.mock.On("RemovePermissionFromUserExecute", r)}
}

func (_c *MockPermissionAPI_RemovePermissionFromUserExecute_Call) Run(run func(r client.ApiRemovePermissionFromUserRequest)) *MockPermissionAPI_RemovePermissionFromUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRemovePermissionFromUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRemovePermissionFromUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromUserExecute_Call) Return(userPrincipal *client.UserPrincipal, response *http.Response, err error) *MockPermissionAPI_RemovePermissionFromUserExecute_Call {
	_c.Call.Return(userPrincipal, response, err)
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromUserExecute_Call) RunAndReturn(run func(r client.ApiRemovePermissionFromUserRequest) (*client.UserPrincipal, *http.Response, error)) *MockPermissionAPI_RemovePermissionFromUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPolicyAPI creates a new instance of MockPolicyAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPolicyAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPolicyAPI {
	mock := &MockPolicyAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPolicyAPI is an autogenerated mock type for the PolicyAPI type
type MockPolicyAPI struct {
	mock.Mock
}

type MockPolicyAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPolicyAPI) EXPECT() *MockPolicyAPI_Expecter {
	return &MockPolicyAPI_Expecter{mock: &_m.Mock}
}

// AddProjectToPolicy provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) AddProjectToPolicy(ctx context.Context, policyUuid string, projectUuid string) client.ApiAddProjectToPolicyRequest {
	ret := _mock.Called(ctx, policyUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToPolicy")
	}

	var r0 client.ApiAddProjectToPolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiAddProjectToPolicyRequest); ok {
		r0 = returnFunc(ctx, policyUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(client.ApiAddProjectToPolicyRequest)
	}
	return r0
}

// MockPolicyAPI_AddProjectToPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToPolicy'
type MockPolicyAPI_AddProjectToPolicy_Call struct {
	*mock.Call
}

// AddProjectToPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
//   - projectUuid string
func (_e *MockPolicyAPI_Expecter) AddProjectToPolicy(ctx interface{}, policyUuid interface{}, projectUuid interface{}) *MockPolicyAPI_AddProjectToPolicy_Call {
	return &MockPolicyAPI_AddProjectToPolicy_Call{Call: _e.mock.On("AddProjectToPolicy", ctx, policyUuid, projectUuid)}
}

func (_c *MockPolicyAPI_AddProjectToPolicy_Call) Run(run func(ctx context.Context, policyUuid string, projectUuid string)) *MockPolicyAPI_AddProjectToPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_AddProjectToPolicy_Call) Return(apiAddProjectToPolicyRequest client.ApiAddProjectToPolicyRequest) *MockPolicyAPI_AddProjectToPolicy_Call {
	_c.Call.Return(apiAddProjectToPolicyRequest)
	return _c
}

func (_c *MockPolicyAPI_AddProjectToPolicy_Call) RunAndReturn(run func(ctx context.Context, policyUuid string, projectUuid string) client.ApiAddProjectToPolicyRequest) *MockPolicyAPI_AddProjectToPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AddProjectToPolicyExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) AddProjectToPolicyExecute(r client.ApiAddProjectToPolicyRequest) (*client.Policy, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToPolicyExecute")
	}

	var r0 *client.Policy
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddProjectToPolicyRequest) (*client.Policy, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddProjectToPolicyRequest) *client.Policy); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddProjectToPolicyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddProjectToPolicyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyAPI_AddProjectToPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToPolicyExecute'
type MockPolicyAPI_AddProjectToPolicyExecute_Call struct {
	*mock.Call
}

// AddProjectToPolicyExecute is a helper method to define mock.On call
//   - r client.ApiAddProjectToPolicyRequest
func (_e *MockPolicyAPI_Expecter) AddProjectToPolicyExecute(r interface{}) *MockPolicyAPI_AddProjectToPolicyExecute_Call {
	return &MockPolicyAPI_AddProjectToPolicyExecute_Call{Call: _e.mock.On("AddProjectToPolicyExecute", r)}
}

func (_c *MockPolicyAPI_AddProjectToPolicyExecute_Call) Run(run func(r client.ApiAddProjectToPolicyRequest)) *MockPolicyAPI_AddProjectToPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddProjectToPolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddProjectToPolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_AddProjectToPolicyExecute_Call) Return(policy *client.Policy, response *http.Response, err error) *MockPolicyAPI_AddProjectToPolicyExecute_Call {
	_c.Call.Return(policy, response, err)
	return _c
}

func (_c *MockPolicyAPI_AddProjectToPolicyExecute_Call) RunAndReturn(run func(r client.ApiAddProjectToPolicyRequest) (*client.Policy, *http.Response, error)) *MockPolicyAPI_AddProjectToPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddTagToPolicy provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) AddTagToPolicy(ctx context.Context, policyUuid string, tagName string) client.ApiAddTagToPolicyRequest {
	ret := _mock.Called(ctx, policyUuid, tagName)

	if len(ret) == 0 {
		panic("no return value specified for AddTagToPolicy")
	}

	var r0 client.ApiAddTagToPolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiAddTagToPolicyRequest); ok {
		r0 = returnFunc(ctx, policyUuid, tagName)
	} else {
		r0 = ret.Get(0).(client.ApiAddTagToPolicyRequest)
	}
	return r0
}

// MockPolicyAPI_AddTagToPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTagToPolicy'
type MockPolicyAPI_AddTagToPolicy_Call struct {
	*mock.Call
}

// AddTagToPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
//   - tagName string
func (_e *MockPolicyAPI_Expecter) AddTagToPolicy(ctx interface{}, policyUuid interface{}, tagName interface{}) *MockPolicyAPI_AddTagToPolicy_Call {
	return &MockPolicyAPI_AddTagToPolicy_Call{Call: _e.mock.On("AddTagToPolicy", ctx, policyUuid, tagName)}
}

func (_c *MockPolicyAPI_AddTagToPolicy_Call) Run(run func(ctx context.Context, policyUuid string, tagName string)) *MockPolicyAPI_AddTagToPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_AddTagToPolicy_Call) Return(apiAddTagToPolicyRequest client.ApiAddTagToPolicyRequest) *MockPolicyAPI_AddTagToPolicy_Call {
	_c.Call.Return(apiAddTagToPolicyRequest)
	return _c
}

func (_c *MockPolicyAPI_AddTagToPolicy_Call) RunAndReturn(run func(ctx context.Context, policyUuid string, tagName string) client.ApiAddTagToPolicyRequest) *MockPolicyAPI_AddTagToPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AddTagToPolicyExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) AddTagToPolicyExecute(r client.ApiAddTagToPolicyRequest) (*client.Policy, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddTagToPolicyExecute")
	}

	var r0 *client.Policy
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddTagToPolicyRequest) (*client.Policy, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddTagToPolicyRequest) *client.Policy); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddTagToPolicyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddTagToPolicyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyAPI_AddTagToPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTagToPolicyExecute'
type MockPolicyAPI_AddTagToPolicyExecute_Call struct {
	*mock.Call
}

// AddTagToPolicyExecute is a helper method to define mock.On call
//   - r client.ApiAddTagToPolicyRequest
func (_e *MockPolicyAPI_Expecter) AddTagToPolicyExecute(r interface{}) *MockPolicyAPI_AddTagToPolicyExecute_Call {
	return &MockPolicyAPI_AddTagToPolicyExecute_Call{Call: _e.mock.On("AddTagToPolicyExecute", r)}
}

func (_c *MockPolicyAPI_AddTagToPolicyExecute_Call) Run(run func(r client.ApiAddTagToPolicyRequest)) *MockPolicyAPI_AddTagToPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddTagToPolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddTagToPolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_AddTagToPolicyExecute_Call) Return(policy *client.Policy, response *http.Response, err error) *MockPolicyAPI_AddTagToPolicyExecute_Call {
	_c.Call.Return(policy, response, err)
	return _c
}

func (_c *MockPolicyAPI_AddTagToPolicyExecute_Call) RunAndReturn(run func(r client.ApiAddTagToPolicyRequest) (*client.Policy, *http.Response, error)) *MockPolicyAPI_AddTagToPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicy provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) CreatePolicy(ctx context.Context) client.ApiCreatePolicyRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicy")
	}

	var r0 client.ApiCreatePolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreatePolicyRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreatePolicyRequest)
	}
	return r0
}

// MockPolicyAPI_CreatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicy'
type MockPolicyAPI_CreatePolicy_Call struct {
	*mock.Call
}

// CreatePolicy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPolicyAPI_Expecter) CreatePolicy(ctx interface{}) *MockPolicyAPI_CreatePolicy_Call {
	return &MockPolicyAPI_CreatePolicy_Call{Call: _e.mock.On("CreatePolicy", ctx)}
}

func (_c *MockPolicyAPI_CreatePolicy_Call) Run(run func(ctx context.Context)) *MockPolicyAPI_CreatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_CreatePolicy_Call) Return(apiCreatePolicyRequest client.ApiCreatePolicyRequest) *MockPolicyAPI_CreatePolicy_Call {
	_c.Call.Return(apiCreatePolicyRequest)
	return _c
}

func (_c *MockPolicyAPI_CreatePolicy_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreatePolicyRequest) *MockPolicyAPI_CreatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) CreatePolicyExecute(r client.ApiCreatePolicyRequest) (*client.Policy, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicyExecute")
	}

	var r0 *client.Policy
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreatePolicyRequest) (*client.Policy, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreatePolicyRequest) *client.Policy); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreatePolicyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreatePolicyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyAPI_CreatePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyExecute'
type MockPolicyAPI_CreatePolicyExecute_Call struct {
	*mock.Call
}

// CreatePolicyExecute is a helper method to define mock.On call
//   - r client.ApiCreatePolicyRequest
func (_e *MockPolicyAPI_Expecter) CreatePolicyExecute(r interface{}) *MockPolicyAPI_CreatePolicyExecute_Call {
	return &MockPolicyAPI_CreatePolicyExecute_Call{Call: _e.mock.On("CreatePolicyExecute", r)}
}

func (_c *MockPolicyAPI_CreatePolicyExecute_Call) Run(run func(r client.ApiCreatePolicyRequest)) *MockPolicyAPI_CreatePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreatePolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreatePolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_CreatePolicyExecute_Call) Return(policy *client.Policy, response *http.Response, err error) *MockPolicyAPI_CreatePolicyExecute_Call {
	_c.Call.Return(policy, response, err)
	return _c
}

func (_c *MockPolicyAPI_CreatePolicyExecute_Call) RunAndReturn(run func(r client.ApiCreatePolicyRequest) (*client.Policy, *http.Response, error)) *MockPolicyAPI_CreatePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicy provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) DeletePolicy(ctx context.Context, uuid string) client.ApiDeletePolicyRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 client.ApiDeletePolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeletePolicyRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeletePolicyRequest)
	}
	return r0
}

// MockPolicyAPI_DeletePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicy'
type MockPolicyAPI_DeletePolicy_Call struct {
	*mock.Call
}

// DeletePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPolicyAPI_Expecter) DeletePolicy(ctx interface{}, uuid interface{}) *MockPolicyAPI_DeletePolicy_Call {
	return &MockPolicyAPI_DeletePolicy_Call{Call: _e.mock.On("DeletePolicy", ctx, uuid)}
}

func (_c *MockPolicyAPI_DeletePolicy_Call) Run(run func(ctx context.Context, uuid string)) *MockPolicyAPI_DeletePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_DeletePolicy_Call) Return(apiDeletePolicyRequest client.ApiDeletePolicyRequest) *MockPolicyAPI_DeletePolicy_Call {
	_c.Call.Return(apiDeletePolicyRequest)
	return _c
}

func (_c *MockPolicyAPI_DeletePolicy_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeletePolicyRequest) *MockPolicyAPI_DeletePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) DeletePolicyExecute(r client.ApiDeletePolicyRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeletePolicyRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeletePolicyRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeletePolicyRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPolicyAPI_DeletePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyExecute'
type MockPolicyAPI_DeletePolicyExecute_Call struct {
	*mock.Call
}

// DeletePolicyExecute is a helper method to define mock.On call
//   - r client.ApiDeletePolicyRequest
func (_e *MockPolicyAPI_Expecter) DeletePolicyExecute(r interface{}) *MockPolicyAPI_DeletePolicyExecute_Call {
	return &MockPolicyAPI_DeletePolicyExecute_Call{Call: _e.mock.On("DeletePolicyExecute", r)}
}

func (_c *MockPolicyAPI_DeletePolicyExecute_Call) Run(run func(r client.ApiDeletePolicyRequest)) *MockPolicyAPI_DeletePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeletePolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeletePolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_DeletePolicyExecute_Call) Return(response *http.Response, err error) *MockPolicyAPI_DeletePolicyExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockPolicyAPI_DeletePolicyExecute_Call) RunAndReturn(run func(r client.ApiDeletePolicyRequest) (*http.Response, error)) *MockPolicyAPI_DeletePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicies provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) GetPolicies(ctx context.Context) client.ApiGetPoliciesRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicies")
	}

	var r0 client.ApiGetPoliciesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetPoliciesRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetPoliciesRequest)
	}
	return r0
}

// MockPolicyAPI_GetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicies'
type MockPolicyAPI_GetPolicies_Call struct {
	*mock.Call
}

// GetPolicies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPolicyAPI_Expecter) GetPolicies(ctx interface{}) *MockPolicyAPI_GetPolicies_Call {
	return &MockPolicyAPI_GetPolicies_Call{Call: _e.mock.On("GetPolicies", ctx)}
}

func (_c *MockPolicyAPI_GetPolicies_Call) Run(run func(ctx context.Context)) *MockPolicyAPI_GetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_GetPolicies_Call) Return(apiGetPoliciesRequest client.ApiGetPoliciesRequest) *MockPolicyAPI_GetPolicies_Call {
	_c.Call.Return(apiGetPoliciesRequest)
	return _c
}

func (_c *MockPolicyAPI_GetPolicies_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetPoliciesRequest) *MockPolicyAPI_GetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoliciesExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) GetPoliciesExecute(r client.ApiGetPoliciesRequest) ([]client.Policy, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPoliciesExecute")
	}

	var r0 []client.Policy
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPoliciesRequest) ([]client.Policy, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPoliciesRequest) []client.Policy); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetPoliciesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetPoliciesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyAPI_GetPoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoliciesExecute'
type MockPolicyAPI_GetPoliciesExecute_Call struct {
	*mock.Call
}

// GetPoliciesExecute is a helper method to define mock.On call
//   - r client.ApiGetPoliciesRequest
func (_e *MockPolicyAPI_Expecter) GetPoliciesExecute(r interface{}) *MockPolicyAPI_GetPoliciesExecute_Call {
	return &MockPolicyAPI_GetPoliciesExecute_Call{Call: _e.mock.On("GetPoliciesExecute", r)}
}

func (_c *MockPolicyAPI_GetPoliciesExecute_Call) Run(run func(r client.ApiGetPoliciesRequest)) *MockPolicyAPI_GetPoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetPoliciesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetPoliciesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_GetPoliciesExecute_Call) Return(policys []client.Policy, response *http.Response, err error) *MockPolicyAPI_GetPoliciesExecute_Call {
	_c.Call.Return(policys, response, err)
	return _c
}

func (_c *MockPolicyAPI_GetPoliciesExecute_Call) RunAndReturn(run func(r client.ApiGetPoliciesRequest) ([]client.Policy, *http.Response, error)) *MockPolicyAPI_GetPoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) GetPolicy(ctx context.Context, uuid string) client.ApiGetPolicyRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 client.ApiGetPolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetPolicyRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetPolicyRequest)
	}
	return r0
}

// MockPolicyAPI_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type MockPolicyAPI_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPolicyAPI_Expecter) GetPolicy(ctx interface{}, uuid interface{}) *MockPolicyAPI_GetPolicy_Call {
	return &MockPolicyAPI_GetPolicy_Call{Call: _e.mock.On("GetPolicy", ctx, uuid)}
}

func (_c *MockPolicyAPI_GetPolicy_Call) Run(run func(ctx context.Context, uuid string)) *MockPolicyAPI_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_GetPolicy_Call) Return(apiGetPolicyRequest client.ApiGetPolicyRequest) *MockPolicyAPI_GetPolicy_Call {
	_c.Call.Return(apiGetPolicyRequest)
	return _c
}

func (_c *MockPolicyAPI_GetPolicy_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetPolicyRequest) *MockPolicyAPI_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) GetPolicyExecute(r client.ApiGetPolicyRequest) (*client.Policy, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyExecute")
	}

	var r0 *client.Policy
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPolicyRequest) (*client.Policy, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetPolicyRequest) *client.Policy); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetPolicyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetPolicyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyAPI_GetPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyExecute'
type MockPolicyAPI_GetPolicyExecute_Call struct {
	*mock.Call
}

// GetPolicyExecute is a helper method to define mock.On call
//   - r client.ApiGetPolicyRequest
func (_e *MockPolicyAPI_Expecter) GetPolicyExecute(r interface{}) *MockPolicyAPI_GetPolicyExecute_Call {
	return &MockPolicyAPI_GetPolicyExecute_Call{Call: _e.mock.On("GetPolicyExecute", r)}
}

func (_c *MockPolicyAPI_GetPolicyExecute_Call) Run(run func(r client.ApiGetPolicyRequest)) *MockPolicyAPI_GetPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetPolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetPolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_GetPolicyExecute_Call) Return(policy *client.Policy, response *http.Response, err error) *MockPolicyAPI_GetPolicyExecute_Call {
	_c.Call.Return(policy, response, err)
	return _c
}

func (_c *MockPolicyAPI_GetPolicyExecute_Call) RunAndReturn(run func(r client.ApiGetPolicyRequest) (*client.Policy, *http.Response, error)) *MockPolicyAPI_GetPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromPolicy provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) RemoveProjectFromPolicy(ctx context.Context, policyUuid string, projectUuid string) client.ApiRemoveProjectFromPolicyRequest {
	ret := _mock.Called(ctx, policyUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromPolicy")
	}

	var r0 client.ApiRemoveProjectFromPolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiRemoveProjectFromPolicyRequest); ok {
		r0 = returnFunc(ctx, policyUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(client.ApiRemoveProjectFromPolicyRequest)
	}
	return r0
}

// MockPolicyAPI_RemoveProjectFromPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromPolicy'
type MockPolicyAPI_RemoveProjectFromPolicy_Call struct {
	*mock.Call
}

// RemoveProjectFromPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
//   - projectUuid string
func (_e *MockPolicyAPI_Expecter) RemoveProjectFromPolicy(ctx interface{}, policyUuid interface{}, projectUuid interface{}) *MockPolicyAPI_RemoveProjectFromPolicy_Call {
	return &MockPolicyAPI_RemoveProjectFromPolicy_Call{Call: _e.mock.On("RemoveProjectFromPolicy", ctx, policyUuid, projectUuid)}
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicy_Call) Run(run func(ctx context.Context, policyUuid string, projectUuid string)) *MockPolicyAPI_RemoveProjectFromPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicy_Call) Return(apiRemoveProjectFromPolicyRequest client.ApiRemoveProjectFromPolicyRequest) *MockPolicyAPI_RemoveProjectFromPolicy_Call {
	_c.Call.Return(apiRemoveProjectFromPolicyRequest)
	return _c
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicy_Call) RunAndReturn(run func(ctx context.Context, policyUuid string, projectUuid string) client.ApiRemoveProjectFromPolicyRequest) *MockPolicyAPI_RemoveProjectFromPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromPolicyExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) RemoveProjectFromPolicyExecute(r client.ApiRemoveProjectFromPolicyRequest) (*client.Policy, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromPolicyExecute")
	}

	var r0 *client.Policy
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveProjectFromPolicyRequest) (*client.Policy, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveProjectFromPolicyRequest) *client.Policy); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRemoveProjectFromPolicyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRemoveProjectFromPolicyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyAPI_RemoveProjectFromPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromPolicyExecute'
type MockPolicyAPI_RemoveProjectFromPolicyExecute_Call struct {
	*mock.Call
}

// RemoveProjectFromPolicyExecute is a helper method to define mock.On call
//   - r client.ApiRemoveProjectFromPolicyRequest
func (_e *MockPolicyAPI_Expecter) RemoveProjectFromPolicyExecute(r interface{}) *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call {
	return &MockPolicyAPI_RemoveProjectFromPolicyExecute_Call{Call: _e.mock.On("RemoveProjectFromPolicyExecute", r)}
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call) Run(run func(r client.ApiRemoveProjectFromPolicyRequest)) *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRemoveProjectFromPolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRemoveProjectFromPolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call) Return(policy *client.Policy, response *http.Response, err error) *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call {
	_c.Call.Return(policy, response, err)
	return _c
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call) RunAndReturn(run func(r client.ApiRemoveProjectFromPolicyRequest) (*client.Policy, *http.Response, error)) *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTagFromPolicy provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) RemoveTagFromPolicy(ctx context.Context, policyUuid string, tagName string) client.ApiRemoveTagFromPolicyRequest {
	ret := _mock.Called(ctx, policyUuid, tagName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagFromPolicy")
	}

	var r0 client.ApiRemoveTagFromPolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiRemoveTagFromPolicyRequest); ok {
		r0 = returnFunc(ctx, policyUuid, tagName)
	} else {
		r0 = ret.Get(0).(client.ApiRemoveTagFromPolicyRequest)
	}
	return r0
}

// MockPolicyAPI_RemoveTagFromPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTagFromPolicy'
type MockPolicyAPI_RemoveTagFromPolicy_Call struct {
	*mock.Call
}

// RemoveTagFromPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
//   - tagName string
func (_e *MockPolicyAPI_Expecter) RemoveTagFromPolicy(ctx interface{}, policyUuid interface{}, tagName interface{}) *MockPolicyAPI_RemoveTagFromPolicy_Call {
	return &MockPolicyAPI_RemoveTagFromPolicy_Call{Call: _e.mock.On("RemoveTagFromPolicy", ctx, policyUuid, tagName)}
}

func (_c *MockPolicyAPI_RemoveTagFromPolicy_Call) Run(run func(ctx context.Context, policyUuid string, tagName string)) *MockPolicyAPI_RemoveTagFromPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_RemoveTagFromPolicy_Call) Return(apiRemoveTagFromPolicyRequest client.ApiRemoveTagFromPolicyRequest) *MockPolicyAPI_RemoveTagFromPolicy_Call {
	_c.Call.Return(apiRemoveTagFromPolicyRequest)
	return _c
}

func (_c *MockPolicyAPI_RemoveTagFromPolicy_Call) RunAndReturn(run func(ctx context.Context, policyUuid string, tagName string) client.ApiRemoveTagFromPolicyRequest) *MockPolicyAPI_RemoveTagFromPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTagFromPolicyExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) RemoveTagFromPolicyExecute(r client.ApiRemoveTagFromPolicyRequest) (*client.Policy, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagFromPolicyExecute")
	}

	var r0 *client.Policy
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveTagFromPolicyRequest) (*client.Policy, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveTagFromPolicyRequest) *client.Policy); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRemoveTagFromPolicyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRemoveTagFromPolicyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyAPI_RemoveTagFromPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTagFromPolicyExecute'
type MockPolicyAPI_RemoveTagFromPolicyExecute_Call struct {
	*mock.Call
}

// RemoveTagFromPolicyExecute is a helper method to define mock.On call
//   - r client.ApiRemoveTagFromPolicyRequest
func (_e *MockPolicyAPI_Expecter) RemoveTagFromPolicyExecute(r interface{}) *MockPolicyAPI_RemoveTagFromPolicyExecute_Call {
	return &MockPolicyAPI_RemoveTagFromPolicyExecute_Call{Call: _e.mock.On("RemoveTagFromPolicyExecute", r)}
}

func (_c *MockPolicyAPI_RemoveTagFromPolicyExecute_Call) Run(run func(r client.ApiRemoveTagFromPolicyRequest)) *MockPolicyAPI_RemoveTagFromPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRemoveTagFromPolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRemoveTagFromPolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_RemoveTagFromPolicyExecute_Call) Return(policy *client.Policy, response *http.Response, err error) *MockPolicyAPI_RemoveTagFromPolicyExecute_Call {
	_c.Call.Return(policy, response, err)
	return _c
}

func (_c *MockPolicyAPI_RemoveTagFromPolicyExecute_Call) RunAndReturn(run func(r client.ApiRemoveTagFromPolicyRequest) (*client.Policy, *http.Response, error)) *MockPolicyAPI_RemoveTagFromPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicy provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) UpdatePolicy(ctx context.Context) client.ApiUpdatePolicyRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicy")
	}

	var r0 client.ApiUpdatePolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdatePolicyRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdatePolicyRequest)
	}
	return r0
}

// MockPolicyAPI_UpdatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicy'
type MockPolicyAPI_UpdatePolicy_Call struct {
	*mock.Call
}

// UpdatePolicy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPolicyAPI_Expecter) UpdatePolicy(ctx interface{}) *MockPolicyAPI_UpdatePolicy_Call {
	return &MockPolicyAPI_UpdatePolicy_Call{Call: _e.mock.On("UpdatePolicy", ctx)}
}

func (_c *MockPolicyAPI_UpdatePolicy_Call) Run(run func(ctx context.Context)) *MockPolicyAPI_UpdatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_UpdatePolicy_Call) Return(apiUpdatePolicyRequest client.ApiUpdatePolicyRequest) *MockPolicyAPI_UpdatePolicy_Call {
	_c.Call.Return(apiUpdatePolicyRequest)
	return _c
}

func (_c *MockPolicyAPI_UpdatePolicy_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdatePolicyRequest) *MockPolicyAPI_UpdatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicyExecute provides a mock function for the type MockPolicyAPI
func (_mock *MockPolicyAPI) UpdatePolicyExecute(r client.ApiUpdatePolicyRequest) (*client.Policy, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicyExecute")
	}

	var r0 *client.Policy
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdatePolicyRequest) (*client.Policy, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdatePolicyRequest) *client.Policy); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Policy)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdatePolicyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdatePolicyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyAPI_UpdatePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicyExecute'
type MockPolicyAPI_UpdatePolicyExecute_Call struct {
	*mock.Call
}

// UpdatePolicyExecute is a helper method to define mock.On call
//   - r client.ApiUpdatePolicyRequest
func (_e *MockPolicyAPI_Expecter) UpdatePolicyExecute(r interface{}) *MockPolicyAPI_UpdatePolicyExecute_Call {
	return &MockPolicyAPI_UpdatePolicyExecute_Call{Call: _e.mock.On("UpdatePolicyExecute", r)}
}

func (_c *MockPolicyAPI_UpdatePolicyExecute_Call) Run(run func(r client.ApiUpdatePolicyRequest)) *MockPolicyAPI_UpdatePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdatePolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdatePolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyAPI_UpdatePolicyExecute_Call) Return(policy *client.Policy, response *http.Response, err error) *MockPolicyAPI_UpdatePolicyExecute_Call {
	_c.Call.Return(policy, response, err)
	return _c
}

func (_c *MockPolicyAPI_UpdatePolicyExecute_Call) RunAndReturn(run func(r client.ApiUpdatePolicyRequest) (*client.Policy, *http.Response, error)) *MockPolicyAPI_UpdatePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPolicyConditionAPI creates a new instance of MockPolicyConditionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPolicyConditionAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPolicyConditionAPI {
	mock := &MockPolicyConditionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPolicyConditionAPI is an autogenerated mock type for the PolicyConditionAPI type
type MockPolicyConditionAPI struct {
	mock.Mock
}

type MockPolicyConditionAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPolicyConditionAPI) EXPECT() *MockPolicyConditionAPI_Expecter {
	return &MockPolicyConditionAPI_Expecter{mock: &_m.Mock}
}

// CreatePolicyCondition provides a mock function for the type MockPolicyConditionAPI
func (_mock *MockPolicyConditionAPI) CreatePolicyCondition(ctx context.Context, uuid string) client.ApiCreatePolicyConditionRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicyCondition")
	}

	var r0 client.ApiCreatePolicyConditionRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiCreatePolicyConditionRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiCreatePolicyConditionRequest)
	}
	return r0
}

// MockPolicyConditionAPI_CreatePolicyCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyCondition'
type MockPolicyConditionAPI_CreatePolicyCondition_Call struct {
	*mock.Call
}

// CreatePolicyCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPolicyConditionAPI_Expecter) CreatePolicyCondition(ctx interface{}, uuid interface{}) *MockPolicyConditionAPI_CreatePolicyCondition_Call {
	return &MockPolicyConditionAPI_CreatePolicyCondition_Call{Call: _e.mock.On("CreatePolicyCondition", ctx, uuid)}
}

func (_c *MockPolicyConditionAPI_CreatePolicyCondition_Call) Run(run func(ctx context.Context, uuid string)) *MockPolicyConditionAPI_CreatePolicyCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPolicyConditionAPI_CreatePolicyCondition_Call) Return(apiCreatePolicyConditionRequest client.ApiCreatePolicyConditionRequest) *MockPolicyConditionAPI_CreatePolicyCondition_Call {
	_c.Call.Return(apiCreatePolicyConditionRequest)
	return _c
}

func (_c *MockPolicyConditionAPI_CreatePolicyCondition_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiCreatePolicyConditionRequest) *MockPolicyConditionAPI_CreatePolicyCondition_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyConditionExecute provides a mock function for the type MockPolicyConditionAPI
func (_mock *MockPolicyConditionAPI) CreatePolicyConditionExecute(r client.ApiCreatePolicyConditionRequest) (*client.PolicyCondition, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicyConditionExecute")
	}

	var r0 *client.PolicyCondition
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreatePolicyConditionRequest) (*client.PolicyCondition, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreatePolicyConditionRequest) *client.PolicyCondition); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PolicyCondition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreatePolicyConditionRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreatePolicyConditionRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyConditionAPI_CreatePolicyConditionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyConditionExecute'
type MockPolicyConditionAPI_CreatePolicyConditionExecute_Call struct {
	*mock.Call
}

// CreatePolicyConditionExecute is a helper method to define mock.On call
//   - r client.ApiCreatePolicyConditionRequest
func (_e *MockPolicyConditionAPI_Expecter) CreatePolicyConditionExecute(r interface{}) *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call {
	return &MockPolicyConditionAPI_CreatePolicyConditionExecute_Call{Call: _e.mock.On("CreatePolicyConditionExecute", r)}
}

func (_c *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call) Run(run func(r client.ApiCreatePolicyConditionRequest)) *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreatePolicyConditionRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreatePolicyConditionRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call) Return(policyCondition *client.PolicyCondition, response *http.Response, err error) *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call {
	_c.Call.Return(policyCondition, response, err)
	return _c
}

func (_c *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call) RunAndReturn(run func(r client.ApiCreatePolicyConditionRequest) (*client.PolicyCondition, *http.Response, error)) *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyCondition provides a mock function for the type MockPolicyConditionAPI
func (_mock *MockPolicyConditionAPI) DeletePolicyCondition(ctx context.Context, uuid string) client.ApiDeletePolicyConditionRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyCondition")
	}

	var r0 client.ApiDeletePolicyConditionRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeletePolicyConditionRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeletePolicyConditionRequest)
	}
	return r0
}

// MockPolicyConditionAPI_DeletePolicyCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyCondition'
type MockPolicyConditionAPI_DeletePolicyCondition_Call struct {
	*mock.Call
}

// DeletePolicyCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPolicyConditionAPI_Expecter) DeletePolicyCondition(ctx interface{}, uuid interface{}) *MockPolicyConditionAPI_DeletePolicyCondition_Call {
	return &MockPolicyConditionAPI_DeletePolicyCondition_Call{Call: _e.mock.On("DeletePolicyCondition", ctx, uuid)}
}

func (_c *MockPolicyConditionAPI_DeletePolicyCondition_Call) Run(run func(ctx context.Context, uuid string)) *MockPolicyConditionAPI_DeletePolicyCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockPolicyConditionAPI_DeletePolicyCondition_Call) Return(apiDeletePolicyConditionRequest client.ApiDeletePolicyConditionRequest) *MockPolicyConditionAPI_DeletePolicyCondition_Call {
	_c.Call.Return(apiDeletePolicyConditionRequest)
	return _c
}

func (_c *MockPolicyConditionAPI_DeletePolicyCondition_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeletePolicyConditionRequest) *MockPolicyConditionAPI_DeletePolicyCondition_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyConditionExecute provides a mock function for the type MockPolicyConditionAPI
func (_mock *MockPolicyConditionAPI) DeletePolicyConditionExecute(r client.ApiDeletePolicyConditionRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyConditionExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeletePolicyConditionRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeletePolicyConditionRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeletePolicyConditionRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPolicyConditionAPI_DeletePolicyConditionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyConditionExecute'
type MockPolicyConditionAPI_DeletePolicyConditionExecute_Call struct {
	*mock.Call
}

// DeletePolicyConditionExecute is a helper method to define mock.On call
//   - r client.ApiDeletePolicyConditionRequest
func (_e *MockPolicyConditionAPI_Expecter) DeletePolicyConditionExecute(r interface{}) *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call {
	return &MockPolicyConditionAPI_DeletePolicyConditionExecute_Call{Call: _e.mock.On("DeletePolicyConditionExecute", r)}
}

func (_c *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call) Run(run func(r client.ApiDeletePolicyConditionRequest)) *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeletePolicyConditionRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeletePolicyConditionRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call) Return(response *http.Response, err error) *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call) RunAndReturn(run func(r client.ApiDeletePolicyConditionRequest) (*http.Response, error)) *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicyCondition provides a mock function for the type MockPolicyConditionAPI
func (_mock *MockPolicyConditionAPI) UpdatePolicyCondition(ctx context.Context) client.ApiUpdatePolicyConditionRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicyCondition")
	}

	var r0 client.ApiUpdatePolicyConditionRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdatePolicyConditionRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdatePolicyConditionRequest)
	}
	return r0
}

// MockPolicyConditionAPI_UpdatePolicyCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicyCondition'
type MockPolicyConditionAPI_UpdatePolicyCondition_Call struct {
	*mock.Call
}

// UpdatePolicyCondition is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPolicyConditionAPI_Expecter) UpdatePolicyCondition(ctx interface{}) *MockPolicyConditionAPI_UpdatePolicyCondition_Call {
	return &MockPolicyConditionAPI_UpdatePolicyCondition_Call{Call: _e.mock.On("UpdatePolicyCondition", ctx)}
}

func (_c *MockPolicyConditionAPI_UpdatePolicyCondition_Call) Run(run func(ctx context.Context)) *MockPolicyConditionAPI_UpdatePolicyCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyConditionAPI_UpdatePolicyCondition_Call) Return(apiUpdatePolicyConditionRequest client.ApiUpdatePolicyConditionRequest) *MockPolicyConditionAPI_UpdatePolicyCondition_Call {
	_c.Call.Return(apiUpdatePolicyConditionRequest)
	return _c
}

func (_c *MockPolicyConditionAPI_UpdatePolicyCondition_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdatePolicyConditionRequest) *MockPolicyConditionAPI_UpdatePolicyCondition_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicyConditionExecute provides a mock function for the type MockPolicyConditionAPI
func (_mock *MockPolicyConditionAPI) UpdatePolicyConditionExecute(r client.ApiUpdatePolicyConditionRequest) (*client.PolicyCondition, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicyConditionExecute")
	}

	var r0 *client.PolicyCondition
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdatePolicyConditionRequest) (*client.PolicyCondition, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdatePolicyConditionRequest) *client.PolicyCondition); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.PolicyCondition)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdatePolicyConditionRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdatePolicyConditionRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicyConditionExecute'
type MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call struct {
	*mock.Call
}

// UpdatePolicyConditionExecute is a helper method to define mock.On call
//   - r client.ApiUpdatePolicyConditionRequest
func (_e *MockPolicyConditionAPI_Expecter) UpdatePolicyConditionExecute(r interface{}) *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call {
	return &MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call{Call: _e.mock.On("UpdatePolicyConditionExecute", r)}
}

func (_c *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call) Run(run func(r client.ApiUpdatePolicyConditionRequest)) *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdatePolicyConditionRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdatePolicyConditionRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call) Return(policyCondition *client.PolicyCondition, response *http.Response, err error) *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call {
	_c.Call.Return(policyCondition, response, err)
	return _c
}

func (_c *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call) RunAndReturn(run func(r client.ApiUpdatePolicyConditionRequest) (*client.PolicyCondition, *http.Response, error)) *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectAPI creates a new instance of MockProjectAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectAPI {
	mock := &MockProjectAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectAPI is an autogenerated mock type for the ProjectAPI type
type MockProjectAPI struct {
	mock.Mock
}

type MockProjectAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectAPI) EXPECT() *MockProjectAPI_Expecter {
	return &MockProjectAPI_Expecter{mock: &_m.Mock}
}

// CloneProject provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) CloneProject(ctx context.Context) client.ApiCloneProjectRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CloneProject")
	}

	var r0 client.ApiCloneProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCloneProjectRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCloneProjectRequest)
	}
	return r0
}

// MockProjectAPI_CloneProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneProject'
type MockProjectAPI_CloneProject_Call struct {
	*mock.Call
}

// CloneProject is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) CloneProject(ctx interface{}) *MockProjectAPI_CloneProject_Call {
	return &MockProjectAPI_CloneProject_Call{Call: _e.mock.On("CloneProject", ctx)}
}

func (_c *MockProjectAPI_CloneProject_Call) Run(run func(ctx context.Context)) *MockProjectAPI_CloneProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_CloneProject_Call) Return(apiCloneProjectRequest client.ApiCloneProjectRequest) *MockProjectAPI_CloneProject_Call {
	_c.Call.Return(apiCloneProjectRequest)
	return _c
}

func (_c *MockProjectAPI_CloneProject_Call) RunAndReturn(run func(ctx context.Context) client.ApiCloneProjectRequest) *MockProjectAPI_CloneProject_Call {
	_c.Call.Return(run)
	return _c
}

// CloneProjectExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) CloneProjectExecute(r client.ApiCloneProjectRequest) (*client.BomUploadResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CloneProjectExecute")
	}

	var r0 *client.BomUploadResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCloneProjectRequest) (*client.BomUploadResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCloneProjectRequest) *client.BomUploadResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BomUploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCloneProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCloneProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_CloneProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneProjectExecute'
type MockProjectAPI_CloneProjectExecute_Call struct {
	*mock.Call
}

// CloneProjectExecute is a helper method to define mock.On call
//   - r client.ApiCloneProjectRequest
func (_e *MockProjectAPI_Expecter) CloneProjectExecute(r interface{}) *MockProjectAPI_CloneProjectExecute_Call {
	return &MockProjectAPI_CloneProjectExecute_Call{Call: _e.mock.On("CloneProjectExecute", r)}
}

func (_c *MockProjectAPI_CloneProjectExecute_Call) Run(run func(r client.ApiCloneProjectRequest)) *MockProjectAPI_CloneProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCloneProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCloneProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_CloneProjectExecute_Call) Return(bomUploadResponse *client.BomUploadResponse, response *http.Response, err error) *MockProjectAPI_CloneProjectExecute_Call {
	_c.Call.Return(bomUploadResponse, response, err)
	return _c
}

func (_c *MockProjectAPI_CloneProjectExecute_Call) RunAndReturn(run func(r client.ApiCloneProjectRequest) (*client.BomUploadResponse, *http.Response, error)) *MockProjectAPI_CloneProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) CreateProject(ctx context.Context) client.ApiCreateProjectRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 client.ApiCreateProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateProjectRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateProjectRequest)
	}
	return r0
}

// MockProjectAPI_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockProjectAPI_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) CreateProject(ctx interface{}) *MockProjectAPI_CreateProject_Call {
	return &MockProjectAPI_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx)}
}

func (_c *MockProjectAPI_CreateProject_Call) Run(run func(ctx context.Context)) *MockProjectAPI_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_CreateProject_Call) Return(apiCreateProjectRequest client.ApiCreateProjectRequest) *MockProjectAPI_CreateProject_Call {
	_c.Call.Return(apiCreateProjectRequest)
	return _c
}

func (_c *MockProjectAPI_CreateProject_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateProjectRequest) *MockProjectAPI_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) CreateProjectExecute(r client.ApiCreateProjectRequest) (*client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectExecute")
	}

	var r0 *client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateProjectRequest) (*client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateProjectRequest) *client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_CreateProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectExecute'
type MockProjectAPI_CreateProjectExecute_Call struct {
	*mock.Call
}

// CreateProjectExecute is a helper method to define mock.On call
//   - r client.ApiCreateProjectRequest
func (_e *MockProjectAPI_Expecter) CreateProjectExecute(r interface{}) *MockProjectAPI_CreateProjectExecute_Call {
	return &MockProjectAPI_CreateProjectExecute_Call{Call: _e.mock.On("CreateProjectExecute", r)}
}

func (_c *MockProjectAPI_CreateProjectExecute_Call) Run(run func(r client.ApiCreateProjectRequest)) *MockProjectAPI_CreateProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_CreateProjectExecute_Call) Return(project *client.Project, response *http.Response, err error) *MockProjectAPI_CreateProjectExecute_Call {
	_c.Call.Return(project, response, err)
	return _c
}

func (_c *MockProjectAPI_CreateProjectExecute_Call) RunAndReturn(run func(r client.ApiCreateProjectRequest) (*client.Project, *http.Response, error)) *MockProjectAPI_CreateProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) DeleteProject(ctx context.Context, uuid string) client.ApiDeleteProjectRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 client.ApiDeleteProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteProjectRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteProjectRequest)
	}
	return r0
}

// MockProjectAPI_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockProjectAPI_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) DeleteProject(ctx interface{}, uuid interface{}) *MockProjectAPI_DeleteProject_Call {
	return &MockProjectAPI_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, uuid)}
}

func (_c *MockProjectAPI_DeleteProject_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectAPI_DeleteProject_Call) Return(apiDeleteProjectRequest client.ApiDeleteProjectRequest) *MockProjectAPI_DeleteProject_Call {
	_c.Call.Return(apiDeleteProjectRequest)
	return _c
}

func (_c *MockProjectAPI_DeleteProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteProjectRequest) *MockProjectAPI_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) DeleteProjectExecute(r client.ApiDeleteProjectRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteProjectRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteProjectRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteProjectRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectAPI_DeleteProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectExecute'
type MockProjectAPI_DeleteProjectExecute_Call struct {
	*mock.Call
}

// DeleteProjectExecute is a helper method to define mock.On call
//   - r client.ApiDeleteProjectRequest
func (_e *MockProjectAPI_Expecter) DeleteProjectExecute(r interface{}) *MockProjectAPI_DeleteProjectExecute_Call {
	return &MockProjectAPI_DeleteProjectExecute_Call{Call: _e.mock.On("DeleteProjectExecute", r)}
}

func (_c *MockProjectAPI_DeleteProjectExecute_Call) Run(run func(r client.ApiDeleteProjectRequest)) *MockProjectAPI_DeleteProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_DeleteProjectExecute_Call) Return(response *http.Response, err error) *MockProjectAPI_DeleteProjectExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectAPI_DeleteProjectExecute_Call) RunAndReturn(run func(r client.ApiDeleteProjectRequest) (*http.Response, error)) *MockProjectAPI_DeleteProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjects provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) DeleteProjects(ctx context.Context) client.ApiDeleteProjectsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjects")
	}

	var r0 client.ApiDeleteProjectsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiDeleteProjectsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteProjectsRequest)
	}
	return r0
}

// MockProjectAPI_DeleteProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjects'
type MockProjectAPI_DeleteProjects_Call struct {
	*mock.Call
}

// DeleteProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) DeleteProjects(ctx interface{}) *MockProjectAPI_DeleteProjects_Call {
	return &MockProjectAPI_DeleteProjects_Call{Call: _e.mock.On("DeleteProjects", ctx)}
}

func (_c *MockProjectAPI_DeleteProjects_Call) Run(run func(ctx context.Context)) *MockProjectAPI_DeleteProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_DeleteProjects_Call) Return(apiDeleteProjectsRequest client.ApiDeleteProjectsRequest) *MockProjectAPI_DeleteProjects_Call {
	_c.Call.Return(apiDeleteProjectsRequest)
	return _c
}

func (_c *MockProjectAPI_DeleteProjects_Call) RunAndReturn(run func(ctx context.Context) client.ApiDeleteProjectsRequest) *MockProjectAPI_DeleteProjects_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectsExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) DeleteProjectsExecute(r client.ApiDeleteProjectsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteProjectsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteProjectsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteProjectsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectAPI_DeleteProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectsExecute'
type MockProjectAPI_DeleteProjectsExecute_Call struct {
	*mock.Call
}

// DeleteProjectsExecute is a helper method to define mock.On call
//   - r client.ApiDeleteProjectsRequest
func (_e *MockProjectAPI_Expecter) DeleteProjectsExecute(r interface{}) *MockProjectAPI_DeleteProjectsExecute_Call {
	return &MockProjectAPI_DeleteProjectsExecute_Call{Call: _e.mock.On("DeleteProjectsExecute", r)}
}

func (_c *MockProjectAPI_DeleteProjectsExecute_Call) Run(run func(r client.ApiDeleteProjectsRequest)) *MockProjectAPI_DeleteProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteProjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteProjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_DeleteProjectsExecute_Call) Return(response *http.Response, err error) *MockProjectAPI_DeleteProjectsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectAPI_DeleteProjectsExecute_Call) RunAndReturn(run func(r client.ApiDeleteProjectsRequest) (*http.Response, error)) *MockProjectAPI_DeleteProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjects provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetChildrenProjects(ctx context.Context, uuid string) client.ApiGetChildrenProjectsRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjects")
	}

	var r0 client.ApiGetChildrenProjectsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetChildrenProjectsRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetChildrenProjectsRequest)
	}
	return r0
}

// MockProjectAPI_GetChildrenProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjects'
type MockProjectAPI_GetChildrenProjects_Call struct {
	*mock.Call
}

// GetChildrenProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetChildrenProjects(ctx interface{}, uuid interface{}) *MockProjectAPI_GetChildrenProjects_Call {
	return &MockProjectAPI_GetChildrenProjects_Call{Call: _e.mock.On("GetChildrenProjects", ctx, uuid)}
}

func (_c *MockProjectAPI_GetChildrenProjects_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_GetChildrenProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjects_Call) Return(apiGetChildrenProjectsRequest client.ApiGetChildrenProjectsRequest) *MockProjectAPI_GetChildrenProjects_Call {
	_c.Call.Return(apiGetChildrenProjectsRequest)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjects_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetChildrenProjectsRequest) *MockProjectAPI_GetChildrenProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsByClassifier provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetChildrenProjectsByClassifier(ctx context.Context, classifier string, uuid string) client.ApiGetChildrenProjectsByClassifierRequest {
	ret := _mock.Called(ctx, classifier, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsByClassifier")
	}

	var r0 client.ApiGetChildrenProjectsByClassifierRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetChildrenProjectsByClassifierRequest); ok {
		r0 = returnFunc(ctx, classifier, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetChildrenProjectsByClassifierRequest)
	}
	return r0
}

// MockProjectAPI_GetChildrenProjectsByClassifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsByClassifier'
type MockProjectAPI_GetChildrenProjectsByClassifier_Call struct {
	*mock.Call
}

// GetChildrenProjectsByClassifier is a helper method to define mock.On call
//   - ctx context.Context
//   - classifier string
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsByClassifier(ctx interface{}, classifier interface{}, uuid interface{}) *MockProjectAPI_GetChildrenProjectsByClassifier_Call {
	return &MockProjectAPI_GetChildrenProjectsByClassifier_Call{Call: _e.mock.On("GetChildrenProjectsByClassifier", ctx, classifier, uuid)}
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifier_Call) Run(run func(ctx context.Context, classifier string, uuid string)) *MockProjectAPI_GetChildrenProjectsByClassifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifier_Call) Return(apiGetChildrenProjectsByClassifierRequest client.ApiGetChildrenProjectsByClassifierRequest) *MockProjectAPI_GetChildrenProjectsByClassifier_Call {
	_c.Call.Return(apiGetChildrenProjectsByClassifierRequest)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifier_Call) RunAndReturn(run func(ctx context.Context, classifier string, uuid string) client.ApiGetChildrenProjectsByClassifierRequest) *MockProjectAPI_GetChildrenProjectsByClassifier_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsByClassifierExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetChildrenProjectsByClassifierExecute(r client.ApiGetChildrenProjectsByClassifierRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsByClassifierExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetChildrenProjectsByClassifierRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetChildrenProjectsByClassifierRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetChildrenProjectsByClassifierRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetChildrenProjectsByClassifierRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsByClassifierExecute'
type MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call struct {
	*mock.Call
}

// GetChildrenProjectsByClassifierExecute is a helper method to define mock.On call
//   - r client.ApiGetChildrenProjectsByClassifierRequest
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsByClassifierExecute(r interface{}) *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call {
	return &MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call{Call: _e.mock.On("GetChildrenProjectsByClassifierExecute", r)}
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call) Run(run func(r client.ApiGetChildrenProjectsByClassifierRequest)) *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetChildrenProjectsByClassifierRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetChildrenProjectsByClassifierRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call) RunAndReturn(run func(r client.ApiGetChildrenProjectsByClassifierRequest) ([]client.Project, *http.Response, error)) *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsByTag provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetChildrenProjectsByTag(ctx context.Context, tag string, uuid string) client.ApiGetChildrenProjectsByTagRequest {
	ret := _mock.Called(ctx, tag, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsByTag")
	}

	var r0 client.ApiGetChildrenProjectsByTagRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetChildrenProjectsByTagRequest); ok {
		r0 = returnFunc(ctx, tag, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetChildrenProjectsByTagRequest)
	}
	return r0
}

// MockProjectAPI_GetChildrenProjectsByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsByTag'
type MockProjectAPI_GetChildrenProjectsByTag_Call struct {
	*mock.Call
}

// GetChildrenProjectsByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsByTag(ctx interface{}, tag interface{}, uuid interface{}) *MockProjectAPI_GetChildrenProjectsByTag_Call {
	return &MockProjectAPI_GetChildrenProjectsByTag_Call{Call: _e.mock.On("GetChildrenProjectsByTag", ctx, tag, uuid)}
}

func (_c *MockProjectAPI_GetChildrenProjectsByTag_Call) Run(run func(ctx context.Context, tag string, uuid string)) *MockProjectAPI_GetChildrenProjectsByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByTag_Call) Return(apiGetChildrenProjectsByTagRequest client.ApiGetChildrenProjectsByTagRequest) *MockProjectAPI_GetChildrenProjectsByTag_Call {
	_c.Call.Return(apiGetChildrenProjectsByTagRequest)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByTag_Call) RunAndReturn(run func(ctx context.Context, tag string, uuid string) client.ApiGetChildrenProjectsByTagRequest) *MockProjectAPI_GetChildrenProjectsByTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsByTagExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetChildrenProjectsByTagExecute(r client.ApiGetChildrenProjectsByTagRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsByTagExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetChildrenProjectsByTagRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetChildrenProjectsByTagRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetChildrenProjectsByTagRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetChildrenProjectsByTagRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetChildrenProjectsByTagExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsByTagExecute'
type MockProjectAPI_GetChildrenProjectsByTagExecute_Call struct {
	*mock.Call
}

// GetChildrenProjectsByTagExecute is a helper method to define mock.On call
//   - r client.ApiGetChildrenProjectsByTagRequest
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsByTagExecute(r interface{}) *MockProjectAPI_GetChildrenProjectsByTagExecute_Call {
	return &MockProjectAPI_GetChildrenProjectsByTagExecute_Call{Call: _e.mock.On("GetChildrenProjectsByTagExecute", r)}
}

func (_c *MockProjectAPI_GetChildrenProjectsByTagExecute_Call) Run(run func(r client.ApiGetChildrenProjectsByTagRequest)) *MockProjectAPI_GetChildrenProjectsByTagExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetChildrenProjectsByTagRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetChildrenProjectsByTagRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByTagExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockProjectAPI_GetChildrenProjectsByTagExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByTagExecute_Call) RunAndReturn(run func(r client.ApiGetChildrenProjectsByTagRequest) ([]client.Project, *http.Response, error)) *MockProjectAPI_GetChildrenProjectsByTagExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetChildrenProjectsExecute(r client.ApiGetChildrenProjectsRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetChildrenProjectsRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetChildrenProjectsRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetChildrenProjectsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetChildrenProjectsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetChildrenProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsExecute'
type MockProjectAPI_GetChildrenProjectsExecute_Call struct {
	*mock.Call
}

// GetChildrenProjectsExecute is a helper method to define mock.On call
//   - r client.ApiGetChildrenProjectsRequest
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsExecute(r interface{}) *MockProjectAPI_GetChildrenProjectsExecute_Call {
	return &MockProjectAPI_GetChildrenProjectsExecute_Call{Call: _e.mock.On("GetChildrenProjectsExecute", r)}
}

func (_c *MockProjectAPI_GetChildrenProjectsExecute_Call) Run(run func(r client.ApiGetChildrenProjectsRequest)) *MockProjectAPI_GetChildrenProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetChildrenProjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetChildrenProjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockProjectAPI_GetChildrenProjectsExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsExecute_Call) RunAndReturn(run func(r client.ApiGetChildrenProjectsRequest) ([]client.Project, *http.Response, error)) *MockProjectAPI_GetChildrenProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestProjectByName provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetLatestProjectByName(ctx context.Context, name string) client.ApiGetLatestProjectByNameRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProjectByName")
	}

	var r0 client.ApiGetLatestProjectByNameRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetLatestProjectByNameRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiGetLatestProjectByNameRequest)
	}
	return r0
}

// MockProjectAPI_GetLatestProjectByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProjectByName'
type MockProjectAPI_GetLatestProjectByName_Call struct {
	*mock.Call
}

// GetLatestProjectByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProjectAPI_Expecter) GetLatestProjectByName(ctx interface{}, name interface{}) *MockProjectAPI_GetLatestProjectByName_Call {
	return &MockProjectAPI_GetLatestProjectByName_Call{Call: _e.mock.On("GetLatestProjectByName", ctx, name)}
}

func (_c *MockProjectAPI_GetLatestProjectByName_Call) Run(run func(ctx context.Context, name string)) *MockProjectAPI_GetLatestProjectByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetLatestProjectByName_Call) Return(apiGetLatestProjectByNameRequest client.ApiGetLatestProjectByNameRequest) *MockProjectAPI_GetLatestProjectByName_Call {
	_c.Call.Return(apiGetLatestProjectByNameRequest)
	return _c
}

func (_c *MockProjectAPI_GetLatestProjectByName_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiGetLatestProjectByNameRequest) *MockProjectAPI_GetLatestProjectByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestProjectByNameExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetLatestProjectByNameExecute(r client.ApiGetLatestProjectByNameRequest) (*client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProjectByNameExecute")
	}

	var r0 *client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLatestProjectByNameRequest) (*client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLatestProjectByNameRequest) *client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetLatestProjectByNameRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetLatestProjectByNameRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetLatestProjectByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProjectByNameExecute'
type MockProjectAPI_GetLatestProjectByNameExecute_Call struct {
	*mock.Call
}

// GetLatestProjectByNameExecute is a helper method to define mock.On call
//   - r client.ApiGetLatestProjectByNameRequest
func (_e *MockProjectAPI_Expecter) GetLatestProjectByNameExecute(r interface{}) *MockProjectAPI_GetLatestProjectByNameExecute_Call {
	return &MockProjectAPI_GetLatestProjectByNameExecute_Call{Call: _e.mock.On("GetLatestProjectByNameExecute", r)}
}

func (_c *MockProjectAPI_GetLatestProjectByNameExecute_Call) Run(run func(r client.ApiGetLatestProjectByNameRequest)) *MockProjectAPI_GetLatestProjectByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetLatestProjectByNameRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetLatestProjectByNameRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetLatestProjectByNameExecute_Call) Return(project *client.Project, response *http.Response, err error) *MockProjectAPI_GetLatestProjectByNameExecute_Call {
	_c.Call.Return(project, response, err)
	return _c
}

func (_c *MockProjectAPI_GetLatestProjectByNameExecute_Call) RunAndReturn(run func(r client.ApiGetLatestProjectByNameRequest) (*client.Project, *http.Response, error)) *MockProjectAPI_GetLatestProjectByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProject(ctx context.Context, uuid string) client.ApiGetProjectRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 client.ApiGetProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetProjectRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectRequest)
	}
	return r0
}

// MockProjectAPI_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockProjectAPI_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetProject(ctx interface{}, uuid interface{}) *MockProjectAPI_GetProject_Call {
	return &MockProjectAPI_GetProject_Call{Call: _e.mock.On("GetProject", ctx, uuid)}
}

func (_c *MockProjectAPI_GetProject_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProject_Call) Return(apiGetProjectRequest client.ApiGetProjectRequest) *MockProjectAPI_GetProject_Call {
	_c.Call.Return(apiGetProjectRequest)
	return _c
}

func (_c *MockProjectAPI_GetProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetProjectRequest) *MockProjectAPI_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByNameAndVersion provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectByNameAndVersion(ctx context.Context) client.ApiGetProjectByNameAndVersionRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByNameAndVersion")
	}

	var r0 client.ApiGetProjectByNameAndVersionRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetProjectByNameAndVersionRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectByNameAndVersionRequest)
	}
	return r0
}

// MockProjectAPI_GetProjectByNameAndVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByNameAndVersion'
type MockProjectAPI_GetProjectByNameAndVersion_Call struct {
	*mock.Call
}

// GetProjectByNameAndVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) GetProjectByNameAndVersion(ctx interface{}) *MockProjectAPI_GetProjectByNameAndVersion_Call {
	return &MockProjectAPI_GetProjectByNameAndVersion_Call{Call: _e.mock.On("GetProjectByNameAndVersion", ctx)}
}

func (_c *MockProjectAPI_GetProjectByNameAndVersion_Call) Run(run func(ctx context.Context)) *MockProjectAPI_GetProjectByNameAndVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectByNameAndVersion_Call) Return(apiGetProjectByNameAndVersionRequest client.ApiGetProjectByNameAndVersionRequest) *MockProjectAPI_GetProjectByNameAndVersion_Call {
	_c.Call.Return(apiGetProjectByNameAndVersionRequest)
	return _c
}

func (_c *MockProjectAPI_GetProjectByNameAndVersion_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetProjectByNameAndVersionRequest) *MockProjectAPI_GetProjectByNameAndVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByNameAndVersionExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectByNameAndVersionExecute(r client.ApiGetProjectByNameAndVersionRequest) (*client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByNameAndVersionExecute")
	}

	var r0 *client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectByNameAndVersionRequest) (*client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectByNameAndVersionRequest) *client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectByNameAndVersionRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectByNameAndVersionRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetProjectByNameAndVersionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByNameAndVersionExecute'
type MockProjectAPI_GetProjectByNameAndVersionExecute_Call struct {
	*mock.Call
}

// GetProjectByNameAndVersionExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectByNameAndVersionRequest
func (_e *MockProjectAPI_Expecter) GetProjectByNameAndVersionExecute(r interface{}) *MockProjectAPI_GetProjectByNameAndVersionExecute_Call {
	return &MockProjectAPI_GetProjectByNameAndVersionExecute_Call{Call: _e.mock.On("GetProjectByNameAndVersionExecute", r)}
}

func (_c *MockProjectAPI_GetProjectByNameAndVersionExecute_Call) Run(run func(r client.ApiGetProjectByNameAndVersionRequest)) *MockProjectAPI_GetProjectByNameAndVersionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectByNameAndVersionRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectByNameAndVersionRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectByNameAndVersionExecute_Call) Return(project *client.Project, response *http.Response, err error) *MockProjectAPI_GetProjectByNameAndVersionExecute_Call {
	_c.Call.Return(project, response, err)
	return _c
}

func (_c *MockProjectAPI_GetProjectByNameAndVersionExecute_Call) RunAndReturn(run func(r client.ApiGetProjectByNameAndVersionRequest) (*client.Project, *http.Response, error)) *MockProjectAPI_GetProjectByNameAndVersionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectExecute(r client.ApiGetProjectRequest) (*client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectExecute")
	}

	var r0 *client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectRequest) (*client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectRequest) *client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectExecute'
type MockProjectAPI_GetProjectExecute_Call struct {
	*mock.Call
}

// GetProjectExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectRequest
func (_e *MockProjectAPI_Expecter) GetProjectExecute(r interface{}) *MockProjectAPI_GetProjectExecute_Call {
	return &MockProjectAPI_GetProjectExecute_Call{Call: _e.mock.On("GetProjectExecute", r)}
}

func (_c *MockProjectAPI_GetProjectExecute_Call) Run(run func(r client.ApiGetProjectRequest)) *MockProjectAPI_GetProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectExecute_Call) Return(project *client.Project, response *http.Response, err error) *MockProjectAPI_GetProjectExecute_Call {
	_c.Call.Return(project, response, err)
	return _c
}

func (_c *MockProjectAPI_GetProjectExecute_Call) RunAndReturn(run func(r client.ApiGetProjectRequest) (*client.Project, *http.Response, error)) *MockProjectAPI_GetProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjects(ctx context.Context) client.ApiGetProjectsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 client.ApiGetProjectsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetProjectsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectsRequest)
	}
	return r0
}

// MockProjectAPI_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockProjectAPI_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) GetProjects(ctx interface{}) *MockProjectAPI_GetProjects_Call {
	return &MockProjectAPI_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx)}
}

func (_c *MockProjectAPI_GetProjects_Call) Run(run func(ctx context.Context)) *MockProjectAPI_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjects_Call) Return(apiGetProjectsRequest client.ApiGetProjectsRequest) *MockProjectAPI_GetProjects_Call {
	_c.Call.Return(apiGetProjectsRequest)
	return _c
}

func (_c *MockProjectAPI_GetProjects_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetProjectsRequest) *MockProjectAPI_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByClassifier provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectsByClassifier(ctx context.Context, classifier string) client.ApiGetProjectsByClassifierRequest {
	ret := _mock.Called(ctx, classifier)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByClassifier")
	}

	var r0 client.ApiGetProjectsByClassifierRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetProjectsByClassifierRequest); ok {
		r0 = returnFunc(ctx, classifier)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectsByClassifierRequest)
	}
	return r0
}

// MockProjectAPI_GetProjectsByClassifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByClassifier'
type MockProjectAPI_GetProjectsByClassifier_Call struct {
	*mock.Call
}

// GetProjectsByClassifier is a helper method to define mock.On call
//   - ctx context.Context
//   - classifier string
func (_e *MockProjectAPI_Expecter) GetProjectsByClassifier(ctx interface{}, classifier interface{}) *MockProjectAPI_GetProjectsByClassifier_Call {
	return &MockProjectAPI_GetProjectsByClassifier_Call{Call: _e.mock.On("GetProjectsByClassifier", ctx, classifier)}
}

func (_c *MockProjectAPI_GetProjectsByClassifier_Call) Run(run func(ctx context.Context, classifier string)) *MockProjectAPI_GetProjectsByClassifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsByClassifier_Call) Return(apiGetProjectsByClassifierRequest client.ApiGetProjectsByClassifierRequest) *MockProjectAPI_GetProjectsByClassifier_Call {
	_c.Call.Return(apiGetProjectsByClassifierRequest)
	return _c
}

func (_c *MockProjectAPI_GetProjectsByClassifier_Call) RunAndReturn(run func(ctx context.Context, classifier string) client.ApiGetProjectsByClassifierRequest) *MockProjectAPI_GetProjectsByClassifier_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByClassifierExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectsByClassifierExecute(r client.ApiGetProjectsByClassifierRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByClassifierExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectsByClassifierRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectsByClassifierRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectsByClassifierRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectsByClassifierRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetProjectsByClassifierExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByClassifierExecute'
type MockProjectAPI_GetProjectsByClassifierExecute_Call struct {
	*mock.Call
}

// GetProjectsByClassifierExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectsByClassifierRequest
func (_e *MockProjectAPI_Expecter) GetProjectsByClassifierExecute(r interface{}) *MockProjectAPI_GetProjectsByClassifierExecute_Call {
	return &MockProjectAPI_GetProjectsByClassifierExecute_Call{Call: _e.mock.On("GetProjectsByClassifierExecute", r)}
}

func (_c *MockProjectAPI_GetProjectsByClassifierExecute_Call) Run(run func(r client.ApiGetProjectsByClassifierRequest)) *MockProjectAPI_GetProjectsByClassifierExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectsByClassifierRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectsByClassifierRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsByClassifierExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockProjectAPI_GetProjectsByClassifierExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockProjectAPI_GetProjectsByClassifierExecute_Call) RunAndReturn(run func(r client.ApiGetProjectsByClassifierRequest) ([]client.Project, *http.Response, error)) *MockProjectAPI_GetProjectsByClassifierExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByTag provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectsByTag(ctx context.Context, tag string) client.ApiGetProjectsByTagRequest {
	ret := _mock.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByTag")
	}

	var r0 client.ApiGetProjectsByTagRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetProjectsByTagRequest); ok {
		r0 = returnFunc(ctx, tag)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectsByTagRequest)
	}
	return r0
}

// MockProjectAPI_GetProjectsByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByTag'
type MockProjectAPI_GetProjectsByTag_Call struct {
	*mock.Call
}

// GetProjectsByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
func (_e *MockProjectAPI_Expecter) GetProjectsByTag(ctx interface{}, tag interface{}) *MockProjectAPI_GetProjectsByTag_Call {
	return &MockProjectAPI_GetProjectsByTag_Call{Call: _e.mock.On("GetProjectsByTag", ctx, tag)}
}

func (_c *MockProjectAPI_GetProjectsByTag_Call) Run(run func(ctx context.Context, tag string)) *MockProjectAPI_GetProjectsByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsByTag_Call) Return(apiGetProjectsByTagRequest client.ApiGetProjectsByTagRequest) *MockProjectAPI_GetProjectsByTag_Call {
	_c.Call.Return(apiGetProjectsByTagRequest)
	return _c
}

func (_c *MockProjectAPI_GetProjectsByTag_Call) RunAndReturn(run func(ctx context.Context, tag string) client.ApiGetProjectsByTagRequest) *MockProjectAPI_GetProjectsByTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByTagExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectsByTagExecute(r client.ApiGetProjectsByTagRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByTagExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectsByTagRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectsByTagRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectsByTagRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectsByTagRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetProjectsByTagExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByTagExecute'
type MockProjectAPI_GetProjectsByTagExecute_Call struct {
	*mock.Call
}

// GetProjectsByTagExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectsByTagRequest
func (_e *MockProjectAPI_Expecter) GetProjectsByTagExecute(r interface{}) *MockProjectAPI_GetProjectsByTagExecute_Call {
	return &MockProjectAPI_GetProjectsByTagExecute_Call{Call: _e.mock.On("GetProjectsByTagExecute", r)}
}

func (_c *MockProjectAPI_GetProjectsByTagExecute_Call) Run(run func(r client.ApiGetProjectsByTagRequest)) *MockProjectAPI_GetProjectsByTagExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectsByTagRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectsByTagRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsByTagExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockProjectAPI_GetProjectsByTagExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockProjectAPI_GetProjectsByTagExecute_Call) RunAndReturn(run func(r client.ApiGetProjectsByTagRequest) ([]client.Project, *http.Response, error)) *MockProjectAPI_GetProjectsByTagExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectsExecute(r client.ApiGetProjectsRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectsRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectsRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsExecute'
type MockProjectAPI_GetProjectsExecute_Call struct {
	*mock.Call
}

// GetProjectsExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectsRequest
func (_e *MockProjectAPI_Expecter) GetProjectsExecute(r interface{}) *MockProjectAPI_GetProjectsExecute_Call {
	return &MockProjectAPI_GetProjectsExecute_Call{Call: _e.mock.On("GetProjectsExecute", r)}
}

func (_c *MockProjectAPI_GetProjectsExecute_Call) Run(run func(r client.ApiGetProjectsRequest)) *MockProjectAPI_GetProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockProjectAPI_GetProjectsExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockProjectAPI_GetProjectsExecute_Call) RunAndReturn(run func(r client.ApiGetProjectsRequest) ([]client.Project, *http.Response, error)) *MockProjectAPI_GetProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsWithoutDescendantsOf provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectsWithoutDescendantsOf(ctx context.Context, uuid string) client.ApiGetProjectsWithoutDescendantsOfRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsWithoutDescendantsOf")
	}

	var r0 client.ApiGetProjectsWithoutDescendantsOfRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetProjectsWithoutDescendantsOfRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetProjectsWithoutDescendantsOfRequest)
	}
	return r0
}

// MockProjectAPI_GetProjectsWithoutDescendantsOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsWithoutDescendantsOf'
type MockProjectAPI_GetProjectsWithoutDescendantsOf_Call struct {
	*mock.Call
}

// GetProjectsWithoutDescendantsOf is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetProjectsWithoutDescendantsOf(ctx interface{}, uuid interface{}) *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call {
	return &MockProjectAPI_GetProjectsWithoutDescendantsOf_Call{Call: _e.mock.On("GetProjectsWithoutDescendantsOf", ctx, uuid)}
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call) Return(apiGetProjectsWithoutDescendantsOfRequest client.ApiGetProjectsWithoutDescendantsOfRequest) *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call {
	_c.Call.Return(apiGetProjectsWithoutDescendantsOfRequest)
	return _c
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetProjectsWithoutDescendantsOfRequest) *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsWithoutDescendantsOfExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) GetProjectsWithoutDescendantsOfExecute(r client.ApiGetProjectsWithoutDescendantsOfRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsWithoutDescendantsOfExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectsWithoutDescendantsOfRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProjectsWithoutDescendantsOfRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProjectsWithoutDescendantsOfRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProjectsWithoutDescendantsOfRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsWithoutDescendantsOfExecute'
type MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call struct {
	*mock.Call
}

// GetProjectsWithoutDescendantsOfExecute is a helper method to define mock.On call
//   - r client.ApiGetProjectsWithoutDescendantsOfRequest
func (_e *MockProjectAPI_Expecter) GetProjectsWithoutDescendantsOfExecute(r interface{}) *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call {
	return &MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call{Call: _e.mock.On("GetProjectsWithoutDescendantsOfExecute", r)}
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call) Run(run func(r client.ApiGetProjectsWithoutDescendantsOfRequest)) *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProjectsWithoutDescendantsOfRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProjectsWithoutDescendantsOfRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call) RunAndReturn(run func(r client.ApiGetProjectsWithoutDescendantsOfRequest) ([]client.Project, *http.Response, error)) *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call {
	_c.Call.Return(run)
	return _c
}

// PatchProject provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) PatchProject(ctx context.Context, uuid string) client.ApiPatchProjectRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for PatchProject")
	}

	var r0 client.ApiPatchProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiPatchProjectRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiPatchProjectRequest)
	}
	return r0
}

// MockProjectAPI_PatchProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchProject'
type MockProjectAPI_PatchProject_Call struct {
	*mock.Call
}

// PatchProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) PatchProject(ctx interface{}, uuid interface{}) *MockProjectAPI_PatchProject_Call {
	return &MockProjectAPI_PatchProject_Call{Call: _e.mock.On("PatchProject", ctx, uuid)}
}

func (_c *MockProjectAPI_PatchProject_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_PatchProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectAPI_PatchProject_Call) Return(apiPatchProjectRequest client.ApiPatchProjectRequest) *MockProjectAPI_PatchProject_Call {
	_c.Call.Return(apiPatchProjectRequest)
	return _c
}

func (_c *MockProjectAPI_PatchProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiPatchProjectRequest) *MockProjectAPI_PatchProject_Call {
	_c.Call.Return(run)
	return _c
}

// PatchProjectExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) PatchProjectExecute(r client.ApiPatchProjectRequest) (*client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for PatchProjectExecute")
	}

	var r0 *client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiPatchProjectRequest) (*client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiPatchProjectRequest) *client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiPatchProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiPatchProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_PatchProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchProjectExecute'
type MockProjectAPI_PatchProjectExecute_Call struct {
	*mock.Call
}

// PatchProjectExecute is a helper method to define mock.On call
//   - r client.ApiPatchProjectRequest
func (_e *MockProjectAPI_Expecter) PatchProjectExecute(r interface{}) *MockProjectAPI_PatchProjectExecute_Call {
	return &MockProjectAPI_PatchProjectExecute_Call{Call: _e.mock.On("PatchProjectExecute", r)}
}

func (_c *MockProjectAPI_PatchProjectExecute_Call) Run(run func(r client.ApiPatchProjectRequest)) *MockProjectAPI_PatchProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiPatchProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiPatchProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_PatchProjectExecute_Call) Return(project *client.Project, response *http.Response, err error) *MockProjectAPI_PatchProjectExecute_Call {
	_c.Call.Return(project, response, err)
	return _c
}

func (_c *MockProjectAPI_PatchProjectExecute_Call) RunAndReturn(run func(r client.ApiPatchProjectRequest) (*client.Project, *http.Response, error)) *MockProjectAPI_PatchProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) UpdateProject(ctx context.Context) client.ApiUpdateProjectRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 client.ApiUpdateProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateProjectRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateProjectRequest)
	}
	return r0
}

// MockProjectAPI_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type MockProjectAPI_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) UpdateProject(ctx interface{}) *MockProjectAPI_UpdateProject_Call {
	return &MockProjectAPI_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx)}
}

func (_c *MockProjectAPI_UpdateProject_Call) Run(run func(ctx context.Context)) *MockProjectAPI_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_UpdateProject_Call) Return(apiUpdateProjectRequest client.ApiUpdateProjectRequest) *MockProjectAPI_UpdateProject_Call {
	_c.Call.Return(apiUpdateProjectRequest)
	return _c
}

func (_c *MockProjectAPI_UpdateProject_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateProjectRequest) *MockProjectAPI_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectExecute provides a mock function for the type MockProjectAPI
func (_mock *MockProjectAPI) UpdateProjectExecute(r client.ApiUpdateProjectRequest) (*client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectExecute")
	}

	var r0 *client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateProjectRequest) (*client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateProjectRequest) *client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectAPI_UpdateProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectExecute'
type MockProjectAPI_UpdateProjectExecute_Call struct {
	*mock.Call
}

// UpdateProjectExecute is a helper method to define mock.On call
//   - r client.ApiUpdateProjectRequest
func (_e *MockProjectAPI_Expecter) UpdateProjectExecute(r interface{}) *MockProjectAPI_UpdateProjectExecute_Call {
	return &MockProjectAPI_UpdateProjectExecute_Call{Call: _e.mock.On("UpdateProjectExecute", r)}
}

func (_c *MockProjectAPI_UpdateProjectExecute_Call) Run(run func(r client.ApiUpdateProjectRequest)) *MockProjectAPI_UpdateProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectAPI_UpdateProjectExecute_Call) Return(project *client.Project, response *http.Response, err error) *MockProjectAPI_UpdateProjectExecute_Call {
	_c.Call.Return(project, response, err)
	return _c
}

func (_c *MockProjectAPI_UpdateProjectExecute_Call) RunAndReturn(run func(r client.ApiUpdateProjectRequest) (*client.Project, *http.Response, error)) *MockProjectAPI_UpdateProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectPropertyAPI creates a new instance of MockProjectPropertyAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectPropertyAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectPropertyAPI {
	mock := &MockProjectPropertyAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectPropertyAPI is an autogenerated mock type for the ProjectPropertyAPI type
type MockProjectPropertyAPI struct {
	mock.Mock
}

type MockProjectPropertyAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectPropertyAPI) EXPECT() *MockProjectPropertyAPI_Expecter {
	return &MockProjectPropertyAPI_Expecter{mock: &_m.Mock}
}

// CreateProperty1 provides a mock function for the type MockProjectPropertyAPI
func (_mock *MockProjectPropertyAPI) CreateProperty1(ctx context.Context, uuid string) client.ApiCreateProperty1Request {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateProperty1")
	}

	var r0 client.ApiCreateProperty1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiCreateProperty1Request); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiCreateProperty1Request)
	}
	return r0
}

// MockProjectPropertyAPI_CreateProperty1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProperty1'
type MockProjectPropertyAPI_CreateProperty1_Call struct {
	*mock.Call
}

// CreateProperty1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectPropertyAPI_Expecter) CreateProperty1(ctx interface{}, uuid interface{}) *MockProjectPropertyAPI_CreateProperty1_Call {
	return &MockProjectPropertyAPI_CreateProperty1_Call{Call: _e.mock.On("CreateProperty1", ctx, uuid)}
}

func (_c *MockProjectPropertyAPI_CreateProperty1_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectPropertyAPI_CreateProperty1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectPropertyAPI_CreateProperty1_Call) Return(apiCreateProperty1Request client.ApiCreateProperty1Request) *MockProjectPropertyAPI_CreateProperty1_Call {
	_c.Call.Return(apiCreateProperty1Request)
	return _c
}

func (_c *MockProjectPropertyAPI_CreateProperty1_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiCreateProperty1Request) *MockProjectPropertyAPI_CreateProperty1_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProperty1Execute provides a mock function for the type MockProjectPropertyAPI
func (_mock *MockProjectPropertyAPI) CreateProperty1Execute(r client.ApiCreateProperty1Request) (*client.ProjectProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProperty1Execute")
	}

	var r0 *client.ProjectProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateProperty1Request) (*client.ProjectProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateProperty1Request) *client.ProjectProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ProjectProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateProperty1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateProperty1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectPropertyAPI_CreateProperty1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProperty1Execute'
type MockProjectPropertyAPI_CreateProperty1Execute_Call struct {
	*mock.Call
}

// CreateProperty1Execute is a helper method to define mock.On call
//   - r client.ApiCreateProperty1Request
func (_e *MockProjectPropertyAPI_Expecter) CreateProperty1Execute(r interface{}) *MockProjectPropertyAPI_CreateProperty1Execute_Call {
	return &MockProjectPropertyAPI_CreateProperty1Execute_Call{Call: _e.mock.On("CreateProperty1Execute", r)}
}

func (_c *MockProjectPropertyAPI_CreateProperty1Execute_Call) Run(run func(r client.ApiCreateProperty1Request)) *MockProjectPropertyAPI_CreateProperty1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateProperty1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateProperty1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectPropertyAPI_CreateProperty1Execute_Call) Return(projectProperty *client.ProjectProperty, response *http.Response, err error) *MockProjectPropertyAPI_CreateProperty1Execute_Call {
	_c.Call.Return(projectProperty, response, err)
	return _c
}

func (_c *MockProjectPropertyAPI_CreateProperty1Execute_Call) RunAndReturn(run func(r client.ApiCreateProperty1Request) (*client.ProjectProperty, *http.Response, error)) *MockProjectPropertyAPI_CreateProperty1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProperty1 provides a mock function for the type MockProjectPropertyAPI
func (_mock *MockProjectPropertyAPI) DeleteProperty1(ctx context.Context, uuid string) client.ApiDeleteProperty1Request {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProperty1")
	}

	var r0 client.ApiDeleteProperty1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteProperty1Request); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteProperty1Request)
	}
	return r0
}

// MockProjectPropertyAPI_DeleteProperty1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProperty1'
type MockProjectPropertyAPI_DeleteProperty1_Call struct {
	*mock.Call
}

// DeleteProperty1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectPropertyAPI_Expecter) DeleteProperty1(ctx interface{}, uuid interface{}) *MockProjectPropertyAPI_DeleteProperty1_Call {
	return &MockProjectPropertyAPI_DeleteProperty1_Call{Call: _e.mock.On("DeleteProperty1", ctx, uuid)}
}

func (_c *MockProjectPropertyAPI_DeleteProperty1_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectPropertyAPI_DeleteProperty1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectPropertyAPI_DeleteProperty1_Call) Return(apiDeleteProperty1Request client.ApiDeleteProperty1Request) *MockProjectPropertyAPI_DeleteProperty1_Call {
	_c.Call.Return(apiDeleteProperty1Request)
	return _c
}

func (_c *MockProjectPropertyAPI_DeleteProperty1_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteProperty1Request) *MockProjectPropertyAPI_DeleteProperty1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProperty1Execute provides a mock function for the type MockProjectPropertyAPI
func (_mock *MockProjectPropertyAPI) DeleteProperty1Execute(r client.ApiDeleteProperty1Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProperty1Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteProperty1Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteProperty1Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteProperty1Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProjectPropertyAPI_DeleteProperty1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProperty1Execute'
type MockProjectPropertyAPI_DeleteProperty1Execute_Call struct {
	*mock.Call
}

// DeleteProperty1Execute is a helper method to define mock.On call
//   - r client.ApiDeleteProperty1Request
func (_e *MockProjectPropertyAPI_Expecter) DeleteProperty1Execute(r interface{}) *MockProjectPropertyAPI_DeleteProperty1Execute_Call {
	return &MockProjectPropertyAPI_DeleteProperty1Execute_Call{Call: _e.mock.On("DeleteProperty1Execute", r)}
}

func (_c *MockProjectPropertyAPI_DeleteProperty1Execute_Call) Run(run func(r client.ApiDeleteProperty1Request)) *MockProjectPropertyAPI_DeleteProperty1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteProperty1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteProperty1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectPropertyAPI_DeleteProperty1Execute_Call) Return(response *http.Response, err error) *MockProjectPropertyAPI_DeleteProperty1Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockProjectPropertyAPI_DeleteProperty1Execute_Call) RunAndReturn(run func(r client.ApiDeleteProperty1Request) (*http.Response, error)) *MockProjectPropertyAPI_DeleteProperty1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProperties1 provides a mock function for the type MockProjectPropertyAPI
func (_mock *MockProjectPropertyAPI) GetProperties1(ctx context.Context, uuid string) client.ApiGetProperties1Request {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProperties1")
	}

	var r0 client.ApiGetProperties1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetProperties1Request); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetProperties1Request)
	}
	return r0
}

// MockProjectPropertyAPI_GetProperties1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperties1'
type MockProjectPropertyAPI_GetProperties1_Call struct {
	*mock.Call
}

// GetProperties1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectPropertyAPI_Expecter) GetProperties1(ctx interface{}, uuid interface{}) *MockProjectPropertyAPI_GetProperties1_Call {
	return &MockProjectPropertyAPI_GetProperties1_Call{Call: _e.mock.On("GetProperties1", ctx, uuid)}
}

func (_c *MockProjectPropertyAPI_GetProperties1_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectPropertyAPI_GetProperties1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectPropertyAPI_GetProperties1_Call) Return(apiGetProperties1Request client.ApiGetProperties1Request) *MockProjectPropertyAPI_GetProperties1_Call {
	_c.Call.Return(apiGetProperties1Request)
	return _c
}

func (_c *MockProjectPropertyAPI_GetProperties1_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetProperties1Request) *MockProjectPropertyAPI_GetProperties1_Call {
	_c.Call.Return(run)
	return _c
}

// GetProperties1Execute provides a mock function for the type MockProjectPropertyAPI
func (_mock *MockProjectPropertyAPI) GetProperties1Execute(r client.ApiGetProperties1Request) ([]client.ProjectProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProperties1Execute")
	}

	var r0 []client.ProjectProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProperties1Request) ([]client.ProjectProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetProperties1Request) []client.ProjectProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ProjectProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetProperties1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetProperties1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectPropertyAPI_GetProperties1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperties1Execute'
type MockProjectPropertyAPI_GetProperties1Execute_Call struct {
	*mock.Call
}

// GetProperties1Execute is a helper method to define mock.On call
//   - r client.ApiGetProperties1Request
func (_e *MockProjectPropertyAPI_Expecter) GetProperties1Execute(r interface{}) *MockProjectPropertyAPI_GetProperties1Execute_Call {
	return &MockProjectPropertyAPI_GetProperties1Execute_Call{Call: _e.mock.On("GetProperties1Execute", r)}
}

func (_c *MockProjectPropertyAPI_GetProperties1Execute_Call) Run(run func(r client.ApiGetProperties1Request)) *MockProjectPropertyAPI_GetProperties1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetProperties1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetProperties1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectPropertyAPI_GetProperties1Execute_Call) Return(projectPropertys []client.ProjectProperty, response *http.Response, err error) *MockProjectPropertyAPI_GetProperties1Execute_Call {
	_c.Call.Return(projectPropertys, response, err)
	return _c
}

func (_c *MockProjectPropertyAPI_GetProperties1Execute_Call) RunAndReturn(run func(r client.ApiGetProperties1Request) ([]client.ProjectProperty, *http.Response, error)) *MockProjectPropertyAPI_GetProperties1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProperty provides a mock function for the type MockProjectPropertyAPI
func (_mock *MockProjectPropertyAPI) UpdateProperty(ctx context.Context, uuid string) client.ApiUpdatePropertyRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProperty")
	}

	var r0 client.ApiUpdatePropertyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiUpdatePropertyRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiUpdatePropertyRequest)
	}
	return r0
}

// MockProjectPropertyAPI_UpdateProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProperty'
type MockProjectPropertyAPI_UpdateProperty_Call struct {
	*mock.Call
}

// UpdateProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectPropertyAPI_Expecter) UpdateProperty(ctx interface{}, uuid interface{}) *MockProjectPropertyAPI_UpdateProperty_Call {
	return &MockProjectPropertyAPI_UpdateProperty_Call{Call: _e.mock.On("UpdateProperty", ctx, uuid)}
}

func (_c *MockProjectPropertyAPI_UpdateProperty_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectPropertyAPI_UpdateProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockProjectPropertyAPI_UpdateProperty_Call) Return(apiUpdatePropertyRequest client.ApiUpdatePropertyRequest) *MockProjectPropertyAPI_UpdateProperty_Call {
	_c.Call.Return(apiUpdatePropertyRequest)
	return _c
}

func (_c *MockProjectPropertyAPI_UpdateProperty_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiUpdatePropertyRequest) *MockProjectPropertyAPI_UpdateProperty_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePropertyExecute provides a mock function for the type MockProjectPropertyAPI
func (_mock *MockProjectPropertyAPI) UpdatePropertyExecute(r client.ApiUpdatePropertyRequest) (*client.ProjectProperty, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePropertyExecute")
	}

	var r0 *client.ProjectProperty
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdatePropertyRequest) (*client.ProjectProperty, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdatePropertyRequest) *client.ProjectProperty); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ProjectProperty)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdatePropertyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdatePropertyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockProjectPropertyAPI_UpdatePropertyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePropertyExecute'
type MockProjectPropertyAPI_UpdatePropertyExecute_Call struct {
	*mock.Call
}

// UpdatePropertyExecute is a helper method to define mock.On call
//   - r client.ApiUpdatePropertyRequest
func (_e *MockProjectPropertyAPI_Expecter) UpdatePropertyExecute(r interface{}) *MockProjectPropertyAPI_UpdatePropertyExecute_Call {
	return &MockProjectPropertyAPI_UpdatePropertyExecute_Call{Call: _e.mock.On("UpdatePropertyExecute", r)}
}

func (_c *MockProjectPropertyAPI_UpdatePropertyExecute_Call) Run(run func(r client.ApiUpdatePropertyRequest)) *MockProjectPropertyAPI_UpdatePropertyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdatePropertyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdatePropertyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectPropertyAPI_UpdatePropertyExecute_Call) Return(projectProperty *client.ProjectProperty, response *http.Response, err error) *MockProjectPropertyAPI_UpdatePropertyExecute_Call {
	_c.Call.Return(projectProperty, response, err)
	return _c
}

func (_c *MockProjectPropertyAPI_UpdatePropertyExecute_Call) RunAndReturn(run func(r client.ApiUpdatePropertyRequest) (*client.ProjectProperty, *http.Response, error)) *MockProjectPropertyAPI_UpdatePropertyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepositoryAPI creates a new instance of MockRepositoryAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepositoryAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepositoryAPI {
	mock := &MockRepositoryAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepositoryAPI is an autogenerated mock type for the RepositoryAPI type
type MockRepositoryAPI struct {
	mock.Mock
}

type MockRepositoryAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepositoryAPI) EXPECT() *MockRepositoryAPI_Expecter {
	return &MockRepositoryAPI_Expecter{mock: &_m.Mock}
}

// CreateRepository provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) CreateRepository(ctx context.Context) client.ApiCreateRepositoryRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 client.ApiCreateRepositoryRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateRepositoryRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateRepositoryRequest)
	}
	return r0
}

// MockRepositoryAPI_CreateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepository'
type MockRepositoryAPI_CreateRepository_Call struct {
	*mock.Call
}

// CreateRepository is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepositoryAPI_Expecter) CreateRepository(ctx interface{}) *MockRepositoryAPI_CreateRepository_Call {
	return &MockRepositoryAPI_CreateRepository_Call{Call: _e.mock.On("CreateRepository", ctx)}
}

func (_c *MockRepositoryAPI_CreateRepository_Call) Run(run func(ctx context.Context)) *MockRepositoryAPI_CreateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_CreateRepository_Call) Return(apiCreateRepositoryRequest client.ApiCreateRepositoryRequest) *MockRepositoryAPI_CreateRepository_Call {
	_c.Call.Return(apiCreateRepositoryRequest)
	return _c
}

func (_c *MockRepositoryAPI_CreateRepository_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateRepositoryRequest) *MockRepositoryAPI_CreateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRepositoryExecute provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) CreateRepositoryExecute(r client.ApiCreateRepositoryRequest) (*client.Repository, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepositoryExecute")
	}

	var r0 *client.Repository
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateRepositoryRequest) (*client.Repository, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateRepositoryRequest) *client.Repository); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateRepositoryRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateRepositoryRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepositoryAPI_CreateRepositoryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRepositoryExecute'
type MockRepositoryAPI_CreateRepositoryExecute_Call struct {
	*mock.Call
}

// CreateRepositoryExecute is a helper method to define mock.On call
//   - r client.ApiCreateRepositoryRequest
func (_e *MockRepositoryAPI_Expecter) CreateRepositoryExecute(r interface{}) *MockRepositoryAPI_CreateRepositoryExecute_Call {
	return &MockRepositoryAPI_CreateRepositoryExecute_Call{Call: _e.mock.On("CreateRepositoryExecute", r)}
}

func (_c *MockRepositoryAPI_CreateRepositoryExecute_Call) Run(run func(r client.ApiCreateRepositoryRequest)) *MockRepositoryAPI_CreateRepositoryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateRepositoryRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateRepositoryRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_CreateRepositoryExecute_Call) Return(repository *client.Repository, response *http.Response, err error) *MockRepositoryAPI_CreateRepositoryExecute_Call {
	_c.Call.Return(repository, response, err)
	return _c
}

func (_c *MockRepositoryAPI_CreateRepositoryExecute_Call) RunAndReturn(run func(r client.ApiCreateRepositoryRequest) (*client.Repository, *http.Response, error)) *MockRepositoryAPI_CreateRepositoryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRepository provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) DeleteRepository(ctx context.Context, uuid string) client.ApiDeleteRepositoryRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 client.ApiDeleteRepositoryRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteRepositoryRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteRepositoryRequest)
	}
	return r0
}

// MockRepositoryAPI_DeleteRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRepository'
type MockRepositoryAPI_DeleteRepository_Call struct {
	*mock.Call
}

// DeleteRepository is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockRepositoryAPI_Expecter) DeleteRepository(ctx interface{}, uuid interface{}) *MockRepositoryAPI_DeleteRepository_Call {
	return &MockRepositoryAPI_DeleteRepository_Call{Call: _e.mock.On("DeleteRepository", ctx, uuid)}
}

func (_c *MockRepositoryAPI_DeleteRepository_Call) Run(run func(ctx context.Context, uuid string)) *MockRepositoryAPI_DeleteRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_DeleteRepository_Call) Return(apiDeleteRepositoryRequest client.ApiDeleteRepositoryRequest) *MockRepositoryAPI_DeleteRepository_Call {
	_c.Call.Return(apiDeleteRepositoryRequest)
	return _c
}

func (_c *MockRepositoryAPI_DeleteRepository_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteRepositoryRequest) *MockRepositoryAPI_DeleteRepository_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRepositoryExecute provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) DeleteRepositoryExecute(r client.ApiDeleteRepositoryRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepositoryExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteRepositoryRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteRepositoryRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteRepositoryRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepositoryAPI_DeleteRepositoryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRepositoryExecute'
type MockRepositoryAPI_DeleteRepositoryExecute_Call struct {
	*mock.Call
}

// DeleteRepositoryExecute is a helper method to define mock.On call
//   - r client.ApiDeleteRepositoryRequest
func (_e *MockRepositoryAPI_Expecter) DeleteRepositoryExecute(r interface{}) *MockRepositoryAPI_DeleteRepositoryExecute_Call {
	return &MockRepositoryAPI_DeleteRepositoryExecute_Call{Call: _e.mock.On("DeleteRepositoryExecute", r)}
}

func (_c *MockRepositoryAPI_DeleteRepositoryExecute_Call) Run(run func(r client.ApiDeleteRepositoryRequest)) *MockRepositoryAPI_DeleteRepositoryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteRepositoryRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteRepositoryRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_DeleteRepositoryExecute_Call) Return(response *http.Response, err error) *MockRepositoryAPI_DeleteRepositoryExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockRepositoryAPI_DeleteRepositoryExecute_Call) RunAndReturn(run func(r client.ApiDeleteRepositoryRequest) (*http.Response, error)) *MockRepositoryAPI_DeleteRepositoryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositories provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) GetRepositories(ctx context.Context) client.ApiGetRepositoriesRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositories")
	}

	var r0 client.ApiGetRepositoriesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetRepositoriesRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetRepositoriesRequest)
	}
	return r0
}

// MockRepositoryAPI_GetRepositories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositories'
type MockRepositoryAPI_GetRepositories_Call struct {
	*mock.Call
}

// GetRepositories is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepositoryAPI_Expecter) GetRepositories(ctx interface{}) *MockRepositoryAPI_GetRepositories_Call {
	return &MockRepositoryAPI_GetRepositories_Call{Call: _e.mock.On("GetRepositories", ctx)}
}

func (_c *MockRepositoryAPI_GetRepositories_Call) Run(run func(ctx context.Context)) *MockRepositoryAPI_GetRepositories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_GetRepositories_Call) Return(apiGetRepositoriesRequest client.ApiGetRepositoriesRequest) *MockRepositoryAPI_GetRepositories_Call {
	_c.Call.Return(apiGetRepositoriesRequest)
	return _c
}

func (_c *MockRepositoryAPI_GetRepositories_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetRepositoriesRequest) *MockRepositoryAPI_GetRepositories_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoriesByType provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) GetRepositoriesByType(ctx context.Context, type_ string) client.ApiGetRepositoriesByTypeRequest {
	ret := _mock.Called(ctx, type_)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoriesByType")
	}

	var r0 client.ApiGetRepositoriesByTypeRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetRepositoriesByTypeRequest); ok {
		r0 = returnFunc(ctx, type_)
	} else {
		r0 = ret.Get(0).(client.ApiGetRepositoriesByTypeRequest)
	}
	return r0
}

// MockRepositoryAPI_GetRepositoriesByType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoriesByType'
type MockRepositoryAPI_GetRepositoriesByType_Call struct {
	*mock.Call
}

// GetRepositoriesByType is a helper method to define mock.On call
//   - ctx context.Context
//   - type_ string
func (_e *MockRepositoryAPI_Expecter) GetRepositoriesByType(ctx interface{}, type_ interface{}) *MockRepositoryAPI_GetRepositoriesByType_Call {
	return &MockRepositoryAPI_GetRepositoriesByType_Call{Call: _e.mock.On("GetRepositoriesByType", ctx, type_)}
}

func (_c *MockRepositoryAPI_GetRepositoriesByType_Call) Run(run func(ctx context.Context, type_ string)) *MockRepositoryAPI_GetRepositoriesByType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoriesByType_Call) Return(apiGetRepositoriesByTypeRequest client.ApiGetRepositoriesByTypeRequest) *MockRepositoryAPI_GetRepositoriesByType_Call {
	_c.Call.Return(apiGetRepositoriesByTypeRequest)
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoriesByType_Call) RunAndReturn(run func(ctx context.Context, type_ string) client.ApiGetRepositoriesByTypeRequest) *MockRepositoryAPI_GetRepositoriesByType_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoriesByTypeExecute provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) GetRepositoriesByTypeExecute(r client.ApiGetRepositoriesByTypeRequest) ([]client.Repository, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoriesByTypeExecute")
	}

	var r0 []client.Repository
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetRepositoriesByTypeRequest) ([]client.Repository, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetRepositoriesByTypeRequest) []client.Repository); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetRepositoriesByTypeRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetRepositoriesByTypeRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepositoryAPI_GetRepositoriesByTypeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoriesByTypeExecute'
type MockRepositoryAPI_GetRepositoriesByTypeExecute_Call struct {
	*mock.Call
}

// GetRepositoriesByTypeExecute is a helper method to define mock.On call
//   - r client.ApiGetRepositoriesByTypeRequest
func (_e *MockRepositoryAPI_Expecter) GetRepositoriesByTypeExecute(r interface{}) *MockRepositoryAPI_GetRepositoriesByTypeExecute_Call {
	return &MockRepositoryAPI_GetRepositoriesByTypeExecute_Call{Call: _e.mock.On("GetRepositoriesByTypeExecute", r)}
}

func (_c *MockRepositoryAPI_GetRepositoriesByTypeExecute_Call) Run(run func(r client.ApiGetRepositoriesByTypeRequest)) *MockRepositoryAPI_GetRepositoriesByTypeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetRepositoriesByTypeRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetRepositoriesByTypeRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoriesByTypeExecute_Call) Return(repositorys []client.Repository, response *http.Response, err error) *MockRepositoryAPI_GetRepositoriesByTypeExecute_Call {
	_c.Call.Return(repositorys, response, err)
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoriesByTypeExecute_Call) RunAndReturn(run func(r client.ApiGetRepositoriesByTypeRequest) ([]client.Repository, *http.Response, error)) *MockRepositoryAPI_GetRepositoriesByTypeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoriesExecute provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) GetRepositoriesExecute(r client.ApiGetRepositoriesRequest) ([]client.Repository, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoriesExecute")
	}

	var r0 []client.Repository
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetRepositoriesRequest) ([]client.Repository, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetRepositoriesRequest) []client.Repository); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetRepositoriesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetRepositoriesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepositoryAPI_GetRepositoriesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoriesExecute'
type MockRepositoryAPI_GetRepositoriesExecute_Call struct {
	*mock.Call
}

// GetRepositoriesExecute is a helper method to define mock.On call
//   - r client.ApiGetRepositoriesRequest
func (_e *MockRepositoryAPI_Expecter) GetRepositoriesExecute(r interface{}) *MockRepositoryAPI_GetRepositoriesExecute_Call {
	return &MockRepositoryAPI_GetRepositoriesExecute_Call{Call: _e.mock.On("GetRepositoriesExecute", r)}
}

func (_c *MockRepositoryAPI_GetRepositoriesExecute_Call) Run(run func(r client.ApiGetRepositoriesRequest)) *MockRepositoryAPI_GetRepositoriesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetRepositoriesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetRepositoriesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoriesExecute_Call) Return(repositorys []client.Repository, response *http.Response, err error) *MockRepositoryAPI_GetRepositoriesExecute_Call {
	_c.Call.Return(repositorys, response, err)
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoriesExecute_Call) RunAndReturn(run func(r client.ApiGetRepositoriesRequest) ([]client.Repository, *http.Response, error)) *MockRepositoryAPI_GetRepositoriesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoryMetaComponent provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) GetRepositoryMetaComponent(ctx context.Context) client.ApiGetRepositoryMetaComponentRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoryMetaComponent")
	}

	var r0 client.ApiGetRepositoryMetaComponentRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetRepositoryMetaComponentRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetRepositoryMetaComponentRequest)
	}
	return r0
}

// MockRepositoryAPI_GetRepositoryMetaComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoryMetaComponent'
type MockRepositoryAPI_GetRepositoryMetaComponent_Call struct {
	*mock.Call
}

// GetRepositoryMetaComponent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepositoryAPI_Expecter) GetRepositoryMetaComponent(ctx interface{}) *MockRepositoryAPI_GetRepositoryMetaComponent_Call {
	return &MockRepositoryAPI_GetRepositoryMetaComponent_Call{Call: _e.mock.On("GetRepositoryMetaComponent", ctx)}
}

func (_c *MockRepositoryAPI_GetRepositoryMetaComponent_Call) Run(run func(ctx context.Context)) *MockRepositoryAPI_GetRepositoryMetaComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoryMetaComponent_Call) Return(apiGetRepositoryMetaComponentRequest client.ApiGetRepositoryMetaComponentRequest) *MockRepositoryAPI_GetRepositoryMetaComponent_Call {
	_c.Call.Return(apiGetRepositoryMetaComponentRequest)
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoryMetaComponent_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetRepositoryMetaComponentRequest) *MockRepositoryAPI_GetRepositoryMetaComponent_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepositoryMetaComponentExecute provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) GetRepositoryMetaComponentExecute(r client.ApiGetRepositoryMetaComponentRequest) (*client.RepositoryMetaComponent, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoryMetaComponentExecute")
	}

	var r0 *client.RepositoryMetaComponent
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetRepositoryMetaComponentRequest) (*client.RepositoryMetaComponent, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetRepositoryMetaComponentRequest) *client.RepositoryMetaComponent); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.RepositoryMetaComponent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetRepositoryMetaComponentRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetRepositoryMetaComponentRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepositoryMetaComponentExecute'
type MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call struct {
	*mock.Call
}

// GetRepositoryMetaComponentExecute is a helper method to define mock.On call
//   - r client.ApiGetRepositoryMetaComponentRequest
func (_e *MockRepositoryAPI_Expecter) GetRepositoryMetaComponentExecute(r interface{}) *MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call {
	return &MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call{Call: _e.mock.On("GetRepositoryMetaComponentExecute", r)}
}

func (_c *MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call) Run(run func(r client.ApiGetRepositoryMetaComponentRequest)) *MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetRepositoryMetaComponentRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetRepositoryMetaComponentRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call) Return(repositoryMetaComponent *client.RepositoryMetaComponent, response *http.Response, err error) *MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call {
	_c.Call.Return(repositoryMetaComponent, response, err)
	return _c
}

func (_c *MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call) RunAndReturn(run func(r client.ApiGetRepositoryMetaComponentRequest) (*client.RepositoryMetaComponent, *http.Response, error)) *MockRepositoryAPI_GetRepositoryMetaComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepository provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) UpdateRepository(ctx context.Context) client.ApiUpdateRepositoryRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepository")
	}

	var r0 client.ApiUpdateRepositoryRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateRepositoryRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateRepositoryRequest)
	}
	return r0
}

// MockRepositoryAPI_UpdateRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepository'
type MockRepositoryAPI_UpdateRepository_Call struct {
	*mock.Call
}

// UpdateRepository is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepositoryAPI_Expecter) UpdateRepository(ctx interface{}) *MockRepositoryAPI_UpdateRepository_Call {
	return &MockRepositoryAPI_UpdateRepository_Call{Call: _e.mock.On("UpdateRepository", ctx)}
}

func (_c *MockRepositoryAPI_UpdateRepository_Call) Run(run func(ctx context.Context)) *MockRepositoryAPI_UpdateRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_UpdateRepository_Call) Return(apiUpdateRepositoryRequest client.ApiUpdateRepositoryRequest) *MockRepositoryAPI_UpdateRepository_Call {
	_c.Call.Return(apiUpdateRepositoryRequest)
	return _c
}

func (_c *MockRepositoryAPI_UpdateRepository_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateRepositoryRequest) *MockRepositoryAPI_UpdateRepository_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRepositoryExecute provides a mock function for the type MockRepositoryAPI
func (_mock *MockRepositoryAPI) UpdateRepositoryExecute(r client.ApiUpdateRepositoryRequest) (*client.Repository, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepositoryExecute")
	}

	var r0 *client.Repository
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateRepositoryRequest) (*client.Repository, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateRepositoryRequest) *client.Repository); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Repository)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateRepositoryRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateRepositoryRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepositoryAPI_UpdateRepositoryExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRepositoryExecute'
type MockRepositoryAPI_UpdateRepositoryExecute_Call struct {
	*mock.Call
}

// UpdateRepositoryExecute is a helper method to define mock.On call
//   - r client.ApiUpdateRepositoryRequest
func (_e *MockRepositoryAPI_Expecter) UpdateRepositoryExecute(r interface{}) *MockRepositoryAPI_UpdateRepositoryExecute_Call {
	return &MockRepositoryAPI_UpdateRepositoryExecute_Call{Call: _e.mock.On("UpdateRepositoryExecute", r)}
}

func (_c *MockRepositoryAPI_UpdateRepositoryExecute_Call) Run(run func(r client.ApiUpdateRepositoryRequest)) *MockRepositoryAPI_UpdateRepositoryExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateRepositoryRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateRepositoryRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepositoryAPI_UpdateRepositoryExecute_Call) Return(repository *client.Repository, response *http.Response, err error) *MockRepositoryAPI_UpdateRepositoryExecute_Call {
	_c.Call.Return(repository, response, err)
	return _c
}

func (_c *MockRepositoryAPI_UpdateRepositoryExecute_Call) RunAndReturn(run func(r client.ApiUpdateRepositoryRequest) (*client.Repository, *http.Response, error)) *MockRepositoryAPI_UpdateRepositoryExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchAPI creates a new instance of MockSearchAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearchAPI {
	mock := &MockSearchAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSearchAPI is an autogenerated mock type for the SearchAPI type
type MockSearchAPI struct {
	mock.Mock
}

type MockSearchAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchAPI) EXPECT() *MockSearchAPI_Expecter {
	return &MockSearchAPI_Expecter{mock: &_m.Mock}
}

// AggregateSearch provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) AggregateSearch(ctx context.Context) client.ApiAggregateSearchRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AggregateSearch")
	}

	var r0 client.ApiAggregateSearchRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiAggregateSearchRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiAggregateSearchRequest)
	}
	return r0
}

// MockSearchAPI_AggregateSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateSearch'
type MockSearchAPI_AggregateSearch_Call struct {
	*mock.Call
}

// AggregateSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) AggregateSearch(ctx interface{}) *MockSearchAPI_AggregateSearch_Call {
	return &MockSearchAPI_AggregateSearch_Call{Call: _e.mock.On("AggregateSearch", ctx)}
}

func (_c *MockSearchAPI_AggregateSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_AggregateSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_AggregateSearch_Call) Return(apiAggregateSearchRequest client.ApiAggregateSearchRequest) *MockSearchAPI_AggregateSearch_Call {
	_c.Call.Return(apiAggregateSearchRequest)
	return _c
}

func (_c *MockSearchAPI_AggregateSearch_Call) RunAndReturn(run func(ctx context.Context) client.ApiAggregateSearchRequest) *MockSearchAPI_AggregateSearch_Call {
	_c.Call.Return(run)
	return _c
}

// AggregateSearchExecute provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) AggregateSearchExecute(r client.ApiAggregateSearchRequest) (*client.SearchResult, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AggregateSearchExecute")
	}

	var r0 *client.SearchResult
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAggregateSearchRequest) (*client.SearchResult, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAggregateSearchRequest) *client.SearchResult); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAggregateSearchRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAggregateSearchRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSearchAPI_AggregateSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateSearchExecute'
type MockSearchAPI_AggregateSearchExecute_Call struct {
	*mock.Call
}

// AggregateSearchExecute is a helper method to define mock.On call
//   - r client.ApiAggregateSearchRequest
func (_e *MockSearchAPI_Expecter) AggregateSearchExecute(r interface{}) *MockSearchAPI_AggregateSearchExecute_Call {
	return &MockSearchAPI_AggregateSearchExecute_Call{Call: _e.mock.On("AggregateSearchExecute", r)}
}

func (_c *MockSearchAPI_AggregateSearchExecute_Call) Run(run func(r client.ApiAggregateSearchRequest)) *MockSearchAPI_AggregateSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAggregateSearchRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAggregateSearchRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_AggregateSearchExecute_Call) Return(searchResult *client.SearchResult, response *http.Response, err error) *MockSearchAPI_AggregateSearchExecute_Call {
	_c.Call.Return(searchResult, response, err)
	return _c
}

func (_c *MockSearchAPI_AggregateSearchExecute_Call) RunAndReturn(run func(r client.ApiAggregateSearchRequest) (*client.SearchResult, *http.Response, error)) *MockSearchAPI_AggregateSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ComponentSearch provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) ComponentSearch(ctx context.Context) client.ApiComponentSearchRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ComponentSearch")
	}

	var r0 client.ApiComponentSearchRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiComponentSearchRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiComponentSearchRequest)
	}
	return r0
}

// MockSearchAPI_ComponentSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComponentSearch'
type MockSearchAPI_ComponentSearch_Call struct {
	*mock.Call
}

// ComponentSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) ComponentSearch(ctx interface{}) *MockSearchAPI_ComponentSearch_Call {
	return &MockSearchAPI_ComponentSearch_Call{Call: _e.mock.On("ComponentSearch", ctx)}
}

func (_c *MockSearchAPI_ComponentSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_ComponentSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_ComponentSearch_Call) Return(apiComponentSearchRequest client.ApiComponentSearchRequest) *MockSearchAPI_ComponentSearch_Call {
	_c.Call.Return(apiComponentSearchRequest)
	return _c
}

func (_c *MockSearchAPI_ComponentSearch_Call) RunAndReturn(run func(ctx context.Context) client.ApiComponentSearchRequest) *MockSearchAPI_ComponentSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ComponentSearchExecute provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) ComponentSearchExecute(r client.ApiComponentSearchRequest) (*client.SearchResult, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ComponentSearchExecute")
	}

	var r0 *client.SearchResult
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiComponentSearchRequest) (*client.SearchResult, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiComponentSearchRequest) *client.SearchResult); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiComponentSearchRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiComponentSearchRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSearchAPI_ComponentSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComponentSearchExecute'
type MockSearchAPI_ComponentSearchExecute_Call struct {
	*mock.Call
}

// ComponentSearchExecute is a helper method to define mock.On call
//   - r client.ApiComponentSearchRequest
func (_e *MockSearchAPI_Expecter) ComponentSearchExecute(r interface{}) *MockSearchAPI_ComponentSearchExecute_Call {
	return &MockSearchAPI_ComponentSearchExecute_Call{Call: _e.mock.On("ComponentSearchExecute", r)}
}

func (_c *MockSearchAPI_ComponentSearchExecute_Call) Run(run func(r client.ApiComponentSearchRequest)) *MockSearchAPI_ComponentSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiComponentSearchRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiComponentSearchRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_ComponentSearchExecute_Call) Return(searchResult *client.SearchResult, response *http.Response, err error) *MockSearchAPI_ComponentSearchExecute_Call {
	_c.Call.Return(searchResult, response, err)
	return _c
}

func (_c *MockSearchAPI_ComponentSearchExecute_Call) RunAndReturn(run func(r client.ApiComponentSearchRequest) (*client.SearchResult, *http.Response, error)) *MockSearchAPI_ComponentSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// LicenseSearch provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) LicenseSearch(ctx context.Context) client.ApiLicenseSearchRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LicenseSearch")
	}

	var r0 client.ApiLicenseSearchRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiLicenseSearchRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiLicenseSearchRequest)
	}
	return r0
}

// MockSearchAPI_LicenseSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LicenseSearch'
type MockSearchAPI_LicenseSearch_Call struct {
	*mock.Call
}

// LicenseSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) LicenseSearch(ctx interface{}) *MockSearchAPI_LicenseSearch_Call {
	return &MockSearchAPI_LicenseSearch_Call{Call: _e.mock.On("LicenseSearch", ctx)}
}

func (_c *MockSearchAPI_LicenseSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_LicenseSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_LicenseSearch_Call) Return(apiLicenseSearchRequest client.ApiLicenseSearchRequest) *MockSearchAPI_LicenseSearch_Call {
	_c.Call.Return(apiLicenseSearchRequest)
	return _c
}

func (_c *MockSearchAPI_LicenseSearch_Call) RunAndReturn(run func(ctx context.Context) client.ApiLicenseSearchRequest) *MockSearchAPI_LicenseSearch_Call {
	_c.Call.Return(run)
	return _c
}

// LicenseSearchExecute provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) LicenseSearchExecute(r client.ApiLicenseSearchRequest) (*client.SearchResult, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for LicenseSearchExecute")
	}

	var r0 *client.SearchResult
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiLicenseSearchRequest) (*client.SearchResult, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiLicenseSearchRequest) *client.SearchResult); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiLicenseSearchRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiLicenseSearchRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSearchAPI_LicenseSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LicenseSearchExecute'
type MockSearchAPI_LicenseSearchExecute_Call struct {
	*mock.Call
}

// LicenseSearchExecute is a helper method to define mock.On call
//   - r client.ApiLicenseSearchRequest
func (_e *MockSearchAPI_Expecter) LicenseSearchExecute(r interface{}) *MockSearchAPI_LicenseSearchExecute_Call {
	return &MockSearchAPI_LicenseSearchExecute_Call{Call: _e.mock.On("LicenseSearchExecute", r)}
}

func (_c *MockSearchAPI_LicenseSearchExecute_Call) Run(run func(r client.ApiLicenseSearchRequest)) *MockSearchAPI_LicenseSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiLicenseSearchRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiLicenseSearchRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_LicenseSearchExecute_Call) Return(searchResult *client.SearchResult, response *http.Response, err error) *MockSearchAPI_LicenseSearchExecute_Call {
	_c.Call.Return(searchResult, response, err)
	return _c
}

func (_c *MockSearchAPI_LicenseSearchExecute_Call) RunAndReturn(run func(r client.ApiLicenseSearchRequest) (*client.SearchResult, *http.Response, error)) *MockSearchAPI_LicenseSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectSearch provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) ProjectSearch(ctx context.Context) client.ApiProjectSearchRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProjectSearch")
	}

	var r0 client.ApiProjectSearchRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiProjectSearchRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiProjectSearchRequest)
	}
	return r0
}

// MockSearchAPI_ProjectSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectSearch'
type MockSearchAPI_ProjectSearch_Call struct {
	*mock.Call
}

// ProjectSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) ProjectSearch(ctx interface{}) *MockSearchAPI_ProjectSearch_Call {
	return &MockSearchAPI_ProjectSearch_Call{Call: _e.mock.On("ProjectSearch", ctx)}
}

func (_c *MockSearchAPI_ProjectSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_ProjectSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_ProjectSearch_Call) Return(apiProjectSearchRequest client.ApiProjectSearchRequest) *MockSearchAPI_ProjectSearch_Call {
	_c.Call.Return(apiProjectSearchRequest)
	return _c
}

func (_c *MockSearchAPI_ProjectSearch_Call) RunAndReturn(run func(ctx context.Context) client.ApiProjectSearchRequest) *MockSearchAPI_ProjectSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectSearchExecute provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) ProjectSearchExecute(r client.ApiProjectSearchRequest) (*client.SearchResult, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ProjectSearchExecute")
	}

	var r0 *client.SearchResult
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiProjectSearchRequest) (*client.SearchResult, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiProjectSearchRequest) *client.SearchResult); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiProjectSearchRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiProjectSearchRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSearchAPI_ProjectSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectSearchExecute'
type MockSearchAPI_ProjectSearchExecute_Call struct {
	*mock.Call
}

// ProjectSearchExecute is a helper method to define mock.On call
//   - r client.ApiProjectSearchRequest
func (_e *MockSearchAPI_Expecter) ProjectSearchExecute(r interface{}) *MockSearchAPI_ProjectSearchExecute_Call {
	return &MockSearchAPI_ProjectSearchExecute_Call{Call: _e.mock.On("ProjectSearchExecute", r)}
}

func (_c *MockSearchAPI_ProjectSearchExecute_Call) Run(run func(r client.ApiProjectSearchRequest)) *MockSearchAPI_ProjectSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiProjectSearchRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiProjectSearchRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_ProjectSearchExecute_Call) Return(searchResult *client.SearchResult, response *http.Response, err error) *MockSearchAPI_ProjectSearchExecute_Call {
	_c.Call.Return(searchResult, response, err)
	return _c
}

func (_c *MockSearchAPI_ProjectSearchExecute_Call) RunAndReturn(run func(r client.ApiProjectSearchRequest) (*client.SearchResult, *http.Response, error)) *MockSearchAPI_ProjectSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Reindex provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) Reindex(ctx context.Context) client.ApiReindexRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reindex")
	}

	var r0 client.ApiReindexRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiReindexRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiReindexRequest)
	}
	return r0
}

// MockSearchAPI_Reindex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reindex'
type MockSearchAPI_Reindex_Call struct {
	*mock.Call
}

// Reindex is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) Reindex(ctx interface{}) *MockSearchAPI_Reindex_Call {
	return &MockSearchAPI_Reindex_Call{Call: _e.mock.On("Reindex", ctx)}
}

func (_c *MockSearchAPI_Reindex_Call) Run(run func(ctx context.Context)) *MockSearchAPI_Reindex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_Reindex_Call) Return(apiReindexRequest client.ApiReindexRequest) *MockSearchAPI_Reindex_Call {
	_c.Call.Return(apiReindexRequest)
	return _c
}

func (_c *MockSearchAPI_Reindex_Call) RunAndReturn(run func(ctx context.Context) client.ApiReindexRequest) *MockSearchAPI_Reindex_Call {
	_c.Call.Return(run)
	return _c
}

// ReindexExecute provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) ReindexExecute(r client.ApiReindexRequest) (*client.BomUploadResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReindexExecute")
	}

	var r0 *client.BomUploadResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiReindexRequest) (*client.BomUploadResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiReindexRequest) *client.BomUploadResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BomUploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiReindexRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiReindexRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSearchAPI_ReindexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReindexExecute'
type MockSearchAPI_ReindexExecute_Call struct {
	*mock.Call
}

// ReindexExecute is a helper method to define mock.On call
//   - r client.ApiReindexRequest
func (_e *MockSearchAPI_Expecter) ReindexExecute(r interface{}) *MockSearchAPI_ReindexExecute_Call {
	return &MockSearchAPI_ReindexExecute_Call{Call: _e.mock.On("ReindexExecute", r)}
}

func (_c *MockSearchAPI_ReindexExecute_Call) Run(run func(r client.ApiReindexRequest)) *MockSearchAPI_ReindexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiReindexRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiReindexRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_ReindexExecute_Call) Return(bomUploadResponse *client.BomUploadResponse, response *http.Response, err error) *MockSearchAPI_ReindexExecute_Call {
	_c.Call.Return(bomUploadResponse, response, err)
	return _c
}

func (_c *MockSearchAPI_ReindexExecute_Call) RunAndReturn(run func(r client.ApiReindexRequest) (*client.BomUploadResponse, *http.Response, error)) *MockSearchAPI_ReindexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceSearch provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) ServiceSearch(ctx context.Context) client.ApiServiceSearchRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ServiceSearch")
	}

	var r0 client.ApiServiceSearchRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiServiceSearchRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiServiceSearchRequest)
	}
	return r0
}

// MockSearchAPI_ServiceSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceSearch'
type MockSearchAPI_ServiceSearch_Call struct {
	*mock.Call
}

// ServiceSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) ServiceSearch(ctx interface{}) *MockSearchAPI_ServiceSearch_Call {
	return &MockSearchAPI_ServiceSearch_Call{Call: _e.mock.On("ServiceSearch", ctx)}
}

func (_c *MockSearchAPI_ServiceSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_ServiceSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_ServiceSearch_Call) Return(apiServiceSearchRequest client.ApiServiceSearchRequest) *MockSearchAPI_ServiceSearch_Call {
	_c.Call.Return(apiServiceSearchRequest)
	return _c
}

func (_c *MockSearchAPI_ServiceSearch_Call) RunAndReturn(run func(ctx context.Context) client.ApiServiceSearchRequest) *MockSearchAPI_ServiceSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceSearchExecute provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) ServiceSearchExecute(r client.ApiServiceSearchRequest) (*client.SearchResult, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ServiceSearchExecute")
	}

	var r0 *client.SearchResult
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiServiceSearchRequest) (*client.SearchResult, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiServiceSearchRequest) *client.SearchResult); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiServiceSearchRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiServiceSearchRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSearchAPI_ServiceSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceSearchExecute'
type MockSearchAPI_ServiceSearchExecute_Call struct {
	*mock.Call
}

// ServiceSearchExecute is a helper method to define mock.On call
//   - r client.ApiServiceSearchRequest
func (_e *MockSearchAPI_Expecter) ServiceSearchExecute(r interface{}) *MockSearchAPI_ServiceSearchExecute_Call {
	return &MockSearchAPI_ServiceSearchExecute_Call{Call: _e.mock.On("ServiceSearchExecute", r)}
}

func (_c *MockSearchAPI_ServiceSearchExecute_Call) Run(run func(r client.ApiServiceSearchRequest)) *MockSearchAPI_ServiceSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiServiceSearchRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiServiceSearchRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_ServiceSearchExecute_Call) Return(searchResult *client.SearchResult, response *http.Response, err error) *MockSearchAPI_ServiceSearchExecute_Call {
	_c.Call.Return(searchResult, response, err)
	return _c
}

func (_c *MockSearchAPI_ServiceSearchExecute_Call) RunAndReturn(run func(r client.ApiServiceSearchRequest) (*client.SearchResult, *http.Response, error)) *MockSearchAPI_ServiceSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// VulnerabilitySearch provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) VulnerabilitySearch(ctx context.Context) client.ApiVulnerabilitySearchRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for VulnerabilitySearch")
	}

	var r0 client.ApiVulnerabilitySearchRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiVulnerabilitySearchRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiVulnerabilitySearchRequest)
	}
	return r0
}

// MockSearchAPI_VulnerabilitySearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnerabilitySearch'
type MockSearchAPI_VulnerabilitySearch_Call struct {
	*mock.Call
}

// VulnerabilitySearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) VulnerabilitySearch(ctx interface{}) *MockSearchAPI_VulnerabilitySearch_Call {
	return &MockSearchAPI_VulnerabilitySearch_Call{Call: _e.mock.On("VulnerabilitySearch", ctx)}
}

func (_c *MockSearchAPI_VulnerabilitySearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_VulnerabilitySearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_VulnerabilitySearch_Call) Return(apiVulnerabilitySearchRequest client.ApiVulnerabilitySearchRequest) *MockSearchAPI_VulnerabilitySearch_Call {
	_c.Call.Return(apiVulnerabilitySearchRequest)
	return _c
}

func (_c *MockSearchAPI_VulnerabilitySearch_Call) RunAndReturn(run func(ctx context.Context) client.ApiVulnerabilitySearchRequest) *MockSearchAPI_VulnerabilitySearch_Call {
	_c.Call.Return(run)
	return _c
}

// VulnerabilitySearchExecute provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) VulnerabilitySearchExecute(r client.ApiVulnerabilitySearchRequest) (*client.SearchResult, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for VulnerabilitySearchExecute")
	}

	var r0 *client.SearchResult
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiVulnerabilitySearchRequest) (*client.SearchResult, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiVulnerabilitySearchRequest) *client.SearchResult); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiVulnerabilitySearchRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiVulnerabilitySearchRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSearchAPI_VulnerabilitySearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnerabilitySearchExecute'
type MockSearchAPI_VulnerabilitySearchExecute_Call struct {
	*mock.Call
}

// VulnerabilitySearchExecute is a helper method to define mock.On call
//   - r client.ApiVulnerabilitySearchRequest
func (_e *MockSearchAPI_Expecter) VulnerabilitySearchExecute(r interface{}) *MockSearchAPI_VulnerabilitySearchExecute_Call {
	return &MockSearchAPI_VulnerabilitySearchExecute_Call{Call: _e.mock.On("VulnerabilitySearchExecute", r)}
}

func (_c *MockSearchAPI_VulnerabilitySearchExecute_Call) Run(run func(r client.ApiVulnerabilitySearchRequest)) *MockSearchAPI_VulnerabilitySearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiVulnerabilitySearchRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiVulnerabilitySearchRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_VulnerabilitySearchExecute_Call) Return(searchResult *client.SearchResult, response *http.Response, err error) *MockSearchAPI_VulnerabilitySearchExecute_Call {
	_c.Call.Return(searchResult, response, err)
	return _c
}

func (_c *MockSearchAPI_VulnerabilitySearchExecute_Call) RunAndReturn(run func(r client.ApiVulnerabilitySearchRequest) (*client.SearchResult, *http.Response, error)) *MockSearchAPI_VulnerabilitySearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// VulnerableSoftwareSearch provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) VulnerableSoftwareSearch(ctx context.Context) client.ApiVulnerableSoftwareSearchRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for VulnerableSoftwareSearch")
	}

	var r0 client.ApiVulnerableSoftwareSearchRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiVulnerableSoftwareSearchRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiVulnerableSoftwareSearchRequest)
	}
	return r0
}

// MockSearchAPI_VulnerableSoftwareSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnerableSoftwareSearch'
type MockSearchAPI_VulnerableSoftwareSearch_Call struct {
	*mock.Call
}

// VulnerableSoftwareSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) VulnerableSoftwareSearch(ctx interface{}) *MockSearchAPI_VulnerableSoftwareSearch_Call {
	return &MockSearchAPI_VulnerableSoftwareSearch_Call{Call: _e.mock.On("VulnerableSoftwareSearch", ctx)}
}

func (_c *MockSearchAPI_VulnerableSoftwareSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_VulnerableSoftwareSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_VulnerableSoftwareSearch_Call) Return(apiVulnerableSoftwareSearchRequest client.ApiVulnerableSoftwareSearchRequest) *MockSearchAPI_VulnerableSoftwareSearch_Call {
	_c.Call.Return(apiVulnerableSoftwareSearchRequest)
	return _c
}

func (_c *MockSearchAPI_VulnerableSoftwareSearch_Call) RunAndReturn(run func(ctx context.Context) client.ApiVulnerableSoftwareSearchRequest) *MockSearchAPI_VulnerableSoftwareSearch_Call {
	_c.Call.Return(run)
	return _c
}

// VulnerableSoftwareSearchExecute provides a mock function for the type MockSearchAPI
func (_mock *MockSearchAPI) VulnerableSoftwareSearchExecute(r client.ApiVulnerableSoftwareSearchRequest) (*client.SearchResult, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for VulnerableSoftwareSearchExecute")
	}

	var r0 *client.SearchResult
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiVulnerableSoftwareSearchRequest) (*client.SearchResult, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiVulnerableSoftwareSearchRequest) *client.SearchResult); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SearchResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiVulnerableSoftwareSearchRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiVulnerableSoftwareSearchRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSearchAPI_VulnerableSoftwareSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnerableSoftwareSearchExecute'
type MockSearchAPI_VulnerableSoftwareSearchExecute_Call struct {
	*mock.Call
}

// VulnerableSoftwareSearchExecute is a helper method to define mock.On call
//   - r client.ApiVulnerableSoftwareSearchRequest
func (_e *MockSearchAPI_Expecter) VulnerableSoftwareSearchExecute(r interface{}) *MockSearchAPI_VulnerableSoftwareSearchExecute_Call {
	return &MockSearchAPI_VulnerableSoftwareSearchExecute_Call{Call: _e.mock.On("VulnerableSoftwareSearchExecute", r)}
}

func (_c *MockSearchAPI_VulnerableSoftwareSearchExecute_Call) Run(run func(r client.ApiVulnerableSoftwareSearchRequest)) *MockSearchAPI_VulnerableSoftwareSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiVulnerableSoftwareSearchRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiVulnerableSoftwareSearchRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSearchAPI_VulnerableSoftwareSearchExecute_Call) Return(searchResult *client.SearchResult, response *http.Response, err error) *MockSearchAPI_VulnerableSoftwareSearchExecute_Call {
	_c.Call.Return(searchResult, response, err)
	return _c
}

func (_c *MockSearchAPI_VulnerableSoftwareSearchExecute_Call) RunAndReturn(run func(r client.ApiVulnerableSoftwareSearchRequest) (*client.SearchResult, *http.Response, error)) *MockSearchAPI_VulnerableSoftwareSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceAPI creates a new instance of MockServiceAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceAPI {
	mock := &MockServiceAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockServiceAPI is an autogenerated mock type for the ServiceAPI type
type MockServiceAPI struct {
	mock.Mock
}

type MockServiceAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceAPI) EXPECT() *MockServiceAPI_Expecter {
	return &MockServiceAPI_Expecter{mock: &_m.Mock}
}

// CreateService provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) CreateService(ctx context.Context, uuid string) client.ApiCreateServiceRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 client.ApiCreateServiceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiCreateServiceRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiCreateServiceRequest)
	}
	return r0
}

// MockServiceAPI_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockServiceAPI_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockServiceAPI_Expecter) CreateService(ctx interface{}, uuid interface{}) *MockServiceAPI_CreateService_Call {
	return &MockServiceAPI_CreateService_Call{Call: _e.mock.On("CreateService", ctx, uuid)}
}

func (_c *MockServiceAPI_CreateService_Call) Run(run func(ctx context.Context, uuid string)) *MockServiceAPI_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceAPI_CreateService_Call) Return(apiCreateServiceRequest client.ApiCreateServiceRequest) *MockServiceAPI_CreateService_Call {
	_c.Call.Return(apiCreateServiceRequest)
	return _c
}

func (_c *MockServiceAPI_CreateService_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiCreateServiceRequest) *MockServiceAPI_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceExecute provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) CreateServiceExecute(r client.ApiCreateServiceRequest) (*client.ServiceComponent, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceExecute")
	}

	var r0 *client.ServiceComponent
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateServiceRequest) (*client.ServiceComponent, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateServiceRequest) *client.ServiceComponent); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServiceComponent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateServiceRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateServiceRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockServiceAPI_CreateServiceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceExecute'
type MockServiceAPI_CreateServiceExecute_Call struct {
	*mock.Call
}

// CreateServiceExecute is a helper method to define mock.On call
//   - r client.ApiCreateServiceRequest
func (_e *MockServiceAPI_Expecter) CreateServiceExecute(r interface{}) *MockServiceAPI_CreateServiceExecute_Call {
	return &MockServiceAPI_CreateServiceExecute_Call{Call: _e.mock.On("CreateServiceExecute", r)}
}

func (_c *MockServiceAPI_CreateServiceExecute_Call) Run(run func(r client.ApiCreateServiceRequest)) *MockServiceAPI_CreateServiceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateServiceRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateServiceRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceAPI_CreateServiceExecute_Call) Return(serviceComponent *client.ServiceComponent, response *http.Response, err error) *MockServiceAPI_CreateServiceExecute_Call {
	_c.Call.Return(serviceComponent, response, err)
	return _c
}

func (_c *MockServiceAPI_CreateServiceExecute_Call) RunAndReturn(run func(r client.ApiCreateServiceRequest) (*client.ServiceComponent, *http.Response, error)) *MockServiceAPI_CreateServiceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) DeleteService(ctx context.Context, uuid string) client.ApiDeleteServiceRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 client.ApiDeleteServiceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteServiceRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteServiceRequest)
	}
	return r0
}

// MockServiceAPI_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockServiceAPI_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockServiceAPI_Expecter) DeleteService(ctx interface{}, uuid interface{}) *MockServiceAPI_DeleteService_Call {
	return &MockServiceAPI_DeleteService_Call{Call: _e.mock.On("DeleteService", ctx, uuid)}
}

func (_c *MockServiceAPI_DeleteService_Call) Run(run func(ctx context.Context, uuid string)) *MockServiceAPI_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceAPI_DeleteService_Call) Return(apiDeleteServiceRequest client.ApiDeleteServiceRequest) *MockServiceAPI_DeleteService_Call {
	_c.Call.Return(apiDeleteServiceRequest)
	return _c
}

func (_c *MockServiceAPI_DeleteService_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteServiceRequest) *MockServiceAPI_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceExecute provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) DeleteServiceExecute(r client.ApiDeleteServiceRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteServiceRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteServiceRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteServiceRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockServiceAPI_DeleteServiceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceExecute'
type MockServiceAPI_DeleteServiceExecute_Call struct {
	*mock.Call
}

// DeleteServiceExecute is a helper method to define mock.On call
//   - r client.ApiDeleteServiceRequest
func (_e *MockServiceAPI_Expecter) DeleteServiceExecute(r interface{}) *MockServiceAPI_DeleteServiceExecute_Call {
	return &MockServiceAPI_DeleteServiceExecute_Call{Call: _e.mock.On("DeleteServiceExecute", r)}
}

func (_c *MockServiceAPI_DeleteServiceExecute_Call) Run(run func(r client.ApiDeleteServiceRequest)) *MockServiceAPI_DeleteServiceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteServiceRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteServiceRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceAPI_DeleteServiceExecute_Call) Return(response *http.Response, err error) *MockServiceAPI_DeleteServiceExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockServiceAPI_DeleteServiceExecute_Call) RunAndReturn(run func(r client.ApiDeleteServiceRequest) (*http.Response, error)) *MockServiceAPI_DeleteServiceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllServices provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) GetAllServices(ctx context.Context, uuid string) client.ApiGetAllServicesRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetAllServices")
	}

	var r0 client.ApiGetAllServicesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetAllServicesRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllServicesRequest)
	}
	return r0
}

// MockServiceAPI_GetAllServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllServices'
type MockServiceAPI_GetAllServices_Call struct {
	*mock.Call
}

// GetAllServices is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockServiceAPI_Expecter) GetAllServices(ctx interface{}, uuid interface{}) *MockServiceAPI_GetAllServices_Call {
	return &MockServiceAPI_GetAllServices_Call{Call: _e.mock.On("GetAllServices", ctx, uuid)}
}

func (_c *MockServiceAPI_GetAllServices_Call) Run(run func(ctx context.Context, uuid string)) *MockServiceAPI_GetAllServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceAPI_GetAllServices_Call) Return(apiGetAllServicesRequest client.ApiGetAllServicesRequest) *MockServiceAPI_GetAllServices_Call {
	_c.Call.Return(apiGetAllServicesRequest)
	return _c
}

func (_c *MockServiceAPI_GetAllServices_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetAllServicesRequest) *MockServiceAPI_GetAllServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllServicesExecute provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) GetAllServicesExecute(r client.ApiGetAllServicesRequest) ([]client.ServiceComponent, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllServicesExecute")
	}

	var r0 []client.ServiceComponent
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllServicesRequest) ([]client.ServiceComponent, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllServicesRequest) []client.ServiceComponent); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ServiceComponent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllServicesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllServicesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockServiceAPI_GetAllServicesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllServicesExecute'
type MockServiceAPI_GetAllServicesExecute_Call struct {
	*mock.Call
}

// GetAllServicesExecute is a helper method to define mock.On call
//   - r client.ApiGetAllServicesRequest
func (_e *MockServiceAPI_Expecter) GetAllServicesExecute(r interface{}) *MockServiceAPI_GetAllServicesExecute_Call {
	return &MockServiceAPI_GetAllServicesExecute_Call{Call: _e.mock.On("GetAllServicesExecute", r)}
}

func (_c *MockServiceAPI_GetAllServicesExecute_Call) Run(run func(r client.ApiGetAllServicesRequest)) *MockServiceAPI_GetAllServicesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllServicesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllServicesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceAPI_GetAllServicesExecute_Call) Return(serviceComponents []client.ServiceComponent, response *http.Response, err error) *MockServiceAPI_GetAllServicesExecute_Call {
	_c.Call.Return(serviceComponents, response, err)
	return _c
}

func (_c *MockServiceAPI_GetAllServicesExecute_Call) RunAndReturn(run func(r client.ApiGetAllServicesRequest) ([]client.ServiceComponent, *http.Response, error)) *MockServiceAPI_GetAllServicesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceByUuid provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) GetServiceByUuid(ctx context.Context, uuid string) client.ApiGetServiceByUuidRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceByUuid")
	}

	var r0 client.ApiGetServiceByUuidRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetServiceByUuidRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetServiceByUuidRequest)
	}
	return r0
}

// MockServiceAPI_GetServiceByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceByUuid'
type MockServiceAPI_GetServiceByUuid_Call struct {
	*mock.Call
}

// GetServiceByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockServiceAPI_Expecter) GetServiceByUuid(ctx interface{}, uuid interface{}) *MockServiceAPI_GetServiceByUuid_Call {
	return &MockServiceAPI_GetServiceByUuid_Call{Call: _e.mock.On("GetServiceByUuid", ctx, uuid)}
}

func (_c *MockServiceAPI_GetServiceByUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockServiceAPI_GetServiceByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockServiceAPI_GetServiceByUuid_Call) Return(apiGetServiceByUuidRequest client.ApiGetServiceByUuidRequest) *MockServiceAPI_GetServiceByUuid_Call {
	_c.Call.Return(apiGetServiceByUuidRequest)
	return _c
}

func (_c *MockServiceAPI_GetServiceByUuid_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetServiceByUuidRequest) *MockServiceAPI_GetServiceByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceByUuidExecute provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) GetServiceByUuidExecute(r client.ApiGetServiceByUuidRequest) (*client.ServiceComponent, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceByUuidExecute")
	}

	var r0 *client.ServiceComponent
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetServiceByUuidRequest) (*client.ServiceComponent, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetServiceByUuidRequest) *client.ServiceComponent); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServiceComponent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetServiceByUuidRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetServiceByUuidRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockServiceAPI_GetServiceByUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceByUuidExecute'
type MockServiceAPI_GetServiceByUuidExecute_Call struct {
	*mock.Call
}

// GetServiceByUuidExecute is a helper method to define mock.On call
//   - r client.ApiGetServiceByUuidRequest
func (_e *MockServiceAPI_Expecter) GetServiceByUuidExecute(r interface{}) *MockServiceAPI_GetServiceByUuidExecute_Call {
	return &MockServiceAPI_GetServiceByUuidExecute_Call{Call: _e.mock.On("GetServiceByUuidExecute", r)}
}

func (_c *MockServiceAPI_GetServiceByUuidExecute_Call) Run(run func(r client.ApiGetServiceByUuidRequest)) *MockServiceAPI_GetServiceByUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetServiceByUuidRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetServiceByUuidRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceAPI_GetServiceByUuidExecute_Call) Return(serviceComponent *client.ServiceComponent, response *http.Response, err error) *MockServiceAPI_GetServiceByUuidExecute_Call {
	_c.Call.Return(serviceComponent, response, err)
	return _c
}

func (_c *MockServiceAPI_GetServiceByUuidExecute_Call) RunAndReturn(run func(r client.ApiGetServiceByUuidRequest) (*client.ServiceComponent, *http.Response, error)) *MockServiceAPI_GetServiceByUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) UpdateService(ctx context.Context) client.ApiUpdateServiceRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 client.ApiUpdateServiceRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateServiceRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateServiceRequest)
	}
	return r0
}

// MockServiceAPI_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type MockServiceAPI_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServiceAPI_Expecter) UpdateService(ctx interface{}) *MockServiceAPI_UpdateService_Call {
	return &MockServiceAPI_UpdateService_Call{Call: _e.mock.On("UpdateService", ctx)}
}

func (_c *MockServiceAPI_UpdateService_Call) Run(run func(ctx context.Context)) *MockServiceAPI_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceAPI_UpdateService_Call) Return(apiUpdateServiceRequest client.ApiUpdateServiceRequest) *MockServiceAPI_UpdateService_Call {
	_c.Call.Return(apiUpdateServiceRequest)
	return _c
}

func (_c *MockServiceAPI_UpdateService_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateServiceRequest) *MockServiceAPI_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceExecute provides a mock function for the type MockServiceAPI
func (_mock *MockServiceAPI) UpdateServiceExecute(r client.ApiUpdateServiceRequest) (*client.ServiceComponent, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceExecute")
	}

	var r0 *client.ServiceComponent
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateServiceRequest) (*client.ServiceComponent, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateServiceRequest) *client.ServiceComponent); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ServiceComponent)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateServiceRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateServiceRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockServiceAPI_UpdateServiceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceExecute'
type MockServiceAPI_UpdateServiceExecute_Call struct {
	*mock.Call
}

// UpdateServiceExecute is a helper method to define mock.On call
//   - r client.ApiUpdateServiceRequest
func (_e *MockServiceAPI_Expecter) UpdateServiceExecute(r interface{}) *MockServiceAPI_UpdateServiceExecute_Call {
	return &MockServiceAPI_UpdateServiceExecute_Call{Call: _e.mock.On("UpdateServiceExecute", r)}
}

func (_c *MockServiceAPI_UpdateServiceExecute_Call) Run(run func(r client.ApiUpdateServiceRequest)) *MockServiceAPI_UpdateServiceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateServiceRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateServiceRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockServiceAPI_UpdateServiceExecute_Call) Return(serviceComponent *client.ServiceComponent, response *http.Response, err error) *MockServiceAPI_UpdateServiceExecute_Call {
	_c.Call.Return(serviceComponent, response, err)
	return _c
}

func (_c *MockServiceAPI_UpdateServiceExecute_Call) RunAndReturn(run func(r client.ApiUpdateServiceRequest) (*client.ServiceComponent, *http.Response, error)) *MockServiceAPI_UpdateServiceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagAPI creates a new instance of MockTagAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagAPI {
	mock := &MockTagAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTagAPI is an autogenerated mock type for the TagAPI type
type MockTagAPI struct {
	mock.Mock
}

type MockTagAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagAPI) EXPECT() *MockTagAPI_Expecter {
	return &MockTagAPI_Expecter{mock: &_m.Mock}
}

// CreateTags provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) CreateTags(ctx context.Context) client.ApiCreateTagsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateTags")
	}

	var r0 client.ApiCreateTagsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateTagsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateTagsRequest)
	}
	return r0
}

// MockTagAPI_CreateTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTags'
type MockTagAPI_CreateTags_Call struct {
	*mock.Call
}

// CreateTags is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTagAPI_Expecter) CreateTags(ctx interface{}) *MockTagAPI_CreateTags_Call {
	return &MockTagAPI_CreateTags_Call{Call: _e.mock.On("CreateTags", ctx)}
}

func (_c *MockTagAPI_CreateTags_Call) Run(run func(ctx context.Context)) *MockTagAPI_CreateTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_CreateTags_Call) Return(apiCreateTagsRequest client.ApiCreateTagsRequest) *MockTagAPI_CreateTags_Call {
	_c.Call.Return(apiCreateTagsRequest)
	return _c
}

func (_c *MockTagAPI_CreateTags_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateTagsRequest) *MockTagAPI_CreateTags_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTagsExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) CreateTagsExecute(r client.ApiCreateTagsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateTagsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateTagsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateTagsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateTagsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagAPI_CreateTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTagsExecute'
type MockTagAPI_CreateTagsExecute_Call struct {
	*mock.Call
}

// CreateTagsExecute is a helper method to define mock.On call
//   - r client.ApiCreateTagsRequest
func (_e *MockTagAPI_Expecter) CreateTagsExecute(r interface{}) *MockTagAPI_CreateTagsExecute_Call {
	return &MockTagAPI_CreateTagsExecute_Call{Call: _e.mock.On("CreateTagsExecute", r)}
}

func (_c *MockTagAPI_CreateTagsExecute_Call) Run(run func(r client.ApiCreateTagsRequest)) *MockTagAPI_CreateTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateTagsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateTagsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_CreateTagsExecute_Call) Return(response *http.Response, err error) *MockTagAPI_CreateTagsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTagAPI_CreateTagsExecute_Call) RunAndReturn(run func(r client.ApiCreateTagsRequest) (*http.Response, error)) *MockTagAPI_CreateTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTags provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) DeleteTags(ctx context.Context) client.ApiDeleteTagsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTags")
	}

	var r0 client.ApiDeleteTagsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiDeleteTagsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteTagsRequest)
	}
	return r0
}

// MockTagAPI_DeleteTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTags'
type MockTagAPI_DeleteTags_Call struct {
	*mock.Call
}

// DeleteTags is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTagAPI_Expecter) DeleteTags(ctx interface{}) *MockTagAPI_DeleteTags_Call {
	return &MockTagAPI_DeleteTags_Call{Call: _e.mock.On("DeleteTags", ctx)}
}

func (_c *MockTagAPI_DeleteTags_Call) Run(run func(ctx context.Context)) *MockTagAPI_DeleteTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_DeleteTags_Call) Return(apiDeleteTagsRequest client.ApiDeleteTagsRequest) *MockTagAPI_DeleteTags_Call {
	_c.Call.Return(apiDeleteTagsRequest)
	return _c
}

func (_c *MockTagAPI_DeleteTags_Call) RunAndReturn(run func(ctx context.Context) client.ApiDeleteTagsRequest) *MockTagAPI_DeleteTags_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTagsExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) DeleteTagsExecute(r client.ApiDeleteTagsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteTagsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteTagsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteTagsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagAPI_DeleteTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTagsExecute'
type MockTagAPI_DeleteTagsExecute_Call struct {
	*mock.Call
}

// DeleteTagsExecute is a helper method to define mock.On call
//   - r client.ApiDeleteTagsRequest
func (_e *MockTagAPI_Expecter) DeleteTagsExecute(r interface{}) *MockTagAPI_DeleteTagsExecute_Call {
	return &MockTagAPI_DeleteTagsExecute_Call{Call: _e.mock.On("DeleteTagsExecute", r)}
}

func (_c *MockTagAPI_DeleteTagsExecute_Call) Run(run func(r client.ApiDeleteTagsRequest)) *MockTagAPI_DeleteTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteTagsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteTagsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_DeleteTagsExecute_Call) Return(response *http.Response, err error) *MockTagAPI_DeleteTagsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTagAPI_DeleteTagsExecute_Call) RunAndReturn(run func(r client.ApiDeleteTagsRequest) (*http.Response, error)) *MockTagAPI_DeleteTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTags provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetAllTags(ctx context.Context) client.ApiGetAllTagsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTags")
	}

	var r0 client.ApiGetAllTagsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetAllTagsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllTagsRequest)
	}
	return r0
}

// MockTagAPI_GetAllTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTags'
type MockTagAPI_GetAllTags_Call struct {
	*mock.Call
}

// GetAllTags is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTagAPI_Expecter) GetAllTags(ctx interface{}) *MockTagAPI_GetAllTags_Call {
	return &MockTagAPI_GetAllTags_Call{Call: _e.mock.On("GetAllTags", ctx)}
}

func (_c *MockTagAPI_GetAllTags_Call) Run(run func(ctx context.Context)) *MockTagAPI_GetAllTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetAllTags_Call) Return(apiGetAllTagsRequest client.ApiGetAllTagsRequest) *MockTagAPI_GetAllTags_Call {
	_c.Call.Return(apiGetAllTagsRequest)
	return _c
}

func (_c *MockTagAPI_GetAllTags_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetAllTagsRequest) *MockTagAPI_GetAllTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTagsExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetAllTagsExecute(r client.ApiGetAllTagsRequest) ([]client.TagListResponseItem, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTagsExecute")
	}

	var r0 []client.TagListResponseItem
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllTagsRequest) ([]client.TagListResponseItem, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllTagsRequest) []client.TagListResponseItem); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.TagListResponseItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllTagsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllTagsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTagAPI_GetAllTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTagsExecute'
type MockTagAPI_GetAllTagsExecute_Call struct {
	*mock.Call
}

// GetAllTagsExecute is a helper method to define mock.On call
//   - r client.ApiGetAllTagsRequest
func (_e *MockTagAPI_Expecter) GetAllTagsExecute(r interface{}) *MockTagAPI_GetAllTagsExecute_Call {
	return &MockTagAPI_GetAllTagsExecute_Call{Call: _e.mock.On("GetAllTagsExecute", r)}
}

func (_c *MockTagAPI_GetAllTagsExecute_Call) Run(run func(r client.ApiGetAllTagsRequest)) *MockTagAPI_GetAllTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllTagsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllTagsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetAllTagsExecute_Call) Return(tagListResponseItems []client.TagListResponseItem, response *http.Response, err error) *MockTagAPI_GetAllTagsExecute_Call {
	_c.Call.Return(tagListResponseItems, response, err)
	return _c
}

func (_c *MockTagAPI_GetAllTagsExecute_Call) RunAndReturn(run func(r client.ApiGetAllTagsRequest) ([]client.TagListResponseItem, *http.Response, error)) *MockTagAPI_GetAllTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedCollectionProjects provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTaggedCollectionProjects(ctx context.Context, name string) client.ApiGetTaggedCollectionProjectsRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedCollectionProjects")
	}

	var r0 client.ApiGetTaggedCollectionProjectsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetTaggedCollectionProjectsRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiGetTaggedCollectionProjectsRequest)
	}
	return r0
}

// MockTagAPI_GetTaggedCollectionProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedCollectionProjects'
type MockTagAPI_GetTaggedCollectionProjects_Call struct {
	*mock.Call
}

// GetTaggedCollectionProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) GetTaggedCollectionProjects(ctx interface{}, name interface{}) *MockTagAPI_GetTaggedCollectionProjects_Call {
	return &MockTagAPI_GetTaggedCollectionProjects_Call{Call: _e.mock.On("GetTaggedCollectionProjects", ctx, name)}
}

func (_c *MockTagAPI_GetTaggedCollectionProjects_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_GetTaggedCollectionProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedCollectionProjects_Call) Return(apiGetTaggedCollectionProjectsRequest client.ApiGetTaggedCollectionProjectsRequest) *MockTagAPI_GetTaggedCollectionProjects_Call {
	_c.Call.Return(apiGetTaggedCollectionProjectsRequest)
	return _c
}

func (_c *MockTagAPI_GetTaggedCollectionProjects_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiGetTaggedCollectionProjectsRequest) *MockTagAPI_GetTaggedCollectionProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedCollectionProjectsExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTaggedCollectionProjectsExecute(r client.ApiGetTaggedCollectionProjectsRequest) ([]client.TaggedCollectionProjectListResponseItem, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedCollectionProjectsExecute")
	}

	var r0 []client.TaggedCollectionProjectListResponseItem
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTaggedCollectionProjectsRequest) ([]client.TaggedCollectionProjectListResponseItem, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTaggedCollectionProjectsRequest) []client.TaggedCollectionProjectListResponseItem); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.TaggedCollectionProjectListResponseItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetTaggedCollectionProjectsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetTaggedCollectionProjectsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTagAPI_GetTaggedCollectionProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedCollectionProjectsExecute'
type MockTagAPI_GetTaggedCollectionProjectsExecute_Call struct {
	*mock.Call
}

// GetTaggedCollectionProjectsExecute is a helper method to define mock.On call
//   - r client.ApiGetTaggedCollectionProjectsRequest
func (_e *MockTagAPI_Expecter) GetTaggedCollectionProjectsExecute(r interface{}) *MockTagAPI_GetTaggedCollectionProjectsExecute_Call {
	return &MockTagAPI_GetTaggedCollectionProjectsExecute_Call{Call: _e.mock.On("GetTaggedCollectionProjectsExecute", r)}
}

func (_c *MockTagAPI_GetTaggedCollectionProjectsExecute_Call) Run(run func(r client.ApiGetTaggedCollectionProjectsRequest)) *MockTagAPI_GetTaggedCollectionProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetTaggedCollectionProjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetTaggedCollectionProjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedCollectionProjectsExecute_Call) Return(taggedCollectionProjectListResponseItems []client.TaggedCollectionProjectListResponseItem, response *http.Response, err error) *MockTagAPI_GetTaggedCollectionProjectsExecute_Call {
	_c.Call.Return(taggedCollectionProjectListResponseItems, response, err)
	return _c
}

func (_c *MockTagAPI_GetTaggedCollectionProjectsExecute_Call) RunAndReturn(run func(r client.ApiGetTaggedCollectionProjectsRequest) ([]client.TaggedCollectionProjectListResponseItem, *http.Response, error)) *MockTagAPI_GetTaggedCollectionProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedNotificationRules provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTaggedNotificationRules(ctx context.Context, name string) client.ApiGetTaggedNotificationRulesRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedNotificationRules")
	}

	var r0 client.ApiGetTaggedNotificationRulesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetTaggedNotificationRulesRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiGetTaggedNotificationRulesRequest)
	}
	return r0
}

// MockTagAPI_GetTaggedNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedNotificationRules'
type MockTagAPI_GetTaggedNotificationRules_Call struct {
	*mock.Call
}

// GetTaggedNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) GetTaggedNotificationRules(ctx interface{}, name interface{}) *MockTagAPI_GetTaggedNotificationRules_Call {
	return &MockTagAPI_GetTaggedNotificationRules_Call{Call: _e.mock.On("GetTaggedNotificationRules", ctx, name)}
}

func (_c *MockTagAPI_GetTaggedNotificationRules_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_GetTaggedNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedNotificationRules_Call) Return(apiGetTaggedNotificationRulesRequest client.ApiGetTaggedNotificationRulesRequest) *MockTagAPI_GetTaggedNotificationRules_Call {
	_c.Call.Return(apiGetTaggedNotificationRulesRequest)
	return _c
}

func (_c *MockTagAPI_GetTaggedNotificationRules_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiGetTaggedNotificationRulesRequest) *MockTagAPI_GetTaggedNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedNotificationRulesExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTaggedNotificationRulesExecute(r client.ApiGetTaggedNotificationRulesRequest) ([]client.TaggedPolicyListResponseItem, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedNotificationRulesExecute")
	}

	var r0 []client.TaggedPolicyListResponseItem
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTaggedNotificationRulesRequest) ([]client.TaggedPolicyListResponseItem, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTaggedNotificationRulesRequest) []client.TaggedPolicyListResponseItem); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.TaggedPolicyListResponseItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetTaggedNotificationRulesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetTaggedNotificationRulesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTagAPI_GetTaggedNotificationRulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedNotificationRulesExecute'
type MockTagAPI_GetTaggedNotificationRulesExecute_Call struct {
	*mock.Call
}

// GetTaggedNotificationRulesExecute is a helper method to define mock.On call
//   - r client.ApiGetTaggedNotificationRulesRequest
func (_e *MockTagAPI_Expecter) GetTaggedNotificationRulesExecute(r interface{}) *MockTagAPI_GetTaggedNotificationRulesExecute_Call {
	return &MockTagAPI_GetTaggedNotificationRulesExecute_Call{Call: _e.mock.On("GetTaggedNotificationRulesExecute", r)}
}

func (_c *MockTagAPI_GetTaggedNotificationRulesExecute_Call) Run(run func(r client.ApiGetTaggedNotificationRulesRequest)) *MockTagAPI_GetTaggedNotificationRulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetTaggedNotificationRulesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetTaggedNotificationRulesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedNotificationRulesExecute_Call) Return(taggedPolicyListResponseItems []client.TaggedPolicyListResponseItem, response *http.Response, err error) *MockTagAPI_GetTaggedNotificationRulesExecute_Call {
	_c.Call.Return(taggedPolicyListResponseItems, response, err)
	return _c
}

func (_c *MockTagAPI_GetTaggedNotificationRulesExecute_Call) RunAndReturn(run func(r client.ApiGetTaggedNotificationRulesRequest) ([]client.TaggedPolicyListResponseItem, *http.Response, error)) *MockTagAPI_GetTaggedNotificationRulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedPolicies provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTaggedPolicies(ctx context.Context, name string) client.ApiGetTaggedPoliciesRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedPolicies")
	}

	var r0 client.ApiGetTaggedPoliciesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetTaggedPoliciesRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiGetTaggedPoliciesRequest)
	}
	return r0
}

// MockTagAPI_GetTaggedPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedPolicies'
type MockTagAPI_GetTaggedPolicies_Call struct {
	*mock.Call
}

// GetTaggedPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) GetTaggedPolicies(ctx interface{}, name interface{}) *MockTagAPI_GetTaggedPolicies_Call {
	return &MockTagAPI_GetTaggedPolicies_Call{Call: _e.mock.On("GetTaggedPolicies", ctx, name)}
}

func (_c *MockTagAPI_GetTaggedPolicies_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_GetTaggedPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedPolicies_Call) Return(apiGetTaggedPoliciesRequest client.ApiGetTaggedPoliciesRequest) *MockTagAPI_GetTaggedPolicies_Call {
	_c.Call.Return(apiGetTaggedPoliciesRequest)
	return _c
}

func (_c *MockTagAPI_GetTaggedPolicies_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiGetTaggedPoliciesRequest) *MockTagAPI_GetTaggedPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedPoliciesExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTaggedPoliciesExecute(r client.ApiGetTaggedPoliciesRequest) ([]client.TaggedPolicyListResponseItem, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedPoliciesExecute")
	}

	var r0 []client.TaggedPolicyListResponseItem
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTaggedPoliciesRequest) ([]client.TaggedPolicyListResponseItem, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTaggedPoliciesRequest) []client.TaggedPolicyListResponseItem); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.TaggedPolicyListResponseItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetTaggedPoliciesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetTaggedPoliciesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTagAPI_GetTaggedPoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedPoliciesExecute'
type MockTagAPI_GetTaggedPoliciesExecute_Call struct {
	*mock.Call
}

// GetTaggedPoliciesExecute is a helper method to define mock.On call
//   - r client.ApiGetTaggedPoliciesRequest
func (_e *MockTagAPI_Expecter) GetTaggedPoliciesExecute(r interface{}) *MockTagAPI_GetTaggedPoliciesExecute_Call {
	return &MockTagAPI_GetTaggedPoliciesExecute_Call{Call: _e.mock.On("GetTaggedPoliciesExecute", r)}
}

func (_c *MockTagAPI_GetTaggedPoliciesExecute_Call) Run(run func(r client.ApiGetTaggedPoliciesRequest)) *MockTagAPI_GetTaggedPoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetTaggedPoliciesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetTaggedPoliciesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedPoliciesExecute_Call) Return(taggedPolicyListResponseItems []client.TaggedPolicyListResponseItem, response *http.Response, err error) *MockTagAPI_GetTaggedPoliciesExecute_Call {
	_c.Call.Return(taggedPolicyListResponseItems, response, err)
	return _c
}

func (_c *MockTagAPI_GetTaggedPoliciesExecute_Call) RunAndReturn(run func(r client.ApiGetTaggedPoliciesRequest) ([]client.TaggedPolicyListResponseItem, *http.Response, error)) *MockTagAPI_GetTaggedPoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedProjects provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTaggedProjects(ctx context.Context, name string) client.ApiGetTaggedProjectsRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedProjects")
	}

	var r0 client.ApiGetTaggedProjectsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetTaggedProjectsRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiGetTaggedProjectsRequest)
	}
	return r0
}

// MockTagAPI_GetTaggedProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedProjects'
type MockTagAPI_GetTaggedProjects_Call struct {
	*mock.Call
}

// GetTaggedProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) GetTaggedProjects(ctx interface{}, name interface{}) *MockTagAPI_GetTaggedProjects_Call {
	return &MockTagAPI_GetTaggedProjects_Call{Call: _e.mock.On("GetTaggedProjects", ctx, name)}
}

func (_c *MockTagAPI_GetTaggedProjects_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_GetTaggedProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedProjects_Call) Return(apiGetTaggedProjectsRequest client.ApiGetTaggedProjectsRequest) *MockTagAPI_GetTaggedProjects_Call {
	_c.Call.Return(apiGetTaggedProjectsRequest)
	return _c
}

func (_c *MockTagAPI_GetTaggedProjects_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiGetTaggedProjectsRequest) *MockTagAPI_GetTaggedProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedProjectsExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTaggedProjectsExecute(r client.ApiGetTaggedProjectsRequest) ([]client.TaggedProjectListResponseItem, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedProjectsExecute")
	}

	var r0 []client.TaggedProjectListResponseItem
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTaggedProjectsRequest) ([]client.TaggedProjectListResponseItem, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTaggedProjectsRequest) []client.TaggedProjectListResponseItem); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.TaggedProjectListResponseItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetTaggedProjectsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetTaggedProjectsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTagAPI_GetTaggedProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedProjectsExecute'
type MockTagAPI_GetTaggedProjectsExecute_Call struct {
	*mock.Call
}

// GetTaggedProjectsExecute is a helper method to define mock.On call
//   - r client.ApiGetTaggedProjectsRequest
func (_e *MockTagAPI_Expecter) GetTaggedProjectsExecute(r interface{}) *MockTagAPI_GetTaggedProjectsExecute_Call {
	return &MockTagAPI_GetTaggedProjectsExecute_Call{Call: _e.mock.On("GetTaggedProjectsExecute", r)}
}

func (_c *MockTagAPI_GetTaggedProjectsExecute_Call) Run(run func(r client.ApiGetTaggedProjectsRequest)) *MockTagAPI_GetTaggedProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetTaggedProjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetTaggedProjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedProjectsExecute_Call) Return(taggedProjectListResponseItems []client.TaggedProjectListResponseItem, response *http.Response, err error) *MockTagAPI_GetTaggedProjectsExecute_Call {
	_c.Call.Return(taggedProjectListResponseItems, response, err)
	return _c
}

func (_c *MockTagAPI_GetTaggedProjectsExecute_Call) RunAndReturn(run func(r client.ApiGetTaggedProjectsRequest) ([]client.TaggedProjectListResponseItem, *http.Response, error)) *MockTagAPI_GetTaggedProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTags(ctx context.Context, policyUuid string) client.ApiGetTagsRequest {
	ret := _mock.Called(ctx, policyUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 client.ApiGetTagsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetTagsRequest); ok {
		r0 = returnFunc(ctx, policyUuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetTagsRequest)
	}
	return r0
}

// MockTagAPI_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockTagAPI_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
func (_e *MockTagAPI_Expecter) GetTags(ctx interface{}, policyUuid interface{}) *MockTagAPI_GetTags_Call {
	return &MockTagAPI_GetTags_Call{Call: _e.mock.On("GetTags", ctx, policyUuid)}
}

func (_c *MockTagAPI_GetTags_Call) Run(run func(ctx context.Context, policyUuid string)) *MockTagAPI_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTags_Call) Return(apiGetTagsRequest client.ApiGetTagsRequest) *MockTagAPI_GetTags_Call {
	_c.Call.Return(apiGetTagsRequest)
	return _c
}

func (_c *MockTagAPI_GetTags_Call) RunAndReturn(run func(ctx context.Context, policyUuid string) client.ApiGetTagsRequest) *MockTagAPI_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTagsExecute(r client.ApiGetTagsRequest) ([]client.Tag, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsExecute")
	}

	var r0 []client.Tag
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTagsRequest) ([]client.Tag, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTagsRequest) []client.Tag); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetTagsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetTagsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTagAPI_GetTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsExecute'
type MockTagAPI_GetTagsExecute_Call struct {
	*mock.Call
}

// GetTagsExecute is a helper method to define mock.On call
//   - r client.ApiGetTagsRequest
func (_e *MockTagAPI_Expecter) GetTagsExecute(r interface{}) *MockTagAPI_GetTagsExecute_Call {
	return &MockTagAPI_GetTagsExecute_Call{Call: _e.mock.On("GetTagsExecute", r)}
}

func (_c *MockTagAPI_GetTagsExecute_Call) Run(run func(r client.ApiGetTagsRequest)) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetTagsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetTagsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTagsExecute_Call) Return(tags []client.Tag, response *http.Response, err error) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Return(tags, response, err)
	return _c
}

func (_c *MockTagAPI_GetTagsExecute_Call) RunAndReturn(run func(r client.ApiGetTagsRequest) ([]client.Tag, *http.Response, error)) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsForPolicy provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTagsForPolicy(ctx context.Context, uuid string) client.ApiGetTagsForPolicyRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsForPolicy")
	}

	var r0 client.ApiGetTagsForPolicyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetTagsForPolicyRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetTagsForPolicyRequest)
	}
	return r0
}

// MockTagAPI_GetTagsForPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsForPolicy'
type MockTagAPI_GetTagsForPolicy_Call struct {
	*mock.Call
}

// GetTagsForPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockTagAPI_Expecter) GetTagsForPolicy(ctx interface{}, uuid interface{}) *MockTagAPI_GetTagsForPolicy_Call {
	return &MockTagAPI_GetTagsForPolicy_Call{Call: _e.mock.On("GetTagsForPolicy", ctx, uuid)}
}

func (_c *MockTagAPI_GetTagsForPolicy_Call) Run(run func(ctx context.Context, uuid string)) *MockTagAPI_GetTagsForPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTagsForPolicy_Call) Return(apiGetTagsForPolicyRequest client.ApiGetTagsForPolicyRequest) *MockTagAPI_GetTagsForPolicy_Call {
	_c.Call.Return(apiGetTagsForPolicyRequest)
	return _c
}

func (_c *MockTagAPI_GetTagsForPolicy_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetTagsForPolicyRequest) *MockTagAPI_GetTagsForPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsForPolicyExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) GetTagsForPolicyExecute(r client.ApiGetTagsForPolicyRequest) ([]client.Tag, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsForPolicyExecute")
	}

	var r0 []client.Tag
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTagsForPolicyRequest) ([]client.Tag, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTagsForPolicyRequest) []client.Tag); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Tag)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetTagsForPolicyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetTagsForPolicyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTagAPI_GetTagsForPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsForPolicyExecute'
type MockTagAPI_GetTagsForPolicyExecute_Call struct {
	*mock.Call
}

// GetTagsForPolicyExecute is a helper method to define mock.On call
//   - r client.ApiGetTagsForPolicyRequest
func (_e *MockTagAPI_Expecter) GetTagsForPolicyExecute(r interface{}) *MockTagAPI_GetTagsForPolicyExecute_Call {
	return &MockTagAPI_GetTagsForPolicyExecute_Call{Call: _e.mock.On("GetTagsForPolicyExecute", r)}
}

func (_c *MockTagAPI_GetTagsForPolicyExecute_Call) Run(run func(r client.ApiGetTagsForPolicyRequest)) *MockTagAPI_GetTagsForPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetTagsForPolicyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetTagsForPolicyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_GetTagsForPolicyExecute_Call) Return(tags []client.Tag, response *http.Response, err error) *MockTagAPI_GetTagsForPolicyExecute_Call {
	_c.Call.Return(tags, response, err)
	return _c
}

func (_c *MockTagAPI_GetTagsForPolicyExecute_Call) RunAndReturn(run func(r client.ApiGetTagsForPolicyRequest) ([]client.Tag, *http.Response, error)) *MockTagAPI_GetTagsForPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TagNotificationRules provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) TagNotificationRules(ctx context.Context, name string) client.ApiTagNotificationRulesRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for TagNotificationRules")
	}

	var r0 client.ApiTagNotificationRulesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiTagNotificationRulesRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiTagNotificationRulesRequest)
	}
	return r0
}

// MockTagAPI_TagNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagNotificationRules'
type MockTagAPI_TagNotificationRules_Call struct {
	*mock.Call
}

// TagNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) TagNotificationRules(ctx interface{}, name interface{}) *MockTagAPI_TagNotificationRules_Call {
	return &MockTagAPI_TagNotificationRules_Call{Call: _e.mock.On("TagNotificationRules", ctx, name)}
}

func (_c *MockTagAPI_TagNotificationRules_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_TagNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_TagNotificationRules_Call) Return(apiTagNotificationRulesRequest client.ApiTagNotificationRulesRequest) *MockTagAPI_TagNotificationRules_Call {
	_c.Call.Return(apiTagNotificationRulesRequest)
	return _c
}

func (_c *MockTagAPI_TagNotificationRules_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiTagNotificationRulesRequest) *MockTagAPI_TagNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// TagNotificationRulesExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) TagNotificationRulesExecute(r client.ApiTagNotificationRulesRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TagNotificationRulesExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiTagNotificationRulesRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiTagNotificationRulesRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiTagNotificationRulesRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagAPI_TagNotificationRulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagNotificationRulesExecute'
type MockTagAPI_TagNotificationRulesExecute_Call struct {
	*mock.Call
}

// TagNotificationRulesExecute is a helper method to define mock.On call
//   - r client.ApiTagNotificationRulesRequest
func (_e *MockTagAPI_Expecter) TagNotificationRulesExecute(r interface{}) *MockTagAPI_TagNotificationRulesExecute_Call {
	return &MockTagAPI_TagNotificationRulesExecute_Call{Call: _e.mock.On("TagNotificationRulesExecute", r)}
}

func (_c *MockTagAPI_TagNotificationRulesExecute_Call) Run(run func(r client.ApiTagNotificationRulesRequest)) *MockTagAPI_TagNotificationRulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiTagNotificationRulesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiTagNotificationRulesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_TagNotificationRulesExecute_Call) Return(response *http.Response, err error) *MockTagAPI_TagNotificationRulesExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTagAPI_TagNotificationRulesExecute_Call) RunAndReturn(run func(r client.ApiTagNotificationRulesRequest) (*http.Response, error)) *MockTagAPI_TagNotificationRulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TagPolicies provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) TagPolicies(ctx context.Context, name string) client.ApiTagPoliciesRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for TagPolicies")
	}

	var r0 client.ApiTagPoliciesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiTagPoliciesRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiTagPoliciesRequest)
	}
	return r0
}

// MockTagAPI_TagPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagPolicies'
type MockTagAPI_TagPolicies_Call struct {
	*mock.Call
}

// TagPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) TagPolicies(ctx interface{}, name interface{}) *MockTagAPI_TagPolicies_Call {
	return &MockTagAPI_TagPolicies_Call{Call: _e.mock.On("TagPolicies", ctx, name)}
}

func (_c *MockTagAPI_TagPolicies_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_TagPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_TagPolicies_Call) Return(apiTagPoliciesRequest client.ApiTagPoliciesRequest) *MockTagAPI_TagPolicies_Call {
	_c.Call.Return(apiTagPoliciesRequest)
	return _c
}

func (_c *MockTagAPI_TagPolicies_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiTagPoliciesRequest) *MockTagAPI_TagPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// TagPoliciesExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) TagPoliciesExecute(r client.ApiTagPoliciesRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TagPoliciesExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiTagPoliciesRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiTagPoliciesRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiTagPoliciesRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagAPI_TagPoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagPoliciesExecute'
type MockTagAPI_TagPoliciesExecute_Call struct {
	*mock.Call
}

// TagPoliciesExecute is a helper method to define mock.On call
//   - r client.ApiTagPoliciesRequest
func (_e *MockTagAPI_Expecter) TagPoliciesExecute(r interface{}) *MockTagAPI_TagPoliciesExecute_Call {
	return &MockTagAPI_TagPoliciesExecute_Call{Call: _e.mock.On("TagPoliciesExecute", r)}
}

func (_c *MockTagAPI_TagPoliciesExecute_Call) Run(run func(r client.ApiTagPoliciesRequest)) *MockTagAPI_TagPoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiTagPoliciesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiTagPoliciesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_TagPoliciesExecute_Call) Return(response *http.Response, err error) *MockTagAPI_TagPoliciesExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTagAPI_TagPoliciesExecute_Call) RunAndReturn(run func(r client.ApiTagPoliciesRequest) (*http.Response, error)) *MockTagAPI_TagPoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TagProjects provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) TagProjects(ctx context.Context, name string) client.ApiTagProjectsRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for TagProjects")
	}

	var r0 client.ApiTagProjectsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiTagProjectsRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiTagProjectsRequest)
	}
	return r0
}

// MockTagAPI_TagProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagProjects'
type MockTagAPI_TagProjects_Call struct {
	*mock.Call
}

// TagProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) TagProjects(ctx interface{}, name interface{}) *MockTagAPI_TagProjects_Call {
	return &MockTagAPI_TagProjects_Call{Call: _e.mock.On("TagProjects", ctx, name)}
}

func (_c *MockTagAPI_TagProjects_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_TagProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_TagProjects_Call) Return(apiTagProjectsRequest client.ApiTagProjectsRequest) *MockTagAPI_TagProjects_Call {
	_c.Call.Return(apiTagProjectsRequest)
	return _c
}

func (_c *MockTagAPI_TagProjects_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiTagProjectsRequest) *MockTagAPI_TagProjects_Call {
	_c.Call.Return(run)
	return _c
}

// TagProjectsExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) TagProjectsExecute(r client.ApiTagProjectsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TagProjectsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiTagProjectsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiTagProjectsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiTagProjectsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagAPI_TagProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagProjectsExecute'
type MockTagAPI_TagProjectsExecute_Call struct {
	*mock.Call
}

// TagProjectsExecute is a helper method to define mock.On call
//   - r client.ApiTagProjectsRequest
func (_e *MockTagAPI_Expecter) TagProjectsExecute(r interface{}) *MockTagAPI_TagProjectsExecute_Call {
	return &MockTagAPI_TagProjectsExecute_Call{Call: _e.mock.On("TagProjectsExecute", r)}
}

func (_c *MockTagAPI_TagProjectsExecute_Call) Run(run func(r client.ApiTagProjectsRequest)) *MockTagAPI_TagProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiTagProjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiTagProjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_TagProjectsExecute_Call) Return(response *http.Response, err error) *MockTagAPI_TagProjectsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTagAPI_TagProjectsExecute_Call) RunAndReturn(run func(r client.ApiTagProjectsRequest) (*http.Response, error)) *MockTagAPI_TagProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UntagNotificationRules provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) UntagNotificationRules(ctx context.Context, name string) client.ApiUntagNotificationRulesRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UntagNotificationRules")
	}

	var r0 client.ApiUntagNotificationRulesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiUntagNotificationRulesRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiUntagNotificationRulesRequest)
	}
	return r0
}

// MockTagAPI_UntagNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagNotificationRules'
type MockTagAPI_UntagNotificationRules_Call struct {
	*mock.Call
}

// UntagNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) UntagNotificationRules(ctx interface{}, name interface{}) *MockTagAPI_UntagNotificationRules_Call {
	return &MockTagAPI_UntagNotificationRules_Call{Call: _e.mock.On("UntagNotificationRules", ctx, name)}
}

func (_c *MockTagAPI_UntagNotificationRules_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_UntagNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_UntagNotificationRules_Call) Return(apiUntagNotificationRulesRequest client.ApiUntagNotificationRulesRequest) *MockTagAPI_UntagNotificationRules_Call {
	_c.Call.Return(apiUntagNotificationRulesRequest)
	return _c
}

func (_c *MockTagAPI_UntagNotificationRules_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiUntagNotificationRulesRequest) *MockTagAPI_UntagNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// UntagNotificationRulesExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) UntagNotificationRulesExecute(r client.ApiUntagNotificationRulesRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UntagNotificationRulesExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUntagNotificationRulesRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUntagNotificationRulesRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUntagNotificationRulesRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagAPI_UntagNotificationRulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagNotificationRulesExecute'
type MockTagAPI_UntagNotificationRulesExecute_Call struct {
	*mock.Call
}

// UntagNotificationRulesExecute is a helper method to define mock.On call
//   - r client.ApiUntagNotificationRulesRequest
func (_e *MockTagAPI_Expecter) UntagNotificationRulesExecute(r interface{}) *MockTagAPI_UntagNotificationRulesExecute_Call {
	return &MockTagAPI_UntagNotificationRulesExecute_Call{Call: _e.mock.On("UntagNotificationRulesExecute", r)}
}

func (_c *MockTagAPI_UntagNotificationRulesExecute_Call) Run(run func(r client.ApiUntagNotificationRulesRequest)) *MockTagAPI_UntagNotificationRulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUntagNotificationRulesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUntagNotificationRulesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_UntagNotificationRulesExecute_Call) Return(response *http.Response, err error) *MockTagAPI_UntagNotificationRulesExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTagAPI_UntagNotificationRulesExecute_Call) RunAndReturn(run func(r client.ApiUntagNotificationRulesRequest) (*http.Response, error)) *MockTagAPI_UntagNotificationRulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UntagPolicies provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) UntagPolicies(ctx context.Context, name string) client.ApiUntagPoliciesRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UntagPolicies")
	}

	var r0 client.ApiUntagPoliciesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiUntagPoliciesRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiUntagPoliciesRequest)
	}
	return r0
}

// MockTagAPI_UntagPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagPolicies'
type MockTagAPI_UntagPolicies_Call struct {
	*mock.Call
}

// UntagPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) UntagPolicies(ctx interface{}, name interface{}) *MockTagAPI_UntagPolicies_Call {
	return &MockTagAPI_UntagPolicies_Call{Call: _e.mock.On("UntagPolicies", ctx, name)}
}

func (_c *MockTagAPI_UntagPolicies_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_UntagPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_UntagPolicies_Call) Return(apiUntagPoliciesRequest client.ApiUntagPoliciesRequest) *MockTagAPI_UntagPolicies_Call {
	_c.Call.Return(apiUntagPoliciesRequest)
	return _c
}

func (_c *MockTagAPI_UntagPolicies_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiUntagPoliciesRequest) *MockTagAPI_UntagPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// UntagPoliciesExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) UntagPoliciesExecute(r client.ApiUntagPoliciesRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UntagPoliciesExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUntagPoliciesRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUntagPoliciesRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUntagPoliciesRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagAPI_UntagPoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagPoliciesExecute'
type MockTagAPI_UntagPoliciesExecute_Call struct {
	*mock.Call
}

// UntagPoliciesExecute is a helper method to define mock.On call
//   - r client.ApiUntagPoliciesRequest
func (_e *MockTagAPI_Expecter) UntagPoliciesExecute(r interface{}) *MockTagAPI_UntagPoliciesExecute_Call {
	return &MockTagAPI_UntagPoliciesExecute_Call{Call: _e.mock.On("UntagPoliciesExecute", r)}
}

func (_c *MockTagAPI_UntagPoliciesExecute_Call) Run(run func(r client.ApiUntagPoliciesRequest)) *MockTagAPI_UntagPoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUntagPoliciesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUntagPoliciesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_UntagPoliciesExecute_Call) Return(response *http.Response, err error) *MockTagAPI_UntagPoliciesExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTagAPI_UntagPoliciesExecute_Call) RunAndReturn(run func(r client.ApiUntagPoliciesRequest) (*http.Response, error)) *MockTagAPI_UntagPoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UntagProjects provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) UntagProjects(ctx context.Context, name string) client.ApiUntagProjectsRequest {
	ret := _mock.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UntagProjects")
	}

	var r0 client.ApiUntagProjectsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiUntagProjectsRequest); ok {
		r0 = returnFunc(ctx, name)
	} else {
		r0 = ret.Get(0).(client.ApiUntagProjectsRequest)
	}
	return r0
}

// MockTagAPI_UntagProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagProjects'
type MockTagAPI_UntagProjects_Call struct {
	*mock.Call
}

// UntagProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) UntagProjects(ctx interface{}, name interface{}) *MockTagAPI_UntagProjects_Call {
	return &MockTagAPI_UntagProjects_Call{Call: _e.mock.On("UntagProjects", ctx, name)}
}

func (_c *MockTagAPI_UntagProjects_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_UntagProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTagAPI_UntagProjects_Call) Return(apiUntagProjectsRequest client.ApiUntagProjectsRequest) *MockTagAPI_UntagProjects_Call {
	_c.Call.Return(apiUntagProjectsRequest)
	return _c
}

func (_c *MockTagAPI_UntagProjects_Call) RunAndReturn(run func(ctx context.Context, name string) client.ApiUntagProjectsRequest) *MockTagAPI_UntagProjects_Call {
	_c.Call.Return(run)
	return _c
}

// UntagProjectsExecute provides a mock function for the type MockTagAPI
func (_mock *MockTagAPI) UntagProjectsExecute(r client.ApiUntagProjectsRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UntagProjectsExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUntagProjectsRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUntagProjectsRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUntagProjectsRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTagAPI_UntagProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagProjectsExecute'
type MockTagAPI_UntagProjectsExecute_Call struct {
	*mock.Call
}

// UntagProjectsExecute is a helper method to define mock.On call
//   - r client.ApiUntagProjectsRequest
func (_e *MockTagAPI_Expecter) UntagProjectsExecute(r interface{}) *MockTagAPI_UntagProjectsExecute_Call {
	return &MockTagAPI_UntagProjectsExecute_Call{Call: _e.mock.On("UntagProjectsExecute", r)}
}

func (_c *MockTagAPI_UntagProjectsExecute_Call) Run(run func(r client.ApiUntagProjectsRequest)) *MockTagAPI_UntagProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUntagProjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUntagProjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTagAPI_UntagProjectsExecute_Call) Return(response *http.Response, err error) *MockTagAPI_UntagProjectsExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTagAPI_UntagProjectsExecute_Call) RunAndReturn(run func(r client.ApiUntagProjectsRequest) (*http.Response, error)) *MockTagAPI_UntagProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamAPI creates a new instance of MockTeamAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamAPI {
	mock := &MockTeamAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTeamAPI is an autogenerated mock type for the TeamAPI type
type MockTeamAPI struct {
	mock.Mock
}

type MockTeamAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamAPI) EXPECT() *MockTeamAPI_Expecter {
	return &MockTeamAPI_Expecter{mock: &_m.Mock}
}

// AvailableTeams provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) AvailableTeams(ctx context.Context) client.ApiAvailableTeamsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AvailableTeams")
	}

	var r0 client.ApiAvailableTeamsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiAvailableTeamsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiAvailableTeamsRequest)
	}
	return r0
}

// MockTeamAPI_AvailableTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableTeams'
type MockTeamAPI_AvailableTeams_Call struct {
	*mock.Call
}

// AvailableTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) AvailableTeams(ctx interface{}) *MockTeamAPI_AvailableTeams_Call {
	return &MockTeamAPI_AvailableTeams_Call{Call: _e.mock.On("AvailableTeams", ctx)}
}

func (_c *MockTeamAPI_AvailableTeams_Call) Run(run func(ctx context.Context)) *MockTeamAPI_AvailableTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_AvailableTeams_Call) Return(apiAvailableTeamsRequest client.ApiAvailableTeamsRequest) *MockTeamAPI_AvailableTeams_Call {
	_c.Call.Return(apiAvailableTeamsRequest)
	return _c
}

func (_c *MockTeamAPI_AvailableTeams_Call) RunAndReturn(run func(ctx context.Context) client.ApiAvailableTeamsRequest) *MockTeamAPI_AvailableTeams_Call {
	_c.Call.Return(run)
	return _c
}

// AvailableTeamsExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) AvailableTeamsExecute(r client.ApiAvailableTeamsRequest) ([]client.VisibleTeams, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AvailableTeamsExecute")
	}

	var r0 []client.VisibleTeams
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAvailableTeamsRequest) ([]client.VisibleTeams, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAvailableTeamsRequest) []client.VisibleTeams); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.VisibleTeams)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAvailableTeamsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAvailableTeamsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_AvailableTeamsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableTeamsExecute'
type MockTeamAPI_AvailableTeamsExecute_Call struct {
	*mock.Call
}

// AvailableTeamsExecute is a helper method to define mock.On call
//   - r client.ApiAvailableTeamsRequest
func (_e *MockTeamAPI_Expecter) AvailableTeamsExecute(r interface{}) *MockTeamAPI_AvailableTeamsExecute_Call {
	return &MockTeamAPI_AvailableTeamsExecute_Call{Call: _e.mock.On("AvailableTeamsExecute", r)}
}

func (_c *MockTeamAPI_AvailableTeamsExecute_Call) Run(run func(r client.ApiAvailableTeamsRequest)) *MockTeamAPI_AvailableTeamsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAvailableTeamsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAvailableTeamsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_AvailableTeamsExecute_Call) Return(visibleTeamss []client.VisibleTeams, response *http.Response, err error) *MockTeamAPI_AvailableTeamsExecute_Call {
	_c.Call.Return(visibleTeamss, response, err)
	return _c
}

func (_c *MockTeamAPI_AvailableTeamsExecute_Call) RunAndReturn(run func(r client.ApiAvailableTeamsRequest) ([]client.VisibleTeams, *http.Response, error)) *MockTeamAPI_AvailableTeamsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) CreateTeam(ctx context.Context) client.ApiCreateTeamRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 client.ApiCreateTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateTeamRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateTeamRequest)
	}
	return r0
}

// MockTeamAPI_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockTeamAPI_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) CreateTeam(ctx interface{}) *MockTeamAPI_CreateTeam_Call {
	return &MockTeamAPI_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx)}
}

func (_c *MockTeamAPI_CreateTeam_Call) Run(run func(ctx context.Context)) *MockTeamAPI_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_CreateTeam_Call) Return(apiCreateTeamRequest client.ApiCreateTeamRequest) *MockTeamAPI_CreateTeam_Call {
	_c.Call.Return(apiCreateTeamRequest)
	return _c
}

func (_c *MockTeamAPI_CreateTeam_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateTeamRequest) *MockTeamAPI_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeamExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) CreateTeamExecute(r client.ApiCreateTeamRequest) (*client.Team, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamExecute")
	}

	var r0 *client.Team
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateTeamRequest) (*client.Team, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateTeamRequest) *client.Team); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateTeamRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateTeamRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_CreateTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamExecute'
type MockTeamAPI_CreateTeamExecute_Call struct {
	*mock.Call
}

// CreateTeamExecute is a helper method to define mock.On call
//   - r client.ApiCreateTeamRequest
func (_e *MockTeamAPI_Expecter) CreateTeamExecute(r interface{}) *MockTeamAPI_CreateTeamExecute_Call {
	return &MockTeamAPI_CreateTeamExecute_Call{Call: _e.mock.On("CreateTeamExecute", r)}
}

func (_c *MockTeamAPI_CreateTeamExecute_Call) Run(run func(r client.ApiCreateTeamRequest)) *MockTeamAPI_CreateTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateTeamRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateTeamRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_CreateTeamExecute_Call) Return(team *client.Team, response *http.Response, err error) *MockTeamAPI_CreateTeamExecute_Call {
	_c.Call.Return(team, response, err)
	return _c
}

func (_c *MockTeamAPI_CreateTeamExecute_Call) RunAndReturn(run func(r client.ApiCreateTeamRequest) (*client.Team, *http.Response, error)) *MockTeamAPI_CreateTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApiKey provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) DeleteApiKey(ctx context.Context, publicIdOrKey string) client.ApiDeleteApiKeyRequest {
	ret := _mock.Called(ctx, publicIdOrKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiKey")
	}

	var r0 client.ApiDeleteApiKeyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteApiKeyRequest); ok {
		r0 = returnFunc(ctx, publicIdOrKey)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteApiKeyRequest)
	}
	return r0
}

// MockTeamAPI_DeleteApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiKey'
type MockTeamAPI_DeleteApiKey_Call struct {
	*mock.Call
}

// DeleteApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIdOrKey string
func (_e *MockTeamAPI_Expecter) DeleteApiKey(ctx interface{}, publicIdOrKey interface{}) *MockTeamAPI_DeleteApiKey_Call {
	return &MockTeamAPI_DeleteApiKey_Call{Call: _e.mock.On("DeleteApiKey", ctx, publicIdOrKey)}
}

func (_c *MockTeamAPI_DeleteApiKey_Call) Run(run func(ctx context.Context, publicIdOrKey string)) *MockTeamAPI_DeleteApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamAPI_DeleteApiKey_Call) Return(apiDeleteApiKeyRequest client.ApiDeleteApiKeyRequest) *MockTeamAPI_DeleteApiKey_Call {
	_c.Call.Return(apiDeleteApiKeyRequest)
	return _c
}

func (_c *MockTeamAPI_DeleteApiKey_Call) RunAndReturn(run func(ctx context.Context, publicIdOrKey string) client.ApiDeleteApiKeyRequest) *MockTeamAPI_DeleteApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApiKeyExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) DeleteApiKeyExecute(r client.ApiDeleteApiKeyRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiKeyExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteApiKeyRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteApiKeyRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteApiKeyRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamAPI_DeleteApiKeyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiKeyExecute'
type MockTeamAPI_DeleteApiKeyExecute_Call struct {
	*mock.Call
}

// DeleteApiKeyExecute is a helper method to define mock.On call
//   - r client.ApiDeleteApiKeyRequest
func (_e *MockTeamAPI_Expecter) DeleteApiKeyExecute(r interface{}) *MockTeamAPI_DeleteApiKeyExecute_Call {
	return &MockTeamAPI_DeleteApiKeyExecute_Call{Call: _e.mock.On("DeleteApiKeyExecute", r)}
}

func (_c *MockTeamAPI_DeleteApiKeyExecute_Call) Run(run func(r client.ApiDeleteApiKeyRequest)) *MockTeamAPI_DeleteApiKeyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteApiKeyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteApiKeyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_DeleteApiKeyExecute_Call) Return(response *http.Response, err error) *MockTeamAPI_DeleteApiKeyExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTeamAPI_DeleteApiKeyExecute_Call) RunAndReturn(run func(r client.ApiDeleteApiKeyRequest) (*http.Response, error)) *MockTeamAPI_DeleteApiKeyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) DeleteTeam(ctx context.Context) client.ApiDeleteTeamRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 client.ApiDeleteTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiDeleteTeamRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteTeamRequest)
	}
	return r0
}

// MockTeamAPI_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockTeamAPI_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) DeleteTeam(ctx interface{}) *MockTeamAPI_DeleteTeam_Call {
	return &MockTeamAPI_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx)}
}

func (_c *MockTeamAPI_DeleteTeam_Call) Run(run func(ctx context.Context)) *MockTeamAPI_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_DeleteTeam_Call) Return(apiDeleteTeamRequest client.ApiDeleteTeamRequest) *MockTeamAPI_DeleteTeam_Call {
	_c.Call.Return(apiDeleteTeamRequest)
	return _c
}

func (_c *MockTeamAPI_DeleteTeam_Call) RunAndReturn(run func(ctx context.Context) client.ApiDeleteTeamRequest) *MockTeamAPI_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeamExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) DeleteTeamExecute(r client.ApiDeleteTeamRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeamExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteTeamRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteTeamRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteTeamRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTeamAPI_DeleteTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeamExecute'
type MockTeamAPI_DeleteTeamExecute_Call struct {
	*mock.Call
}

// DeleteTeamExecute is a helper method to define mock.On call
//   - r client.ApiDeleteTeamRequest
func (_e *MockTeamAPI_Expecter) DeleteTeamExecute(r interface{}) *MockTeamAPI_DeleteTeamExecute_Call {
	return &MockTeamAPI_DeleteTeamExecute_Call{Call: _e.mock.On("DeleteTeamExecute", r)}
}

func (_c *MockTeamAPI_DeleteTeamExecute_Call) Run(run func(r client.ApiDeleteTeamRequest)) *MockTeamAPI_DeleteTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteTeamRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteTeamRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_DeleteTeamExecute_Call) Return(response *http.Response, err error) *MockTeamAPI_DeleteTeamExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockTeamAPI_DeleteTeamExecute_Call) RunAndReturn(run func(r client.ApiDeleteTeamRequest) (*http.Response, error)) *MockTeamAPI_DeleteTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateApiKey provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) GenerateApiKey(ctx context.Context, uuid string) client.ApiGenerateApiKeyRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GenerateApiKey")
	}

	var r0 client.ApiGenerateApiKeyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGenerateApiKeyRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGenerateApiKeyRequest)
	}
	return r0
}

// MockTeamAPI_GenerateApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateApiKey'
type MockTeamAPI_GenerateApiKey_Call struct {
	*mock.Call
}

// GenerateApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockTeamAPI_Expecter) GenerateApiKey(ctx interface{}, uuid interface{}) *MockTeamAPI_GenerateApiKey_Call {
	return &MockTeamAPI_GenerateApiKey_Call{Call: _e.mock.On("GenerateApiKey", ctx, uuid)}
}

func (_c *MockTeamAPI_GenerateApiKey_Call) Run(run func(ctx context.Context, uuid string)) *MockTeamAPI_GenerateApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamAPI_GenerateApiKey_Call) Return(apiGenerateApiKeyRequest client.ApiGenerateApiKeyRequest) *MockTeamAPI_GenerateApiKey_Call {
	_c.Call.Return(apiGenerateApiKeyRequest)
	return _c
}

func (_c *MockTeamAPI_GenerateApiKey_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGenerateApiKeyRequest) *MockTeamAPI_GenerateApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateApiKeyExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) GenerateApiKeyExecute(r client.ApiGenerateApiKeyRequest) (*client.ApiKey, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GenerateApiKeyExecute")
	}

	var r0 *client.ApiKey
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGenerateApiKeyRequest) (*client.ApiKey, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGenerateApiKeyRequest) *client.ApiKey); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ApiKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGenerateApiKeyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGenerateApiKeyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_GenerateApiKeyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateApiKeyExecute'
type MockTeamAPI_GenerateApiKeyExecute_Call struct {
	*mock.Call
}

// GenerateApiKeyExecute is a helper method to define mock.On call
//   - r client.ApiGenerateApiKeyRequest
func (_e *MockTeamAPI_Expecter) GenerateApiKeyExecute(r interface{}) *MockTeamAPI_GenerateApiKeyExecute_Call {
	return &MockTeamAPI_GenerateApiKeyExecute_Call{Call: _e.mock.On("GenerateApiKeyExecute", r)}
}

func (_c *MockTeamAPI_GenerateApiKeyExecute_Call) Run(run func(r client.ApiGenerateApiKeyRequest)) *MockTeamAPI_GenerateApiKeyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGenerateApiKeyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGenerateApiKeyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_GenerateApiKeyExecute_Call) Return(apiKey *client.ApiKey, response *http.Response, err error) *MockTeamAPI_GenerateApiKeyExecute_Call {
	_c.Call.Return(apiKey, response, err)
	return _c
}

func (_c *MockTeamAPI_GenerateApiKeyExecute_Call) RunAndReturn(run func(r client.ApiGenerateApiKeyRequest) (*client.ApiKey, *http.Response, error)) *MockTeamAPI_GenerateApiKeyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelf provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) GetSelf(ctx context.Context) client.ApiGetSelfRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSelf")
	}

	var r0 client.ApiGetSelfRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetSelfRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetSelfRequest)
	}
	return r0
}

// MockTeamAPI_GetSelf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelf'
type MockTeamAPI_GetSelf_Call struct {
	*mock.Call
}

// GetSelf is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) GetSelf(ctx interface{}) *MockTeamAPI_GetSelf_Call {
	return &MockTeamAPI_GetSelf_Call{Call: _e.mock.On("GetSelf", ctx)}
}

func (_c *MockTeamAPI_GetSelf_Call) Run(run func(ctx context.Context)) *MockTeamAPI_GetSelf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_GetSelf_Call) Return(apiGetSelfRequest client.ApiGetSelfRequest) *MockTeamAPI_GetSelf_Call {
	_c.Call.Return(apiGetSelfRequest)
	return _c
}

func (_c *MockTeamAPI_GetSelf_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetSelfRequest) *MockTeamAPI_GetSelf_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelfExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) GetSelfExecute(r client.ApiGetSelfRequest) (*client.TeamSelfResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetSelfExecute")
	}

	var r0 *client.TeamSelfResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetSelfRequest) (*client.TeamSelfResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetSelfRequest) *client.TeamSelfResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.TeamSelfResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetSelfRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetSelfRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_GetSelfExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelfExecute'
type MockTeamAPI_GetSelfExecute_Call struct {
	*mock.Call
}

// GetSelfExecute is a helper method to define mock.On call
//   - r client.ApiGetSelfRequest
func (_e *MockTeamAPI_Expecter) GetSelfExecute(r interface{}) *MockTeamAPI_GetSelfExecute_Call {
	return &MockTeamAPI_GetSelfExecute_Call{Call: _e.mock.On("GetSelfExecute", r)}
}

func (_c *MockTeamAPI_GetSelfExecute_Call) Run(run func(r client.ApiGetSelfRequest)) *MockTeamAPI_GetSelfExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetSelfRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetSelfRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_GetSelfExecute_Call) Return(teamSelfResponse *client.TeamSelfResponse, response *http.Response, err error) *MockTeamAPI_GetSelfExecute_Call {
	_c.Call.Return(teamSelfResponse, response, err)
	return _c
}

func (_c *MockTeamAPI_GetSelfExecute_Call) RunAndReturn(run func(r client.ApiGetSelfRequest) (*client.TeamSelfResponse, *http.Response, error)) *MockTeamAPI_GetSelfExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) GetTeam(ctx context.Context, uuid string) client.ApiGetTeamRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 client.ApiGetTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetTeamRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetTeamRequest)
	}
	return r0
}

// MockTeamAPI_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockTeamAPI_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockTeamAPI_Expecter) GetTeam(ctx interface{}, uuid interface{}) *MockTeamAPI_GetTeam_Call {
	return &MockTeamAPI_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, uuid)}
}

func (_c *MockTeamAPI_GetTeam_Call) Run(run func(ctx context.Context, uuid string)) *MockTeamAPI_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamAPI_GetTeam_Call) Return(apiGetTeamRequest client.ApiGetTeamRequest) *MockTeamAPI_GetTeam_Call {
	_c.Call.Return(apiGetTeamRequest)
	return _c
}

func (_c *MockTeamAPI_GetTeam_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetTeamRequest) *MockTeamAPI_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) GetTeamExecute(r client.ApiGetTeamRequest) (*client.Team, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamExecute")
	}

	var r0 *client.Team
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTeamRequest) (*client.Team, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTeamRequest) *client.Team); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetTeamRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetTeamRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_GetTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamExecute'
type MockTeamAPI_GetTeamExecute_Call struct {
	*mock.Call
}

// GetTeamExecute is a helper method to define mock.On call
//   - r client.ApiGetTeamRequest
func (_e *MockTeamAPI_Expecter) GetTeamExecute(r interface{}) *MockTeamAPI_GetTeamExecute_Call {
	return &MockTeamAPI_GetTeamExecute_Call{Call: _e.mock.On("GetTeamExecute", r)}
}

func (_c *MockTeamAPI_GetTeamExecute_Call) Run(run func(r client.ApiGetTeamRequest)) *MockTeamAPI_GetTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetTeamRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetTeamRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_GetTeamExecute_Call) Return(team *client.Team, response *http.Response, err error) *MockTeamAPI_GetTeamExecute_Call {
	_c.Call.Return(team, response, err)
	return _c
}

func (_c *MockTeamAPI_GetTeamExecute_Call) RunAndReturn(run func(r client.ApiGetTeamRequest) (*client.Team, *http.Response, error)) *MockTeamAPI_GetTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) GetTeams(ctx context.Context) client.ApiGetTeamsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 client.ApiGetTeamsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetTeamsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetTeamsRequest)
	}
	return r0
}

// MockTeamAPI_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockTeamAPI_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) GetTeams(ctx interface{}) *MockTeamAPI_GetTeams_Call {
	return &MockTeamAPI_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockTeamAPI_GetTeams_Call) Run(run func(ctx context.Context)) *MockTeamAPI_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_GetTeams_Call) Return(apiGetTeamsRequest client.ApiGetTeamsRequest) *MockTeamAPI_GetTeams_Call {
	_c.Call.Return(apiGetTeamsRequest)
	return _c
}

func (_c *MockTeamAPI_GetTeams_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetTeamsRequest) *MockTeamAPI_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) GetTeamsExecute(r client.ApiGetTeamsRequest) ([]client.Team, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsExecute")
	}

	var r0 []client.Team
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTeamsRequest) ([]client.Team, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetTeamsRequest) []client.Team); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetTeamsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetTeamsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_GetTeamsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsExecute'
type MockTeamAPI_GetTeamsExecute_Call struct {
	*mock.Call
}

// GetTeamsExecute is a helper method to define mock.On call
//   - r client.ApiGetTeamsRequest
func (_e *MockTeamAPI_Expecter) GetTeamsExecute(r interface{}) *MockTeamAPI_GetTeamsExecute_Call {
	return &MockTeamAPI_GetTeamsExecute_Call{Call: _e.mock.On("GetTeamsExecute", r)}
}

func (_c *MockTeamAPI_GetTeamsExecute_Call) Run(run func(r client.ApiGetTeamsRequest)) *MockTeamAPI_GetTeamsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetTeamsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetTeamsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_GetTeamsExecute_Call) Return(teams []client.Team, response *http.Response, err error) *MockTeamAPI_GetTeamsExecute_Call {
	_c.Call.Return(teams, response, err)
	return _c
}

func (_c *MockTeamAPI_GetTeamsExecute_Call) RunAndReturn(run func(r client.ApiGetTeamsRequest) ([]client.Team, *http.Response, error)) *MockTeamAPI_GetTeamsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateApiKey provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) RegenerateApiKey(ctx context.Context, publicIdOrKey string) client.ApiRegenerateApiKeyRequest {
	ret := _mock.Called(ctx, publicIdOrKey)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateApiKey")
	}

	var r0 client.ApiRegenerateApiKeyRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiRegenerateApiKeyRequest); ok {
		r0 = returnFunc(ctx, publicIdOrKey)
	} else {
		r0 = ret.Get(0).(client.ApiRegenerateApiKeyRequest)
	}
	return r0
}

// MockTeamAPI_RegenerateApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateApiKey'
type MockTeamAPI_RegenerateApiKey_Call struct {
	*mock.Call
}

// RegenerateApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIdOrKey string
func (_e *MockTeamAPI_Expecter) RegenerateApiKey(ctx interface{}, publicIdOrKey interface{}) *MockTeamAPI_RegenerateApiKey_Call {
	return &MockTeamAPI_RegenerateApiKey_Call{Call: _e.mock.On("RegenerateApiKey", ctx, publicIdOrKey)}
}

func (_c *MockTeamAPI_RegenerateApiKey_Call) Run(run func(ctx context.Context, publicIdOrKey string)) *MockTeamAPI_RegenerateApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamAPI_RegenerateApiKey_Call) Return(apiRegenerateApiKeyRequest client.ApiRegenerateApiKeyRequest) *MockTeamAPI_RegenerateApiKey_Call {
	_c.Call.Return(apiRegenerateApiKeyRequest)
	return _c
}

func (_c *MockTeamAPI_RegenerateApiKey_Call) RunAndReturn(run func(ctx context.Context, publicIdOrKey string) client.ApiRegenerateApiKeyRequest) *MockTeamAPI_RegenerateApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateApiKeyExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) RegenerateApiKeyExecute(r client.ApiRegenerateApiKeyRequest) (*client.ApiKey, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateApiKeyExecute")
	}

	var r0 *client.ApiKey
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRegenerateApiKeyRequest) (*client.ApiKey, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRegenerateApiKeyRequest) *client.ApiKey); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ApiKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRegenerateApiKeyRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRegenerateApiKeyRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_RegenerateApiKeyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateApiKeyExecute'
type MockTeamAPI_RegenerateApiKeyExecute_Call struct {
	*mock.Call
}

// RegenerateApiKeyExecute is a helper method to define mock.On call
//   - r client.ApiRegenerateApiKeyRequest
func (_e *MockTeamAPI_Expecter) RegenerateApiKeyExecute(r interface{}) *MockTeamAPI_RegenerateApiKeyExecute_Call {
	return &MockTeamAPI_RegenerateApiKeyExecute_Call{Call: _e.mock.On("RegenerateApiKeyExecute", r)}
}

func (_c *MockTeamAPI_RegenerateApiKeyExecute_Call) Run(run func(r client.ApiRegenerateApiKeyRequest)) *MockTeamAPI_RegenerateApiKeyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRegenerateApiKeyRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRegenerateApiKeyRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_RegenerateApiKeyExecute_Call) Return(apiKey *client.ApiKey, response *http.Response, err error) *MockTeamAPI_RegenerateApiKeyExecute_Call {
	_c.Call.Return(apiKey, response, err)
	return _c
}

func (_c *MockTeamAPI_RegenerateApiKeyExecute_Call) RunAndReturn(run func(r client.ApiRegenerateApiKeyRequest) (*client.ApiKey, *http.Response, error)) *MockTeamAPI_RegenerateApiKeyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApiKeyComment provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) UpdateApiKeyComment(ctx context.Context, publicIdOrKey string) client.ApiUpdateApiKeyCommentRequest {
	ret := _mock.Called(ctx, publicIdOrKey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKeyComment")
	}

	var r0 client.ApiUpdateApiKeyCommentRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiUpdateApiKeyCommentRequest); ok {
		r0 = returnFunc(ctx, publicIdOrKey)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateApiKeyCommentRequest)
	}
	return r0
}

// MockTeamAPI_UpdateApiKeyComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApiKeyComment'
type MockTeamAPI_UpdateApiKeyComment_Call struct {
	*mock.Call
}

// UpdateApiKeyComment is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIdOrKey string
func (_e *MockTeamAPI_Expecter) UpdateApiKeyComment(ctx interface{}, publicIdOrKey interface{}) *MockTeamAPI_UpdateApiKeyComment_Call {
	return &MockTeamAPI_UpdateApiKeyComment_Call{Call: _e.mock.On("UpdateApiKeyComment", ctx, publicIdOrKey)}
}

func (_c *MockTeamAPI_UpdateApiKeyComment_Call) Run(run func(ctx context.Context, publicIdOrKey string)) *MockTeamAPI_UpdateApiKeyComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTeamAPI_UpdateApiKeyComment_Call) Return(apiUpdateApiKeyCommentRequest client.ApiUpdateApiKeyCommentRequest) *MockTeamAPI_UpdateApiKeyComment_Call {
	_c.Call.Return(apiUpdateApiKeyCommentRequest)
	return _c
}

func (_c *MockTeamAPI_UpdateApiKeyComment_Call) RunAndReturn(run func(ctx context.Context, publicIdOrKey string) client.ApiUpdateApiKeyCommentRequest) *MockTeamAPI_UpdateApiKeyComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApiKeyCommentExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) UpdateApiKeyCommentExecute(r client.ApiUpdateApiKeyCommentRequest) (*client.ApiKey, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKeyCommentExecute")
	}

	var r0 *client.ApiKey
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateApiKeyCommentRequest) (*client.ApiKey, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateApiKeyCommentRequest) *client.ApiKey); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ApiKey)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateApiKeyCommentRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateApiKeyCommentRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_UpdateApiKeyCommentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApiKeyCommentExecute'
type MockTeamAPI_UpdateApiKeyCommentExecute_Call struct {
	*mock.Call
}

// UpdateApiKeyCommentExecute is a helper method to define mock.On call
//   - r client.ApiUpdateApiKeyCommentRequest
func (_e *MockTeamAPI_Expecter) UpdateApiKeyCommentExecute(r interface{}) *MockTeamAPI_UpdateApiKeyCommentExecute_Call {
	return &MockTeamAPI_UpdateApiKeyCommentExecute_Call{Call: _e.mock.On("UpdateApiKeyCommentExecute", r)}
}

func (_c *MockTeamAPI_UpdateApiKeyCommentExecute_Call) Run(run func(r client.ApiUpdateApiKeyCommentRequest)) *MockTeamAPI_UpdateApiKeyCommentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateApiKeyCommentRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateApiKeyCommentRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_UpdateApiKeyCommentExecute_Call) Return(apiKey *client.ApiKey, response *http.Response, err error) *MockTeamAPI_UpdateApiKeyCommentExecute_Call {
	_c.Call.Return(apiKey, response, err)
	return _c
}

func (_c *MockTeamAPI_UpdateApiKeyCommentExecute_Call) RunAndReturn(run func(r client.ApiUpdateApiKeyCommentRequest) (*client.ApiKey, *http.Response, error)) *MockTeamAPI_UpdateApiKeyCommentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) UpdateTeam(ctx context.Context) client.ApiUpdateTeamRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 client.ApiUpdateTeamRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateTeamRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateTeamRequest)
	}
	return r0
}

// MockTeamAPI_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockTeamAPI_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) UpdateTeam(ctx interface{}) *MockTeamAPI_UpdateTeam_Call {
	return &MockTeamAPI_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam", ctx)}
}

func (_c *MockTeamAPI_UpdateTeam_Call) Run(run func(ctx context.Context)) *MockTeamAPI_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_UpdateTeam_Call) Return(apiUpdateTeamRequest client.ApiUpdateTeamRequest) *MockTeamAPI_UpdateTeam_Call {
	_c.Call.Return(apiUpdateTeamRequest)
	return _c
}

func (_c *MockTeamAPI_UpdateTeam_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateTeamRequest) *MockTeamAPI_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamExecute provides a mock function for the type MockTeamAPI
func (_mock *MockTeamAPI) UpdateTeamExecute(r client.ApiUpdateTeamRequest) (*client.Team, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamExecute")
	}

	var r0 *client.Team
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateTeamRequest) (*client.Team, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateTeamRequest) *client.Team); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Team)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateTeamRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateTeamRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockTeamAPI_UpdateTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamExecute'
type MockTeamAPI_UpdateTeamExecute_Call struct {
	*mock.Call
}

// UpdateTeamExecute is a helper method to define mock.On call
//   - r client.ApiUpdateTeamRequest
func (_e *MockTeamAPI_Expecter) UpdateTeamExecute(r interface{}) *MockTeamAPI_UpdateTeamExecute_Call {
	return &MockTeamAPI_UpdateTeamExecute_Call{Call: _e.mock.On("UpdateTeamExecute", r)}
}

func (_c *MockTeamAPI_UpdateTeamExecute_Call) Run(run func(r client.ApiUpdateTeamRequest)) *MockTeamAPI_UpdateTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateTeamRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateTeamRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTeamAPI_UpdateTeamExecute_Call) Return(team *client.Team, response *http.Response, err error) *MockTeamAPI_UpdateTeamExecute_Call {
	_c.Call.Return(team, response, err)
	return _c
}

func (_c *MockTeamAPI_UpdateTeamExecute_Call) RunAndReturn(run func(r client.ApiUpdateTeamRequest) (*client.Team, *http.Response, error)) *MockTeamAPI_UpdateTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserAPI creates a new instance of MockUserAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAPI {
	mock := &MockUserAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserAPI is an autogenerated mock type for the UserAPI type
type MockUserAPI struct {
	mock.Mock
}

type MockUserAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAPI) EXPECT() *MockUserAPI_Expecter {
	return &MockUserAPI_Expecter{mock: &_m.Mock}
}

// AddTeamToUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) AddTeamToUser(ctx context.Context, username string) client.ApiAddTeamToUserRequest {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamToUser")
	}

	var r0 client.ApiAddTeamToUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiAddTeamToUserRequest); ok {
		r0 = returnFunc(ctx, username)
	} else {
		r0 = ret.Get(0).(client.ApiAddTeamToUserRequest)
	}
	return r0
}

// MockUserAPI_AddTeamToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamToUser'
type MockUserAPI_AddTeamToUser_Call struct {
	*mock.Call
}

// AddTeamToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserAPI_Expecter) AddTeamToUser(ctx interface{}, username interface{}) *MockUserAPI_AddTeamToUser_Call {
	return &MockUserAPI_AddTeamToUser_Call{Call: _e.mock.On("AddTeamToUser", ctx, username)}
}

func (_c *MockUserAPI_AddTeamToUser_Call) Run(run func(ctx context.Context, username string)) *MockUserAPI_AddTeamToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserAPI_AddTeamToUser_Call) Return(apiAddTeamToUserRequest client.ApiAddTeamToUserRequest) *MockUserAPI_AddTeamToUser_Call {
	_c.Call.Return(apiAddTeamToUserRequest)
	return _c
}

func (_c *MockUserAPI_AddTeamToUser_Call) RunAndReturn(run func(ctx context.Context, username string) client.ApiAddTeamToUserRequest) *MockUserAPI_AddTeamToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamToUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) AddTeamToUserExecute(r client.ApiAddTeamToUserRequest) (*client.UserPrincipal, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamToUserExecute")
	}

	var r0 *client.UserPrincipal
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddTeamToUserRequest) (*client.UserPrincipal, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAddTeamToUserRequest) *client.UserPrincipal); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserPrincipal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAddTeamToUserRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiAddTeamToUserRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_AddTeamToUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamToUserExecute'
type MockUserAPI_AddTeamToUserExecute_Call struct {
	*mock.Call
}

// AddTeamToUserExecute is a helper method to define mock.On call
//   - r client.ApiAddTeamToUserRequest
func (_e *MockUserAPI_Expecter) AddTeamToUserExecute(r interface{}) *MockUserAPI_AddTeamToUserExecute_Call {
	return &MockUserAPI_AddTeamToUserExecute_Call{Call: _e.mock.On("AddTeamToUserExecute", r)}
}

func (_c *MockUserAPI_AddTeamToUserExecute_Call) Run(run func(r client.ApiAddTeamToUserRequest)) *MockUserAPI_AddTeamToUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAddTeamToUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAddTeamToUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_AddTeamToUserExecute_Call) Return(userPrincipal *client.UserPrincipal, response *http.Response, err error) *MockUserAPI_AddTeamToUserExecute_Call {
	_c.Call.Return(userPrincipal, response, err)
	return _c
}

func (_c *MockUserAPI_AddTeamToUserExecute_Call) RunAndReturn(run func(r client.ApiAddTeamToUserRequest) (*client.UserPrincipal, *http.Response, error)) *MockUserAPI_AddTeamToUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLdapUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) CreateLdapUser(ctx context.Context) client.ApiCreateLdapUserRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateLdapUser")
	}

	var r0 client.ApiCreateLdapUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateLdapUserRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateLdapUserRequest)
	}
	return r0
}

// MockUserAPI_CreateLdapUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLdapUser'
type MockUserAPI_CreateLdapUser_Call struct {
	*mock.Call
}

// CreateLdapUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) CreateLdapUser(ctx interface{}) *MockUserAPI_CreateLdapUser_Call {
	return &MockUserAPI_CreateLdapUser_Call{Call: _e.mock.On("CreateLdapUser", ctx)}
}

func (_c *MockUserAPI_CreateLdapUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_CreateLdapUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_CreateLdapUser_Call) Return(apiCreateLdapUserRequest client.ApiCreateLdapUserRequest) *MockUserAPI_CreateLdapUser_Call {
	_c.Call.Return(apiCreateLdapUserRequest)
	return _c
}

func (_c *MockUserAPI_CreateLdapUser_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateLdapUserRequest) *MockUserAPI_CreateLdapUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLdapUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) CreateLdapUserExecute(r client.ApiCreateLdapUserRequest) (*client.LdapUser, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateLdapUserExecute")
	}

	var r0 *client.LdapUser
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateLdapUserRequest) (*client.LdapUser, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateLdapUserRequest) *client.LdapUser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.LdapUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateLdapUserRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateLdapUserRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_CreateLdapUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLdapUserExecute'
type MockUserAPI_CreateLdapUserExecute_Call struct {
	*mock.Call
}

// CreateLdapUserExecute is a helper method to define mock.On call
//   - r client.ApiCreateLdapUserRequest
func (_e *MockUserAPI_Expecter) CreateLdapUserExecute(r interface{}) *MockUserAPI_CreateLdapUserExecute_Call {
	return &MockUserAPI_CreateLdapUserExecute_Call{Call: _e.mock.On("CreateLdapUserExecute", r)}
}

func (_c *MockUserAPI_CreateLdapUserExecute_Call) Run(run func(r client.ApiCreateLdapUserRequest)) *MockUserAPI_CreateLdapUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateLdapUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateLdapUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_CreateLdapUserExecute_Call) Return(ldapUser *client.LdapUser, response *http.Response, err error) *MockUserAPI_CreateLdapUserExecute_Call {
	_c.Call.Return(ldapUser, response, err)
	return _c
}

func (_c *MockUserAPI_CreateLdapUserExecute_Call) RunAndReturn(run func(r client.ApiCreateLdapUserRequest) (*client.LdapUser, *http.Response, error)) *MockUserAPI_CreateLdapUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManagedUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) CreateManagedUser(ctx context.Context) client.ApiCreateManagedUserRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateManagedUser")
	}

	var r0 client.ApiCreateManagedUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateManagedUserRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateManagedUserRequest)
	}
	return r0
}

// MockUserAPI_CreateManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManagedUser'
type MockUserAPI_CreateManagedUser_Call struct {
	*mock.Call
}

// CreateManagedUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) CreateManagedUser(ctx interface{}) *MockUserAPI_CreateManagedUser_Call {
	return &MockUserAPI_CreateManagedUser_Call{Call: _e.mock.On("CreateManagedUser", ctx)}
}

func (_c *MockUserAPI_CreateManagedUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_CreateManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_CreateManagedUser_Call) Return(apiCreateManagedUserRequest client.ApiCreateManagedUserRequest) *MockUserAPI_CreateManagedUser_Call {
	_c.Call.Return(apiCreateManagedUserRequest)
	return _c
}

func (_c *MockUserAPI_CreateManagedUser_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateManagedUserRequest) *MockUserAPI_CreateManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManagedUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) CreateManagedUserExecute(r client.ApiCreateManagedUserRequest) (*client.ManagedUser, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateManagedUserExecute")
	}

	var r0 *client.ManagedUser
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateManagedUserRequest) (*client.ManagedUser, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateManagedUserRequest) *client.ManagedUser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ManagedUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateManagedUserRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateManagedUserRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_CreateManagedUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManagedUserExecute'
type MockUserAPI_CreateManagedUserExecute_Call struct {
	*mock.Call
}

// CreateManagedUserExecute is a helper method to define mock.On call
//   - r client.ApiCreateManagedUserRequest
func (_e *MockUserAPI_Expecter) CreateManagedUserExecute(r interface{}) *MockUserAPI_CreateManagedUserExecute_Call {
	return &MockUserAPI_CreateManagedUserExecute_Call{Call: _e.mock.On("CreateManagedUserExecute", r)}
}

func (_c *MockUserAPI_CreateManagedUserExecute_Call) Run(run func(r client.ApiCreateManagedUserRequest)) *MockUserAPI_CreateManagedUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateManagedUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateManagedUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_CreateManagedUserExecute_Call) Return(managedUser *client.ManagedUser, response *http.Response, err error) *MockUserAPI_CreateManagedUserExecute_Call {
	_c.Call.Return(managedUser, response, err)
	return _c
}

func (_c *MockUserAPI_CreateManagedUserExecute_Call) RunAndReturn(run func(r client.ApiCreateManagedUserRequest) (*client.ManagedUser, *http.Response, error)) *MockUserAPI_CreateManagedUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOidcUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) CreateOidcUser(ctx context.Context) client.ApiCreateOidcUserRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateOidcUser")
	}

	var r0 client.ApiCreateOidcUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateOidcUserRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateOidcUserRequest)
	}
	return r0
}

// MockUserAPI_CreateOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOidcUser'
type MockUserAPI_CreateOidcUser_Call struct {
	*mock.Call
}

// CreateOidcUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) CreateOidcUser(ctx interface{}) *MockUserAPI_CreateOidcUser_Call {
	return &MockUserAPI_CreateOidcUser_Call{Call: _e.mock.On("CreateOidcUser", ctx)}
}

func (_c *MockUserAPI_CreateOidcUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_CreateOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_CreateOidcUser_Call) Return(apiCreateOidcUserRequest client.ApiCreateOidcUserRequest) *MockUserAPI_CreateOidcUser_Call {
	_c.Call.Return(apiCreateOidcUserRequest)
	return _c
}

func (_c *MockUserAPI_CreateOidcUser_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateOidcUserRequest) *MockUserAPI_CreateOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOidcUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) CreateOidcUserExecute(r client.ApiCreateOidcUserRequest) (*client.OidcUser, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOidcUserExecute")
	}

	var r0 *client.OidcUser
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateOidcUserRequest) (*client.OidcUser, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateOidcUserRequest) *client.OidcUser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.OidcUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateOidcUserRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateOidcUserRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_CreateOidcUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOidcUserExecute'
type MockUserAPI_CreateOidcUserExecute_Call struct {
	*mock.Call
}

// CreateOidcUserExecute is a helper method to define mock.On call
//   - r client.ApiCreateOidcUserRequest
func (_e *MockUserAPI_Expecter) CreateOidcUserExecute(r interface{}) *MockUserAPI_CreateOidcUserExecute_Call {
	return &MockUserAPI_CreateOidcUserExecute_Call{Call: _e.mock.On("CreateOidcUserExecute", r)}
}

func (_c *MockUserAPI_CreateOidcUserExecute_Call) Run(run func(r client.ApiCreateOidcUserRequest)) *MockUserAPI_CreateOidcUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateOidcUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateOidcUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_CreateOidcUserExecute_Call) Return(oidcUser *client.OidcUser, response *http.Response, err error) *MockUserAPI_CreateOidcUserExecute_Call {
	_c.Call.Return(oidcUser, response, err)
	return _c
}

func (_c *MockUserAPI_CreateOidcUserExecute_Call) RunAndReturn(run func(r client.ApiCreateOidcUserRequest) (*client.OidcUser, *http.Response, error)) *MockUserAPI_CreateOidcUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLdapUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) DeleteLdapUser(ctx context.Context) client.ApiDeleteLdapUserRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLdapUser")
	}

	var r0 client.ApiDeleteLdapUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiDeleteLdapUserRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteLdapUserRequest)
	}
	return r0
}

// MockUserAPI_DeleteLdapUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLdapUser'
type MockUserAPI_DeleteLdapUser_Call struct {
	*mock.Call
}

// DeleteLdapUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) DeleteLdapUser(ctx interface{}) *MockUserAPI_DeleteLdapUser_Call {
	return &MockUserAPI_DeleteLdapUser_Call{Call: _e.mock.On("DeleteLdapUser", ctx)}
}

func (_c *MockUserAPI_DeleteLdapUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_DeleteLdapUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_DeleteLdapUser_Call) Return(apiDeleteLdapUserRequest client.ApiDeleteLdapUserRequest) *MockUserAPI_DeleteLdapUser_Call {
	_c.Call.Return(apiDeleteLdapUserRequest)
	return _c
}

func (_c *MockUserAPI_DeleteLdapUser_Call) RunAndReturn(run func(ctx context.Context) client.ApiDeleteLdapUserRequest) *MockUserAPI_DeleteLdapUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLdapUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) DeleteLdapUserExecute(r client.ApiDeleteLdapUserRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLdapUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteLdapUserRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteLdapUserRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteLdapUserRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserAPI_DeleteLdapUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLdapUserExecute'
type MockUserAPI_DeleteLdapUserExecute_Call struct {
	*mock.Call
}

// DeleteLdapUserExecute is a helper method to define mock.On call
//   - r client.ApiDeleteLdapUserRequest
func (_e *MockUserAPI_Expecter) DeleteLdapUserExecute(r interface{}) *MockUserAPI_DeleteLdapUserExecute_Call {
	return &MockUserAPI_DeleteLdapUserExecute_Call{Call: _e.mock.On("DeleteLdapUserExecute", r)}
}

func (_c *MockUserAPI_DeleteLdapUserExecute_Call) Run(run func(r client.ApiDeleteLdapUserRequest)) *MockUserAPI_DeleteLdapUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteLdapUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteLdapUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_DeleteLdapUserExecute_Call) Return(response *http.Response, err error) *MockUserAPI_DeleteLdapUserExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockUserAPI_DeleteLdapUserExecute_Call) RunAndReturn(run func(r client.ApiDeleteLdapUserRequest) (*http.Response, error)) *MockUserAPI_DeleteLdapUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) DeleteManagedUser(ctx context.Context) client.ApiDeleteManagedUserRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedUser")
	}

	var r0 client.ApiDeleteManagedUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiDeleteManagedUserRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteManagedUserRequest)
	}
	return r0
}

// MockUserAPI_DeleteManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedUser'
type MockUserAPI_DeleteManagedUser_Call struct {
	*mock.Call
}

// DeleteManagedUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) DeleteManagedUser(ctx interface{}) *MockUserAPI_DeleteManagedUser_Call {
	return &MockUserAPI_DeleteManagedUser_Call{Call: _e.mock.On("DeleteManagedUser", ctx)}
}

func (_c *MockUserAPI_DeleteManagedUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_DeleteManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_DeleteManagedUser_Call) Return(apiDeleteManagedUserRequest client.ApiDeleteManagedUserRequest) *MockUserAPI_DeleteManagedUser_Call {
	_c.Call.Return(apiDeleteManagedUserRequest)
	return _c
}

func (_c *MockUserAPI_DeleteManagedUser_Call) RunAndReturn(run func(ctx context.Context) client.ApiDeleteManagedUserRequest) *MockUserAPI_DeleteManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) DeleteManagedUserExecute(r client.ApiDeleteManagedUserRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteManagedUserRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteManagedUserRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteManagedUserRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserAPI_DeleteManagedUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedUserExecute'
type MockUserAPI_DeleteManagedUserExecute_Call struct {
	*mock.Call
}

// DeleteManagedUserExecute is a helper method to define mock.On call
//   - r client.ApiDeleteManagedUserRequest
func (_e *MockUserAPI_Expecter) DeleteManagedUserExecute(r interface{}) *MockUserAPI_DeleteManagedUserExecute_Call {
	return &MockUserAPI_DeleteManagedUserExecute_Call{Call: _e.mock.On("DeleteManagedUserExecute", r)}
}

func (_c *MockUserAPI_DeleteManagedUserExecute_Call) Run(run func(r client.ApiDeleteManagedUserRequest)) *MockUserAPI_DeleteManagedUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteManagedUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteManagedUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_DeleteManagedUserExecute_Call) Return(response *http.Response, err error) *MockUserAPI_DeleteManagedUserExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockUserAPI_DeleteManagedUserExecute_Call) RunAndReturn(run func(r client.ApiDeleteManagedUserRequest) (*http.Response, error)) *MockUserAPI_DeleteManagedUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOidcUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) DeleteOidcUser(ctx context.Context) client.ApiDeleteOidcUserRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOidcUser")
	}

	var r0 client.ApiDeleteOidcUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiDeleteOidcUserRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteOidcUserRequest)
	}
	return r0
}

// MockUserAPI_DeleteOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOidcUser'
type MockUserAPI_DeleteOidcUser_Call struct {
	*mock.Call
}

// DeleteOidcUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) DeleteOidcUser(ctx interface{}) *MockUserAPI_DeleteOidcUser_Call {
	return &MockUserAPI_DeleteOidcUser_Call{Call: _e.mock.On("DeleteOidcUser", ctx)}
}

func (_c *MockUserAPI_DeleteOidcUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_DeleteOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_DeleteOidcUser_Call) Return(apiDeleteOidcUserRequest client.ApiDeleteOidcUserRequest) *MockUserAPI_DeleteOidcUser_Call {
	_c.Call.Return(apiDeleteOidcUserRequest)
	return _c
}

func (_c *MockUserAPI_DeleteOidcUser_Call) RunAndReturn(run func(ctx context.Context) client.ApiDeleteOidcUserRequest) *MockUserAPI_DeleteOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOidcUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) DeleteOidcUserExecute(r client.ApiDeleteOidcUserRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOidcUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteOidcUserRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteOidcUserRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteOidcUserRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserAPI_DeleteOidcUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOidcUserExecute'
type MockUserAPI_DeleteOidcUserExecute_Call struct {
	*mock.Call
}

// DeleteOidcUserExecute is a helper method to define mock.On call
//   - r client.ApiDeleteOidcUserRequest
func (_e *MockUserAPI_Expecter) DeleteOidcUserExecute(r interface{}) *MockUserAPI_DeleteOidcUserExecute_Call {
	return &MockUserAPI_DeleteOidcUserExecute_Call{Call: _e.mock.On("DeleteOidcUserExecute", r)}
}

func (_c *MockUserAPI_DeleteOidcUserExecute_Call) Run(run func(r client.ApiDeleteOidcUserRequest)) *MockUserAPI_DeleteOidcUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteOidcUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteOidcUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_DeleteOidcUserExecute_Call) Return(response *http.Response, err error) *MockUserAPI_DeleteOidcUserExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockUserAPI_DeleteOidcUserExecute_Call) RunAndReturn(run func(r client.ApiDeleteOidcUserRequest) (*http.Response, error)) *MockUserAPI_DeleteOidcUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ForceChangePassword provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) ForceChangePassword(ctx context.Context) client.ApiForceChangePasswordRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ForceChangePassword")
	}

	var r0 client.ApiForceChangePasswordRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiForceChangePasswordRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiForceChangePasswordRequest)
	}
	return r0
}

// MockUserAPI_ForceChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceChangePassword'
type MockUserAPI_ForceChangePassword_Call struct {
	*mock.Call
}

// ForceChangePassword is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) ForceChangePassword(ctx interface{}) *MockUserAPI_ForceChangePassword_Call {
	return &MockUserAPI_ForceChangePassword_Call{Call: _e.mock.On("ForceChangePassword", ctx)}
}

func (_c *MockUserAPI_ForceChangePassword_Call) Run(run func(ctx context.Context)) *MockUserAPI_ForceChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_ForceChangePassword_Call) Return(apiForceChangePasswordRequest client.ApiForceChangePasswordRequest) *MockUserAPI_ForceChangePassword_Call {
	_c.Call.Return(apiForceChangePasswordRequest)
	return _c
}

func (_c *MockUserAPI_ForceChangePassword_Call) RunAndReturn(run func(ctx context.Context) client.ApiForceChangePasswordRequest) *MockUserAPI_ForceChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// ForceChangePasswordExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) ForceChangePasswordExecute(r client.ApiForceChangePasswordRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ForceChangePasswordExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiForceChangePasswordRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiForceChangePasswordRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiForceChangePasswordRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserAPI_ForceChangePasswordExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceChangePasswordExecute'
type MockUserAPI_ForceChangePasswordExecute_Call struct {
	*mock.Call
}

// ForceChangePasswordExecute is a helper method to define mock.On call
//   - r client.ApiForceChangePasswordRequest
func (_e *MockUserAPI_Expecter) ForceChangePasswordExecute(r interface{}) *MockUserAPI_ForceChangePasswordExecute_Call {
	return &MockUserAPI_ForceChangePasswordExecute_Call{Call: _e.mock.On("ForceChangePasswordExecute", r)}
}

func (_c *MockUserAPI_ForceChangePasswordExecute_Call) Run(run func(r client.ApiForceChangePasswordRequest)) *MockUserAPI_ForceChangePasswordExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiForceChangePasswordRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiForceChangePasswordRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_ForceChangePasswordExecute_Call) Return(response *http.Response, err error) *MockUserAPI_ForceChangePasswordExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockUserAPI_ForceChangePasswordExecute_Call) RunAndReturn(run func(r client.ApiForceChangePasswordRequest) (*http.Response, error)) *MockUserAPI_ForceChangePasswordExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLdapUsers provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) GetLdapUsers(ctx context.Context) client.ApiGetLdapUsersRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLdapUsers")
	}

	var r0 client.ApiGetLdapUsersRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetLdapUsersRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetLdapUsersRequest)
	}
	return r0
}

// MockUserAPI_GetLdapUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLdapUsers'
type MockUserAPI_GetLdapUsers_Call struct {
	*mock.Call
}

// GetLdapUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetLdapUsers(ctx interface{}) *MockUserAPI_GetLdapUsers_Call {
	return &MockUserAPI_GetLdapUsers_Call{Call: _e.mock.On("GetLdapUsers", ctx)}
}

func (_c *MockUserAPI_GetLdapUsers_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetLdapUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_GetLdapUsers_Call) Return(apiGetLdapUsersRequest client.ApiGetLdapUsersRequest) *MockUserAPI_GetLdapUsers_Call {
	_c.Call.Return(apiGetLdapUsersRequest)
	return _c
}

func (_c *MockUserAPI_GetLdapUsers_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetLdapUsersRequest) *MockUserAPI_GetLdapUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetLdapUsersExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) GetLdapUsersExecute(r client.ApiGetLdapUsersRequest) ([]client.LdapUser, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLdapUsersExecute")
	}

	var r0 []client.LdapUser
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLdapUsersRequest) ([]client.LdapUser, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetLdapUsersRequest) []client.LdapUser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.LdapUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetLdapUsersRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetLdapUsersRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_GetLdapUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLdapUsersExecute'
type MockUserAPI_GetLdapUsersExecute_Call struct {
	*mock.Call
}

// GetLdapUsersExecute is a helper method to define mock.On call
//   - r client.ApiGetLdapUsersRequest
func (_e *MockUserAPI_Expecter) GetLdapUsersExecute(r interface{}) *MockUserAPI_GetLdapUsersExecute_Call {
	return &MockUserAPI_GetLdapUsersExecute_Call{Call: _e.mock.On("GetLdapUsersExecute", r)}
}

func (_c *MockUserAPI_GetLdapUsersExecute_Call) Run(run func(r client.ApiGetLdapUsersRequest)) *MockUserAPI_GetLdapUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetLdapUsersRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetLdapUsersRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_GetLdapUsersExecute_Call) Return(ldapUsers []client.LdapUser, response *http.Response, err error) *MockUserAPI_GetLdapUsersExecute_Call {
	_c.Call.Return(ldapUsers, response, err)
	return _c
}

func (_c *MockUserAPI_GetLdapUsersExecute_Call) RunAndReturn(run func(r client.ApiGetLdapUsersRequest) ([]client.LdapUser, *http.Response, error)) *MockUserAPI_GetLdapUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedUsers provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) GetManagedUsers(ctx context.Context) client.ApiGetManagedUsersRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedUsers")
	}

	var r0 client.ApiGetManagedUsersRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetManagedUsersRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetManagedUsersRequest)
	}
	return r0
}

// MockUserAPI_GetManagedUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedUsers'
type MockUserAPI_GetManagedUsers_Call struct {
	*mock.Call
}

// GetManagedUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetManagedUsers(ctx interface{}) *MockUserAPI_GetManagedUsers_Call {
	return &MockUserAPI_GetManagedUsers_Call{Call: _e.mock.On("GetManagedUsers", ctx)}
}

func (_c *MockUserAPI_GetManagedUsers_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetManagedUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_GetManagedUsers_Call) Return(apiGetManagedUsersRequest client.ApiGetManagedUsersRequest) *MockUserAPI_GetManagedUsers_Call {
	_c.Call.Return(apiGetManagedUsersRequest)
	return _c
}

func (_c *MockUserAPI_GetManagedUsers_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetManagedUsersRequest) *MockUserAPI_GetManagedUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedUsersExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) GetManagedUsersExecute(r client.ApiGetManagedUsersRequest) ([]client.ManagedUser, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedUsersExecute")
	}

	var r0 []client.ManagedUser
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetManagedUsersRequest) ([]client.ManagedUser, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetManagedUsersRequest) []client.ManagedUser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.ManagedUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetManagedUsersRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetManagedUsersRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_GetManagedUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedUsersExecute'
type MockUserAPI_GetManagedUsersExecute_Call struct {
	*mock.Call
}

// GetManagedUsersExecute is a helper method to define mock.On call
//   - r client.ApiGetManagedUsersRequest
func (_e *MockUserAPI_Expecter) GetManagedUsersExecute(r interface{}) *MockUserAPI_GetManagedUsersExecute_Call {
	return &MockUserAPI_GetManagedUsersExecute_Call{Call: _e.mock.On("GetManagedUsersExecute", r)}
}

func (_c *MockUserAPI_GetManagedUsersExecute_Call) Run(run func(r client.ApiGetManagedUsersRequest)) *MockUserAPI_GetManagedUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetManagedUsersRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetManagedUsersRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_GetManagedUsersExecute_Call) Return(managedUsers []client.ManagedUser, response *http.Response, err error) *MockUserAPI_GetManagedUsersExecute_Call {
	_c.Call.Return(managedUsers, response, err)
	return _c
}

func (_c *MockUserAPI_GetManagedUsersExecute_Call) RunAndReturn(run func(r client.ApiGetManagedUsersRequest) ([]client.ManagedUser, *http.Response, error)) *MockUserAPI_GetManagedUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUsers provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) GetOidcUsers(ctx context.Context) client.ApiGetOidcUsersRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUsers")
	}

	var r0 client.ApiGetOidcUsersRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetOidcUsersRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetOidcUsersRequest)
	}
	return r0
}

// MockUserAPI_GetOidcUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUsers'
type MockUserAPI_GetOidcUsers_Call struct {
	*mock.Call
}

// GetOidcUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetOidcUsers(ctx interface{}) *MockUserAPI_GetOidcUsers_Call {
	return &MockUserAPI_GetOidcUsers_Call{Call: _e.mock.On("GetOidcUsers", ctx)}
}

func (_c *MockUserAPI_GetOidcUsers_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetOidcUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_GetOidcUsers_Call) Return(apiGetOidcUsersRequest client.ApiGetOidcUsersRequest) *MockUserAPI_GetOidcUsers_Call {
	_c.Call.Return(apiGetOidcUsersRequest)
	return _c
}

func (_c *MockUserAPI_GetOidcUsers_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetOidcUsersRequest) *MockUserAPI_GetOidcUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUsersExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) GetOidcUsersExecute(r client.ApiGetOidcUsersRequest) ([]client.OidcUser, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUsersExecute")
	}

	var r0 []client.OidcUser
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetOidcUsersRequest) ([]client.OidcUser, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetOidcUsersRequest) []client.OidcUser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.OidcUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetOidcUsersRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetOidcUsersRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_GetOidcUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUsersExecute'
type MockUserAPI_GetOidcUsersExecute_Call struct {
	*mock.Call
}

// GetOidcUsersExecute is a helper method to define mock.On call
//   - r client.ApiGetOidcUsersRequest
func (_e *MockUserAPI_Expecter) GetOidcUsersExecute(r interface{}) *MockUserAPI_GetOidcUsersExecute_Call {
	return &MockUserAPI_GetOidcUsersExecute_Call{Call: _e.mock.On("GetOidcUsersExecute", r)}
}

func (_c *MockUserAPI_GetOidcUsersExecute_Call) Run(run func(r client.ApiGetOidcUsersRequest)) *MockUserAPI_GetOidcUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetOidcUsersRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetOidcUsersRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_GetOidcUsersExecute_Call) Return(oidcUsers []client.OidcUser, response *http.Response, err error) *MockUserAPI_GetOidcUsersExecute_Call {
	_c.Call.Return(oidcUsers, response, err)
	return _c
}

func (_c *MockUserAPI_GetOidcUsersExecute_Call) RunAndReturn(run func(r client.ApiGetOidcUsersRequest) ([]client.OidcUser, *http.Response, error)) *MockUserAPI_GetOidcUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelf1 provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) GetSelf1(ctx context.Context) client.ApiGetSelf1Request {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSelf1")
	}

	var r0 client.ApiGetSelf1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetSelf1Request); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetSelf1Request)
	}
	return r0
}

// MockUserAPI_GetSelf1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelf1'
type MockUserAPI_GetSelf1_Call struct {
	*mock.Call
}

// GetSelf1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetSelf1(ctx interface{}) *MockUserAPI_GetSelf1_Call {
	return &MockUserAPI_GetSelf1_Call{Call: _e.mock.On("GetSelf1", ctx)}
}

func (_c *MockUserAPI_GetSelf1_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetSelf1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_GetSelf1_Call) Return(apiGetSelf1Request client.ApiGetSelf1Request) *MockUserAPI_GetSelf1_Call {
	_c.Call.Return(apiGetSelf1Request)
	return _c
}

func (_c *MockUserAPI_GetSelf1_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetSelf1Request) *MockUserAPI_GetSelf1_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelf1Execute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) GetSelf1Execute(r client.ApiGetSelf1Request) (*client.UserPrincipal, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetSelf1Execute")
	}

	var r0 *client.UserPrincipal
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetSelf1Request) (*client.UserPrincipal, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetSelf1Request) *client.UserPrincipal); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserPrincipal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetSelf1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetSelf1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_GetSelf1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelf1Execute'
type MockUserAPI_GetSelf1Execute_Call struct {
	*mock.Call
}

// GetSelf1Execute is a helper method to define mock.On call
//   - r client.ApiGetSelf1Request
func (_e *MockUserAPI_Expecter) GetSelf1Execute(r interface{}) *MockUserAPI_GetSelf1Execute_Call {
	return &MockUserAPI_GetSelf1Execute_Call{Call: _e.mock.On("GetSelf1Execute", r)}
}

func (_c *MockUserAPI_GetSelf1Execute_Call) Run(run func(r client.ApiGetSelf1Request)) *MockUserAPI_GetSelf1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetSelf1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetSelf1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_GetSelf1Execute_Call) Return(userPrincipal *client.UserPrincipal, response *http.Response, err error) *MockUserAPI_GetSelf1Execute_Call {
	_c.Call.Return(userPrincipal, response, err)
	return _c
}

func (_c *MockUserAPI_GetSelf1Execute_Call) RunAndReturn(run func(r client.ApiGetSelf1Request) (*client.UserPrincipal, *http.Response, error)) *MockUserAPI_GetSelf1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamFromUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) RemoveTeamFromUser(ctx context.Context, username string) client.ApiRemoveTeamFromUserRequest {
	ret := _mock.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamFromUser")
	}

	var r0 client.ApiRemoveTeamFromUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiRemoveTeamFromUserRequest); ok {
		r0 = returnFunc(ctx, username)
	} else {
		r0 = ret.Get(0).(client.ApiRemoveTeamFromUserRequest)
	}
	return r0
}

// MockUserAPI_RemoveTeamFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamFromUser'
type MockUserAPI_RemoveTeamFromUser_Call struct {
	*mock.Call
}

// RemoveTeamFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserAPI_Expecter) RemoveTeamFromUser(ctx interface{}, username interface{}) *MockUserAPI_RemoveTeamFromUser_Call {
	return &MockUserAPI_RemoveTeamFromUser_Call{Call: _e.mock.On("RemoveTeamFromUser", ctx, username)}
}

func (_c *MockUserAPI_RemoveTeamFromUser_Call) Run(run func(ctx context.Context, username string)) *MockUserAPI_RemoveTeamFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserAPI_RemoveTeamFromUser_Call) Return(apiRemoveTeamFromUserRequest client.ApiRemoveTeamFromUserRequest) *MockUserAPI_RemoveTeamFromUser_Call {
	_c.Call.Return(apiRemoveTeamFromUserRequest)
	return _c
}

func (_c *MockUserAPI_RemoveTeamFromUser_Call) RunAndReturn(run func(ctx context.Context, username string) client.ApiRemoveTeamFromUserRequest) *MockUserAPI_RemoveTeamFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamFromUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) RemoveTeamFromUserExecute(r client.ApiRemoveTeamFromUserRequest) (*client.UserPrincipal, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamFromUserExecute")
	}

	var r0 *client.UserPrincipal
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveTeamFromUserRequest) (*client.UserPrincipal, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRemoveTeamFromUserRequest) *client.UserPrincipal); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.UserPrincipal)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRemoveTeamFromUserRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRemoveTeamFromUserRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_RemoveTeamFromUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamFromUserExecute'
type MockUserAPI_RemoveTeamFromUserExecute_Call struct {
	*mock.Call
}

// RemoveTeamFromUserExecute is a helper method to define mock.On call
//   - r client.ApiRemoveTeamFromUserRequest
func (_e *MockUserAPI_Expecter) RemoveTeamFromUserExecute(r interface{}) *MockUserAPI_RemoveTeamFromUserExecute_Call {
	return &MockUserAPI_RemoveTeamFromUserExecute_Call{Call: _e.mock.On("RemoveTeamFromUserExecute", r)}
}

func (_c *MockUserAPI_RemoveTeamFromUserExecute_Call) Run(run func(r client.ApiRemoveTeamFromUserRequest)) *MockUserAPI_RemoveTeamFromUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRemoveTeamFromUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiRemoveTeamFromUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_RemoveTeamFromUserExecute_Call) Return(userPrincipal *client.UserPrincipal, response *http.Response, err error) *MockUserAPI_RemoveTeamFromUserExecute_Call {
	_c.Call.Return(userPrincipal, response, err)
	return _c
}

func (_c *MockUserAPI_RemoveTeamFromUserExecute_Call) RunAndReturn(run func(r client.ApiRemoveTeamFromUserRequest) (*client.UserPrincipal, *http.Response, error)) *MockUserAPI_RemoveTeamFromUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManagedUser provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) UpdateManagedUser(ctx context.Context) client.ApiUpdateManagedUserRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManagedUser")
	}

	var r0 client.ApiUpdateManagedUserRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateManagedUserRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateManagedUserRequest)
	}
	return r0
}

// MockUserAPI_UpdateManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManagedUser'
type MockUserAPI_UpdateManagedUser_Call struct {
	*mock.Call
}

// UpdateManagedUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) UpdateManagedUser(ctx interface{}) *MockUserAPI_UpdateManagedUser_Call {
	return &MockUserAPI_UpdateManagedUser_Call{Call: _e.mock.On("UpdateManagedUser", ctx)}
}

func (_c *MockUserAPI_UpdateManagedUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_UpdateManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_UpdateManagedUser_Call) Return(apiUpdateManagedUserRequest client.ApiUpdateManagedUserRequest) *MockUserAPI_UpdateManagedUser_Call {
	_c.Call.Return(apiUpdateManagedUserRequest)
	return _c
}

func (_c *MockUserAPI_UpdateManagedUser_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateManagedUserRequest) *MockUserAPI_UpdateManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManagedUserExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) UpdateManagedUserExecute(r client.ApiUpdateManagedUserRequest) (*client.ManagedUser, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManagedUserExecute")
	}

	var r0 *client.ManagedUser
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateManagedUserRequest) (*client.ManagedUser, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateManagedUserRequest) *client.ManagedUser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ManagedUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateManagedUserRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateManagedUserRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_UpdateManagedUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManagedUserExecute'
type MockUserAPI_UpdateManagedUserExecute_Call struct {
	*mock.Call
}

// UpdateManagedUserExecute is a helper method to define mock.On call
//   - r client.ApiUpdateManagedUserRequest
func (_e *MockUserAPI_Expecter) UpdateManagedUserExecute(r interface{}) *MockUserAPI_UpdateManagedUserExecute_Call {
	return &MockUserAPI_UpdateManagedUserExecute_Call{Call: _e.mock.On("UpdateManagedUserExecute", r)}
}

func (_c *MockUserAPI_UpdateManagedUserExecute_Call) Run(run func(r client.ApiUpdateManagedUserRequest)) *MockUserAPI_UpdateManagedUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateManagedUserRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateManagedUserRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_UpdateManagedUserExecute_Call) Return(managedUser *client.ManagedUser, response *http.Response, err error) *MockUserAPI_UpdateManagedUserExecute_Call {
	_c.Call.Return(managedUser, response, err)
	return _c
}

func (_c *MockUserAPI_UpdateManagedUserExecute_Call) RunAndReturn(run func(r client.ApiUpdateManagedUserRequest) (*client.ManagedUser, *http.Response, error)) *MockUserAPI_UpdateManagedUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSelf provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) UpdateSelf(ctx context.Context) client.ApiUpdateSelfRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSelf")
	}

	var r0 client.ApiUpdateSelfRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateSelfRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateSelfRequest)
	}
	return r0
}

// MockUserAPI_UpdateSelf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSelf'
type MockUserAPI_UpdateSelf_Call struct {
	*mock.Call
}

// UpdateSelf is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) UpdateSelf(ctx interface{}) *MockUserAPI_UpdateSelf_Call {
	return &MockUserAPI_UpdateSelf_Call{Call: _e.mock.On("UpdateSelf", ctx)}
}

func (_c *MockUserAPI_UpdateSelf_Call) Run(run func(ctx context.Context)) *MockUserAPI_UpdateSelf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_UpdateSelf_Call) Return(apiUpdateSelfRequest client.ApiUpdateSelfRequest) *MockUserAPI_UpdateSelf_Call {
	_c.Call.Return(apiUpdateSelfRequest)
	return _c
}

func (_c *MockUserAPI_UpdateSelf_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateSelfRequest) *MockUserAPI_UpdateSelf_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSelfExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) UpdateSelfExecute(r client.ApiUpdateSelfRequest) (*client.ManagedUser, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSelfExecute")
	}

	var r0 *client.ManagedUser
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateSelfRequest) (*client.ManagedUser, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateSelfRequest) *client.ManagedUser); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ManagedUser)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateSelfRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateSelfRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_UpdateSelfExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSelfExecute'
type MockUserAPI_UpdateSelfExecute_Call struct {
	*mock.Call
}

// UpdateSelfExecute is a helper method to define mock.On call
//   - r client.ApiUpdateSelfRequest
func (_e *MockUserAPI_Expecter) UpdateSelfExecute(r interface{}) *MockUserAPI_UpdateSelfExecute_Call {
	return &MockUserAPI_UpdateSelfExecute_Call{Call: _e.mock.On("UpdateSelfExecute", r)}
}

func (_c *MockUserAPI_UpdateSelfExecute_Call) Run(run func(r client.ApiUpdateSelfRequest)) *MockUserAPI_UpdateSelfExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateSelfRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateSelfRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_UpdateSelfExecute_Call) Return(managedUser *client.ManagedUser, response *http.Response, err error) *MockUserAPI_UpdateSelfExecute_Call {
	_c.Call.Return(managedUser, response, err)
	return _c
}

func (_c *MockUserAPI_UpdateSelfExecute_Call) RunAndReturn(run func(r client.ApiUpdateSelfRequest) (*client.ManagedUser, *http.Response, error)) *MockUserAPI_UpdateSelfExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateCredentials provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) ValidateCredentials(ctx context.Context) client.ApiValidateCredentialsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCredentials")
	}

	var r0 client.ApiValidateCredentialsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiValidateCredentialsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiValidateCredentialsRequest)
	}
	return r0
}

// MockUserAPI_ValidateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCredentials'
type MockUserAPI_ValidateCredentials_Call struct {
	*mock.Call
}

// ValidateCredentials is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) ValidateCredentials(ctx interface{}) *MockUserAPI_ValidateCredentials_Call {
	return &MockUserAPI_ValidateCredentials_Call{Call: _e.mock.On("ValidateCredentials", ctx)}
}

func (_c *MockUserAPI_ValidateCredentials_Call) Run(run func(ctx context.Context)) *MockUserAPI_ValidateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_ValidateCredentials_Call) Return(apiValidateCredentialsRequest client.ApiValidateCredentialsRequest) *MockUserAPI_ValidateCredentials_Call {
	_c.Call.Return(apiValidateCredentialsRequest)
	return _c
}

func (_c *MockUserAPI_ValidateCredentials_Call) RunAndReturn(run func(ctx context.Context) client.ApiValidateCredentialsRequest) *MockUserAPI_ValidateCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateCredentialsExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) ValidateCredentialsExecute(r client.ApiValidateCredentialsRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCredentialsExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiValidateCredentialsRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiValidateCredentialsRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiValidateCredentialsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiValidateCredentialsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_ValidateCredentialsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCredentialsExecute'
type MockUserAPI_ValidateCredentialsExecute_Call struct {
	*mock.Call
}

// ValidateCredentialsExecute is a helper method to define mock.On call
//   - r client.ApiValidateCredentialsRequest
func (_e *MockUserAPI_Expecter) ValidateCredentialsExecute(r interface{}) *MockUserAPI_ValidateCredentialsExecute_Call {
	return &MockUserAPI_ValidateCredentialsExecute_Call{Call: _e.mock.On("ValidateCredentialsExecute", r)}
}

func (_c *MockUserAPI_ValidateCredentialsExecute_Call) Run(run func(r client.ApiValidateCredentialsRequest)) *MockUserAPI_ValidateCredentialsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiValidateCredentialsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiValidateCredentialsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_ValidateCredentialsExecute_Call) Return(s string, response *http.Response, err error) *MockUserAPI_ValidateCredentialsExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockUserAPI_ValidateCredentialsExecute_Call) RunAndReturn(run func(r client.ApiValidateCredentialsRequest) (string, *http.Response, error)) *MockUserAPI_ValidateCredentialsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateOidcAccessToken provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) ValidateOidcAccessToken(ctx context.Context) client.ApiValidateOidcAccessTokenRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ValidateOidcAccessToken")
	}

	var r0 client.ApiValidateOidcAccessTokenRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiValidateOidcAccessTokenRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiValidateOidcAccessTokenRequest)
	}
	return r0
}

// MockUserAPI_ValidateOidcAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateOidcAccessToken'
type MockUserAPI_ValidateOidcAccessToken_Call struct {
	*mock.Call
}

// ValidateOidcAccessToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) ValidateOidcAccessToken(ctx interface{}) *MockUserAPI_ValidateOidcAccessToken_Call {
	return &MockUserAPI_ValidateOidcAccessToken_Call{Call: _e.mock.On("ValidateOidcAccessToken", ctx)}
}

func (_c *MockUserAPI_ValidateOidcAccessToken_Call) Run(run func(ctx context.Context)) *MockUserAPI_ValidateOidcAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_ValidateOidcAccessToken_Call) Return(apiValidateOidcAccessTokenRequest client.ApiValidateOidcAccessTokenRequest) *MockUserAPI_ValidateOidcAccessToken_Call {
	_c.Call.Return(apiValidateOidcAccessTokenRequest)
	return _c
}

func (_c *MockUserAPI_ValidateOidcAccessToken_Call) RunAndReturn(run func(ctx context.Context) client.ApiValidateOidcAccessTokenRequest) *MockUserAPI_ValidateOidcAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateOidcAccessTokenExecute provides a mock function for the type MockUserAPI
func (_mock *MockUserAPI) ValidateOidcAccessTokenExecute(r client.ApiValidateOidcAccessTokenRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ValidateOidcAccessTokenExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiValidateOidcAccessTokenRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiValidateOidcAccessTokenRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiValidateOidcAccessTokenRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiValidateOidcAccessTokenRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUserAPI_ValidateOidcAccessTokenExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateOidcAccessTokenExecute'
type MockUserAPI_ValidateOidcAccessTokenExecute_Call struct {
	*mock.Call
}

// ValidateOidcAccessTokenExecute is a helper method to define mock.On call
//   - r client.ApiValidateOidcAccessTokenRequest
func (_e *MockUserAPI_Expecter) ValidateOidcAccessTokenExecute(r interface{}) *MockUserAPI_ValidateOidcAccessTokenExecute_Call {
	return &MockUserAPI_ValidateOidcAccessTokenExecute_Call{Call: _e.mock.On("ValidateOidcAccessTokenExecute", r)}
}

func (_c *MockUserAPI_ValidateOidcAccessTokenExecute_Call) Run(run func(r client.ApiValidateOidcAccessTokenRequest)) *MockUserAPI_ValidateOidcAccessTokenExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiValidateOidcAccessTokenRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiValidateOidcAccessTokenRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserAPI_ValidateOidcAccessTokenExecute_Call) Return(s string, response *http.Response, err error) *MockUserAPI_ValidateOidcAccessTokenExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockUserAPI_ValidateOidcAccessTokenExecute_Call) RunAndReturn(run func(r client.ApiValidateOidcAccessTokenRequest) (string, *http.Response, error)) *MockUserAPI_ValidateOidcAccessTokenExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVersionAPI creates a new instance of MockVersionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersionAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersionAPI {
	mock := &MockVersionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVersionAPI is an autogenerated mock type for the VersionAPI type
type MockVersionAPI struct {
	mock.Mock
}

type MockVersionAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersionAPI) EXPECT() *MockVersionAPI_Expecter {
	return &MockVersionAPI_Expecter{mock: &_m.Mock}
}

// GetVersion provides a mock function for the type MockVersionAPI
func (_mock *MockVersionAPI) GetVersion(ctx context.Context) client.ApiGetVersionRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 client.ApiGetVersionRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetVersionRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetVersionRequest)
	}
	return r0
}

// MockVersionAPI_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockVersionAPI_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVersionAPI_Expecter) GetVersion(ctx interface{}) *MockVersionAPI_GetVersion_Call {
	return &MockVersionAPI_GetVersion_Call{Call: _e.mock.On("GetVersion", ctx)}
}

func (_c *MockVersionAPI_GetVersion_Call) Run(run func(ctx context.Context)) *MockVersionAPI_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVersionAPI_GetVersion_Call) Return(apiGetVersionRequest client.ApiGetVersionRequest) *MockVersionAPI_GetVersion_Call {
	_c.Call.Return(apiGetVersionRequest)
	return _c
}

func (_c *MockVersionAPI_GetVersion_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetVersionRequest) *MockVersionAPI_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionExecute provides a mock function for the type MockVersionAPI
func (_mock *MockVersionAPI) GetVersionExecute(r client.ApiGetVersionRequest) (*client.About, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVersionExecute")
	}

	var r0 *client.About
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVersionRequest) (*client.About, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVersionRequest) *client.About); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.About)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetVersionRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetVersionRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVersionAPI_GetVersionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionExecute'
type MockVersionAPI_GetVersionExecute_Call struct {
	*mock.Call
}

// GetVersionExecute is a helper method to define mock.On call
//   - r client.ApiGetVersionRequest
func (_e *MockVersionAPI_Expecter) GetVersionExecute(r interface{}) *MockVersionAPI_GetVersionExecute_Call {
	return &MockVersionAPI_GetVersionExecute_Call{Call: _e.mock.On("GetVersionExecute", r)}
}

func (_c *MockVersionAPI_GetVersionExecute_Call) Run(run func(r client.ApiGetVersionRequest)) *MockVersionAPI_GetVersionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetVersionRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetVersionRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVersionAPI_GetVersionExecute_Call) Return(about *client.About, response *http.Response, err error) *MockVersionAPI_GetVersionExecute_Call {
	_c.Call.Return(about, response, err)
	return _c
}

func (_c *MockVersionAPI_GetVersionExecute_Call) RunAndReturn(run func(r client.ApiGetVersionRequest) (*client.About, *http.Response, error)) *MockVersionAPI_GetVersionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVexAPI creates a new instance of MockVexAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVexAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVexAPI {
	mock := &MockVexAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVexAPI is an autogenerated mock type for the VexAPI type
type MockVexAPI struct {
	mock.Mock
}

type MockVexAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVexAPI) EXPECT() *MockVexAPI_Expecter {
	return &MockVexAPI_Expecter{mock: &_m.Mock}
}

// ExportProjectAsCycloneDx1 provides a mock function for the type MockVexAPI
func (_mock *MockVexAPI) ExportProjectAsCycloneDx1(ctx context.Context, uuid string) client.ApiExportProjectAsCycloneDx1Request {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ExportProjectAsCycloneDx1")
	}

	var r0 client.ApiExportProjectAsCycloneDx1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiExportProjectAsCycloneDx1Request); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiExportProjectAsCycloneDx1Request)
	}
	return r0
}

// MockVexAPI_ExportProjectAsCycloneDx1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportProjectAsCycloneDx1'
type MockVexAPI_ExportProjectAsCycloneDx1_Call struct {
	*mock.Call
}

// ExportProjectAsCycloneDx1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVexAPI_Expecter) ExportProjectAsCycloneDx1(ctx interface{}, uuid interface{}) *MockVexAPI_ExportProjectAsCycloneDx1_Call {
	return &MockVexAPI_ExportProjectAsCycloneDx1_Call{Call: _e.mock.On("ExportProjectAsCycloneDx1", ctx, uuid)}
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1_Call) Run(run func(ctx context.Context, uuid string)) *MockVexAPI_ExportProjectAsCycloneDx1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1_Call) Return(apiExportProjectAsCycloneDx1Request client.ApiExportProjectAsCycloneDx1Request) *MockVexAPI_ExportProjectAsCycloneDx1_Call {
	_c.Call.Return(apiExportProjectAsCycloneDx1Request)
	return _c
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiExportProjectAsCycloneDx1Request) *MockVexAPI_ExportProjectAsCycloneDx1_Call {
	_c.Call.Return(run)
	return _c
}

// ExportProjectAsCycloneDx1Execute provides a mock function for the type MockVexAPI
func (_mock *MockVexAPI) ExportProjectAsCycloneDx1Execute(r client.ApiExportProjectAsCycloneDx1Request) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ExportProjectAsCycloneDx1Execute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiExportProjectAsCycloneDx1Request) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiExportProjectAsCycloneDx1Request) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiExportProjectAsCycloneDx1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiExportProjectAsCycloneDx1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVexAPI_ExportProjectAsCycloneDx1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportProjectAsCycloneDx1Execute'
type MockVexAPI_ExportProjectAsCycloneDx1Execute_Call struct {
	*mock.Call
}

// ExportProjectAsCycloneDx1Execute is a helper method to define mock.On call
//   - r client.ApiExportProjectAsCycloneDx1Request
func (_e *MockVexAPI_Expecter) ExportProjectAsCycloneDx1Execute(r interface{}) *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call {
	return &MockVexAPI_ExportProjectAsCycloneDx1Execute_Call{Call: _e.mock.On("ExportProjectAsCycloneDx1Execute", r)}
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call) Run(run func(r client.ApiExportProjectAsCycloneDx1Request)) *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiExportProjectAsCycloneDx1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiExportProjectAsCycloneDx1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call) Return(s string, response *http.Response, err error) *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call) RunAndReturn(run func(r client.ApiExportProjectAsCycloneDx1Request) (string, *http.Response, error)) *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVex provides a mock function for the type MockVexAPI
func (_mock *MockVexAPI) UploadVex(ctx context.Context) client.ApiUploadVexRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UploadVex")
	}

	var r0 client.ApiUploadVexRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUploadVexRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUploadVexRequest)
	}
	return r0
}

// MockVexAPI_UploadVex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVex'
type MockVexAPI_UploadVex_Call struct {
	*mock.Call
}

// UploadVex is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVexAPI_Expecter) UploadVex(ctx interface{}) *MockVexAPI_UploadVex_Call {
	return &MockVexAPI_UploadVex_Call{Call: _e.mock.On("UploadVex", ctx)}
}

func (_c *MockVexAPI_UploadVex_Call) Run(run func(ctx context.Context)) *MockVexAPI_UploadVex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVexAPI_UploadVex_Call) Return(apiUploadVexRequest client.ApiUploadVexRequest) *MockVexAPI_UploadVex_Call {
	_c.Call.Return(apiUploadVexRequest)
	return _c
}

func (_c *MockVexAPI_UploadVex_Call) RunAndReturn(run func(ctx context.Context) client.ApiUploadVexRequest) *MockVexAPI_UploadVex_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVex1 provides a mock function for the type MockVexAPI
func (_mock *MockVexAPI) UploadVex1(ctx context.Context) client.ApiUploadVex1Request {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UploadVex1")
	}

	var r0 client.ApiUploadVex1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUploadVex1Request); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUploadVex1Request)
	}
	return r0
}

// MockVexAPI_UploadVex1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVex1'
type MockVexAPI_UploadVex1_Call struct {
	*mock.Call
}

// UploadVex1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVexAPI_Expecter) UploadVex1(ctx interface{}) *MockVexAPI_UploadVex1_Call {
	return &MockVexAPI_UploadVex1_Call{Call: _e.mock.On("UploadVex1", ctx)}
}

func (_c *MockVexAPI_UploadVex1_Call) Run(run func(ctx context.Context)) *MockVexAPI_UploadVex1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVexAPI_UploadVex1_Call) Return(apiUploadVex1Request client.ApiUploadVex1Request) *MockVexAPI_UploadVex1_Call {
	_c.Call.Return(apiUploadVex1Request)
	return _c
}

func (_c *MockVexAPI_UploadVex1_Call) RunAndReturn(run func(ctx context.Context) client.ApiUploadVex1Request) *MockVexAPI_UploadVex1_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVex1Execute provides a mock function for the type MockVexAPI
func (_mock *MockVexAPI) UploadVex1Execute(r client.ApiUploadVex1Request) (*client.BomUploadResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UploadVex1Execute")
	}

	var r0 *client.BomUploadResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUploadVex1Request) (*client.BomUploadResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUploadVex1Request) *client.BomUploadResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BomUploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUploadVex1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUploadVex1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVexAPI_UploadVex1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVex1Execute'
type MockVexAPI_UploadVex1Execute_Call struct {
	*mock.Call
}

// UploadVex1Execute is a helper method to define mock.On call
//   - r client.ApiUploadVex1Request
func (_e *MockVexAPI_Expecter) UploadVex1Execute(r interface{}) *MockVexAPI_UploadVex1Execute_Call {
	return &MockVexAPI_UploadVex1Execute_Call{Call: _e.mock.On("UploadVex1Execute", r)}
}

func (_c *MockVexAPI_UploadVex1Execute_Call) Run(run func(r client.ApiUploadVex1Request)) *MockVexAPI_UploadVex1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUploadVex1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiUploadVex1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVexAPI_UploadVex1Execute_Call) Return(bomUploadResponse *client.BomUploadResponse, response *http.Response, err error) *MockVexAPI_UploadVex1Execute_Call {
	_c.Call.Return(bomUploadResponse, response, err)
	return _c
}

func (_c *MockVexAPI_UploadVex1Execute_Call) RunAndReturn(run func(r client.ApiUploadVex1Request) (*client.BomUploadResponse, *http.Response, error)) *MockVexAPI_UploadVex1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVexExecute provides a mock function for the type MockVexAPI
func (_mock *MockVexAPI) UploadVexExecute(r client.ApiUploadVexRequest) (*client.BomUploadResponse, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UploadVexExecute")
	}

	var r0 *client.BomUploadResponse
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUploadVexRequest) (*client.BomUploadResponse, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUploadVexRequest) *client.BomUploadResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BomUploadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUploadVexRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUploadVexRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVexAPI_UploadVexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVexExecute'
type MockVexAPI_UploadVexExecute_Call struct {
	*mock.Call
}

// UploadVexExecute is a helper method to define mock.On call
//   - r client.ApiUploadVexRequest
func (_e *MockVexAPI_Expecter) UploadVexExecute(r interface{}) *MockVexAPI_UploadVexExecute_Call {
	return &MockVexAPI_UploadVexExecute_Call{Call: _e.mock.On("UploadVexExecute", r)}
}

func (_c *MockVexAPI_UploadVexExecute_Call) Run(run func(r client.ApiUploadVexRequest)) *MockVexAPI_UploadVexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUploadVexRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUploadVexRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVexAPI_UploadVexExecute_Call) Return(bomUploadResponse *client.BomUploadResponse, response *http.Response, err error) *MockVexAPI_UploadVexExecute_Call {
	_c.Call.Return(bomUploadResponse, response, err)
	return _c
}

func (_c *MockVexAPI_UploadVexExecute_Call) RunAndReturn(run func(r client.ApiUploadVexRequest) (*client.BomUploadResponse, *http.Response, error)) *MockVexAPI_UploadVexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockViolationAPI creates a new instance of MockViolationAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockViolationAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockViolationAPI {
	mock := &MockViolationAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockViolationAPI is an autogenerated mock type for the ViolationAPI type
type MockViolationAPI struct {
	mock.Mock
}

type MockViolationAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockViolationAPI) EXPECT() *MockViolationAPI_Expecter {
	return &MockViolationAPI_Expecter{mock: &_m.Mock}
}

// GetViolations provides a mock function for the type MockViolationAPI
func (_mock *MockViolationAPI) GetViolations(ctx context.Context) client.ApiGetViolationsRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetViolations")
	}

	var r0 client.ApiGetViolationsRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetViolationsRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetViolationsRequest)
	}
	return r0
}

// MockViolationAPI_GetViolations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViolations'
type MockViolationAPI_GetViolations_Call struct {
	*mock.Call
}

// GetViolations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockViolationAPI_Expecter) GetViolations(ctx interface{}) *MockViolationAPI_GetViolations_Call {
	return &MockViolationAPI_GetViolations_Call{Call: _e.mock.On("GetViolations", ctx)}
}

func (_c *MockViolationAPI_GetViolations_Call) Run(run func(ctx context.Context)) *MockViolationAPI_GetViolations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockViolationAPI_GetViolations_Call) Return(apiGetViolationsRequest client.ApiGetViolationsRequest) *MockViolationAPI_GetViolations_Call {
	_c.Call.Return(apiGetViolationsRequest)
	return _c
}

func (_c *MockViolationAPI_GetViolations_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetViolationsRequest) *MockViolationAPI_GetViolations_Call {
	_c.Call.Return(run)
	return _c
}

// GetViolationsByComponent provides a mock function for the type MockViolationAPI
func (_mock *MockViolationAPI) GetViolationsByComponent(ctx context.Context, uuid string) client.ApiGetViolationsByComponentRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetViolationsByComponent")
	}

	var r0 client.ApiGetViolationsByComponentRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetViolationsByComponentRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetViolationsByComponentRequest)
	}
	return r0
}

// MockViolationAPI_GetViolationsByComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViolationsByComponent'
type MockViolationAPI_GetViolationsByComponent_Call struct {
	*mock.Call
}

// GetViolationsByComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockViolationAPI_Expecter) GetViolationsByComponent(ctx interface{}, uuid interface{}) *MockViolationAPI_GetViolationsByComponent_Call {
	return &MockViolationAPI_GetViolationsByComponent_Call{Call: _e.mock.On("GetViolationsByComponent", ctx, uuid)}
}

func (_c *MockViolationAPI_GetViolationsByComponent_Call) Run(run func(ctx context.Context, uuid string)) *MockViolationAPI_GetViolationsByComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockViolationAPI_GetViolationsByComponent_Call) Return(apiGetViolationsByComponentRequest client.ApiGetViolationsByComponentRequest) *MockViolationAPI_GetViolationsByComponent_Call {
	_c.Call.Return(apiGetViolationsByComponentRequest)
	return _c
}

func (_c *MockViolationAPI_GetViolationsByComponent_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetViolationsByComponentRequest) *MockViolationAPI_GetViolationsByComponent_Call {
	_c.Call.Return(run)
	return _c
}

// GetViolationsByComponentExecute provides a mock function for the type MockViolationAPI
func (_mock *MockViolationAPI) GetViolationsByComponentExecute(r client.ApiGetViolationsByComponentRequest) ([]client.PolicyViolation, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetViolationsByComponentExecute")
	}

	var r0 []client.PolicyViolation
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetViolationsByComponentRequest) ([]client.PolicyViolation, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetViolationsByComponentRequest) []client.PolicyViolation); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PolicyViolation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetViolationsByComponentRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetViolationsByComponentRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockViolationAPI_GetViolationsByComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViolationsByComponentExecute'
type MockViolationAPI_GetViolationsByComponentExecute_Call struct {
	*mock.Call
}

// GetViolationsByComponentExecute is a helper method to define mock.On call
//   - r client.ApiGetViolationsByComponentRequest
func (_e *MockViolationAPI_Expecter) GetViolationsByComponentExecute(r interface{}) *MockViolationAPI_GetViolationsByComponentExecute_Call {
	return &MockViolationAPI_GetViolationsByComponentExecute_Call{Call: _e.mock.On("GetViolationsByComponentExecute", r)}
}

func (_c *MockViolationAPI_GetViolationsByComponentExecute_Call) Run(run func(r client.ApiGetViolationsByComponentRequest)) *MockViolationAPI_GetViolationsByComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetViolationsByComponentRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetViolationsByComponentRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockViolationAPI_GetViolationsByComponentExecute_Call) Return(policyViolations []client.PolicyViolation, response *http.Response, err error) *MockViolationAPI_GetViolationsByComponentExecute_Call {
	_c.Call.Return(policyViolations, response, err)
	return _c
}

func (_c *MockViolationAPI_GetViolationsByComponentExecute_Call) RunAndReturn(run func(r client.ApiGetViolationsByComponentRequest) ([]client.PolicyViolation, *http.Response, error)) *MockViolationAPI_GetViolationsByComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetViolationsByProject provides a mock function for the type MockViolationAPI
func (_mock *MockViolationAPI) GetViolationsByProject(ctx context.Context, uuid string) client.ApiGetViolationsByProjectRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetViolationsByProject")
	}

	var r0 client.ApiGetViolationsByProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetViolationsByProjectRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetViolationsByProjectRequest)
	}
	return r0
}

// MockViolationAPI_GetViolationsByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViolationsByProject'
type MockViolationAPI_GetViolationsByProject_Call struct {
	*mock.Call
}

// GetViolationsByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockViolationAPI_Expecter) GetViolationsByProject(ctx interface{}, uuid interface{}) *MockViolationAPI_GetViolationsByProject_Call {
	return &MockViolationAPI_GetViolationsByProject_Call{Call: _e.mock.On("GetViolationsByProject", ctx, uuid)}
}

func (_c *MockViolationAPI_GetViolationsByProject_Call) Run(run func(ctx context.Context, uuid string)) *MockViolationAPI_GetViolationsByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockViolationAPI_GetViolationsByProject_Call) Return(apiGetViolationsByProjectRequest client.ApiGetViolationsByProjectRequest) *MockViolationAPI_GetViolationsByProject_Call {
	_c.Call.Return(apiGetViolationsByProjectRequest)
	return _c
}

func (_c *MockViolationAPI_GetViolationsByProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetViolationsByProjectRequest) *MockViolationAPI_GetViolationsByProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetViolationsByProjectExecute provides a mock function for the type MockViolationAPI
func (_mock *MockViolationAPI) GetViolationsByProjectExecute(r client.ApiGetViolationsByProjectRequest) ([]client.PolicyViolation, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetViolationsByProjectExecute")
	}

	var r0 []client.PolicyViolation
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetViolationsByProjectRequest) ([]client.PolicyViolation, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetViolationsByProjectRequest) []client.PolicyViolation); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PolicyViolation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetViolationsByProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetViolationsByProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockViolationAPI_GetViolationsByProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViolationsByProjectExecute'
type MockViolationAPI_GetViolationsByProjectExecute_Call struct {
	*mock.Call
}

// GetViolationsByProjectExecute is a helper method to define mock.On call
//   - r client.ApiGetViolationsByProjectRequest
func (_e *MockViolationAPI_Expecter) GetViolationsByProjectExecute(r interface{}) *MockViolationAPI_GetViolationsByProjectExecute_Call {
	return &MockViolationAPI_GetViolationsByProjectExecute_Call{Call: _e.mock.On("GetViolationsByProjectExecute", r)}
}

func (_c *MockViolationAPI_GetViolationsByProjectExecute_Call) Run(run func(r client.ApiGetViolationsByProjectRequest)) *MockViolationAPI_GetViolationsByProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetViolationsByProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetViolationsByProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockViolationAPI_GetViolationsByProjectExecute_Call) Return(policyViolations []client.PolicyViolation, response *http.Response, err error) *MockViolationAPI_GetViolationsByProjectExecute_Call {
	_c.Call.Return(policyViolations, response, err)
	return _c
}

func (_c *MockViolationAPI_GetViolationsByProjectExecute_Call) RunAndReturn(run func(r client.ApiGetViolationsByProjectRequest) ([]client.PolicyViolation, *http.Response, error)) *MockViolationAPI_GetViolationsByProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetViolationsExecute provides a mock function for the type MockViolationAPI
func (_mock *MockViolationAPI) GetViolationsExecute(r client.ApiGetViolationsRequest) ([]client.PolicyViolation, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetViolationsExecute")
	}

	var r0 []client.PolicyViolation
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetViolationsRequest) ([]client.PolicyViolation, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetViolationsRequest) []client.PolicyViolation); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.PolicyViolation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetViolationsRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetViolationsRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockViolationAPI_GetViolationsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViolationsExecute'
type MockViolationAPI_GetViolationsExecute_Call struct {
	*mock.Call
}

// GetViolationsExecute is a helper method to define mock.On call
//   - r client.ApiGetViolationsRequest
func (_e *MockViolationAPI_Expecter) GetViolationsExecute(r interface{}) *MockViolationAPI_GetViolationsExecute_Call {
	return &MockViolationAPI_GetViolationsExecute_Call{Call: _e.mock.On("GetViolationsExecute", r)}
}

func (_c *MockViolationAPI_GetViolationsExecute_Call) Run(run func(r client.ApiGetViolationsRequest)) *MockViolationAPI_GetViolationsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetViolationsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetViolationsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockViolationAPI_GetViolationsExecute_Call) Return(policyViolations []client.PolicyViolation, response *http.Response, err error) *MockViolationAPI_GetViolationsExecute_Call {
	_c.Call.Return(policyViolations, response, err)
	return _c
}

func (_c *MockViolationAPI_GetViolationsExecute_Call) RunAndReturn(run func(r client.ApiGetViolationsRequest) ([]client.PolicyViolation, *http.Response, error)) *MockViolationAPI_GetViolationsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockViolationanalysisAPI creates a new instance of MockViolationanalysisAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockViolationanalysisAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockViolationanalysisAPI {
	mock := &MockViolationanalysisAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockViolationanalysisAPI is an autogenerated mock type for the ViolationanalysisAPI type
type MockViolationanalysisAPI struct {
	mock.Mock
}

type MockViolationanalysisAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockViolationanalysisAPI) EXPECT() *MockViolationanalysisAPI_Expecter {
	return &MockViolationanalysisAPI_Expecter{mock: &_m.Mock}
}

// RetrieveAnalysis1 provides a mock function for the type MockViolationanalysisAPI
func (_mock *MockViolationanalysisAPI) RetrieveAnalysis1(ctx context.Context) client.ApiRetrieveAnalysis1Request {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAnalysis1")
	}

	var r0 client.ApiRetrieveAnalysis1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiRetrieveAnalysis1Request); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiRetrieveAnalysis1Request)
	}
	return r0
}

// MockViolationanalysisAPI_RetrieveAnalysis1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAnalysis1'
type MockViolationanalysisAPI_RetrieveAnalysis1_Call struct {
	*mock.Call
}

// RetrieveAnalysis1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockViolationanalysisAPI_Expecter) RetrieveAnalysis1(ctx interface{}) *MockViolationanalysisAPI_RetrieveAnalysis1_Call {
	return &MockViolationanalysisAPI_RetrieveAnalysis1_Call{Call: _e.mock.On("RetrieveAnalysis1", ctx)}
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1_Call) Run(run func(ctx context.Context)) *MockViolationanalysisAPI_RetrieveAnalysis1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1_Call) Return(apiRetrieveAnalysis1Request client.ApiRetrieveAnalysis1Request) *MockViolationanalysisAPI_RetrieveAnalysis1_Call {
	_c.Call.Return(apiRetrieveAnalysis1Request)
	return _c
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1_Call) RunAndReturn(run func(ctx context.Context) client.ApiRetrieveAnalysis1Request) *MockViolationanalysisAPI_RetrieveAnalysis1_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAnalysis1Execute provides a mock function for the type MockViolationanalysisAPI
func (_mock *MockViolationanalysisAPI) RetrieveAnalysis1Execute(r client.ApiRetrieveAnalysis1Request) (*client.ViolationAnalysis, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAnalysis1Execute")
	}

	var r0 *client.ViolationAnalysis
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveAnalysis1Request) (*client.ViolationAnalysis, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiRetrieveAnalysis1Request) *client.ViolationAnalysis); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ViolationAnalysis)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiRetrieveAnalysis1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiRetrieveAnalysis1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAnalysis1Execute'
type MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call struct {
	*mock.Call
}

// RetrieveAnalysis1Execute is a helper method to define mock.On call
//   - r client.ApiRetrieveAnalysis1Request
func (_e *MockViolationanalysisAPI_Expecter) RetrieveAnalysis1Execute(r interface{}) *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call {
	return &MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call{Call: _e.mock.On("RetrieveAnalysis1Execute", r)}
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call) Run(run func(r client.ApiRetrieveAnalysis1Request)) *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiRetrieveAnalysis1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiRetrieveAnalysis1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call) Return(violationAnalysis *client.ViolationAnalysis, response *http.Response, err error) *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call {
	_c.Call.Return(violationAnalysis, response, err)
	return _c
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call) RunAndReturn(run func(r client.ApiRetrieveAnalysis1Request) (*client.ViolationAnalysis, *http.Response, error)) *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalysis1 provides a mock function for the type MockViolationanalysisAPI
func (_mock *MockViolationanalysisAPI) UpdateAnalysis1(ctx context.Context) client.ApiUpdateAnalysis1Request {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysis1")
	}

	var r0 client.ApiUpdateAnalysis1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateAnalysis1Request); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateAnalysis1Request)
	}
	return r0
}

// MockViolationanalysisAPI_UpdateAnalysis1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalysis1'
type MockViolationanalysisAPI_UpdateAnalysis1_Call struct {
	*mock.Call
}

// UpdateAnalysis1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockViolationanalysisAPI_Expecter) UpdateAnalysis1(ctx interface{}) *MockViolationanalysisAPI_UpdateAnalysis1_Call {
	return &MockViolationanalysisAPI_UpdateAnalysis1_Call{Call: _e.mock.On("UpdateAnalysis1", ctx)}
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1_Call) Run(run func(ctx context.Context)) *MockViolationanalysisAPI_UpdateAnalysis1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1_Call) Return(apiUpdateAnalysis1Request client.ApiUpdateAnalysis1Request) *MockViolationanalysisAPI_UpdateAnalysis1_Call {
	_c.Call.Return(apiUpdateAnalysis1Request)
	return _c
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateAnalysis1Request) *MockViolationanalysisAPI_UpdateAnalysis1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalysis1Execute provides a mock function for the type MockViolationanalysisAPI
func (_mock *MockViolationanalysisAPI) UpdateAnalysis1Execute(r client.ApiUpdateAnalysis1Request) (*client.ViolationAnalysis, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysis1Execute")
	}

	var r0 *client.ViolationAnalysis
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateAnalysis1Request) (*client.ViolationAnalysis, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateAnalysis1Request) *client.ViolationAnalysis); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ViolationAnalysis)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateAnalysis1Request) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateAnalysis1Request) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockViolationanalysisAPI_UpdateAnalysis1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalysis1Execute'
type MockViolationanalysisAPI_UpdateAnalysis1Execute_Call struct {
	*mock.Call
}

// UpdateAnalysis1Execute is a helper method to define mock.On call
//   - r client.ApiUpdateAnalysis1Request
func (_e *MockViolationanalysisAPI_Expecter) UpdateAnalysis1Execute(r interface{}) *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call {
	return &MockViolationanalysisAPI_UpdateAnalysis1Execute_Call{Call: _e.mock.On("UpdateAnalysis1Execute", r)}
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call) Run(run func(r client.ApiUpdateAnalysis1Request)) *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateAnalysis1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateAnalysis1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call) Return(violationAnalysis *client.ViolationAnalysis, response *http.Response, err error) *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call {
	_c.Call.Return(violationAnalysis, response, err)
	return _c
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call) RunAndReturn(run func(r client.ApiUpdateAnalysis1Request) (*client.ViolationAnalysis, *http.Response, error)) *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVulnerabilityAPI creates a new instance of MockVulnerabilityAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVulnerabilityAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVulnerabilityAPI {
	mock := &MockVulnerabilityAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVulnerabilityAPI is an autogenerated mock type for the VulnerabilityAPI type
type MockVulnerabilityAPI struct {
	mock.Mock
}

type MockVulnerabilityAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVulnerabilityAPI) EXPECT() *MockVulnerabilityAPI_Expecter {
	return &MockVulnerabilityAPI_Expecter{mock: &_m.Mock}
}

// AssignVulnerability provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) AssignVulnerability(ctx context.Context, uuid string, component string) client.ApiAssignVulnerabilityRequest {
	ret := _mock.Called(ctx, uuid, component)

	if len(ret) == 0 {
		panic("no return value specified for AssignVulnerability")
	}

	var r0 client.ApiAssignVulnerabilityRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiAssignVulnerabilityRequest); ok {
		r0 = returnFunc(ctx, uuid, component)
	} else {
		r0 = ret.Get(0).(client.ApiAssignVulnerabilityRequest)
	}
	return r0
}

// MockVulnerabilityAPI_AssignVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignVulnerability'
type MockVulnerabilityAPI_AssignVulnerability_Call struct {
	*mock.Call
}

// AssignVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - component string
func (_e *MockVulnerabilityAPI_Expecter) AssignVulnerability(ctx interface{}, uuid interface{}, component interface{}) *MockVulnerabilityAPI_AssignVulnerability_Call {
	return &MockVulnerabilityAPI_AssignVulnerability_Call{Call: _e.mock.On("AssignVulnerability", ctx, uuid, component)}
}

func (_c *MockVulnerabilityAPI_AssignVulnerability_Call) Run(run func(ctx context.Context, uuid string, component string)) *MockVulnerabilityAPI_AssignVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability_Call) Return(apiAssignVulnerabilityRequest client.ApiAssignVulnerabilityRequest) *MockVulnerabilityAPI_AssignVulnerability_Call {
	_c.Call.Return(apiAssignVulnerabilityRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability_Call) RunAndReturn(run func(ctx context.Context, uuid string, component string) client.ApiAssignVulnerabilityRequest) *MockVulnerabilityAPI_AssignVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// AssignVulnerability1 provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) AssignVulnerability1(ctx context.Context, source string, vulnId string, component string) client.ApiAssignVulnerability1Request {
	ret := _mock.Called(ctx, source, vulnId, component)

	if len(ret) == 0 {
		panic("no return value specified for AssignVulnerability1")
	}

	var r0 client.ApiAssignVulnerability1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) client.ApiAssignVulnerability1Request); ok {
		r0 = returnFunc(ctx, source, vulnId, component)
	} else {
		r0 = ret.Get(0).(client.ApiAssignVulnerability1Request)
	}
	return r0
}

// MockVulnerabilityAPI_AssignVulnerability1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignVulnerability1'
type MockVulnerabilityAPI_AssignVulnerability1_Call struct {
	*mock.Call
}

// AssignVulnerability1 is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - vulnId string
//   - component string
func (_e *MockVulnerabilityAPI_Expecter) AssignVulnerability1(ctx interface{}, source interface{}, vulnId interface{}, component interface{}) *MockVulnerabilityAPI_AssignVulnerability1_Call {
	return &MockVulnerabilityAPI_AssignVulnerability1_Call{Call: _e.mock.On("AssignVulnerability1", ctx, source, vulnId, component)}
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1_Call) Run(run func(ctx context.Context, source string, vulnId string, component string)) *MockVulnerabilityAPI_AssignVulnerability1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1_Call) Return(apiAssignVulnerability1Request client.ApiAssignVulnerability1Request) *MockVulnerabilityAPI_AssignVulnerability1_Call {
	_c.Call.Return(apiAssignVulnerability1Request)
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1_Call) RunAndReturn(run func(ctx context.Context, source string, vulnId string, component string) client.ApiAssignVulnerability1Request) *MockVulnerabilityAPI_AssignVulnerability1_Call {
	_c.Call.Return(run)
	return _c
}

// AssignVulnerability1Execute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) AssignVulnerability1Execute(r client.ApiAssignVulnerability1Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AssignVulnerability1Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAssignVulnerability1Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAssignVulnerability1Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAssignVulnerability1Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVulnerabilityAPI_AssignVulnerability1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignVulnerability1Execute'
type MockVulnerabilityAPI_AssignVulnerability1Execute_Call struct {
	*mock.Call
}

// AssignVulnerability1Execute is a helper method to define mock.On call
//   - r client.ApiAssignVulnerability1Request
func (_e *MockVulnerabilityAPI_Expecter) AssignVulnerability1Execute(r interface{}) *MockVulnerabilityAPI_AssignVulnerability1Execute_Call {
	return &MockVulnerabilityAPI_AssignVulnerability1Execute_Call{Call: _e.mock.On("AssignVulnerability1Execute", r)}
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1Execute_Call) Run(run func(r client.ApiAssignVulnerability1Request)) *MockVulnerabilityAPI_AssignVulnerability1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAssignVulnerability1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiAssignVulnerability1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1Execute_Call) Return(response *http.Response, err error) *MockVulnerabilityAPI_AssignVulnerability1Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1Execute_Call) RunAndReturn(run func(r client.ApiAssignVulnerability1Request) (*http.Response, error)) *MockVulnerabilityAPI_AssignVulnerability1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// AssignVulnerabilityExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) AssignVulnerabilityExecute(r client.ApiAssignVulnerabilityRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AssignVulnerabilityExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiAssignVulnerabilityRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiAssignVulnerabilityRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiAssignVulnerabilityRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVulnerabilityAPI_AssignVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignVulnerabilityExecute'
type MockVulnerabilityAPI_AssignVulnerabilityExecute_Call struct {
	*mock.Call
}

// AssignVulnerabilityExecute is a helper method to define mock.On call
//   - r client.ApiAssignVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) AssignVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_AssignVulnerabilityExecute_Call{Call: _e.mock.On("AssignVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call) Run(run func(r client.ApiAssignVulnerabilityRequest)) *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiAssignVulnerabilityRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiAssignVulnerabilityRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call) Return(response *http.Response, err error) *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call) RunAndReturn(run func(r client.ApiAssignVulnerabilityRequest) (*http.Response, error)) *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVulnerability provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) CreateVulnerability(ctx context.Context) client.ApiCreateVulnerabilityRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateVulnerability")
	}

	var r0 client.ApiCreateVulnerabilityRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiCreateVulnerabilityRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiCreateVulnerabilityRequest)
	}
	return r0
}

// MockVulnerabilityAPI_CreateVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVulnerability'
type MockVulnerabilityAPI_CreateVulnerability_Call struct {
	*mock.Call
}

// CreateVulnerability is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVulnerabilityAPI_Expecter) CreateVulnerability(ctx interface{}) *MockVulnerabilityAPI_CreateVulnerability_Call {
	return &MockVulnerabilityAPI_CreateVulnerability_Call{Call: _e.mock.On("CreateVulnerability", ctx)}
}

func (_c *MockVulnerabilityAPI_CreateVulnerability_Call) Run(run func(ctx context.Context)) *MockVulnerabilityAPI_CreateVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_CreateVulnerability_Call) Return(apiCreateVulnerabilityRequest client.ApiCreateVulnerabilityRequest) *MockVulnerabilityAPI_CreateVulnerability_Call {
	_c.Call.Return(apiCreateVulnerabilityRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_CreateVulnerability_Call) RunAndReturn(run func(ctx context.Context) client.ApiCreateVulnerabilityRequest) *MockVulnerabilityAPI_CreateVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVulnerabilityExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) CreateVulnerabilityExecute(r client.ApiCreateVulnerabilityRequest) (*client.Vulnerability, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateVulnerabilityExecute")
	}

	var r0 *client.Vulnerability
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateVulnerabilityRequest) (*client.Vulnerability, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiCreateVulnerabilityRequest) *client.Vulnerability); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiCreateVulnerabilityRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiCreateVulnerabilityRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_CreateVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVulnerabilityExecute'
type MockVulnerabilityAPI_CreateVulnerabilityExecute_Call struct {
	*mock.Call
}

// CreateVulnerabilityExecute is a helper method to define mock.On call
//   - r client.ApiCreateVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) CreateVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_CreateVulnerabilityExecute_Call{Call: _e.mock.On("CreateVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call) Run(run func(r client.ApiCreateVulnerabilityRequest)) *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiCreateVulnerabilityRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiCreateVulnerabilityRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call) Return(vulnerability *client.Vulnerability, response *http.Response, err error) *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call {
	_c.Call.Return(vulnerability, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call) RunAndReturn(run func(r client.ApiCreateVulnerabilityRequest) (*client.Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVulnerability provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) DeleteVulnerability(ctx context.Context, uuid string) client.ApiDeleteVulnerabilityRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVulnerability")
	}

	var r0 client.ApiDeleteVulnerabilityRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiDeleteVulnerabilityRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiDeleteVulnerabilityRequest)
	}
	return r0
}

// MockVulnerabilityAPI_DeleteVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVulnerability'
type MockVulnerabilityAPI_DeleteVulnerability_Call struct {
	*mock.Call
}

// DeleteVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVulnerabilityAPI_Expecter) DeleteVulnerability(ctx interface{}, uuid interface{}) *MockVulnerabilityAPI_DeleteVulnerability_Call {
	return &MockVulnerabilityAPI_DeleteVulnerability_Call{Call: _e.mock.On("DeleteVulnerability", ctx, uuid)}
}

func (_c *MockVulnerabilityAPI_DeleteVulnerability_Call) Run(run func(ctx context.Context, uuid string)) *MockVulnerabilityAPI_DeleteVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_DeleteVulnerability_Call) Return(apiDeleteVulnerabilityRequest client.ApiDeleteVulnerabilityRequest) *MockVulnerabilityAPI_DeleteVulnerability_Call {
	_c.Call.Return(apiDeleteVulnerabilityRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_DeleteVulnerability_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiDeleteVulnerabilityRequest) *MockVulnerabilityAPI_DeleteVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVulnerabilityExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) DeleteVulnerabilityExecute(r client.ApiDeleteVulnerabilityRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVulnerabilityExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteVulnerabilityRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiDeleteVulnerabilityRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiDeleteVulnerabilityRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVulnerabilityExecute'
type MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call struct {
	*mock.Call
}

// DeleteVulnerabilityExecute is a helper method to define mock.On call
//   - r client.ApiDeleteVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) DeleteVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call{Call: _e.mock.On("DeleteVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call) Run(run func(r client.ApiDeleteVulnerabilityRequest)) *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiDeleteVulnerabilityRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiDeleteVulnerabilityRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call) Return(response *http.Response, err error) *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call) RunAndReturn(run func(r client.ApiDeleteVulnerabilityRequest) (*http.Response, error)) *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateInternalVulnerabilityIdentifier provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GenerateInternalVulnerabilityIdentifier(ctx context.Context) client.ApiGenerateInternalVulnerabilityIdentifierRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInternalVulnerabilityIdentifier")
	}

	var r0 client.ApiGenerateInternalVulnerabilityIdentifierRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGenerateInternalVulnerabilityIdentifierRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGenerateInternalVulnerabilityIdentifierRequest)
	}
	return r0
}

// MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateInternalVulnerabilityIdentifier'
type MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call struct {
	*mock.Call
}

// GenerateInternalVulnerabilityIdentifier is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVulnerabilityAPI_Expecter) GenerateInternalVulnerabilityIdentifier(ctx interface{}) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call {
	return &MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call{Call: _e.mock.On("GenerateInternalVulnerabilityIdentifier", ctx)}
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call) Run(run func(ctx context.Context)) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call) Return(apiGenerateInternalVulnerabilityIdentifierRequest client.ApiGenerateInternalVulnerabilityIdentifierRequest) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call {
	_c.Call.Return(apiGenerateInternalVulnerabilityIdentifierRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call) RunAndReturn(run func(ctx context.Context) client.ApiGenerateInternalVulnerabilityIdentifierRequest) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateInternalVulnerabilityIdentifierExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GenerateInternalVulnerabilityIdentifierExecute(r client.ApiGenerateInternalVulnerabilityIdentifierRequest) (string, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInternalVulnerabilityIdentifierExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGenerateInternalVulnerabilityIdentifierRequest) (string, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGenerateInternalVulnerabilityIdentifierRequest) string); ok {
		r0 = returnFunc(r)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGenerateInternalVulnerabilityIdentifierRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGenerateInternalVulnerabilityIdentifierRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateInternalVulnerabilityIdentifierExecute'
type MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call struct {
	*mock.Call
}

// GenerateInternalVulnerabilityIdentifierExecute is a helper method to define mock.On call
//   - r client.ApiGenerateInternalVulnerabilityIdentifierRequest
func (_e *MockVulnerabilityAPI_Expecter) GenerateInternalVulnerabilityIdentifierExecute(r interface{}) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call {
	return &MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call{Call: _e.mock.On("GenerateInternalVulnerabilityIdentifierExecute", r)}
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call) Run(run func(r client.ApiGenerateInternalVulnerabilityIdentifierRequest)) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGenerateInternalVulnerabilityIdentifierRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGenerateInternalVulnerabilityIdentifierRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call) Return(s string, response *http.Response, err error) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call {
	_c.Call.Return(s, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call) RunAndReturn(run func(r client.ApiGenerateInternalVulnerabilityIdentifierRequest) (string, *http.Response, error)) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAffectedProject provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetAffectedProject(ctx context.Context, source string, vuln string) client.ApiGetAffectedProjectRequest {
	ret := _mock.Called(ctx, source, vuln)

	if len(ret) == 0 {
		panic("no return value specified for GetAffectedProject")
	}

	var r0 client.ApiGetAffectedProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetAffectedProjectRequest); ok {
		r0 = returnFunc(ctx, source, vuln)
	} else {
		r0 = ret.Get(0).(client.ApiGetAffectedProjectRequest)
	}
	return r0
}

// MockVulnerabilityAPI_GetAffectedProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAffectedProject'
type MockVulnerabilityAPI_GetAffectedProject_Call struct {
	*mock.Call
}

// GetAffectedProject is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - vuln string
func (_e *MockVulnerabilityAPI_Expecter) GetAffectedProject(ctx interface{}, source interface{}, vuln interface{}) *MockVulnerabilityAPI_GetAffectedProject_Call {
	return &MockVulnerabilityAPI_GetAffectedProject_Call{Call: _e.mock.On("GetAffectedProject", ctx, source, vuln)}
}

func (_c *MockVulnerabilityAPI_GetAffectedProject_Call) Run(run func(ctx context.Context, source string, vuln string)) *MockVulnerabilityAPI_GetAffectedProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetAffectedProject_Call) Return(apiGetAffectedProjectRequest client.ApiGetAffectedProjectRequest) *MockVulnerabilityAPI_GetAffectedProject_Call {
	_c.Call.Return(apiGetAffectedProjectRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_GetAffectedProject_Call) RunAndReturn(run func(ctx context.Context, source string, vuln string) client.ApiGetAffectedProjectRequest) *MockVulnerabilityAPI_GetAffectedProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAffectedProjectExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetAffectedProjectExecute(r client.ApiGetAffectedProjectRequest) ([]client.Project, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAffectedProjectExecute")
	}

	var r0 []client.Project
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAffectedProjectRequest) ([]client.Project, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAffectedProjectRequest) []client.Project); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Project)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAffectedProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAffectedProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_GetAffectedProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAffectedProjectExecute'
type MockVulnerabilityAPI_GetAffectedProjectExecute_Call struct {
	*mock.Call
}

// GetAffectedProjectExecute is a helper method to define mock.On call
//   - r client.ApiGetAffectedProjectRequest
func (_e *MockVulnerabilityAPI_Expecter) GetAffectedProjectExecute(r interface{}) *MockVulnerabilityAPI_GetAffectedProjectExecute_Call {
	return &MockVulnerabilityAPI_GetAffectedProjectExecute_Call{Call: _e.mock.On("GetAffectedProjectExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetAffectedProjectExecute_Call) Run(run func(r client.ApiGetAffectedProjectRequest)) *MockVulnerabilityAPI_GetAffectedProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAffectedProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAffectedProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetAffectedProjectExecute_Call) Return(projects []client.Project, response *http.Response, err error) *MockVulnerabilityAPI_GetAffectedProjectExecute_Call {
	_c.Call.Return(projects, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_GetAffectedProjectExecute_Call) RunAndReturn(run func(r client.ApiGetAffectedProjectRequest) ([]client.Project, *http.Response, error)) *MockVulnerabilityAPI_GetAffectedProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVulnerabilities provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetAllVulnerabilities(ctx context.Context) client.ApiGetAllVulnerabilitiesRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVulnerabilities")
	}

	var r0 client.ApiGetAllVulnerabilitiesRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiGetAllVulnerabilitiesRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiGetAllVulnerabilitiesRequest)
	}
	return r0
}

// MockVulnerabilityAPI_GetAllVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVulnerabilities'
type MockVulnerabilityAPI_GetAllVulnerabilities_Call struct {
	*mock.Call
}

// GetAllVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVulnerabilityAPI_Expecter) GetAllVulnerabilities(ctx interface{}) *MockVulnerabilityAPI_GetAllVulnerabilities_Call {
	return &MockVulnerabilityAPI_GetAllVulnerabilities_Call{Call: _e.mock.On("GetAllVulnerabilities", ctx)}
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilities_Call) Run(run func(ctx context.Context)) *MockVulnerabilityAPI_GetAllVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilities_Call) Return(apiGetAllVulnerabilitiesRequest client.ApiGetAllVulnerabilitiesRequest) *MockVulnerabilityAPI_GetAllVulnerabilities_Call {
	_c.Call.Return(apiGetAllVulnerabilitiesRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilities_Call) RunAndReturn(run func(ctx context.Context) client.ApiGetAllVulnerabilitiesRequest) *MockVulnerabilityAPI_GetAllVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVulnerabilitiesExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetAllVulnerabilitiesExecute(r client.ApiGetAllVulnerabilitiesRequest) ([]client.Vulnerability, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVulnerabilitiesExecute")
	}

	var r0 []client.Vulnerability
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllVulnerabilitiesRequest) ([]client.Vulnerability, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetAllVulnerabilitiesRequest) []client.Vulnerability); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetAllVulnerabilitiesRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetAllVulnerabilitiesRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVulnerabilitiesExecute'
type MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call struct {
	*mock.Call
}

// GetAllVulnerabilitiesExecute is a helper method to define mock.On call
//   - r client.ApiGetAllVulnerabilitiesRequest
func (_e *MockVulnerabilityAPI_Expecter) GetAllVulnerabilitiesExecute(r interface{}) *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call {
	return &MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call{Call: _e.mock.On("GetAllVulnerabilitiesExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call) Run(run func(r client.ApiGetAllVulnerabilitiesRequest)) *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetAllVulnerabilitiesRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetAllVulnerabilitiesRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call) Return(vulnerabilitys []client.Vulnerability, response *http.Response, err error) *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call {
	_c.Call.Return(vulnerabilitys, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call) RunAndReturn(run func(r client.ApiGetAllVulnerabilitiesRequest) ([]client.Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitiesByComponent provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetVulnerabilitiesByComponent(ctx context.Context, uuid string) client.ApiGetVulnerabilitiesByComponentRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitiesByComponent")
	}

	var r0 client.ApiGetVulnerabilitiesByComponentRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetVulnerabilitiesByComponentRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetVulnerabilitiesByComponentRequest)
	}
	return r0
}

// MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitiesByComponent'
type MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call struct {
	*mock.Call
}

// GetVulnerabilitiesByComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilitiesByComponent(ctx interface{}, uuid interface{}) *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call {
	return &MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call{Call: _e.mock.On("GetVulnerabilitiesByComponent", ctx, uuid)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call) Run(run func(ctx context.Context, uuid string)) *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call) Return(apiGetVulnerabilitiesByComponentRequest client.ApiGetVulnerabilitiesByComponentRequest) *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call {
	_c.Call.Return(apiGetVulnerabilitiesByComponentRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetVulnerabilitiesByComponentRequest) *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitiesByComponentExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetVulnerabilitiesByComponentExecute(r client.ApiGetVulnerabilitiesByComponentRequest) ([]client.Vulnerability, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitiesByComponentExecute")
	}

	var r0 []client.Vulnerability
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilitiesByComponentRequest) ([]client.Vulnerability, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilitiesByComponentRequest) []client.Vulnerability); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetVulnerabilitiesByComponentRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetVulnerabilitiesByComponentRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitiesByComponentExecute'
type MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call struct {
	*mock.Call
}

// GetVulnerabilitiesByComponentExecute is a helper method to define mock.On call
//   - r client.ApiGetVulnerabilitiesByComponentRequest
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilitiesByComponentExecute(r interface{}) *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call {
	return &MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call{Call: _e.mock.On("GetVulnerabilitiesByComponentExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call) Run(run func(r client.ApiGetVulnerabilitiesByComponentRequest)) *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetVulnerabilitiesByComponentRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetVulnerabilitiesByComponentRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call) Return(vulnerabilitys []client.Vulnerability, response *http.Response, err error) *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call {
	_c.Call.Return(vulnerabilitys, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call) RunAndReturn(run func(r client.ApiGetVulnerabilitiesByComponentRequest) ([]client.Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitiesByProject provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetVulnerabilitiesByProject(ctx context.Context, uuid string) client.ApiGetVulnerabilitiesByProjectRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitiesByProject")
	}

	var r0 client.ApiGetVulnerabilitiesByProjectRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetVulnerabilitiesByProjectRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetVulnerabilitiesByProjectRequest)
	}
	return r0
}

// MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitiesByProject'
type MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call struct {
	*mock.Call
}

// GetVulnerabilitiesByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilitiesByProject(ctx interface{}, uuid interface{}) *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call {
	return &MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call{Call: _e.mock.On("GetVulnerabilitiesByProject", ctx, uuid)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call) Run(run func(ctx context.Context, uuid string)) *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call) Return(apiGetVulnerabilitiesByProjectRequest client.ApiGetVulnerabilitiesByProjectRequest) *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call {
	_c.Call.Return(apiGetVulnerabilitiesByProjectRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetVulnerabilitiesByProjectRequest) *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitiesByProjectExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetVulnerabilitiesByProjectExecute(r client.ApiGetVulnerabilitiesByProjectRequest) ([]client.Vulnerability, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitiesByProjectExecute")
	}

	var r0 []client.Vulnerability
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilitiesByProjectRequest) ([]client.Vulnerability, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilitiesByProjectRequest) []client.Vulnerability); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]client.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetVulnerabilitiesByProjectRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetVulnerabilitiesByProjectRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitiesByProjectExecute'
type MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call struct {
	*mock.Call
}

// GetVulnerabilitiesByProjectExecute is a helper method to define mock.On call
//   - r client.ApiGetVulnerabilitiesByProjectRequest
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilitiesByProjectExecute(r interface{}) *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call {
	return &MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call{Call: _e.mock.On("GetVulnerabilitiesByProjectExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call) Run(run func(r client.ApiGetVulnerabilitiesByProjectRequest)) *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetVulnerabilitiesByProjectRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetVulnerabilitiesByProjectRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call) Return(vulnerabilitys []client.Vulnerability, response *http.Response, err error) *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call {
	_c.Call.Return(vulnerabilitys, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call) RunAndReturn(run func(r client.ApiGetVulnerabilitiesByProjectRequest) ([]client.Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityByUuid provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetVulnerabilityByUuid(ctx context.Context, uuid string) client.ApiGetVulnerabilityByUuidRequest {
	ret := _mock.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityByUuid")
	}

	var r0 client.ApiGetVulnerabilityByUuidRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) client.ApiGetVulnerabilityByUuidRequest); ok {
		r0 = returnFunc(ctx, uuid)
	} else {
		r0 = ret.Get(0).(client.ApiGetVulnerabilityByUuidRequest)
	}
	return r0
}

// MockVulnerabilityAPI_GetVulnerabilityByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityByUuid'
type MockVulnerabilityAPI_GetVulnerabilityByUuid_Call struct {
	*mock.Call
}

// GetVulnerabilityByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilityByUuid(ctx interface{}, uuid interface{}) *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call {
	return &MockVulnerabilityAPI_GetVulnerabilityByUuid_Call{Call: _e.mock.On("GetVulnerabilityByUuid", ctx, uuid)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call) Return(apiGetVulnerabilityByUuidRequest client.ApiGetVulnerabilityByUuidRequest) *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call {
	_c.Call.Return(apiGetVulnerabilityByUuidRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call) RunAndReturn(run func(ctx context.Context, uuid string) client.ApiGetVulnerabilityByUuidRequest) *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityByUuidExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetVulnerabilityByUuidExecute(r client.ApiGetVulnerabilityByUuidRequest) (*client.Vulnerability, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityByUuidExecute")
	}

	var r0 *client.Vulnerability
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilityByUuidRequest) (*client.Vulnerability, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilityByUuidRequest) *client.Vulnerability); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetVulnerabilityByUuidRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetVulnerabilityByUuidRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityByUuidExecute'
type MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call struct {
	*mock.Call
}

// GetVulnerabilityByUuidExecute is a helper method to define mock.On call
//   - r client.ApiGetVulnerabilityByUuidRequest
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilityByUuidExecute(r interface{}) *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call {
	return &MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call{Call: _e.mock.On("GetVulnerabilityByUuidExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call) Run(run func(r client.ApiGetVulnerabilityByUuidRequest)) *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetVulnerabilityByUuidRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetVulnerabilityByUuidRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call) Return(vulnerability *client.Vulnerability, response *http.Response, err error) *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call {
	_c.Call.Return(vulnerability, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call) RunAndReturn(run func(r client.ApiGetVulnerabilityByUuidRequest) (*client.Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityByVulnId provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetVulnerabilityByVulnId(ctx context.Context, source string, vuln string) client.ApiGetVulnerabilityByVulnIdRequest {
	ret := _mock.Called(ctx, source, vuln)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityByVulnId")
	}

	var r0 client.ApiGetVulnerabilityByVulnIdRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiGetVulnerabilityByVulnIdRequest); ok {
		r0 = returnFunc(ctx, source, vuln)
	} else {
		r0 = ret.Get(0).(client.ApiGetVulnerabilityByVulnIdRequest)
	}
	return r0
}

// MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityByVulnId'
type MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call struct {
	*mock.Call
}

// GetVulnerabilityByVulnId is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - vuln string
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilityByVulnId(ctx interface{}, source interface{}, vuln interface{}) *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call {
	return &MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call{Call: _e.mock.On("GetVulnerabilityByVulnId", ctx, source, vuln)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call) Run(run func(ctx context.Context, source string, vuln string)) *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call) Return(apiGetVulnerabilityByVulnIdRequest client.ApiGetVulnerabilityByVulnIdRequest) *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call {
	_c.Call.Return(apiGetVulnerabilityByVulnIdRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call) RunAndReturn(run func(ctx context.Context, source string, vuln string) client.ApiGetVulnerabilityByVulnIdRequest) *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityByVulnIdExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) GetVulnerabilityByVulnIdExecute(r client.ApiGetVulnerabilityByVulnIdRequest) (*client.Vulnerability, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityByVulnIdExecute")
	}

	var r0 *client.Vulnerability
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilityByVulnIdRequest) (*client.Vulnerability, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiGetVulnerabilityByVulnIdRequest) *client.Vulnerability); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiGetVulnerabilityByVulnIdRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiGetVulnerabilityByVulnIdRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityByVulnIdExecute'
type MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call struct {
	*mock.Call
}

// GetVulnerabilityByVulnIdExecute is a helper method to define mock.On call
//   - r client.ApiGetVulnerabilityByVulnIdRequest
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilityByVulnIdExecute(r interface{}) *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call {
	return &MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call{Call: _e.mock.On("GetVulnerabilityByVulnIdExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call) Run(run func(r client.ApiGetVulnerabilityByVulnIdRequest)) *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiGetVulnerabilityByVulnIdRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiGetVulnerabilityByVulnIdRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call) Return(vulnerability *client.Vulnerability, response *http.Response, err error) *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call {
	_c.Call.Return(vulnerability, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call) RunAndReturn(run func(r client.ApiGetVulnerabilityByVulnIdRequest) (*client.Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignVulnerability provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) UnassignVulnerability(ctx context.Context, uuid string, component string) client.ApiUnassignVulnerabilityRequest {
	ret := _mock.Called(ctx, uuid, component)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVulnerability")
	}

	var r0 client.ApiUnassignVulnerabilityRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) client.ApiUnassignVulnerabilityRequest); ok {
		r0 = returnFunc(ctx, uuid, component)
	} else {
		r0 = ret.Get(0).(client.ApiUnassignVulnerabilityRequest)
	}
	return r0
}

// MockVulnerabilityAPI_UnassignVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignVulnerability'
type MockVulnerabilityAPI_UnassignVulnerability_Call struct {
	*mock.Call
}

// UnassignVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - component string
func (_e *MockVulnerabilityAPI_Expecter) UnassignVulnerability(ctx interface{}, uuid interface{}, component interface{}) *MockVulnerabilityAPI_UnassignVulnerability_Call {
	return &MockVulnerabilityAPI_UnassignVulnerability_Call{Call: _e.mock.On("UnassignVulnerability", ctx, uuid, component)}
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability_Call) Run(run func(ctx context.Context, uuid string, component string)) *MockVulnerabilityAPI_UnassignVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability_Call) Return(apiUnassignVulnerabilityRequest client.ApiUnassignVulnerabilityRequest) *MockVulnerabilityAPI_UnassignVulnerability_Call {
	_c.Call.Return(apiUnassignVulnerabilityRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability_Call) RunAndReturn(run func(ctx context.Context, uuid string, component string) client.ApiUnassignVulnerabilityRequest) *MockVulnerabilityAPI_UnassignVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignVulnerability1 provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) UnassignVulnerability1(ctx context.Context, source string, vulnId string, component string) client.ApiUnassignVulnerability1Request {
	ret := _mock.Called(ctx, source, vulnId, component)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVulnerability1")
	}

	var r0 client.ApiUnassignVulnerability1Request
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) client.ApiUnassignVulnerability1Request); ok {
		r0 = returnFunc(ctx, source, vulnId, component)
	} else {
		r0 = ret.Get(0).(client.ApiUnassignVulnerability1Request)
	}
	return r0
}

// MockVulnerabilityAPI_UnassignVulnerability1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignVulnerability1'
type MockVulnerabilityAPI_UnassignVulnerability1_Call struct {
	*mock.Call
}

// UnassignVulnerability1 is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - vulnId string
//   - component string
func (_e *MockVulnerabilityAPI_Expecter) UnassignVulnerability1(ctx interface{}, source interface{}, vulnId interface{}, component interface{}) *MockVulnerabilityAPI_UnassignVulnerability1_Call {
	return &MockVulnerabilityAPI_UnassignVulnerability1_Call{Call: _e.mock.On("UnassignVulnerability1", ctx, source, vulnId, component)}
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1_Call) Run(run func(ctx context.Context, source string, vulnId string, component string)) *MockVulnerabilityAPI_UnassignVulnerability1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1_Call) Return(apiUnassignVulnerability1Request client.ApiUnassignVulnerability1Request) *MockVulnerabilityAPI_UnassignVulnerability1_Call {
	_c.Call.Return(apiUnassignVulnerability1Request)
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1_Call) RunAndReturn(run func(ctx context.Context, source string, vulnId string, component string) client.ApiUnassignVulnerability1Request) *MockVulnerabilityAPI_UnassignVulnerability1_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignVulnerability1Execute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) UnassignVulnerability1Execute(r client.ApiUnassignVulnerability1Request) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVulnerability1Execute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUnassignVulnerability1Request) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUnassignVulnerability1Request) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUnassignVulnerability1Request) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVulnerabilityAPI_UnassignVulnerability1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignVulnerability1Execute'
type MockVulnerabilityAPI_UnassignVulnerability1Execute_Call struct {
	*mock.Call
}

// UnassignVulnerability1Execute is a helper method to define mock.On call
//   - r client.ApiUnassignVulnerability1Request
func (_e *MockVulnerabilityAPI_Expecter) UnassignVulnerability1Execute(r interface{}) *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call {
	return &MockVulnerabilityAPI_UnassignVulnerability1Execute_Call{Call: _e.mock.On("UnassignVulnerability1Execute", r)}
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call) Run(run func(r client.ApiUnassignVulnerability1Request)) *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUnassignVulnerability1Request
		if args[0] != nil {
			arg0 = args[0].(client.ApiUnassignVulnerability1Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call) Return(response *http.Response, err error) *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call) RunAndReturn(run func(r client.ApiUnassignVulnerability1Request) (*http.Response, error)) *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignVulnerabilityExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) UnassignVulnerabilityExecute(r client.ApiUnassignVulnerabilityRequest) (*http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVulnerabilityExecute")
	}

	var r0 *http.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUnassignVulnerabilityRequest) (*http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUnassignVulnerabilityRequest) *http.Response); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUnassignVulnerabilityRequest) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignVulnerabilityExecute'
type MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call struct {
	*mock.Call
}

// UnassignVulnerabilityExecute is a helper method to define mock.On call
//   - r client.ApiUnassignVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) UnassignVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call{Call: _e.mock.On("UnassignVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call) Run(run func(r client.ApiUnassignVulnerabilityRequest)) *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUnassignVulnerabilityRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUnassignVulnerabilityRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call) Return(response *http.Response, err error) *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call) RunAndReturn(run func(r client.ApiUnassignVulnerabilityRequest) (*http.Response, error)) *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVulnerability provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) UpdateVulnerability(ctx context.Context) client.ApiUpdateVulnerabilityRequest {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVulnerability")
	}

	var r0 client.ApiUpdateVulnerabilityRequest
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.ApiUpdateVulnerabilityRequest); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Get(0).(client.ApiUpdateVulnerabilityRequest)
	}
	return r0
}

// MockVulnerabilityAPI_UpdateVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVulnerability'
type MockVulnerabilityAPI_UpdateVulnerability_Call struct {
	*mock.Call
}

// UpdateVulnerability is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVulnerabilityAPI_Expecter) UpdateVulnerability(ctx interface{}) *MockVulnerabilityAPI_UpdateVulnerability_Call {
	return &MockVulnerabilityAPI_UpdateVulnerability_Call{Call: _e.mock.On("UpdateVulnerability", ctx)}
}

func (_c *MockVulnerabilityAPI_UpdateVulnerability_Call) Run(run func(ctx context.Context)) *MockVulnerabilityAPI_UpdateVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UpdateVulnerability_Call) Return(apiUpdateVulnerabilityRequest client.ApiUpdateVulnerabilityRequest) *MockVulnerabilityAPI_UpdateVulnerability_Call {
	_c.Call.Return(apiUpdateVulnerabilityRequest)
	return _c
}

func (_c *MockVulnerabilityAPI_UpdateVulnerability_Call) RunAndReturn(run func(ctx context.Context) client.ApiUpdateVulnerabilityRequest) *MockVulnerabilityAPI_UpdateVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVulnerabilityExecute provides a mock function for the type MockVulnerabilityAPI
func (_mock *MockVulnerabilityAPI) UpdateVulnerabilityExecute(r client.ApiUpdateVulnerabilityRequest) (*client.Vulnerability, *http.Response, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVulnerabilityExecute")
	}

	var r0 *client.Vulnerability
	var r1 *http.Response
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateVulnerabilityRequest) (*client.Vulnerability, *http.Response, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.ApiUpdateVulnerabilityRequest) *client.Vulnerability); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Vulnerability)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.ApiUpdateVulnerabilityRequest) *http.Response); ok {
		r1 = returnFunc(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(client.ApiUpdateVulnerabilityRequest) error); ok {
		r2 = returnFunc(r)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVulnerabilityExecute'
type MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call struct {
	*mock.Call
}

// UpdateVulnerabilityExecute is a helper method to define mock.On call
//   - r client.ApiUpdateVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) UpdateVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call{Call: _e.mock.On("UpdateVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call) Run(run func(r client.ApiUpdateVulnerabilityRequest)) *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ApiUpdateVulnerabilityRequest
		if args[0] != nil {
			arg0 = args[0].(client.ApiUpdateVulnerabilityRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call) Return(vulnerability *client.Vulnerability, response *http.Response, err error) *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call {
	_c.Call.Return(vulnerability, response, err)
	return _c
}

func (_c *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call) RunAndReturn(run func(r client.ApiUpdateVulnerabilityRequest) (*client.Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}
