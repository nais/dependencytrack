// Code generated by mockery. DO NOT EDIT.

package dependencytrack

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockManagementClient is an autogenerated mock type for the ManagementClient type
type MockManagementClient struct {
	mock.Mock
}

type MockManagementClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManagementClient) EXPECT() *MockManagementClient_Expecter {
	return &MockManagementClient_Expecter{mock: &_m.Mock}
}

// AddToTeam provides a mock function with given fields: ctx, username, uuid
func (_m *MockManagementClient) AddToTeam(ctx context.Context, username string, uuid string) error {
	ret := _m.Called(ctx, username, uuid)

	if len(ret) == 0 {
		panic("no return value specified for AddToTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_AddToTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToTeam'
type MockManagementClient_AddToTeam_Call struct {
	*mock.Call
}

// AddToTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - uuid string
func (_e *MockManagementClient_Expecter) AddToTeam(ctx interface{}, username interface{}, uuid interface{}) *MockManagementClient_AddToTeam_Call {
	return &MockManagementClient_AddToTeam_Call{Call: _e.mock.On("AddToTeam", ctx, username, uuid)}
}

func (_c *MockManagementClient_AddToTeam_Call) Run(run func(ctx context.Context, username string, uuid string)) *MockManagementClient_AddToTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManagementClient_AddToTeam_Call) Return(_a0 error) *MockManagementClient_AddToTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_AddToTeam_Call) RunAndReturn(run func(context.Context, string, string) error) *MockManagementClient_AddToTeam_Call {
	_c.Call.Return(run)
	return _c
}

// AllMetricsRefresh provides a mock function with given fields: ctx
func (_m *MockManagementClient) AllMetricsRefresh(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AllMetricsRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_AllMetricsRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllMetricsRefresh'
type MockManagementClient_AllMetricsRefresh_Call struct {
	*mock.Call
}

// AllMetricsRefresh is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) AllMetricsRefresh(ctx interface{}) *MockManagementClient_AllMetricsRefresh_Call {
	return &MockManagementClient_AllMetricsRefresh_Call{Call: _e.mock.On("AllMetricsRefresh", ctx)}
}

func (_c *MockManagementClient_AllMetricsRefresh_Call) Run(run func(ctx context.Context)) *MockManagementClient_AllMetricsRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManagementClient_AllMetricsRefresh_Call) Return(_a0 error) *MockManagementClient_AllMetricsRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_AllMetricsRefresh_Call) RunAndReturn(run func(context.Context) error) *MockManagementClient_AllMetricsRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeAdminPassword provides a mock function with given fields: ctx, oldPassword, newPassword
func (_m *MockManagementClient) ChangeAdminPassword(ctx context.Context, oldPassword string, newPassword string) error {
	ret := _m.Called(ctx, oldPassword, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ChangeAdminPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, oldPassword, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_ChangeAdminPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeAdminPassword'
type MockManagementClient_ChangeAdminPassword_Call struct {
	*mock.Call
}

// ChangeAdminPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - oldPassword string
//   - newPassword string
func (_e *MockManagementClient_Expecter) ChangeAdminPassword(ctx interface{}, oldPassword interface{}, newPassword interface{}) *MockManagementClient_ChangeAdminPassword_Call {
	return &MockManagementClient_ChangeAdminPassword_Call{Call: _e.mock.On("ChangeAdminPassword", ctx, oldPassword, newPassword)}
}

func (_c *MockManagementClient_ChangeAdminPassword_Call) Run(run func(ctx context.Context, oldPassword string, newPassword string)) *MockManagementClient_ChangeAdminPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManagementClient_ChangeAdminPassword_Call) Return(_a0 error) *MockManagementClient_ChangeAdminPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_ChangeAdminPassword_Call) RunAndReturn(run func(context.Context, string, string) error) *MockManagementClient_ChangeAdminPassword_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigPropertyAggregate provides a mock function with given fields: ctx, property
func (_m *MockManagementClient) ConfigPropertyAggregate(ctx context.Context, property ConfigProperty) error {
	ret := _m.Called(ctx, property)

	if len(ret) == 0 {
		panic("no return value specified for ConfigPropertyAggregate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ConfigProperty) error); ok {
		r0 = rf(ctx, property)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_ConfigPropertyAggregate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigPropertyAggregate'
type MockManagementClient_ConfigPropertyAggregate_Call struct {
	*mock.Call
}

// ConfigPropertyAggregate is a helper method to define mock.On call
//   - ctx context.Context
//   - property ConfigProperty
func (_e *MockManagementClient_Expecter) ConfigPropertyAggregate(ctx interface{}, property interface{}) *MockManagementClient_ConfigPropertyAggregate_Call {
	return &MockManagementClient_ConfigPropertyAggregate_Call{Call: _e.mock.On("ConfigPropertyAggregate", ctx, property)}
}

func (_c *MockManagementClient_ConfigPropertyAggregate_Call) Run(run func(ctx context.Context, property ConfigProperty)) *MockManagementClient_ConfigPropertyAggregate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ConfigProperty))
	})
	return _c
}

func (_c *MockManagementClient_ConfigPropertyAggregate_Call) Return(_a0 error) *MockManagementClient_ConfigPropertyAggregate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_ConfigPropertyAggregate_Call) RunAndReturn(run func(context.Context, ConfigProperty) error) *MockManagementClient_ConfigPropertyAggregate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAdminUser provides a mock function with given fields: ctx, username, password, teamUuid
func (_m *MockManagementClient) CreateAdminUser(ctx context.Context, username string, password string, teamUuid string) error {
	ret := _m.Called(ctx, username, password, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdminUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, username, password, teamUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_CreateAdminUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdminUser'
type MockManagementClient_CreateAdminUser_Call struct {
	*mock.Call
}

// CreateAdminUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - password string
//   - teamUuid string
func (_e *MockManagementClient_Expecter) CreateAdminUser(ctx interface{}, username interface{}, password interface{}, teamUuid interface{}) *MockManagementClient_CreateAdminUser_Call {
	return &MockManagementClient_CreateAdminUser_Call{Call: _e.mock.On("CreateAdminUser", ctx, username, password, teamUuid)}
}

func (_c *MockManagementClient_CreateAdminUser_Call) Run(run func(ctx context.Context, username string, password string, teamUuid string)) *MockManagementClient_CreateAdminUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockManagementClient_CreateAdminUser_Call) Return(_a0 error) *MockManagementClient_CreateAdminUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_CreateAdminUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *MockManagementClient_CreateAdminUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAdminUsers provides a mock function with given fields: ctx, users, teamUuid
func (_m *MockManagementClient) CreateAdminUsers(ctx context.Context, users []*AdminUser, teamUuid string) error {
	ret := _m.Called(ctx, users, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateAdminUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*AdminUser, string) error); ok {
		r0 = rf(ctx, users, teamUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_CreateAdminUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAdminUsers'
type MockManagementClient_CreateAdminUsers_Call struct {
	*mock.Call
}

// CreateAdminUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - users []*AdminUser
//   - teamUuid string
func (_e *MockManagementClient_Expecter) CreateAdminUsers(ctx interface{}, users interface{}, teamUuid interface{}) *MockManagementClient_CreateAdminUsers_Call {
	return &MockManagementClient_CreateAdminUsers_Call{Call: _e.mock.On("CreateAdminUsers", ctx, users, teamUuid)}
}

func (_c *MockManagementClient_CreateAdminUsers_Call) Run(run func(ctx context.Context, users []*AdminUser, teamUuid string)) *MockManagementClient_CreateAdminUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*AdminUser), args[2].(string))
	})
	return _c
}

func (_c *MockManagementClient_CreateAdminUsers_Call) Return(_a0 error) *MockManagementClient_CreateAdminUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_CreateAdminUsers_Call) RunAndReturn(run func(context.Context, []*AdminUser, string) error) *MockManagementClient_CreateAdminUsers_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOidcUser provides a mock function with given fields: ctx, email
func (_m *MockManagementClient) CreateOidcUser(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for CreateOidcUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_CreateOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOidcUser'
type MockManagementClient_CreateOidcUser_Call struct {
	*mock.Call
}

// CreateOidcUser is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockManagementClient_Expecter) CreateOidcUser(ctx interface{}, email interface{}) *MockManagementClient_CreateOidcUser_Call {
	return &MockManagementClient_CreateOidcUser_Call{Call: _e.mock.On("CreateOidcUser", ctx, email)}
}

func (_c *MockManagementClient_CreateOidcUser_Call) Run(run func(ctx context.Context, email string)) *MockManagementClient_CreateOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_CreateOidcUser_Call) Return(_a0 error) *MockManagementClient_CreateOidcUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_CreateOidcUser_Call) RunAndReturn(run func(context.Context, string) error) *MockManagementClient_CreateOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function with given fields: ctx, teamName, permissions
func (_m *MockManagementClient) CreateTeam(ctx context.Context, teamName string, permissions []Permission) (*Team, error) {
	ret := _m.Called(ctx, teamName, permissions)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []Permission) (*Team, error)); ok {
		return rf(ctx, teamName, permissions)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []Permission) *Team); ok {
		r0 = rf(ctx, teamName, permissions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []Permission) error); ok {
		r1 = rf(ctx, teamName, permissions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockManagementClient_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - teamName string
//   - permissions []Permission
func (_e *MockManagementClient_Expecter) CreateTeam(ctx interface{}, teamName interface{}, permissions interface{}) *MockManagementClient_CreateTeam_Call {
	return &MockManagementClient_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx, teamName, permissions)}
}

func (_c *MockManagementClient_CreateTeam_Call) Run(run func(ctx context.Context, teamName string, permissions []Permission)) *MockManagementClient_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]Permission))
	})
	return _c
}

func (_c *MockManagementClient_CreateTeam_Call) Return(_a0 *Team, _a1 error) *MockManagementClient_CreateTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_CreateTeam_Call) RunAndReturn(run func(context.Context, string, []Permission) (*Team, error)) *MockManagementClient_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedUser provides a mock function with given fields: ctx, username
func (_m *MockManagementClient) DeleteManagedUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_DeleteManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedUser'
type MockManagementClient_DeleteManagedUser_Call struct {
	*mock.Call
}

// DeleteManagedUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockManagementClient_Expecter) DeleteManagedUser(ctx interface{}, username interface{}) *MockManagementClient_DeleteManagedUser_Call {
	return &MockManagementClient_DeleteManagedUser_Call{Call: _e.mock.On("DeleteManagedUser", ctx, username)}
}

func (_c *MockManagementClient_DeleteManagedUser_Call) Run(run func(ctx context.Context, username string)) *MockManagementClient_DeleteManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_DeleteManagedUser_Call) Return(_a0 error) *MockManagementClient_DeleteManagedUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_DeleteManagedUser_Call) RunAndReturn(run func(context.Context, string) error) *MockManagementClient_DeleteManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOidcUser provides a mock function with given fields: ctx, username
func (_m *MockManagementClient) DeleteOidcUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOidcUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_DeleteOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOidcUser'
type MockManagementClient_DeleteOidcUser_Call struct {
	*mock.Call
}

// DeleteOidcUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockManagementClient_Expecter) DeleteOidcUser(ctx interface{}, username interface{}) *MockManagementClient_DeleteOidcUser_Call {
	return &MockManagementClient_DeleteOidcUser_Call{Call: _e.mock.On("DeleteOidcUser", ctx, username)}
}

func (_c *MockManagementClient_DeleteOidcUser_Call) Run(run func(ctx context.Context, username string)) *MockManagementClient_DeleteOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_DeleteOidcUser_Call) Return(_a0 error) *MockManagementClient_DeleteOidcUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_DeleteOidcUser_Call) RunAndReturn(run func(context.Context, string) error) *MockManagementClient_DeleteOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx, uuid
func (_m *MockManagementClient) DeleteTeam(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockManagementClient_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockManagementClient_Expecter) DeleteTeam(ctx interface{}, uuid interface{}) *MockManagementClient_DeleteTeam_Call {
	return &MockManagementClient_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx, uuid)}
}

func (_c *MockManagementClient_DeleteTeam_Call) Run(run func(ctx context.Context, uuid string)) *MockManagementClient_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_DeleteTeam_Call) Return(_a0 error) *MockManagementClient_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_DeleteTeam_Call) RunAndReturn(run func(context.Context, string) error) *MockManagementClient_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserMembership provides a mock function with given fields: ctx, teamUuid, username
func (_m *MockManagementClient) DeleteUserMembership(ctx context.Context, teamUuid string, username string) error {
	ret := _m.Called(ctx, teamUuid, username)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserMembership")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, teamUuid, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_DeleteUserMembership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserMembership'
type MockManagementClient_DeleteUserMembership_Call struct {
	*mock.Call
}

// DeleteUserMembership is a helper method to define mock.On call
//   - ctx context.Context
//   - teamUuid string
//   - username string
func (_e *MockManagementClient_Expecter) DeleteUserMembership(ctx interface{}, teamUuid interface{}, username interface{}) *MockManagementClient_DeleteUserMembership_Call {
	return &MockManagementClient_DeleteUserMembership_Call{Call: _e.mock.On("DeleteUserMembership", ctx, teamUuid, username)}
}

func (_c *MockManagementClient_DeleteUserMembership_Call) Run(run func(ctx context.Context, teamUuid string, username string)) *MockManagementClient_DeleteUserMembership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockManagementClient_DeleteUserMembership_Call) Return(_a0 error) *MockManagementClient_DeleteUserMembership_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_DeleteUserMembership_Call) RunAndReturn(run func(context.Context, string, string) error) *MockManagementClient_DeleteUserMembership_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateApiKey provides a mock function with given fields: ctx, uuid
func (_m *MockManagementClient) GenerateApiKey(ctx context.Context, uuid string) (string, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GenerateApiKey")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_GenerateApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateApiKey'
type MockManagementClient_GenerateApiKey_Call struct {
	*mock.Call
}

// GenerateApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockManagementClient_Expecter) GenerateApiKey(ctx interface{}, uuid interface{}) *MockManagementClient_GenerateApiKey_Call {
	return &MockManagementClient_GenerateApiKey_Call{Call: _e.mock.On("GenerateApiKey", ctx, uuid)}
}

func (_c *MockManagementClient_GenerateApiKey_Call) Run(run func(ctx context.Context, uuid string)) *MockManagementClient_GenerateApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_GenerateApiKey_Call) Return(_a0 string, _a1 error) *MockManagementClient_GenerateApiKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_GenerateApiKey_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockManagementClient_GenerateApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigProperties provides a mock function with given fields: ctx
func (_m *MockManagementClient) GetConfigProperties(ctx context.Context) ([]ConfigProperty, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigProperties")
	}

	var r0 []ConfigProperty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]ConfigProperty, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []ConfigProperty); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ConfigProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_GetConfigProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigProperties'
type MockManagementClient_GetConfigProperties_Call struct {
	*mock.Call
}

// GetConfigProperties is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) GetConfigProperties(ctx interface{}) *MockManagementClient_GetConfigProperties_Call {
	return &MockManagementClient_GetConfigProperties_Call{Call: _e.mock.On("GetConfigProperties", ctx)}
}

func (_c *MockManagementClient_GetConfigProperties_Call) Run(run func(ctx context.Context)) *MockManagementClient_GetConfigProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManagementClient_GetConfigProperties_Call) Return(_a0 []ConfigProperty, _a1 error) *MockManagementClient_GetConfigProperties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_GetConfigProperties_Call) RunAndReturn(run func(context.Context) ([]ConfigProperty, error)) *MockManagementClient_GetConfigProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetEcosystems provides a mock function with given fields: ctx
func (_m *MockManagementClient) GetEcosystems(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetEcosystems")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_GetEcosystems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEcosystems'
type MockManagementClient_GetEcosystems_Call struct {
	*mock.Call
}

// GetEcosystems is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) GetEcosystems(ctx interface{}) *MockManagementClient_GetEcosystems_Call {
	return &MockManagementClient_GetEcosystems_Call{Call: _e.mock.On("GetEcosystems", ctx)}
}

func (_c *MockManagementClient_GetEcosystems_Call) Run(run func(ctx context.Context)) *MockManagementClient_GetEcosystems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManagementClient_GetEcosystems_Call) Return(_a0 []string, _a1 error) *MockManagementClient_GetEcosystems_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_GetEcosystems_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MockManagementClient_GetEcosystems_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUser provides a mock function with given fields: ctx, username
func (_m *MockManagementClient) GetOidcUser(ctx context.Context, username string) (*User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUser")
	}

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_GetOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUser'
type MockManagementClient_GetOidcUser_Call struct {
	*mock.Call
}

// GetOidcUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockManagementClient_Expecter) GetOidcUser(ctx interface{}, username interface{}) *MockManagementClient_GetOidcUser_Call {
	return &MockManagementClient_GetOidcUser_Call{Call: _e.mock.On("GetOidcUser", ctx, username)}
}

func (_c *MockManagementClient_GetOidcUser_Call) Run(run func(ctx context.Context, username string)) *MockManagementClient_GetOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_GetOidcUser_Call) Return(_a0 *User, _a1 error) *MockManagementClient_GetOidcUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_GetOidcUser_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockManagementClient_GetOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUsers provides a mock function with given fields: ctx
func (_m *MockManagementClient) GetOidcUsers(ctx context.Context) ([]*User, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUsers")
	}

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_GetOidcUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUsers'
type MockManagementClient_GetOidcUsers_Call struct {
	*mock.Call
}

// GetOidcUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) GetOidcUsers(ctx interface{}) *MockManagementClient_GetOidcUsers_Call {
	return &MockManagementClient_GetOidcUsers_Call{Call: _e.mock.On("GetOidcUsers", ctx)}
}

func (_c *MockManagementClient_GetOidcUsers_Call) Run(run func(ctx context.Context)) *MockManagementClient_GetOidcUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManagementClient_GetOidcUsers_Call) Return(_a0 []*User, _a1 error) *MockManagementClient_GetOidcUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_GetOidcUsers_Call) RunAndReturn(run func(context.Context) ([]*User, error)) *MockManagementClient_GetOidcUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function with given fields: ctx, team
func (_m *MockManagementClient) GetTeam(ctx context.Context, team string) (*Team, error) {
	ret := _m.Called(ctx, team)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 *Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*Team, error)); ok {
		return rf(ctx, team)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *Team); ok {
		r0 = rf(ctx, team)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, team)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockManagementClient_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - team string
func (_e *MockManagementClient_Expecter) GetTeam(ctx interface{}, team interface{}) *MockManagementClient_GetTeam_Call {
	return &MockManagementClient_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, team)}
}

func (_c *MockManagementClient_GetTeam_Call) Run(run func(ctx context.Context, team string)) *MockManagementClient_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_GetTeam_Call) Return(_a0 *Team, _a1 error) *MockManagementClient_GetTeam_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_GetTeam_Call) RunAndReturn(run func(context.Context, string) (*Team, error)) *MockManagementClient_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx
func (_m *MockManagementClient) GetTeams(ctx context.Context) ([]*Team, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 []*Team
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*Team, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*Team); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockManagementClient_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) GetTeams(ctx interface{}) *MockManagementClient_GetTeams_Call {
	return &MockManagementClient_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockManagementClient_GetTeams_Call) Run(run func(ctx context.Context)) *MockManagementClient_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManagementClient_GetTeams_Call) Return(_a0 []*Team, _a1 error) *MockManagementClient_GetTeams_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_GetTeams_Call) RunAndReturn(run func(context.Context) ([]*Team, error)) *MockManagementClient_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectMetricsRefresh provides a mock function with given fields: ctx, uuid
func (_m *MockManagementClient) ProjectMetricsRefresh(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ProjectMetricsRefresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_ProjectMetricsRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectMetricsRefresh'
type MockManagementClient_ProjectMetricsRefresh_Call struct {
	*mock.Call
}

// ProjectMetricsRefresh is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockManagementClient_Expecter) ProjectMetricsRefresh(ctx interface{}, uuid interface{}) *MockManagementClient_ProjectMetricsRefresh_Call {
	return &MockManagementClient_ProjectMetricsRefresh_Call{Call: _e.mock.On("ProjectMetricsRefresh", ctx, uuid)}
}

func (_c *MockManagementClient_ProjectMetricsRefresh_Call) Run(run func(ctx context.Context, uuid string)) *MockManagementClient_ProjectMetricsRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_ProjectMetricsRefresh_Call) Return(_a0 error) *MockManagementClient_ProjectMetricsRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_ProjectMetricsRefresh_Call) RunAndReturn(run func(context.Context, string) error) *MockManagementClient_ProjectMetricsRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAdminUser provides a mock function with given fields: ctx, username
func (_m *MockManagementClient) RemoveAdminUser(ctx context.Context, username string) error {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAdminUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_RemoveAdminUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAdminUser'
type MockManagementClient_RemoveAdminUser_Call struct {
	*mock.Call
}

// RemoveAdminUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockManagementClient_Expecter) RemoveAdminUser(ctx interface{}, username interface{}) *MockManagementClient_RemoveAdminUser_Call {
	return &MockManagementClient_RemoveAdminUser_Call{Call: _e.mock.On("RemoveAdminUser", ctx, username)}
}

func (_c *MockManagementClient_RemoveAdminUser_Call) Run(run func(ctx context.Context, username string)) *MockManagementClient_RemoveAdminUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockManagementClient_RemoveAdminUser_Call) Return(_a0 error) *MockManagementClient_RemoveAdminUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_RemoveAdminUser_Call) RunAndReturn(run func(context.Context, string) error) *MockManagementClient_RemoveAdminUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAdminUsers provides a mock function with given fields: ctx, users
func (_m *MockManagementClient) RemoveAdminUsers(ctx context.Context, users []*AdminUser) error {
	ret := _m.Called(ctx, users)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAdminUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*AdminUser) error); ok {
		r0 = rf(ctx, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManagementClient_RemoveAdminUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAdminUsers'
type MockManagementClient_RemoveAdminUsers_Call struct {
	*mock.Call
}

// RemoveAdminUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - users []*AdminUser
func (_e *MockManagementClient_Expecter) RemoveAdminUsers(ctx interface{}, users interface{}) *MockManagementClient_RemoveAdminUsers_Call {
	return &MockManagementClient_RemoveAdminUsers_Call{Call: _e.mock.On("RemoveAdminUsers", ctx, users)}
}

func (_c *MockManagementClient_RemoveAdminUsers_Call) Run(run func(ctx context.Context, users []*AdminUser)) *MockManagementClient_RemoveAdminUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*AdminUser))
	})
	return _c
}

func (_c *MockManagementClient_RemoveAdminUsers_Call) Return(_a0 error) *MockManagementClient_RemoveAdminUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManagementClient_RemoveAdminUsers_Call) RunAndReturn(run func(context.Context, []*AdminUser) error) *MockManagementClient_RemoveAdminUsers_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields: ctx
func (_m *MockManagementClient) Version(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManagementClient_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type MockManagementClient_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManagementClient_Expecter) Version(ctx interface{}) *MockManagementClient_Version_Call {
	return &MockManagementClient_Version_Call{Call: _e.mock.On("Version", ctx)}
}

func (_c *MockManagementClient_Version_Call) Run(run func(ctx context.Context)) *MockManagementClient_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManagementClient_Version_Call) Return(_a0 string, _a1 error) *MockManagementClient_Version_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManagementClient_Version_Call) RunAndReturn(run func(context.Context) (string, error)) *MockManagementClient_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManagementClient creates a new instance of MockManagementClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManagementClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManagementClient {
	mock := &MockManagementClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
