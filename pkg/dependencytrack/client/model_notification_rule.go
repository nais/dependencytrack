/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NotificationRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationRule{}

// NotificationRule struct for NotificationRule
type NotificationRule struct {
	Name string `json:"name" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	Enabled *bool `json:"enabled,omitempty"`
	NotifyChildren *bool `json:"notifyChildren,omitempty"`
	LogSuccessfulPublish *bool `json:"logSuccessfulPublish,omitempty"`
	Scope string `json:"scope"`
	NotificationLevel *string `json:"notificationLevel,omitempty"`
	Projects []Project `json:"projects,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	Teams []Team `json:"teams,omitempty"`
	NotifyOn []string `json:"notifyOn,omitempty"`
	Message *string `json:"message,omitempty" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	Publisher *NotificationPublisher `json:"publisher,omitempty"`
	PublisherConfig *string `json:"publisherConfig,omitempty"`
	TriggerType string `json:"triggerType"`
	// When the schedule last triggered, as UNIX epoch timestamp in milliseconds
	ScheduleLastTriggeredAt *int64 `json:"scheduleLastTriggeredAt,omitempty"`
	// When the schedule triggers next, as UNIX epoch timestamp in milliseconds
	ScheduleNextTriggerAt *int64 `json:"scheduleNextTriggerAt,omitempty"`
	// Schedule of this rule as cron expression. Must not be set for rules with trigger type EVENT.
	ScheduleCron *string `json:"scheduleCron,omitempty"`
	// Whether to skip emitting a scheduled notification if it doesn't contain any changes since its last emission. Must not be set for rules with trigger type EVENT.
	ScheduleSkipUnchanged *bool `json:"scheduleSkipUnchanged,omitempty"`
	Uuid string `json:"uuid"`
}

type _NotificationRule NotificationRule

// NewNotificationRule instantiates a new NotificationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRule(name string, scope string, triggerType string, uuid string) *NotificationRule {
	this := NotificationRule{}
	this.Name = name
	this.Scope = scope
	this.TriggerType = triggerType
	this.Uuid = uuid
	return &this
}

// NewNotificationRuleWithDefaults instantiates a new NotificationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRuleWithDefaults() *NotificationRule {
	this := NotificationRule{}
	return &this
}

// GetName returns the Name field value
func (o *NotificationRule) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NotificationRule) SetName(v string) {
	o.Name = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *NotificationRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *NotificationRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *NotificationRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetNotifyChildren returns the NotifyChildren field value if set, zero value otherwise.
func (o *NotificationRule) GetNotifyChildren() bool {
	if o == nil || IsNil(o.NotifyChildren) {
		var ret bool
		return ret
	}
	return *o.NotifyChildren
}

// GetNotifyChildrenOk returns a tuple with the NotifyChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetNotifyChildrenOk() (*bool, bool) {
	if o == nil || IsNil(o.NotifyChildren) {
		return nil, false
	}
	return o.NotifyChildren, true
}

// HasNotifyChildren returns a boolean if a field has been set.
func (o *NotificationRule) HasNotifyChildren() bool {
	if o != nil && !IsNil(o.NotifyChildren) {
		return true
	}

	return false
}

// SetNotifyChildren gets a reference to the given bool and assigns it to the NotifyChildren field.
func (o *NotificationRule) SetNotifyChildren(v bool) {
	o.NotifyChildren = &v
}

// GetLogSuccessfulPublish returns the LogSuccessfulPublish field value if set, zero value otherwise.
func (o *NotificationRule) GetLogSuccessfulPublish() bool {
	if o == nil || IsNil(o.LogSuccessfulPublish) {
		var ret bool
		return ret
	}
	return *o.LogSuccessfulPublish
}

// GetLogSuccessfulPublishOk returns a tuple with the LogSuccessfulPublish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetLogSuccessfulPublishOk() (*bool, bool) {
	if o == nil || IsNil(o.LogSuccessfulPublish) {
		return nil, false
	}
	return o.LogSuccessfulPublish, true
}

// HasLogSuccessfulPublish returns a boolean if a field has been set.
func (o *NotificationRule) HasLogSuccessfulPublish() bool {
	if o != nil && !IsNil(o.LogSuccessfulPublish) {
		return true
	}

	return false
}

// SetLogSuccessfulPublish gets a reference to the given bool and assigns it to the LogSuccessfulPublish field.
func (o *NotificationRule) SetLogSuccessfulPublish(v bool) {
	o.LogSuccessfulPublish = &v
}

// GetScope returns the Scope field value
func (o *NotificationRule) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *NotificationRule) SetScope(v string) {
	o.Scope = v
}

// GetNotificationLevel returns the NotificationLevel field value if set, zero value otherwise.
func (o *NotificationRule) GetNotificationLevel() string {
	if o == nil || IsNil(o.NotificationLevel) {
		var ret string
		return ret
	}
	return *o.NotificationLevel
}

// GetNotificationLevelOk returns a tuple with the NotificationLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetNotificationLevelOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationLevel) {
		return nil, false
	}
	return o.NotificationLevel, true
}

// HasNotificationLevel returns a boolean if a field has been set.
func (o *NotificationRule) HasNotificationLevel() bool {
	if o != nil && !IsNil(o.NotificationLevel) {
		return true
	}

	return false
}

// SetNotificationLevel gets a reference to the given string and assigns it to the NotificationLevel field.
func (o *NotificationRule) SetNotificationLevel(v string) {
	o.NotificationLevel = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *NotificationRule) GetProjects() []Project {
	if o == nil || IsNil(o.Projects) {
		var ret []Project
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetProjectsOk() ([]Project, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *NotificationRule) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []Project and assigns it to the Projects field.
func (o *NotificationRule) SetProjects(v []Project) {
	o.Projects = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *NotificationRule) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NotificationRule) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *NotificationRule) SetTags(v []Tag) {
	o.Tags = v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *NotificationRule) GetTeams() []Team {
	if o == nil || IsNil(o.Teams) {
		var ret []Team
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetTeamsOk() ([]Team, bool) {
	if o == nil || IsNil(o.Teams) {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *NotificationRule) HasTeams() bool {
	if o != nil && !IsNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []Team and assigns it to the Teams field.
func (o *NotificationRule) SetTeams(v []Team) {
	o.Teams = v
}

// GetNotifyOn returns the NotifyOn field value if set, zero value otherwise.
func (o *NotificationRule) GetNotifyOn() []string {
	if o == nil || IsNil(o.NotifyOn) {
		var ret []string
		return ret
	}
	return o.NotifyOn
}

// GetNotifyOnOk returns a tuple with the NotifyOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetNotifyOnOk() ([]string, bool) {
	if o == nil || IsNil(o.NotifyOn) {
		return nil, false
	}
	return o.NotifyOn, true
}

// HasNotifyOn returns a boolean if a field has been set.
func (o *NotificationRule) HasNotifyOn() bool {
	if o != nil && !IsNil(o.NotifyOn) {
		return true
	}

	return false
}

// SetNotifyOn gets a reference to the given []string and assigns it to the NotifyOn field.
func (o *NotificationRule) SetNotifyOn(v []string) {
	o.NotifyOn = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *NotificationRule) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *NotificationRule) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *NotificationRule) SetMessage(v string) {
	o.Message = &v
}

// GetPublisher returns the Publisher field value if set, zero value otherwise.
func (o *NotificationRule) GetPublisher() NotificationPublisher {
	if o == nil || IsNil(o.Publisher) {
		var ret NotificationPublisher
		return ret
	}
	return *o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetPublisherOk() (*NotificationPublisher, bool) {
	if o == nil || IsNil(o.Publisher) {
		return nil, false
	}
	return o.Publisher, true
}

// HasPublisher returns a boolean if a field has been set.
func (o *NotificationRule) HasPublisher() bool {
	if o != nil && !IsNil(o.Publisher) {
		return true
	}

	return false
}

// SetPublisher gets a reference to the given NotificationPublisher and assigns it to the Publisher field.
func (o *NotificationRule) SetPublisher(v NotificationPublisher) {
	o.Publisher = &v
}

// GetPublisherConfig returns the PublisherConfig field value if set, zero value otherwise.
func (o *NotificationRule) GetPublisherConfig() string {
	if o == nil || IsNil(o.PublisherConfig) {
		var ret string
		return ret
	}
	return *o.PublisherConfig
}

// GetPublisherConfigOk returns a tuple with the PublisherConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetPublisherConfigOk() (*string, bool) {
	if o == nil || IsNil(o.PublisherConfig) {
		return nil, false
	}
	return o.PublisherConfig, true
}

// HasPublisherConfig returns a boolean if a field has been set.
func (o *NotificationRule) HasPublisherConfig() bool {
	if o != nil && !IsNil(o.PublisherConfig) {
		return true
	}

	return false
}

// SetPublisherConfig gets a reference to the given string and assigns it to the PublisherConfig field.
func (o *NotificationRule) SetPublisherConfig(v string) {
	o.PublisherConfig = &v
}

// GetTriggerType returns the TriggerType field value
func (o *NotificationRule) GetTriggerType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TriggerType
}

// GetTriggerTypeOk returns a tuple with the TriggerType field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetTriggerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TriggerType, true
}

// SetTriggerType sets field value
func (o *NotificationRule) SetTriggerType(v string) {
	o.TriggerType = v
}

// GetScheduleLastTriggeredAt returns the ScheduleLastTriggeredAt field value if set, zero value otherwise.
func (o *NotificationRule) GetScheduleLastTriggeredAt() int64 {
	if o == nil || IsNil(o.ScheduleLastTriggeredAt) {
		var ret int64
		return ret
	}
	return *o.ScheduleLastTriggeredAt
}

// GetScheduleLastTriggeredAtOk returns a tuple with the ScheduleLastTriggeredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetScheduleLastTriggeredAtOk() (*int64, bool) {
	if o == nil || IsNil(o.ScheduleLastTriggeredAt) {
		return nil, false
	}
	return o.ScheduleLastTriggeredAt, true
}

// HasScheduleLastTriggeredAt returns a boolean if a field has been set.
func (o *NotificationRule) HasScheduleLastTriggeredAt() bool {
	if o != nil && !IsNil(o.ScheduleLastTriggeredAt) {
		return true
	}

	return false
}

// SetScheduleLastTriggeredAt gets a reference to the given int64 and assigns it to the ScheduleLastTriggeredAt field.
func (o *NotificationRule) SetScheduleLastTriggeredAt(v int64) {
	o.ScheduleLastTriggeredAt = &v
}

// GetScheduleNextTriggerAt returns the ScheduleNextTriggerAt field value if set, zero value otherwise.
func (o *NotificationRule) GetScheduleNextTriggerAt() int64 {
	if o == nil || IsNil(o.ScheduleNextTriggerAt) {
		var ret int64
		return ret
	}
	return *o.ScheduleNextTriggerAt
}

// GetScheduleNextTriggerAtOk returns a tuple with the ScheduleNextTriggerAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetScheduleNextTriggerAtOk() (*int64, bool) {
	if o == nil || IsNil(o.ScheduleNextTriggerAt) {
		return nil, false
	}
	return o.ScheduleNextTriggerAt, true
}

// HasScheduleNextTriggerAt returns a boolean if a field has been set.
func (o *NotificationRule) HasScheduleNextTriggerAt() bool {
	if o != nil && !IsNil(o.ScheduleNextTriggerAt) {
		return true
	}

	return false
}

// SetScheduleNextTriggerAt gets a reference to the given int64 and assigns it to the ScheduleNextTriggerAt field.
func (o *NotificationRule) SetScheduleNextTriggerAt(v int64) {
	o.ScheduleNextTriggerAt = &v
}

// GetScheduleCron returns the ScheduleCron field value if set, zero value otherwise.
func (o *NotificationRule) GetScheduleCron() string {
	if o == nil || IsNil(o.ScheduleCron) {
		var ret string
		return ret
	}
	return *o.ScheduleCron
}

// GetScheduleCronOk returns a tuple with the ScheduleCron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetScheduleCronOk() (*string, bool) {
	if o == nil || IsNil(o.ScheduleCron) {
		return nil, false
	}
	return o.ScheduleCron, true
}

// HasScheduleCron returns a boolean if a field has been set.
func (o *NotificationRule) HasScheduleCron() bool {
	if o != nil && !IsNil(o.ScheduleCron) {
		return true
	}

	return false
}

// SetScheduleCron gets a reference to the given string and assigns it to the ScheduleCron field.
func (o *NotificationRule) SetScheduleCron(v string) {
	o.ScheduleCron = &v
}

// GetScheduleSkipUnchanged returns the ScheduleSkipUnchanged field value if set, zero value otherwise.
func (o *NotificationRule) GetScheduleSkipUnchanged() bool {
	if o == nil || IsNil(o.ScheduleSkipUnchanged) {
		var ret bool
		return ret
	}
	return *o.ScheduleSkipUnchanged
}

// GetScheduleSkipUnchangedOk returns a tuple with the ScheduleSkipUnchanged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetScheduleSkipUnchangedOk() (*bool, bool) {
	if o == nil || IsNil(o.ScheduleSkipUnchanged) {
		return nil, false
	}
	return o.ScheduleSkipUnchanged, true
}

// HasScheduleSkipUnchanged returns a boolean if a field has been set.
func (o *NotificationRule) HasScheduleSkipUnchanged() bool {
	if o != nil && !IsNil(o.ScheduleSkipUnchanged) {
		return true
	}

	return false
}

// SetScheduleSkipUnchanged gets a reference to the given bool and assigns it to the ScheduleSkipUnchanged field.
func (o *NotificationRule) SetScheduleSkipUnchanged(v bool) {
	o.ScheduleSkipUnchanged = &v
}

// GetUuid returns the Uuid field value
func (o *NotificationRule) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *NotificationRule) SetUuid(v string) {
	o.Uuid = v
}

func (o NotificationRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.NotifyChildren) {
		toSerialize["notifyChildren"] = o.NotifyChildren
	}
	if !IsNil(o.LogSuccessfulPublish) {
		toSerialize["logSuccessfulPublish"] = o.LogSuccessfulPublish
	}
	toSerialize["scope"] = o.Scope
	if !IsNil(o.NotificationLevel) {
		toSerialize["notificationLevel"] = o.NotificationLevel
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	if !IsNil(o.NotifyOn) {
		toSerialize["notifyOn"] = o.NotifyOn
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Publisher) {
		toSerialize["publisher"] = o.Publisher
	}
	if !IsNil(o.PublisherConfig) {
		toSerialize["publisherConfig"] = o.PublisherConfig
	}
	toSerialize["triggerType"] = o.TriggerType
	if !IsNil(o.ScheduleLastTriggeredAt) {
		toSerialize["scheduleLastTriggeredAt"] = o.ScheduleLastTriggeredAt
	}
	if !IsNil(o.ScheduleNextTriggerAt) {
		toSerialize["scheduleNextTriggerAt"] = o.ScheduleNextTriggerAt
	}
	if !IsNil(o.ScheduleCron) {
		toSerialize["scheduleCron"] = o.ScheduleCron
	}
	if !IsNil(o.ScheduleSkipUnchanged) {
		toSerialize["scheduleSkipUnchanged"] = o.ScheduleSkipUnchanged
	}
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *NotificationRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"scope",
		"triggerType",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificationRule := _NotificationRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificationRule)

	if err != nil {
		return err
	}

	*o = NotificationRule(varNotificationRule)

	return err
}

type NullableNotificationRule struct {
	value *NotificationRule
	isSet bool
}

func (v NullableNotificationRule) Get() *NotificationRule {
	return v.value
}

func (v *NullableNotificationRule) Set(val *NotificationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRule(val *NotificationRule) *NullableNotificationRule {
	return &NullableNotificationRule{value: val, isSet: true}
}

func (v NullableNotificationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


