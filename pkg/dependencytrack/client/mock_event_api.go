// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockEventAPI is an autogenerated mock type for the EventAPI type
type MockEventAPI struct {
	mock.Mock
}

type MockEventAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventAPI) EXPECT() *MockEventAPI_Expecter {
	return &MockEventAPI_Expecter{mock: &_m.Mock}
}

// IsTokenBeingProcessed1 provides a mock function with given fields: ctx, uuid
func (_m *MockEventAPI) IsTokenBeingProcessed1(ctx context.Context, uuid string) ApiIsTokenBeingProcessed1Request {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBeingProcessed1")
	}

	var r0 ApiIsTokenBeingProcessed1Request
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiIsTokenBeingProcessed1Request); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiIsTokenBeingProcessed1Request)
	}

	return r0
}

// MockEventAPI_IsTokenBeingProcessed1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenBeingProcessed1'
type MockEventAPI_IsTokenBeingProcessed1_Call struct {
	*mock.Call
}

// IsTokenBeingProcessed1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockEventAPI_Expecter) IsTokenBeingProcessed1(ctx interface{}, uuid interface{}) *MockEventAPI_IsTokenBeingProcessed1_Call {
	return &MockEventAPI_IsTokenBeingProcessed1_Call{Call: _e.mock.On("IsTokenBeingProcessed1", ctx, uuid)}
}

func (_c *MockEventAPI_IsTokenBeingProcessed1_Call) Run(run func(ctx context.Context, uuid string)) *MockEventAPI_IsTokenBeingProcessed1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockEventAPI_IsTokenBeingProcessed1_Call) Return(_a0 ApiIsTokenBeingProcessed1Request) *MockEventAPI_IsTokenBeingProcessed1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEventAPI_IsTokenBeingProcessed1_Call) RunAndReturn(run func(context.Context, string) ApiIsTokenBeingProcessed1Request) *MockEventAPI_IsTokenBeingProcessed1_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenBeingProcessed1Execute provides a mock function with given fields: r
func (_m *MockEventAPI) IsTokenBeingProcessed1Execute(r ApiIsTokenBeingProcessed1Request) (*IsTokenBeingProcessedResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBeingProcessed1Execute")
	}

	var r0 *IsTokenBeingProcessedResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiIsTokenBeingProcessed1Request) (*IsTokenBeingProcessedResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiIsTokenBeingProcessed1Request) *IsTokenBeingProcessedResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IsTokenBeingProcessedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiIsTokenBeingProcessed1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiIsTokenBeingProcessed1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockEventAPI_IsTokenBeingProcessed1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenBeingProcessed1Execute'
type MockEventAPI_IsTokenBeingProcessed1Execute_Call struct {
	*mock.Call
}

// IsTokenBeingProcessed1Execute is a helper method to define mock.On call
//   - r ApiIsTokenBeingProcessed1Request
func (_e *MockEventAPI_Expecter) IsTokenBeingProcessed1Execute(r interface{}) *MockEventAPI_IsTokenBeingProcessed1Execute_Call {
	return &MockEventAPI_IsTokenBeingProcessed1Execute_Call{Call: _e.mock.On("IsTokenBeingProcessed1Execute", r)}
}

func (_c *MockEventAPI_IsTokenBeingProcessed1Execute_Call) Run(run func(r ApiIsTokenBeingProcessed1Request)) *MockEventAPI_IsTokenBeingProcessed1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiIsTokenBeingProcessed1Request))
	})
	return _c
}

func (_c *MockEventAPI_IsTokenBeingProcessed1Execute_Call) Return(_a0 *IsTokenBeingProcessedResponse, _a1 *http.Response, _a2 error) *MockEventAPI_IsTokenBeingProcessed1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockEventAPI_IsTokenBeingProcessed1Execute_Call) RunAndReturn(run func(ApiIsTokenBeingProcessed1Request) (*IsTokenBeingProcessedResponse, *http.Response, error)) *MockEventAPI_IsTokenBeingProcessed1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventAPI creates a new instance of MockEventAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventAPI {
	mock := &MockEventAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
