// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockServiceAPI is an autogenerated mock type for the ServiceAPI type
type MockServiceAPI struct {
	mock.Mock
}

type MockServiceAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServiceAPI) EXPECT() *MockServiceAPI_Expecter {
	return &MockServiceAPI_Expecter{mock: &_m.Mock}
}

// CreateService provides a mock function with given fields: ctx, uuid
func (_m *MockServiceAPI) CreateService(ctx context.Context, uuid string) ApiCreateServiceRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 ApiCreateServiceRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiCreateServiceRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiCreateServiceRequest)
	}

	return r0
}

// MockServiceAPI_CreateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateService'
type MockServiceAPI_CreateService_Call struct {
	*mock.Call
}

// CreateService is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockServiceAPI_Expecter) CreateService(ctx interface{}, uuid interface{}) *MockServiceAPI_CreateService_Call {
	return &MockServiceAPI_CreateService_Call{Call: _e.mock.On("CreateService", ctx, uuid)}
}

func (_c *MockServiceAPI_CreateService_Call) Run(run func(ctx context.Context, uuid string)) *MockServiceAPI_CreateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceAPI_CreateService_Call) Return(_a0 ApiCreateServiceRequest) *MockServiceAPI_CreateService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceAPI_CreateService_Call) RunAndReturn(run func(context.Context, string) ApiCreateServiceRequest) *MockServiceAPI_CreateService_Call {
	_c.Call.Return(run)
	return _c
}

// CreateServiceExecute provides a mock function with given fields: r
func (_m *MockServiceAPI) CreateServiceExecute(r ApiCreateServiceRequest) (*ServiceComponent, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceExecute")
	}

	var r0 *ServiceComponent
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateServiceRequest) (*ServiceComponent, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateServiceRequest) *ServiceComponent); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceComponent)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateServiceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateServiceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceAPI_CreateServiceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceExecute'
type MockServiceAPI_CreateServiceExecute_Call struct {
	*mock.Call
}

// CreateServiceExecute is a helper method to define mock.On call
//   - r ApiCreateServiceRequest
func (_e *MockServiceAPI_Expecter) CreateServiceExecute(r interface{}) *MockServiceAPI_CreateServiceExecute_Call {
	return &MockServiceAPI_CreateServiceExecute_Call{Call: _e.mock.On("CreateServiceExecute", r)}
}

func (_c *MockServiceAPI_CreateServiceExecute_Call) Run(run func(r ApiCreateServiceRequest)) *MockServiceAPI_CreateServiceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateServiceRequest))
	})
	return _c
}

func (_c *MockServiceAPI_CreateServiceExecute_Call) Return(_a0 *ServiceComponent, _a1 *http.Response, _a2 error) *MockServiceAPI_CreateServiceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServiceAPI_CreateServiceExecute_Call) RunAndReturn(run func(ApiCreateServiceRequest) (*ServiceComponent, *http.Response, error)) *MockServiceAPI_CreateServiceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteService provides a mock function with given fields: ctx, uuid
func (_m *MockServiceAPI) DeleteService(ctx context.Context, uuid string) ApiDeleteServiceRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 ApiDeleteServiceRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteServiceRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteServiceRequest)
	}

	return r0
}

// MockServiceAPI_DeleteService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteService'
type MockServiceAPI_DeleteService_Call struct {
	*mock.Call
}

// DeleteService is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockServiceAPI_Expecter) DeleteService(ctx interface{}, uuid interface{}) *MockServiceAPI_DeleteService_Call {
	return &MockServiceAPI_DeleteService_Call{Call: _e.mock.On("DeleteService", ctx, uuid)}
}

func (_c *MockServiceAPI_DeleteService_Call) Run(run func(ctx context.Context, uuid string)) *MockServiceAPI_DeleteService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceAPI_DeleteService_Call) Return(_a0 ApiDeleteServiceRequest) *MockServiceAPI_DeleteService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceAPI_DeleteService_Call) RunAndReturn(run func(context.Context, string) ApiDeleteServiceRequest) *MockServiceAPI_DeleteService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteServiceExecute provides a mock function with given fields: r
func (_m *MockServiceAPI) DeleteServiceExecute(r ApiDeleteServiceRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteServiceRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteServiceRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteServiceRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockServiceAPI_DeleteServiceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceExecute'
type MockServiceAPI_DeleteServiceExecute_Call struct {
	*mock.Call
}

// DeleteServiceExecute is a helper method to define mock.On call
//   - r ApiDeleteServiceRequest
func (_e *MockServiceAPI_Expecter) DeleteServiceExecute(r interface{}) *MockServiceAPI_DeleteServiceExecute_Call {
	return &MockServiceAPI_DeleteServiceExecute_Call{Call: _e.mock.On("DeleteServiceExecute", r)}
}

func (_c *MockServiceAPI_DeleteServiceExecute_Call) Run(run func(r ApiDeleteServiceRequest)) *MockServiceAPI_DeleteServiceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteServiceRequest))
	})
	return _c
}

func (_c *MockServiceAPI_DeleteServiceExecute_Call) Return(_a0 *http.Response, _a1 error) *MockServiceAPI_DeleteServiceExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockServiceAPI_DeleteServiceExecute_Call) RunAndReturn(run func(ApiDeleteServiceRequest) (*http.Response, error)) *MockServiceAPI_DeleteServiceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllServices provides a mock function with given fields: ctx, uuid
func (_m *MockServiceAPI) GetAllServices(ctx context.Context, uuid string) ApiGetAllServicesRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetAllServices")
	}

	var r0 ApiGetAllServicesRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetAllServicesRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetAllServicesRequest)
	}

	return r0
}

// MockServiceAPI_GetAllServices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllServices'
type MockServiceAPI_GetAllServices_Call struct {
	*mock.Call
}

// GetAllServices is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockServiceAPI_Expecter) GetAllServices(ctx interface{}, uuid interface{}) *MockServiceAPI_GetAllServices_Call {
	return &MockServiceAPI_GetAllServices_Call{Call: _e.mock.On("GetAllServices", ctx, uuid)}
}

func (_c *MockServiceAPI_GetAllServices_Call) Run(run func(ctx context.Context, uuid string)) *MockServiceAPI_GetAllServices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceAPI_GetAllServices_Call) Return(_a0 ApiGetAllServicesRequest) *MockServiceAPI_GetAllServices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceAPI_GetAllServices_Call) RunAndReturn(run func(context.Context, string) ApiGetAllServicesRequest) *MockServiceAPI_GetAllServices_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllServicesExecute provides a mock function with given fields: r
func (_m *MockServiceAPI) GetAllServicesExecute(r ApiGetAllServicesRequest) ([]ServiceComponent, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllServicesExecute")
	}

	var r0 []ServiceComponent
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllServicesRequest) ([]ServiceComponent, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllServicesRequest) []ServiceComponent); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ServiceComponent)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllServicesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllServicesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceAPI_GetAllServicesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllServicesExecute'
type MockServiceAPI_GetAllServicesExecute_Call struct {
	*mock.Call
}

// GetAllServicesExecute is a helper method to define mock.On call
//   - r ApiGetAllServicesRequest
func (_e *MockServiceAPI_Expecter) GetAllServicesExecute(r interface{}) *MockServiceAPI_GetAllServicesExecute_Call {
	return &MockServiceAPI_GetAllServicesExecute_Call{Call: _e.mock.On("GetAllServicesExecute", r)}
}

func (_c *MockServiceAPI_GetAllServicesExecute_Call) Run(run func(r ApiGetAllServicesRequest)) *MockServiceAPI_GetAllServicesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllServicesRequest))
	})
	return _c
}

func (_c *MockServiceAPI_GetAllServicesExecute_Call) Return(_a0 []ServiceComponent, _a1 *http.Response, _a2 error) *MockServiceAPI_GetAllServicesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServiceAPI_GetAllServicesExecute_Call) RunAndReturn(run func(ApiGetAllServicesRequest) ([]ServiceComponent, *http.Response, error)) *MockServiceAPI_GetAllServicesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceByUuid provides a mock function with given fields: ctx, uuid
func (_m *MockServiceAPI) GetServiceByUuid(ctx context.Context, uuid string) ApiGetServiceByUuidRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceByUuid")
	}

	var r0 ApiGetServiceByUuidRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetServiceByUuidRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetServiceByUuidRequest)
	}

	return r0
}

// MockServiceAPI_GetServiceByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceByUuid'
type MockServiceAPI_GetServiceByUuid_Call struct {
	*mock.Call
}

// GetServiceByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockServiceAPI_Expecter) GetServiceByUuid(ctx interface{}, uuid interface{}) *MockServiceAPI_GetServiceByUuid_Call {
	return &MockServiceAPI_GetServiceByUuid_Call{Call: _e.mock.On("GetServiceByUuid", ctx, uuid)}
}

func (_c *MockServiceAPI_GetServiceByUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockServiceAPI_GetServiceByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockServiceAPI_GetServiceByUuid_Call) Return(_a0 ApiGetServiceByUuidRequest) *MockServiceAPI_GetServiceByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceAPI_GetServiceByUuid_Call) RunAndReturn(run func(context.Context, string) ApiGetServiceByUuidRequest) *MockServiceAPI_GetServiceByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetServiceByUuidExecute provides a mock function with given fields: r
func (_m *MockServiceAPI) GetServiceByUuidExecute(r ApiGetServiceByUuidRequest) (*ServiceComponent, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceByUuidExecute")
	}

	var r0 *ServiceComponent
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetServiceByUuidRequest) (*ServiceComponent, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetServiceByUuidRequest) *ServiceComponent); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceComponent)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetServiceByUuidRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetServiceByUuidRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceAPI_GetServiceByUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceByUuidExecute'
type MockServiceAPI_GetServiceByUuidExecute_Call struct {
	*mock.Call
}

// GetServiceByUuidExecute is a helper method to define mock.On call
//   - r ApiGetServiceByUuidRequest
func (_e *MockServiceAPI_Expecter) GetServiceByUuidExecute(r interface{}) *MockServiceAPI_GetServiceByUuidExecute_Call {
	return &MockServiceAPI_GetServiceByUuidExecute_Call{Call: _e.mock.On("GetServiceByUuidExecute", r)}
}

func (_c *MockServiceAPI_GetServiceByUuidExecute_Call) Run(run func(r ApiGetServiceByUuidRequest)) *MockServiceAPI_GetServiceByUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetServiceByUuidRequest))
	})
	return _c
}

func (_c *MockServiceAPI_GetServiceByUuidExecute_Call) Return(_a0 *ServiceComponent, _a1 *http.Response, _a2 error) *MockServiceAPI_GetServiceByUuidExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServiceAPI_GetServiceByUuidExecute_Call) RunAndReturn(run func(ApiGetServiceByUuidRequest) (*ServiceComponent, *http.Response, error)) *MockServiceAPI_GetServiceByUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateService provides a mock function with given fields: ctx
func (_m *MockServiceAPI) UpdateService(ctx context.Context) ApiUpdateServiceRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 ApiUpdateServiceRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateServiceRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateServiceRequest)
	}

	return r0
}

// MockServiceAPI_UpdateService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateService'
type MockServiceAPI_UpdateService_Call struct {
	*mock.Call
}

// UpdateService is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockServiceAPI_Expecter) UpdateService(ctx interface{}) *MockServiceAPI_UpdateService_Call {
	return &MockServiceAPI_UpdateService_Call{Call: _e.mock.On("UpdateService", ctx)}
}

func (_c *MockServiceAPI_UpdateService_Call) Run(run func(ctx context.Context)) *MockServiceAPI_UpdateService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockServiceAPI_UpdateService_Call) Return(_a0 ApiUpdateServiceRequest) *MockServiceAPI_UpdateService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServiceAPI_UpdateService_Call) RunAndReturn(run func(context.Context) ApiUpdateServiceRequest) *MockServiceAPI_UpdateService_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateServiceExecute provides a mock function with given fields: r
func (_m *MockServiceAPI) UpdateServiceExecute(r ApiUpdateServiceRequest) (*ServiceComponent, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceExecute")
	}

	var r0 *ServiceComponent
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateServiceRequest) (*ServiceComponent, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateServiceRequest) *ServiceComponent); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ServiceComponent)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateServiceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateServiceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockServiceAPI_UpdateServiceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceExecute'
type MockServiceAPI_UpdateServiceExecute_Call struct {
	*mock.Call
}

// UpdateServiceExecute is a helper method to define mock.On call
//   - r ApiUpdateServiceRequest
func (_e *MockServiceAPI_Expecter) UpdateServiceExecute(r interface{}) *MockServiceAPI_UpdateServiceExecute_Call {
	return &MockServiceAPI_UpdateServiceExecute_Call{Call: _e.mock.On("UpdateServiceExecute", r)}
}

func (_c *MockServiceAPI_UpdateServiceExecute_Call) Run(run func(r ApiUpdateServiceRequest)) *MockServiceAPI_UpdateServiceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateServiceRequest))
	})
	return _c
}

func (_c *MockServiceAPI_UpdateServiceExecute_Call) Return(_a0 *ServiceComponent, _a1 *http.Response, _a2 error) *MockServiceAPI_UpdateServiceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockServiceAPI_UpdateServiceExecute_Call) RunAndReturn(run func(ApiUpdateServiceRequest) (*ServiceComponent, *http.Response, error)) *MockServiceAPI_UpdateServiceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServiceAPI creates a new instance of MockServiceAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServiceAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServiceAPI {
	mock := &MockServiceAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
