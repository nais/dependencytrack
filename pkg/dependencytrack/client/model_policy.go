/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Policy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Policy{}

// Policy struct for Policy
type Policy struct {
	Name string `json:"name" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	Operator string `json:"operator" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	ViolationState string `json:"violationState" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	PolicyConditions []PolicyCondition `json:"policyConditions,omitempty"`
	Projects []Project `json:"projects,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
	Uuid string `json:"uuid"`
	IncludeChildren *bool `json:"includeChildren,omitempty"`
	OnlyLatestProjectVersion *bool `json:"onlyLatestProjectVersion,omitempty"`
	Global *bool `json:"global,omitempty"`
}

type _Policy Policy

// NewPolicy instantiates a new Policy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicy(name string, operator string, violationState string, uuid string) *Policy {
	this := Policy{}
	this.Name = name
	this.Operator = operator
	this.ViolationState = violationState
	this.Uuid = uuid
	return &this
}

// NewPolicyWithDefaults instantiates a new Policy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyWithDefaults() *Policy {
	this := Policy{}
	return &this
}

// GetName returns the Name field value
func (o *Policy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Policy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Policy) SetName(v string) {
	o.Name = v
}

// GetOperator returns the Operator field value
func (o *Policy) GetOperator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operator
}

// GetOperatorOk returns a tuple with the Operator field value
// and a boolean to check if the value has been set.
func (o *Policy) GetOperatorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operator, true
}

// SetOperator sets field value
func (o *Policy) SetOperator(v string) {
	o.Operator = v
}

// GetViolationState returns the ViolationState field value
func (o *Policy) GetViolationState() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ViolationState
}

// GetViolationStateOk returns a tuple with the ViolationState field value
// and a boolean to check if the value has been set.
func (o *Policy) GetViolationStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ViolationState, true
}

// SetViolationState sets field value
func (o *Policy) SetViolationState(v string) {
	o.ViolationState = v
}

// GetPolicyConditions returns the PolicyConditions field value if set, zero value otherwise.
func (o *Policy) GetPolicyConditions() []PolicyCondition {
	if o == nil || IsNil(o.PolicyConditions) {
		var ret []PolicyCondition
		return ret
	}
	return o.PolicyConditions
}

// GetPolicyConditionsOk returns a tuple with the PolicyConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetPolicyConditionsOk() ([]PolicyCondition, bool) {
	if o == nil || IsNil(o.PolicyConditions) {
		return nil, false
	}
	return o.PolicyConditions, true
}

// HasPolicyConditions returns a boolean if a field has been set.
func (o *Policy) HasPolicyConditions() bool {
	if o != nil && !IsNil(o.PolicyConditions) {
		return true
	}

	return false
}

// SetPolicyConditions gets a reference to the given []PolicyCondition and assigns it to the PolicyConditions field.
func (o *Policy) SetPolicyConditions(v []PolicyCondition) {
	o.PolicyConditions = v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *Policy) GetProjects() []Project {
	if o == nil || IsNil(o.Projects) {
		var ret []Project
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetProjectsOk() ([]Project, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *Policy) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []Project and assigns it to the Projects field.
func (o *Policy) SetProjects(v []Project) {
	o.Projects = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Policy) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Policy) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Policy) SetTags(v []Tag) {
	o.Tags = v
}

// GetUuid returns the Uuid field value
func (o *Policy) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Policy) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Policy) SetUuid(v string) {
	o.Uuid = v
}

// GetIncludeChildren returns the IncludeChildren field value if set, zero value otherwise.
func (o *Policy) GetIncludeChildren() bool {
	if o == nil || IsNil(o.IncludeChildren) {
		var ret bool
		return ret
	}
	return *o.IncludeChildren
}

// GetIncludeChildrenOk returns a tuple with the IncludeChildren field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetIncludeChildrenOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeChildren) {
		return nil, false
	}
	return o.IncludeChildren, true
}

// HasIncludeChildren returns a boolean if a field has been set.
func (o *Policy) HasIncludeChildren() bool {
	if o != nil && !IsNil(o.IncludeChildren) {
		return true
	}

	return false
}

// SetIncludeChildren gets a reference to the given bool and assigns it to the IncludeChildren field.
func (o *Policy) SetIncludeChildren(v bool) {
	o.IncludeChildren = &v
}

// GetOnlyLatestProjectVersion returns the OnlyLatestProjectVersion field value if set, zero value otherwise.
func (o *Policy) GetOnlyLatestProjectVersion() bool {
	if o == nil || IsNil(o.OnlyLatestProjectVersion) {
		var ret bool
		return ret
	}
	return *o.OnlyLatestProjectVersion
}

// GetOnlyLatestProjectVersionOk returns a tuple with the OnlyLatestProjectVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetOnlyLatestProjectVersionOk() (*bool, bool) {
	if o == nil || IsNil(o.OnlyLatestProjectVersion) {
		return nil, false
	}
	return o.OnlyLatestProjectVersion, true
}

// HasOnlyLatestProjectVersion returns a boolean if a field has been set.
func (o *Policy) HasOnlyLatestProjectVersion() bool {
	if o != nil && !IsNil(o.OnlyLatestProjectVersion) {
		return true
	}

	return false
}

// SetOnlyLatestProjectVersion gets a reference to the given bool and assigns it to the OnlyLatestProjectVersion field.
func (o *Policy) SetOnlyLatestProjectVersion(v bool) {
	o.OnlyLatestProjectVersion = &v
}

// GetGlobal returns the Global field value if set, zero value otherwise.
func (o *Policy) GetGlobal() bool {
	if o == nil || IsNil(o.Global) {
		var ret bool
		return ret
	}
	return *o.Global
}

// GetGlobalOk returns a tuple with the Global field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetGlobalOk() (*bool, bool) {
	if o == nil || IsNil(o.Global) {
		return nil, false
	}
	return o.Global, true
}

// HasGlobal returns a boolean if a field has been set.
func (o *Policy) HasGlobal() bool {
	if o != nil && !IsNil(o.Global) {
		return true
	}

	return false
}

// SetGlobal gets a reference to the given bool and assigns it to the Global field.
func (o *Policy) SetGlobal(v bool) {
	o.Global = &v
}

func (o Policy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Policy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["operator"] = o.Operator
	toSerialize["violationState"] = o.ViolationState
	if !IsNil(o.PolicyConditions) {
		toSerialize["policyConditions"] = o.PolicyConditions
	}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["uuid"] = o.Uuid
	if !IsNil(o.IncludeChildren) {
		toSerialize["includeChildren"] = o.IncludeChildren
	}
	if !IsNil(o.OnlyLatestProjectVersion) {
		toSerialize["onlyLatestProjectVersion"] = o.OnlyLatestProjectVersion
	}
	if !IsNil(o.Global) {
		toSerialize["global"] = o.Global
	}
	return toSerialize, nil
}

func (o *Policy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"operator",
		"violationState",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicy := _Policy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicy)

	if err != nil {
		return err
	}

	*o = Policy(varPolicy)

	return err
}

type NullablePolicy struct {
	value *Policy
	isSet bool
}

func (v NullablePolicy) Get() *Policy {
	return v.value
}

func (v *NullablePolicy) Set(val *Policy) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy(val *Policy) *NullablePolicy {
	return &NullablePolicy{value: val, isSet: true}
}

func (v NullablePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


