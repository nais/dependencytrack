// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockPermissionAPI is an autogenerated mock type for the PermissionAPI type
type MockPermissionAPI struct {
	mock.Mock
}

type MockPermissionAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPermissionAPI) EXPECT() *MockPermissionAPI_Expecter {
	return &MockPermissionAPI_Expecter{mock: &_m.Mock}
}

// AddPermissionToTeam provides a mock function with given fields: ctx, uuid, permission
func (_m *MockPermissionAPI) AddPermissionToTeam(ctx context.Context, uuid string, permission string) ApiAddPermissionToTeamRequest {
	ret := _m.Called(ctx, uuid, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToTeam")
	}

	var r0 ApiAddPermissionToTeamRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiAddPermissionToTeamRequest); ok {
		r0 = rf(ctx, uuid, permission)
	} else {
		r0 = ret.Get(0).(ApiAddPermissionToTeamRequest)
	}

	return r0
}

// MockPermissionAPI_AddPermissionToTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToTeam'
type MockPermissionAPI_AddPermissionToTeam_Call struct {
	*mock.Call
}

// AddPermissionToTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - permission string
func (_e *MockPermissionAPI_Expecter) AddPermissionToTeam(ctx interface{}, uuid interface{}, permission interface{}) *MockPermissionAPI_AddPermissionToTeam_Call {
	return &MockPermissionAPI_AddPermissionToTeam_Call{Call: _e.mock.On("AddPermissionToTeam", ctx, uuid, permission)}
}

func (_c *MockPermissionAPI_AddPermissionToTeam_Call) Run(run func(ctx context.Context, uuid string, permission string)) *MockPermissionAPI_AddPermissionToTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToTeam_Call) Return(_a0 ApiAddPermissionToTeamRequest) *MockPermissionAPI_AddPermissionToTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToTeam_Call) RunAndReturn(run func(context.Context, string, string) ApiAddPermissionToTeamRequest) *MockPermissionAPI_AddPermissionToTeam_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionToTeamExecute provides a mock function with given fields: r
func (_m *MockPermissionAPI) AddPermissionToTeamExecute(r ApiAddPermissionToTeamRequest) (*Team, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToTeamExecute")
	}

	var r0 *Team
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddPermissionToTeamRequest) (*Team, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddPermissionToTeamRequest) *Team); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddPermissionToTeamRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddPermissionToTeamRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPermissionAPI_AddPermissionToTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToTeamExecute'
type MockPermissionAPI_AddPermissionToTeamExecute_Call struct {
	*mock.Call
}

// AddPermissionToTeamExecute is a helper method to define mock.On call
//   - r ApiAddPermissionToTeamRequest
func (_e *MockPermissionAPI_Expecter) AddPermissionToTeamExecute(r interface{}) *MockPermissionAPI_AddPermissionToTeamExecute_Call {
	return &MockPermissionAPI_AddPermissionToTeamExecute_Call{Call: _e.mock.On("AddPermissionToTeamExecute", r)}
}

func (_c *MockPermissionAPI_AddPermissionToTeamExecute_Call) Run(run func(r ApiAddPermissionToTeamRequest)) *MockPermissionAPI_AddPermissionToTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddPermissionToTeamRequest))
	})
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToTeamExecute_Call) Return(_a0 *Team, _a1 *http.Response, _a2 error) *MockPermissionAPI_AddPermissionToTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToTeamExecute_Call) RunAndReturn(run func(ApiAddPermissionToTeamRequest) (*Team, *http.Response, error)) *MockPermissionAPI_AddPermissionToTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionToUser provides a mock function with given fields: ctx, username, permission
func (_m *MockPermissionAPI) AddPermissionToUser(ctx context.Context, username string, permission string) ApiAddPermissionToUserRequest {
	ret := _m.Called(ctx, username, permission)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToUser")
	}

	var r0 ApiAddPermissionToUserRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiAddPermissionToUserRequest); ok {
		r0 = rf(ctx, username, permission)
	} else {
		r0 = ret.Get(0).(ApiAddPermissionToUserRequest)
	}

	return r0
}

// MockPermissionAPI_AddPermissionToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToUser'
type MockPermissionAPI_AddPermissionToUser_Call struct {
	*mock.Call
}

// AddPermissionToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - permission string
func (_e *MockPermissionAPI_Expecter) AddPermissionToUser(ctx interface{}, username interface{}, permission interface{}) *MockPermissionAPI_AddPermissionToUser_Call {
	return &MockPermissionAPI_AddPermissionToUser_Call{Call: _e.mock.On("AddPermissionToUser", ctx, username, permission)}
}

func (_c *MockPermissionAPI_AddPermissionToUser_Call) Run(run func(ctx context.Context, username string, permission string)) *MockPermissionAPI_AddPermissionToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToUser_Call) Return(_a0 ApiAddPermissionToUserRequest) *MockPermissionAPI_AddPermissionToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToUser_Call) RunAndReturn(run func(context.Context, string, string) ApiAddPermissionToUserRequest) *MockPermissionAPI_AddPermissionToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddPermissionToUserExecute provides a mock function with given fields: r
func (_m *MockPermissionAPI) AddPermissionToUserExecute(r ApiAddPermissionToUserRequest) (*UserPrincipal, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddPermissionToUserExecute")
	}

	var r0 *UserPrincipal
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddPermissionToUserRequest) (*UserPrincipal, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddPermissionToUserRequest) *UserPrincipal); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserPrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddPermissionToUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddPermissionToUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPermissionAPI_AddPermissionToUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPermissionToUserExecute'
type MockPermissionAPI_AddPermissionToUserExecute_Call struct {
	*mock.Call
}

// AddPermissionToUserExecute is a helper method to define mock.On call
//   - r ApiAddPermissionToUserRequest
func (_e *MockPermissionAPI_Expecter) AddPermissionToUserExecute(r interface{}) *MockPermissionAPI_AddPermissionToUserExecute_Call {
	return &MockPermissionAPI_AddPermissionToUserExecute_Call{Call: _e.mock.On("AddPermissionToUserExecute", r)}
}

func (_c *MockPermissionAPI_AddPermissionToUserExecute_Call) Run(run func(r ApiAddPermissionToUserRequest)) *MockPermissionAPI_AddPermissionToUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddPermissionToUserRequest))
	})
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToUserExecute_Call) Return(_a0 *UserPrincipal, _a1 *http.Response, _a2 error) *MockPermissionAPI_AddPermissionToUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPermissionAPI_AddPermissionToUserExecute_Call) RunAndReturn(run func(ApiAddPermissionToUserRequest) (*UserPrincipal, *http.Response, error)) *MockPermissionAPI_AddPermissionToUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPermissions provides a mock function with given fields: ctx
func (_m *MockPermissionAPI) GetAllPermissions(ctx context.Context) ApiGetAllPermissionsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPermissions")
	}

	var r0 ApiGetAllPermissionsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetAllPermissionsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetAllPermissionsRequest)
	}

	return r0
}

// MockPermissionAPI_GetAllPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPermissions'
type MockPermissionAPI_GetAllPermissions_Call struct {
	*mock.Call
}

// GetAllPermissions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPermissionAPI_Expecter) GetAllPermissions(ctx interface{}) *MockPermissionAPI_GetAllPermissions_Call {
	return &MockPermissionAPI_GetAllPermissions_Call{Call: _e.mock.On("GetAllPermissions", ctx)}
}

func (_c *MockPermissionAPI_GetAllPermissions_Call) Run(run func(ctx context.Context)) *MockPermissionAPI_GetAllPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPermissionAPI_GetAllPermissions_Call) Return(_a0 ApiGetAllPermissionsRequest) *MockPermissionAPI_GetAllPermissions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionAPI_GetAllPermissions_Call) RunAndReturn(run func(context.Context) ApiGetAllPermissionsRequest) *MockPermissionAPI_GetAllPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllPermissionsExecute provides a mock function with given fields: r
func (_m *MockPermissionAPI) GetAllPermissionsExecute(r ApiGetAllPermissionsRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllPermissionsExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllPermissionsRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllPermissionsRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllPermissionsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllPermissionsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPermissionAPI_GetAllPermissionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllPermissionsExecute'
type MockPermissionAPI_GetAllPermissionsExecute_Call struct {
	*mock.Call
}

// GetAllPermissionsExecute is a helper method to define mock.On call
//   - r ApiGetAllPermissionsRequest
func (_e *MockPermissionAPI_Expecter) GetAllPermissionsExecute(r interface{}) *MockPermissionAPI_GetAllPermissionsExecute_Call {
	return &MockPermissionAPI_GetAllPermissionsExecute_Call{Call: _e.mock.On("GetAllPermissionsExecute", r)}
}

func (_c *MockPermissionAPI_GetAllPermissionsExecute_Call) Run(run func(r ApiGetAllPermissionsRequest)) *MockPermissionAPI_GetAllPermissionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllPermissionsRequest))
	})
	return _c
}

func (_c *MockPermissionAPI_GetAllPermissionsExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockPermissionAPI_GetAllPermissionsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPermissionAPI_GetAllPermissionsExecute_Call) RunAndReturn(run func(ApiGetAllPermissionsRequest) (string, *http.Response, error)) *MockPermissionAPI_GetAllPermissionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromTeam provides a mock function with given fields: ctx, uuid, permission
func (_m *MockPermissionAPI) RemovePermissionFromTeam(ctx context.Context, uuid string, permission string) ApiRemovePermissionFromTeamRequest {
	ret := _m.Called(ctx, uuid, permission)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromTeam")
	}

	var r0 ApiRemovePermissionFromTeamRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiRemovePermissionFromTeamRequest); ok {
		r0 = rf(ctx, uuid, permission)
	} else {
		r0 = ret.Get(0).(ApiRemovePermissionFromTeamRequest)
	}

	return r0
}

// MockPermissionAPI_RemovePermissionFromTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromTeam'
type MockPermissionAPI_RemovePermissionFromTeam_Call struct {
	*mock.Call
}

// RemovePermissionFromTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - permission string
func (_e *MockPermissionAPI_Expecter) RemovePermissionFromTeam(ctx interface{}, uuid interface{}, permission interface{}) *MockPermissionAPI_RemovePermissionFromTeam_Call {
	return &MockPermissionAPI_RemovePermissionFromTeam_Call{Call: _e.mock.On("RemovePermissionFromTeam", ctx, uuid, permission)}
}

func (_c *MockPermissionAPI_RemovePermissionFromTeam_Call) Run(run func(ctx context.Context, uuid string, permission string)) *MockPermissionAPI_RemovePermissionFromTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromTeam_Call) Return(_a0 ApiRemovePermissionFromTeamRequest) *MockPermissionAPI_RemovePermissionFromTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromTeam_Call) RunAndReturn(run func(context.Context, string, string) ApiRemovePermissionFromTeamRequest) *MockPermissionAPI_RemovePermissionFromTeam_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromTeamExecute provides a mock function with given fields: r
func (_m *MockPermissionAPI) RemovePermissionFromTeamExecute(r ApiRemovePermissionFromTeamRequest) (*Team, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromTeamExecute")
	}

	var r0 *Team
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRemovePermissionFromTeamRequest) (*Team, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRemovePermissionFromTeamRequest) *Team); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRemovePermissionFromTeamRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRemovePermissionFromTeamRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPermissionAPI_RemovePermissionFromTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromTeamExecute'
type MockPermissionAPI_RemovePermissionFromTeamExecute_Call struct {
	*mock.Call
}

// RemovePermissionFromTeamExecute is a helper method to define mock.On call
//   - r ApiRemovePermissionFromTeamRequest
func (_e *MockPermissionAPI_Expecter) RemovePermissionFromTeamExecute(r interface{}) *MockPermissionAPI_RemovePermissionFromTeamExecute_Call {
	return &MockPermissionAPI_RemovePermissionFromTeamExecute_Call{Call: _e.mock.On("RemovePermissionFromTeamExecute", r)}
}

func (_c *MockPermissionAPI_RemovePermissionFromTeamExecute_Call) Run(run func(r ApiRemovePermissionFromTeamRequest)) *MockPermissionAPI_RemovePermissionFromTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRemovePermissionFromTeamRequest))
	})
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromTeamExecute_Call) Return(_a0 *Team, _a1 *http.Response, _a2 error) *MockPermissionAPI_RemovePermissionFromTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromTeamExecute_Call) RunAndReturn(run func(ApiRemovePermissionFromTeamRequest) (*Team, *http.Response, error)) *MockPermissionAPI_RemovePermissionFromTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromUser provides a mock function with given fields: ctx, username, permission
func (_m *MockPermissionAPI) RemovePermissionFromUser(ctx context.Context, username string, permission string) ApiRemovePermissionFromUserRequest {
	ret := _m.Called(ctx, username, permission)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromUser")
	}

	var r0 ApiRemovePermissionFromUserRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiRemovePermissionFromUserRequest); ok {
		r0 = rf(ctx, username, permission)
	} else {
		r0 = ret.Get(0).(ApiRemovePermissionFromUserRequest)
	}

	return r0
}

// MockPermissionAPI_RemovePermissionFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromUser'
type MockPermissionAPI_RemovePermissionFromUser_Call struct {
	*mock.Call
}

// RemovePermissionFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
//   - permission string
func (_e *MockPermissionAPI_Expecter) RemovePermissionFromUser(ctx interface{}, username interface{}, permission interface{}) *MockPermissionAPI_RemovePermissionFromUser_Call {
	return &MockPermissionAPI_RemovePermissionFromUser_Call{Call: _e.mock.On("RemovePermissionFromUser", ctx, username, permission)}
}

func (_c *MockPermissionAPI_RemovePermissionFromUser_Call) Run(run func(ctx context.Context, username string, permission string)) *MockPermissionAPI_RemovePermissionFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromUser_Call) Return(_a0 ApiRemovePermissionFromUserRequest) *MockPermissionAPI_RemovePermissionFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromUser_Call) RunAndReturn(run func(context.Context, string, string) ApiRemovePermissionFromUserRequest) *MockPermissionAPI_RemovePermissionFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemovePermissionFromUserExecute provides a mock function with given fields: r
func (_m *MockPermissionAPI) RemovePermissionFromUserExecute(r ApiRemovePermissionFromUserRequest) (*UserPrincipal, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermissionFromUserExecute")
	}

	var r0 *UserPrincipal
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRemovePermissionFromUserRequest) (*UserPrincipal, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRemovePermissionFromUserRequest) *UserPrincipal); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserPrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRemovePermissionFromUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRemovePermissionFromUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPermissionAPI_RemovePermissionFromUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemovePermissionFromUserExecute'
type MockPermissionAPI_RemovePermissionFromUserExecute_Call struct {
	*mock.Call
}

// RemovePermissionFromUserExecute is a helper method to define mock.On call
//   - r ApiRemovePermissionFromUserRequest
func (_e *MockPermissionAPI_Expecter) RemovePermissionFromUserExecute(r interface{}) *MockPermissionAPI_RemovePermissionFromUserExecute_Call {
	return &MockPermissionAPI_RemovePermissionFromUserExecute_Call{Call: _e.mock.On("RemovePermissionFromUserExecute", r)}
}

func (_c *MockPermissionAPI_RemovePermissionFromUserExecute_Call) Run(run func(r ApiRemovePermissionFromUserRequest)) *MockPermissionAPI_RemovePermissionFromUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRemovePermissionFromUserRequest))
	})
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromUserExecute_Call) Return(_a0 *UserPrincipal, _a1 *http.Response, _a2 error) *MockPermissionAPI_RemovePermissionFromUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPermissionAPI_RemovePermissionFromUserExecute_Call) RunAndReturn(run func(ApiRemovePermissionFromUserRequest) (*UserPrincipal, *http.Response, error)) *MockPermissionAPI_RemovePermissionFromUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPermissionAPI creates a new instance of MockPermissionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPermissionAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPermissionAPI {
	mock := &MockPermissionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
