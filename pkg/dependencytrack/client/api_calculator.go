/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type CalculatorAPI interface {

	/*
	GetCvssScores Returns the CVSS base score, impact sub-score and exploitability sub-score

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetCvssScoresRequest
	*/
	GetCvssScores(ctx context.Context) ApiGetCvssScoresRequest

	// GetCvssScoresExecute executes the request
	//  @return Score
	GetCvssScoresExecute(r ApiGetCvssScoresRequest) (*Score, *http.Response, error)

	/*
	GetOwaspRRScores Returns the OWASP Risk Rating likelihood score, technical impact score and business impact score

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetOwaspRRScoresRequest
	*/
	GetOwaspRRScores(ctx context.Context) ApiGetOwaspRRScoresRequest

	// GetOwaspRRScoresExecute executes the request
	//  @return Score
	GetOwaspRRScoresExecute(r ApiGetOwaspRRScoresRequest) (*Score, *http.Response, error)
}

// CalculatorAPIService CalculatorAPI service
type CalculatorAPIService service

type ApiGetCvssScoresRequest struct {
	ctx context.Context
	ApiService CalculatorAPI
	vector *string
}

// A valid CVSSv2 or CVSSv3 vector
func (r ApiGetCvssScoresRequest) Vector(vector string) ApiGetCvssScoresRequest {
	r.vector = &vector
	return r
}

func (r ApiGetCvssScoresRequest) Execute() (*Score, *http.Response, error) {
	return r.ApiService.GetCvssScoresExecute(r)
}

/*
GetCvssScores Returns the CVSS base score, impact sub-score and exploitability sub-score

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetCvssScoresRequest
*/
func (a *CalculatorAPIService) GetCvssScores(ctx context.Context) ApiGetCvssScoresRequest {
	return ApiGetCvssScoresRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Score
func (a *CalculatorAPIService) GetCvssScoresExecute(r ApiGetCvssScoresRequest) (*Score, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Score
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalculatorAPIService.GetCvssScores")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/calculator/cvss"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vector == nil {
		return localVarReturnValue, nil, reportError("vector is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "vector", r.vector, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOwaspRRScoresRequest struct {
	ctx context.Context
	ApiService CalculatorAPI
	vector *string
}

// A valid OWASP Risk Rating vector
func (r ApiGetOwaspRRScoresRequest) Vector(vector string) ApiGetOwaspRRScoresRequest {
	r.vector = &vector
	return r
}

func (r ApiGetOwaspRRScoresRequest) Execute() (*Score, *http.Response, error) {
	return r.ApiService.GetOwaspRRScoresExecute(r)
}

/*
GetOwaspRRScores Returns the OWASP Risk Rating likelihood score, technical impact score and business impact score

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOwaspRRScoresRequest
*/
func (a *CalculatorAPIService) GetOwaspRRScores(ctx context.Context) ApiGetOwaspRRScoresRequest {
	return ApiGetOwaspRRScoresRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Score
func (a *CalculatorAPIService) GetOwaspRRScoresExecute(r ApiGetOwaspRRScoresRequest) (*Score, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Score
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CalculatorAPIService.GetOwaspRRScores")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/calculator/owasp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.vector == nil {
		return localVarReturnValue, nil, reportError("vector is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "vector", r.vector, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
