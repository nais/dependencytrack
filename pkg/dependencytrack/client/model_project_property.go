/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectProperty{}

// ProjectProperty struct for ProjectProperty
type ProjectProperty struct {
	GroupName *string `json:"groupName,omitempty" validate:"regexp=[\\\\P{Cc}]+"`
	PropertyName *string `json:"propertyName,omitempty" validate:"regexp=[\\\\P{Cc}]+"`
	PropertyValue *string `json:"propertyValue,omitempty" validate:"regexp=[\\\\P{Cc}]+"`
	PropertyType string `json:"propertyType"`
	Description *string `json:"description,omitempty" validate:"regexp=[\\\\P{Cc}]+"`
}

type _ProjectProperty ProjectProperty

// NewProjectProperty instantiates a new ProjectProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectProperty(propertyType string) *ProjectProperty {
	this := ProjectProperty{}
	this.PropertyType = propertyType
	return &this
}

// NewProjectPropertyWithDefaults instantiates a new ProjectProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectPropertyWithDefaults() *ProjectProperty {
	this := ProjectProperty{}
	return &this
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *ProjectProperty) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProperty) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *ProjectProperty) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *ProjectProperty) SetGroupName(v string) {
	o.GroupName = &v
}

// GetPropertyName returns the PropertyName field value if set, zero value otherwise.
func (o *ProjectProperty) GetPropertyName() string {
	if o == nil || IsNil(o.PropertyName) {
		var ret string
		return ret
	}
	return *o.PropertyName
}

// GetPropertyNameOk returns a tuple with the PropertyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProperty) GetPropertyNameOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyName) {
		return nil, false
	}
	return o.PropertyName, true
}

// HasPropertyName returns a boolean if a field has been set.
func (o *ProjectProperty) HasPropertyName() bool {
	if o != nil && !IsNil(o.PropertyName) {
		return true
	}

	return false
}

// SetPropertyName gets a reference to the given string and assigns it to the PropertyName field.
func (o *ProjectProperty) SetPropertyName(v string) {
	o.PropertyName = &v
}

// GetPropertyValue returns the PropertyValue field value if set, zero value otherwise.
func (o *ProjectProperty) GetPropertyValue() string {
	if o == nil || IsNil(o.PropertyValue) {
		var ret string
		return ret
	}
	return *o.PropertyValue
}

// GetPropertyValueOk returns a tuple with the PropertyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProperty) GetPropertyValueOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyValue) {
		return nil, false
	}
	return o.PropertyValue, true
}

// HasPropertyValue returns a boolean if a field has been set.
func (o *ProjectProperty) HasPropertyValue() bool {
	if o != nil && !IsNil(o.PropertyValue) {
		return true
	}

	return false
}

// SetPropertyValue gets a reference to the given string and assigns it to the PropertyValue field.
func (o *ProjectProperty) SetPropertyValue(v string) {
	o.PropertyValue = &v
}

// GetPropertyType returns the PropertyType field value
func (o *ProjectProperty) GetPropertyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PropertyType
}

// GetPropertyTypeOk returns a tuple with the PropertyType field value
// and a boolean to check if the value has been set.
func (o *ProjectProperty) GetPropertyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PropertyType, true
}

// SetPropertyType sets field value
func (o *ProjectProperty) SetPropertyType(v string) {
	o.PropertyType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProjectProperty) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProperty) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProjectProperty) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProjectProperty) SetDescription(v string) {
	o.Description = &v
}

func (o ProjectProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	if !IsNil(o.PropertyName) {
		toSerialize["propertyName"] = o.PropertyName
	}
	if !IsNil(o.PropertyValue) {
		toSerialize["propertyValue"] = o.PropertyValue
	}
	toSerialize["propertyType"] = o.PropertyType
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

func (o *ProjectProperty) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"propertyType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectProperty := _ProjectProperty{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectProperty)

	if err != nil {
		return err
	}

	*o = ProjectProperty(varProjectProperty)

	return err
}

type NullableProjectProperty struct {
	value *ProjectProperty
	isSet bool
}

func (v NullableProjectProperty) Get() *ProjectProperty {
	return v.value
}

func (v *NullableProjectProperty) Set(val *ProjectProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectProperty(val *ProjectProperty) *NullableProjectProperty {
	return &NullableProjectProperty{value: val, isSet: true}
}

func (v NullableProjectProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


