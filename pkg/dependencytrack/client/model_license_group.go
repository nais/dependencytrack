/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LicenseGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseGroup{}

// LicenseGroup struct for LicenseGroup
type LicenseGroup struct {
	Name *string `json:"name,omitempty" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	Licenses []License `json:"licenses,omitempty"`
	RiskWeight *int32 `json:"riskWeight,omitempty"`
	Uuid string `json:"uuid"`
}

type _LicenseGroup LicenseGroup

// NewLicenseGroup instantiates a new LicenseGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseGroup(uuid string) *LicenseGroup {
	this := LicenseGroup{}
	this.Uuid = uuid
	return &this
}

// NewLicenseGroupWithDefaults instantiates a new LicenseGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseGroupWithDefaults() *LicenseGroup {
	this := LicenseGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LicenseGroup) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGroup) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LicenseGroup) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LicenseGroup) SetName(v string) {
	o.Name = &v
}

// GetLicenses returns the Licenses field value if set, zero value otherwise.
func (o *LicenseGroup) GetLicenses() []License {
	if o == nil || IsNil(o.Licenses) {
		var ret []License
		return ret
	}
	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGroup) GetLicensesOk() ([]License, bool) {
	if o == nil || IsNil(o.Licenses) {
		return nil, false
	}
	return o.Licenses, true
}

// HasLicenses returns a boolean if a field has been set.
func (o *LicenseGroup) HasLicenses() bool {
	if o != nil && !IsNil(o.Licenses) {
		return true
	}

	return false
}

// SetLicenses gets a reference to the given []License and assigns it to the Licenses field.
func (o *LicenseGroup) SetLicenses(v []License) {
	o.Licenses = v
}

// GetRiskWeight returns the RiskWeight field value if set, zero value otherwise.
func (o *LicenseGroup) GetRiskWeight() int32 {
	if o == nil || IsNil(o.RiskWeight) {
		var ret int32
		return ret
	}
	return *o.RiskWeight
}

// GetRiskWeightOk returns a tuple with the RiskWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseGroup) GetRiskWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.RiskWeight) {
		return nil, false
	}
	return o.RiskWeight, true
}

// HasRiskWeight returns a boolean if a field has been set.
func (o *LicenseGroup) HasRiskWeight() bool {
	if o != nil && !IsNil(o.RiskWeight) {
		return true
	}

	return false
}

// SetRiskWeight gets a reference to the given int32 and assigns it to the RiskWeight field.
func (o *LicenseGroup) SetRiskWeight(v int32) {
	o.RiskWeight = &v
}

// GetUuid returns the Uuid field value
func (o *LicenseGroup) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *LicenseGroup) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *LicenseGroup) SetUuid(v string) {
	o.Uuid = v
}

func (o LicenseGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Licenses) {
		toSerialize["licenses"] = o.Licenses
	}
	if !IsNil(o.RiskWeight) {
		toSerialize["riskWeight"] = o.RiskWeight
	}
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *LicenseGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicenseGroup := _LicenseGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLicenseGroup)

	if err != nil {
		return err
	}

	*o = LicenseGroup(varLicenseGroup)

	return err
}

type NullableLicenseGroup struct {
	value *LicenseGroup
	isSet bool
}

func (v NullableLicenseGroup) Get() *LicenseGroup {
	return v.value
}

func (v *NullableLicenseGroup) Set(val *LicenseGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseGroup(val *LicenseGroup) *NullableLicenseGroup {
	return &NullableLicenseGroup{value: val, isSet: true}
}

func (v NullableLicenseGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


