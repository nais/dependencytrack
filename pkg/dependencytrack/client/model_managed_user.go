/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ManagedUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedUser{}

// ManagedUser struct for ManagedUser
type ManagedUser struct {
	Username string `json:"username" validate:"regexp=[\\\\P{Cc}]+"`
	LastPasswordChange int64 `json:"lastPasswordChange"`
	Fullname *string `json:"fullname,omitempty" validate:"regexp=[\\\\P{Cc}]+"`
	Email *string `json:"email,omitempty" validate:"regexp=[\\\\P{Cc}]+"`
	Suspended *bool `json:"suspended,omitempty"`
	ForcePasswordChange *bool `json:"forcePasswordChange,omitempty"`
	NonExpiryPassword *bool `json:"nonExpiryPassword,omitempty"`
	Teams []Team `json:"teams,omitempty"`
	Permissions []Permission `json:"permissions,omitempty"`
	NewPassword *string `json:"newPassword,omitempty"`
	ConfirmPassword *string `json:"confirmPassword,omitempty"`
}

type _ManagedUser ManagedUser

// NewManagedUser instantiates a new ManagedUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedUser(username string, lastPasswordChange int64) *ManagedUser {
	this := ManagedUser{}
	this.Username = username
	this.LastPasswordChange = lastPasswordChange
	return &this
}

// NewManagedUserWithDefaults instantiates a new ManagedUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedUserWithDefaults() *ManagedUser {
	this := ManagedUser{}
	return &this
}

// GetUsername returns the Username field value
func (o *ManagedUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *ManagedUser) SetUsername(v string) {
	o.Username = v
}

// GetLastPasswordChange returns the LastPasswordChange field value
func (o *ManagedUser) GetLastPasswordChange() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastPasswordChange
}

// GetLastPasswordChangeOk returns a tuple with the LastPasswordChange field value
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetLastPasswordChangeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastPasswordChange, true
}

// SetLastPasswordChange sets field value
func (o *ManagedUser) SetLastPasswordChange(v int64) {
	o.LastPasswordChange = v
}

// GetFullname returns the Fullname field value if set, zero value otherwise.
func (o *ManagedUser) GetFullname() string {
	if o == nil || IsNil(o.Fullname) {
		var ret string
		return ret
	}
	return *o.Fullname
}

// GetFullnameOk returns a tuple with the Fullname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetFullnameOk() (*string, bool) {
	if o == nil || IsNil(o.Fullname) {
		return nil, false
	}
	return o.Fullname, true
}

// HasFullname returns a boolean if a field has been set.
func (o *ManagedUser) HasFullname() bool {
	if o != nil && !IsNil(o.Fullname) {
		return true
	}

	return false
}

// SetFullname gets a reference to the given string and assigns it to the Fullname field.
func (o *ManagedUser) SetFullname(v string) {
	o.Fullname = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ManagedUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ManagedUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ManagedUser) SetEmail(v string) {
	o.Email = &v
}

// GetSuspended returns the Suspended field value if set, zero value otherwise.
func (o *ManagedUser) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended) {
		var ret bool
		return ret
	}
	return *o.Suspended
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetSuspendedOk() (*bool, bool) {
	if o == nil || IsNil(o.Suspended) {
		return nil, false
	}
	return o.Suspended, true
}

// HasSuspended returns a boolean if a field has been set.
func (o *ManagedUser) HasSuspended() bool {
	if o != nil && !IsNil(o.Suspended) {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given bool and assigns it to the Suspended field.
func (o *ManagedUser) SetSuspended(v bool) {
	o.Suspended = &v
}

// GetForcePasswordChange returns the ForcePasswordChange field value if set, zero value otherwise.
func (o *ManagedUser) GetForcePasswordChange() bool {
	if o == nil || IsNil(o.ForcePasswordChange) {
		var ret bool
		return ret
	}
	return *o.ForcePasswordChange
}

// GetForcePasswordChangeOk returns a tuple with the ForcePasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetForcePasswordChangeOk() (*bool, bool) {
	if o == nil || IsNil(o.ForcePasswordChange) {
		return nil, false
	}
	return o.ForcePasswordChange, true
}

// HasForcePasswordChange returns a boolean if a field has been set.
func (o *ManagedUser) HasForcePasswordChange() bool {
	if o != nil && !IsNil(o.ForcePasswordChange) {
		return true
	}

	return false
}

// SetForcePasswordChange gets a reference to the given bool and assigns it to the ForcePasswordChange field.
func (o *ManagedUser) SetForcePasswordChange(v bool) {
	o.ForcePasswordChange = &v
}

// GetNonExpiryPassword returns the NonExpiryPassword field value if set, zero value otherwise.
func (o *ManagedUser) GetNonExpiryPassword() bool {
	if o == nil || IsNil(o.NonExpiryPassword) {
		var ret bool
		return ret
	}
	return *o.NonExpiryPassword
}

// GetNonExpiryPasswordOk returns a tuple with the NonExpiryPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetNonExpiryPasswordOk() (*bool, bool) {
	if o == nil || IsNil(o.NonExpiryPassword) {
		return nil, false
	}
	return o.NonExpiryPassword, true
}

// HasNonExpiryPassword returns a boolean if a field has been set.
func (o *ManagedUser) HasNonExpiryPassword() bool {
	if o != nil && !IsNil(o.NonExpiryPassword) {
		return true
	}

	return false
}

// SetNonExpiryPassword gets a reference to the given bool and assigns it to the NonExpiryPassword field.
func (o *ManagedUser) SetNonExpiryPassword(v bool) {
	o.NonExpiryPassword = &v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *ManagedUser) GetTeams() []Team {
	if o == nil || IsNil(o.Teams) {
		var ret []Team
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetTeamsOk() ([]Team, bool) {
	if o == nil || IsNil(o.Teams) {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *ManagedUser) HasTeams() bool {
	if o != nil && !IsNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []Team and assigns it to the Teams field.
func (o *ManagedUser) SetTeams(v []Team) {
	o.Teams = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ManagedUser) GetPermissions() []Permission {
	if o == nil || IsNil(o.Permissions) {
		var ret []Permission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetPermissionsOk() ([]Permission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ManagedUser) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Permission and assigns it to the Permissions field.
func (o *ManagedUser) SetPermissions(v []Permission) {
	o.Permissions = v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *ManagedUser) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword) {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetNewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NewPassword) {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *ManagedUser) HasNewPassword() bool {
	if o != nil && !IsNil(o.NewPassword) {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *ManagedUser) SetNewPassword(v string) {
	o.NewPassword = &v
}

// GetConfirmPassword returns the ConfirmPassword field value if set, zero value otherwise.
func (o *ManagedUser) GetConfirmPassword() string {
	if o == nil || IsNil(o.ConfirmPassword) {
		var ret string
		return ret
	}
	return *o.ConfirmPassword
}

// GetConfirmPasswordOk returns a tuple with the ConfirmPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManagedUser) GetConfirmPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ConfirmPassword) {
		return nil, false
	}
	return o.ConfirmPassword, true
}

// HasConfirmPassword returns a boolean if a field has been set.
func (o *ManagedUser) HasConfirmPassword() bool {
	if o != nil && !IsNil(o.ConfirmPassword) {
		return true
	}

	return false
}

// SetConfirmPassword gets a reference to the given string and assigns it to the ConfirmPassword field.
func (o *ManagedUser) SetConfirmPassword(v string) {
	o.ConfirmPassword = &v
}

func (o ManagedUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["lastPasswordChange"] = o.LastPasswordChange
	if !IsNil(o.Fullname) {
		toSerialize["fullname"] = o.Fullname
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Suspended) {
		toSerialize["suspended"] = o.Suspended
	}
	if !IsNil(o.ForcePasswordChange) {
		toSerialize["forcePasswordChange"] = o.ForcePasswordChange
	}
	if !IsNil(o.NonExpiryPassword) {
		toSerialize["nonExpiryPassword"] = o.NonExpiryPassword
	}
	if !IsNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.NewPassword) {
		toSerialize["newPassword"] = o.NewPassword
	}
	if !IsNil(o.ConfirmPassword) {
		toSerialize["confirmPassword"] = o.ConfirmPassword
	}
	return toSerialize, nil
}

func (o *ManagedUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"lastPasswordChange",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varManagedUser := _ManagedUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varManagedUser)

	if err != nil {
		return err
	}

	*o = ManagedUser(varManagedUser)

	return err
}

type NullableManagedUser struct {
	value *ManagedUser
	isSet bool
}

func (v NullableManagedUser) Get() *ManagedUser {
	return v.value
}

func (v *NullableManagedUser) Set(val *ManagedUser) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedUser) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedUser(val *ManagedUser) *NullableManagedUser {
	return &NullableManagedUser{value: val, isSet: true}
}

func (v NullableManagedUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


