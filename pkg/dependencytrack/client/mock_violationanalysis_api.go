// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockViolationanalysisAPI is an autogenerated mock type for the ViolationanalysisAPI type
type MockViolationanalysisAPI struct {
	mock.Mock
}

type MockViolationanalysisAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockViolationanalysisAPI) EXPECT() *MockViolationanalysisAPI_Expecter {
	return &MockViolationanalysisAPI_Expecter{mock: &_m.Mock}
}

// RetrieveAnalysis1 provides a mock function with given fields: ctx
func (_m *MockViolationanalysisAPI) RetrieveAnalysis1(ctx context.Context) ApiRetrieveAnalysis1Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAnalysis1")
	}

	var r0 ApiRetrieveAnalysis1Request
	if rf, ok := ret.Get(0).(func(context.Context) ApiRetrieveAnalysis1Request); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiRetrieveAnalysis1Request)
	}

	return r0
}

// MockViolationanalysisAPI_RetrieveAnalysis1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAnalysis1'
type MockViolationanalysisAPI_RetrieveAnalysis1_Call struct {
	*mock.Call
}

// RetrieveAnalysis1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockViolationanalysisAPI_Expecter) RetrieveAnalysis1(ctx interface{}) *MockViolationanalysisAPI_RetrieveAnalysis1_Call {
	return &MockViolationanalysisAPI_RetrieveAnalysis1_Call{Call: _e.mock.On("RetrieveAnalysis1", ctx)}
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1_Call) Run(run func(ctx context.Context)) *MockViolationanalysisAPI_RetrieveAnalysis1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1_Call) Return(_a0 ApiRetrieveAnalysis1Request) *MockViolationanalysisAPI_RetrieveAnalysis1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1_Call) RunAndReturn(run func(context.Context) ApiRetrieveAnalysis1Request) *MockViolationanalysisAPI_RetrieveAnalysis1_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAnalysis1Execute provides a mock function with given fields: r
func (_m *MockViolationanalysisAPI) RetrieveAnalysis1Execute(r ApiRetrieveAnalysis1Request) (*ViolationAnalysis, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAnalysis1Execute")
	}

	var r0 *ViolationAnalysis
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRetrieveAnalysis1Request) (*ViolationAnalysis, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRetrieveAnalysis1Request) *ViolationAnalysis); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ViolationAnalysis)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRetrieveAnalysis1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRetrieveAnalysis1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAnalysis1Execute'
type MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call struct {
	*mock.Call
}

// RetrieveAnalysis1Execute is a helper method to define mock.On call
//   - r ApiRetrieveAnalysis1Request
func (_e *MockViolationanalysisAPI_Expecter) RetrieveAnalysis1Execute(r interface{}) *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call {
	return &MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call{Call: _e.mock.On("RetrieveAnalysis1Execute", r)}
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call) Run(run func(r ApiRetrieveAnalysis1Request)) *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRetrieveAnalysis1Request))
	})
	return _c
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call) Return(_a0 *ViolationAnalysis, _a1 *http.Response, _a2 error) *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call) RunAndReturn(run func(ApiRetrieveAnalysis1Request) (*ViolationAnalysis, *http.Response, error)) *MockViolationanalysisAPI_RetrieveAnalysis1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalysis1 provides a mock function with given fields: ctx
func (_m *MockViolationanalysisAPI) UpdateAnalysis1(ctx context.Context) ApiUpdateAnalysis1Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysis1")
	}

	var r0 ApiUpdateAnalysis1Request
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateAnalysis1Request); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateAnalysis1Request)
	}

	return r0
}

// MockViolationanalysisAPI_UpdateAnalysis1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalysis1'
type MockViolationanalysisAPI_UpdateAnalysis1_Call struct {
	*mock.Call
}

// UpdateAnalysis1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockViolationanalysisAPI_Expecter) UpdateAnalysis1(ctx interface{}) *MockViolationanalysisAPI_UpdateAnalysis1_Call {
	return &MockViolationanalysisAPI_UpdateAnalysis1_Call{Call: _e.mock.On("UpdateAnalysis1", ctx)}
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1_Call) Run(run func(ctx context.Context)) *MockViolationanalysisAPI_UpdateAnalysis1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1_Call) Return(_a0 ApiUpdateAnalysis1Request) *MockViolationanalysisAPI_UpdateAnalysis1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1_Call) RunAndReturn(run func(context.Context) ApiUpdateAnalysis1Request) *MockViolationanalysisAPI_UpdateAnalysis1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalysis1Execute provides a mock function with given fields: r
func (_m *MockViolationanalysisAPI) UpdateAnalysis1Execute(r ApiUpdateAnalysis1Request) (*ViolationAnalysis, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysis1Execute")
	}

	var r0 *ViolationAnalysis
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateAnalysis1Request) (*ViolationAnalysis, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateAnalysis1Request) *ViolationAnalysis); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ViolationAnalysis)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateAnalysis1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateAnalysis1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockViolationanalysisAPI_UpdateAnalysis1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalysis1Execute'
type MockViolationanalysisAPI_UpdateAnalysis1Execute_Call struct {
	*mock.Call
}

// UpdateAnalysis1Execute is a helper method to define mock.On call
//   - r ApiUpdateAnalysis1Request
func (_e *MockViolationanalysisAPI_Expecter) UpdateAnalysis1Execute(r interface{}) *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call {
	return &MockViolationanalysisAPI_UpdateAnalysis1Execute_Call{Call: _e.mock.On("UpdateAnalysis1Execute", r)}
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call) Run(run func(r ApiUpdateAnalysis1Request)) *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateAnalysis1Request))
	})
	return _c
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call) Return(_a0 *ViolationAnalysis, _a1 *http.Response, _a2 error) *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call) RunAndReturn(run func(ApiUpdateAnalysis1Request) (*ViolationAnalysis, *http.Response, error)) *MockViolationanalysisAPI_UpdateAnalysis1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockViolationanalysisAPI creates a new instance of MockViolationanalysisAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockViolationanalysisAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockViolationanalysisAPI {
	mock := &MockViolationanalysisAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
