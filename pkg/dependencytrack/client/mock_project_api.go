// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockProjectAPI is an autogenerated mock type for the ProjectAPI type
type MockProjectAPI struct {
	mock.Mock
}

type MockProjectAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectAPI) EXPECT() *MockProjectAPI_Expecter {
	return &MockProjectAPI_Expecter{mock: &_m.Mock}
}

// CloneProject provides a mock function with given fields: ctx
func (_m *MockProjectAPI) CloneProject(ctx context.Context) ApiCloneProjectRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CloneProject")
	}

	var r0 ApiCloneProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCloneProjectRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCloneProjectRequest)
	}

	return r0
}

// MockProjectAPI_CloneProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneProject'
type MockProjectAPI_CloneProject_Call struct {
	*mock.Call
}

// CloneProject is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) CloneProject(ctx interface{}) *MockProjectAPI_CloneProject_Call {
	return &MockProjectAPI_CloneProject_Call{Call: _e.mock.On("CloneProject", ctx)}
}

func (_c *MockProjectAPI_CloneProject_Call) Run(run func(ctx context.Context)) *MockProjectAPI_CloneProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectAPI_CloneProject_Call) Return(_a0 ApiCloneProjectRequest) *MockProjectAPI_CloneProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_CloneProject_Call) RunAndReturn(run func(context.Context) ApiCloneProjectRequest) *MockProjectAPI_CloneProject_Call {
	_c.Call.Return(run)
	return _c
}

// CloneProjectExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) CloneProjectExecute(r ApiCloneProjectRequest) (*BomUploadResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CloneProjectExecute")
	}

	var r0 *BomUploadResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCloneProjectRequest) (*BomUploadResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCloneProjectRequest) *BomUploadResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BomUploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCloneProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCloneProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_CloneProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloneProjectExecute'
type MockProjectAPI_CloneProjectExecute_Call struct {
	*mock.Call
}

// CloneProjectExecute is a helper method to define mock.On call
//   - r ApiCloneProjectRequest
func (_e *MockProjectAPI_Expecter) CloneProjectExecute(r interface{}) *MockProjectAPI_CloneProjectExecute_Call {
	return &MockProjectAPI_CloneProjectExecute_Call{Call: _e.mock.On("CloneProjectExecute", r)}
}

func (_c *MockProjectAPI_CloneProjectExecute_Call) Run(run func(r ApiCloneProjectRequest)) *MockProjectAPI_CloneProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCloneProjectRequest))
	})
	return _c
}

func (_c *MockProjectAPI_CloneProjectExecute_Call) Return(_a0 *BomUploadResponse, _a1 *http.Response, _a2 error) *MockProjectAPI_CloneProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_CloneProjectExecute_Call) RunAndReturn(run func(ApiCloneProjectRequest) (*BomUploadResponse, *http.Response, error)) *MockProjectAPI_CloneProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProject provides a mock function with given fields: ctx
func (_m *MockProjectAPI) CreateProject(ctx context.Context) ApiCreateProjectRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 ApiCreateProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateProjectRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateProjectRequest)
	}

	return r0
}

// MockProjectAPI_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockProjectAPI_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) CreateProject(ctx interface{}) *MockProjectAPI_CreateProject_Call {
	return &MockProjectAPI_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx)}
}

func (_c *MockProjectAPI_CreateProject_Call) Run(run func(ctx context.Context)) *MockProjectAPI_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectAPI_CreateProject_Call) Return(_a0 ApiCreateProjectRequest) *MockProjectAPI_CreateProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_CreateProject_Call) RunAndReturn(run func(context.Context) ApiCreateProjectRequest) *MockProjectAPI_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) CreateProjectExecute(r ApiCreateProjectRequest) (*Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectExecute")
	}

	var r0 *Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateProjectRequest) (*Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateProjectRequest) *Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_CreateProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectExecute'
type MockProjectAPI_CreateProjectExecute_Call struct {
	*mock.Call
}

// CreateProjectExecute is a helper method to define mock.On call
//   - r ApiCreateProjectRequest
func (_e *MockProjectAPI_Expecter) CreateProjectExecute(r interface{}) *MockProjectAPI_CreateProjectExecute_Call {
	return &MockProjectAPI_CreateProjectExecute_Call{Call: _e.mock.On("CreateProjectExecute", r)}
}

func (_c *MockProjectAPI_CreateProjectExecute_Call) Run(run func(r ApiCreateProjectRequest)) *MockProjectAPI_CreateProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateProjectRequest))
	})
	return _c
}

func (_c *MockProjectAPI_CreateProjectExecute_Call) Return(_a0 *Project, _a1 *http.Response, _a2 error) *MockProjectAPI_CreateProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_CreateProjectExecute_Call) RunAndReturn(run func(ApiCreateProjectRequest) (*Project, *http.Response, error)) *MockProjectAPI_CreateProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, uuid
func (_m *MockProjectAPI) DeleteProject(ctx context.Context, uuid string) ApiDeleteProjectRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 ApiDeleteProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteProjectRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteProjectRequest)
	}

	return r0
}

// MockProjectAPI_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockProjectAPI_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) DeleteProject(ctx interface{}, uuid interface{}) *MockProjectAPI_DeleteProject_Call {
	return &MockProjectAPI_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, uuid)}
}

func (_c *MockProjectAPI_DeleteProject_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectAPI_DeleteProject_Call) Return(_a0 ApiDeleteProjectRequest) *MockProjectAPI_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_DeleteProject_Call) RunAndReturn(run func(context.Context, string) ApiDeleteProjectRequest) *MockProjectAPI_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) DeleteProjectExecute(r ApiDeleteProjectRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteProjectRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteProjectRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteProjectRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectAPI_DeleteProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectExecute'
type MockProjectAPI_DeleteProjectExecute_Call struct {
	*mock.Call
}

// DeleteProjectExecute is a helper method to define mock.On call
//   - r ApiDeleteProjectRequest
func (_e *MockProjectAPI_Expecter) DeleteProjectExecute(r interface{}) *MockProjectAPI_DeleteProjectExecute_Call {
	return &MockProjectAPI_DeleteProjectExecute_Call{Call: _e.mock.On("DeleteProjectExecute", r)}
}

func (_c *MockProjectAPI_DeleteProjectExecute_Call) Run(run func(r ApiDeleteProjectRequest)) *MockProjectAPI_DeleteProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteProjectRequest))
	})
	return _c
}

func (_c *MockProjectAPI_DeleteProjectExecute_Call) Return(_a0 *http.Response, _a1 error) *MockProjectAPI_DeleteProjectExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectAPI_DeleteProjectExecute_Call) RunAndReturn(run func(ApiDeleteProjectRequest) (*http.Response, error)) *MockProjectAPI_DeleteProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjects provides a mock function with given fields: ctx
func (_m *MockProjectAPI) DeleteProjects(ctx context.Context) ApiDeleteProjectsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjects")
	}

	var r0 ApiDeleteProjectsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiDeleteProjectsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiDeleteProjectsRequest)
	}

	return r0
}

// MockProjectAPI_DeleteProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjects'
type MockProjectAPI_DeleteProjects_Call struct {
	*mock.Call
}

// DeleteProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) DeleteProjects(ctx interface{}) *MockProjectAPI_DeleteProjects_Call {
	return &MockProjectAPI_DeleteProjects_Call{Call: _e.mock.On("DeleteProjects", ctx)}
}

func (_c *MockProjectAPI_DeleteProjects_Call) Run(run func(ctx context.Context)) *MockProjectAPI_DeleteProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectAPI_DeleteProjects_Call) Return(_a0 ApiDeleteProjectsRequest) *MockProjectAPI_DeleteProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_DeleteProjects_Call) RunAndReturn(run func(context.Context) ApiDeleteProjectsRequest) *MockProjectAPI_DeleteProjects_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProjectsExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) DeleteProjectsExecute(r ApiDeleteProjectsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteProjectsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteProjectsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteProjectsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectAPI_DeleteProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectsExecute'
type MockProjectAPI_DeleteProjectsExecute_Call struct {
	*mock.Call
}

// DeleteProjectsExecute is a helper method to define mock.On call
//   - r ApiDeleteProjectsRequest
func (_e *MockProjectAPI_Expecter) DeleteProjectsExecute(r interface{}) *MockProjectAPI_DeleteProjectsExecute_Call {
	return &MockProjectAPI_DeleteProjectsExecute_Call{Call: _e.mock.On("DeleteProjectsExecute", r)}
}

func (_c *MockProjectAPI_DeleteProjectsExecute_Call) Run(run func(r ApiDeleteProjectsRequest)) *MockProjectAPI_DeleteProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteProjectsRequest))
	})
	return _c
}

func (_c *MockProjectAPI_DeleteProjectsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockProjectAPI_DeleteProjectsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectAPI_DeleteProjectsExecute_Call) RunAndReturn(run func(ApiDeleteProjectsRequest) (*http.Response, error)) *MockProjectAPI_DeleteProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjects provides a mock function with given fields: ctx, uuid
func (_m *MockProjectAPI) GetChildrenProjects(ctx context.Context, uuid string) ApiGetChildrenProjectsRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjects")
	}

	var r0 ApiGetChildrenProjectsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetChildrenProjectsRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetChildrenProjectsRequest)
	}

	return r0
}

// MockProjectAPI_GetChildrenProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjects'
type MockProjectAPI_GetChildrenProjects_Call struct {
	*mock.Call
}

// GetChildrenProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetChildrenProjects(ctx interface{}, uuid interface{}) *MockProjectAPI_GetChildrenProjects_Call {
	return &MockProjectAPI_GetChildrenProjects_Call{Call: _e.mock.On("GetChildrenProjects", ctx, uuid)}
}

func (_c *MockProjectAPI_GetChildrenProjects_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_GetChildrenProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjects_Call) Return(_a0 ApiGetChildrenProjectsRequest) *MockProjectAPI_GetChildrenProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjects_Call) RunAndReturn(run func(context.Context, string) ApiGetChildrenProjectsRequest) *MockProjectAPI_GetChildrenProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsByClassifier provides a mock function with given fields: ctx, classifier, uuid
func (_m *MockProjectAPI) GetChildrenProjectsByClassifier(ctx context.Context, classifier string, uuid string) ApiGetChildrenProjectsByClassifierRequest {
	ret := _m.Called(ctx, classifier, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsByClassifier")
	}

	var r0 ApiGetChildrenProjectsByClassifierRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetChildrenProjectsByClassifierRequest); ok {
		r0 = rf(ctx, classifier, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetChildrenProjectsByClassifierRequest)
	}

	return r0
}

// MockProjectAPI_GetChildrenProjectsByClassifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsByClassifier'
type MockProjectAPI_GetChildrenProjectsByClassifier_Call struct {
	*mock.Call
}

// GetChildrenProjectsByClassifier is a helper method to define mock.On call
//   - ctx context.Context
//   - classifier string
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsByClassifier(ctx interface{}, classifier interface{}, uuid interface{}) *MockProjectAPI_GetChildrenProjectsByClassifier_Call {
	return &MockProjectAPI_GetChildrenProjectsByClassifier_Call{Call: _e.mock.On("GetChildrenProjectsByClassifier", ctx, classifier, uuid)}
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifier_Call) Run(run func(ctx context.Context, classifier string, uuid string)) *MockProjectAPI_GetChildrenProjectsByClassifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifier_Call) Return(_a0 ApiGetChildrenProjectsByClassifierRequest) *MockProjectAPI_GetChildrenProjectsByClassifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifier_Call) RunAndReturn(run func(context.Context, string, string) ApiGetChildrenProjectsByClassifierRequest) *MockProjectAPI_GetChildrenProjectsByClassifier_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsByClassifierExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetChildrenProjectsByClassifierExecute(r ApiGetChildrenProjectsByClassifierRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsByClassifierExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetChildrenProjectsByClassifierRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetChildrenProjectsByClassifierRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetChildrenProjectsByClassifierRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetChildrenProjectsByClassifierRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsByClassifierExecute'
type MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call struct {
	*mock.Call
}

// GetChildrenProjectsByClassifierExecute is a helper method to define mock.On call
//   - r ApiGetChildrenProjectsByClassifierRequest
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsByClassifierExecute(r interface{}) *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call {
	return &MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call{Call: _e.mock.On("GetChildrenProjectsByClassifierExecute", r)}
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call) Run(run func(r ApiGetChildrenProjectsByClassifierRequest)) *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetChildrenProjectsByClassifierRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call) RunAndReturn(run func(ApiGetChildrenProjectsByClassifierRequest) ([]Project, *http.Response, error)) *MockProjectAPI_GetChildrenProjectsByClassifierExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsByTag provides a mock function with given fields: ctx, tag, uuid
func (_m *MockProjectAPI) GetChildrenProjectsByTag(ctx context.Context, tag string, uuid string) ApiGetChildrenProjectsByTagRequest {
	ret := _m.Called(ctx, tag, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsByTag")
	}

	var r0 ApiGetChildrenProjectsByTagRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetChildrenProjectsByTagRequest); ok {
		r0 = rf(ctx, tag, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetChildrenProjectsByTagRequest)
	}

	return r0
}

// MockProjectAPI_GetChildrenProjectsByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsByTag'
type MockProjectAPI_GetChildrenProjectsByTag_Call struct {
	*mock.Call
}

// GetChildrenProjectsByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsByTag(ctx interface{}, tag interface{}, uuid interface{}) *MockProjectAPI_GetChildrenProjectsByTag_Call {
	return &MockProjectAPI_GetChildrenProjectsByTag_Call{Call: _e.mock.On("GetChildrenProjectsByTag", ctx, tag, uuid)}
}

func (_c *MockProjectAPI_GetChildrenProjectsByTag_Call) Run(run func(ctx context.Context, tag string, uuid string)) *MockProjectAPI_GetChildrenProjectsByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByTag_Call) Return(_a0 ApiGetChildrenProjectsByTagRequest) *MockProjectAPI_GetChildrenProjectsByTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByTag_Call) RunAndReturn(run func(context.Context, string, string) ApiGetChildrenProjectsByTagRequest) *MockProjectAPI_GetChildrenProjectsByTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsByTagExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetChildrenProjectsByTagExecute(r ApiGetChildrenProjectsByTagRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsByTagExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetChildrenProjectsByTagRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetChildrenProjectsByTagRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetChildrenProjectsByTagRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetChildrenProjectsByTagRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetChildrenProjectsByTagExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsByTagExecute'
type MockProjectAPI_GetChildrenProjectsByTagExecute_Call struct {
	*mock.Call
}

// GetChildrenProjectsByTagExecute is a helper method to define mock.On call
//   - r ApiGetChildrenProjectsByTagRequest
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsByTagExecute(r interface{}) *MockProjectAPI_GetChildrenProjectsByTagExecute_Call {
	return &MockProjectAPI_GetChildrenProjectsByTagExecute_Call{Call: _e.mock.On("GetChildrenProjectsByTagExecute", r)}
}

func (_c *MockProjectAPI_GetChildrenProjectsByTagExecute_Call) Run(run func(r ApiGetChildrenProjectsByTagRequest)) *MockProjectAPI_GetChildrenProjectsByTagExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetChildrenProjectsByTagRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByTagExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetChildrenProjectsByTagExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsByTagExecute_Call) RunAndReturn(run func(ApiGetChildrenProjectsByTagRequest) ([]Project, *http.Response, error)) *MockProjectAPI_GetChildrenProjectsByTagExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetChildrenProjectsExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetChildrenProjectsExecute(r ApiGetChildrenProjectsRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetChildrenProjectsExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetChildrenProjectsRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetChildrenProjectsRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetChildrenProjectsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetChildrenProjectsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetChildrenProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChildrenProjectsExecute'
type MockProjectAPI_GetChildrenProjectsExecute_Call struct {
	*mock.Call
}

// GetChildrenProjectsExecute is a helper method to define mock.On call
//   - r ApiGetChildrenProjectsRequest
func (_e *MockProjectAPI_Expecter) GetChildrenProjectsExecute(r interface{}) *MockProjectAPI_GetChildrenProjectsExecute_Call {
	return &MockProjectAPI_GetChildrenProjectsExecute_Call{Call: _e.mock.On("GetChildrenProjectsExecute", r)}
}

func (_c *MockProjectAPI_GetChildrenProjectsExecute_Call) Run(run func(r ApiGetChildrenProjectsRequest)) *MockProjectAPI_GetChildrenProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetChildrenProjectsRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetChildrenProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetChildrenProjectsExecute_Call) RunAndReturn(run func(ApiGetChildrenProjectsRequest) ([]Project, *http.Response, error)) *MockProjectAPI_GetChildrenProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestProjectByName provides a mock function with given fields: ctx, name
func (_m *MockProjectAPI) GetLatestProjectByName(ctx context.Context, name string) ApiGetLatestProjectByNameRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProjectByName")
	}

	var r0 ApiGetLatestProjectByNameRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetLatestProjectByNameRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiGetLatestProjectByNameRequest)
	}

	return r0
}

// MockProjectAPI_GetLatestProjectByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProjectByName'
type MockProjectAPI_GetLatestProjectByName_Call struct {
	*mock.Call
}

// GetLatestProjectByName is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockProjectAPI_Expecter) GetLatestProjectByName(ctx interface{}, name interface{}) *MockProjectAPI_GetLatestProjectByName_Call {
	return &MockProjectAPI_GetLatestProjectByName_Call{Call: _e.mock.On("GetLatestProjectByName", ctx, name)}
}

func (_c *MockProjectAPI_GetLatestProjectByName_Call) Run(run func(ctx context.Context, name string)) *MockProjectAPI_GetLatestProjectByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectAPI_GetLatestProjectByName_Call) Return(_a0 ApiGetLatestProjectByNameRequest) *MockProjectAPI_GetLatestProjectByName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetLatestProjectByName_Call) RunAndReturn(run func(context.Context, string) ApiGetLatestProjectByNameRequest) *MockProjectAPI_GetLatestProjectByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestProjectByNameExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetLatestProjectByNameExecute(r ApiGetLatestProjectByNameRequest) (*Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLatestProjectByNameExecute")
	}

	var r0 *Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetLatestProjectByNameRequest) (*Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetLatestProjectByNameRequest) *Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetLatestProjectByNameRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetLatestProjectByNameRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetLatestProjectByNameExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestProjectByNameExecute'
type MockProjectAPI_GetLatestProjectByNameExecute_Call struct {
	*mock.Call
}

// GetLatestProjectByNameExecute is a helper method to define mock.On call
//   - r ApiGetLatestProjectByNameRequest
func (_e *MockProjectAPI_Expecter) GetLatestProjectByNameExecute(r interface{}) *MockProjectAPI_GetLatestProjectByNameExecute_Call {
	return &MockProjectAPI_GetLatestProjectByNameExecute_Call{Call: _e.mock.On("GetLatestProjectByNameExecute", r)}
}

func (_c *MockProjectAPI_GetLatestProjectByNameExecute_Call) Run(run func(r ApiGetLatestProjectByNameRequest)) *MockProjectAPI_GetLatestProjectByNameExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetLatestProjectByNameRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetLatestProjectByNameExecute_Call) Return(_a0 *Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetLatestProjectByNameExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetLatestProjectByNameExecute_Call) RunAndReturn(run func(ApiGetLatestProjectByNameRequest) (*Project, *http.Response, error)) *MockProjectAPI_GetLatestProjectByNameExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, uuid
func (_m *MockProjectAPI) GetProject(ctx context.Context, uuid string) ApiGetProjectRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 ApiGetProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetProjectRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetProjectRequest)
	}

	return r0
}

// MockProjectAPI_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockProjectAPI_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetProject(ctx interface{}, uuid interface{}) *MockProjectAPI_GetProject_Call {
	return &MockProjectAPI_GetProject_Call{Call: _e.mock.On("GetProject", ctx, uuid)}
}

func (_c *MockProjectAPI_GetProject_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectAPI_GetProject_Call) Return(_a0 ApiGetProjectRequest) *MockProjectAPI_GetProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetProject_Call) RunAndReturn(run func(context.Context, string) ApiGetProjectRequest) *MockProjectAPI_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByNameAndVersion provides a mock function with given fields: ctx
func (_m *MockProjectAPI) GetProjectByNameAndVersion(ctx context.Context) ApiGetProjectByNameAndVersionRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByNameAndVersion")
	}

	var r0 ApiGetProjectByNameAndVersionRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetProjectByNameAndVersionRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetProjectByNameAndVersionRequest)
	}

	return r0
}

// MockProjectAPI_GetProjectByNameAndVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByNameAndVersion'
type MockProjectAPI_GetProjectByNameAndVersion_Call struct {
	*mock.Call
}

// GetProjectByNameAndVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) GetProjectByNameAndVersion(ctx interface{}) *MockProjectAPI_GetProjectByNameAndVersion_Call {
	return &MockProjectAPI_GetProjectByNameAndVersion_Call{Call: _e.mock.On("GetProjectByNameAndVersion", ctx)}
}

func (_c *MockProjectAPI_GetProjectByNameAndVersion_Call) Run(run func(ctx context.Context)) *MockProjectAPI_GetProjectByNameAndVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectByNameAndVersion_Call) Return(_a0 ApiGetProjectByNameAndVersionRequest) *MockProjectAPI_GetProjectByNameAndVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetProjectByNameAndVersion_Call) RunAndReturn(run func(context.Context) ApiGetProjectByNameAndVersionRequest) *MockProjectAPI_GetProjectByNameAndVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectByNameAndVersionExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetProjectByNameAndVersionExecute(r ApiGetProjectByNameAndVersionRequest) (*Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectByNameAndVersionExecute")
	}

	var r0 *Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectByNameAndVersionRequest) (*Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectByNameAndVersionRequest) *Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectByNameAndVersionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectByNameAndVersionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetProjectByNameAndVersionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectByNameAndVersionExecute'
type MockProjectAPI_GetProjectByNameAndVersionExecute_Call struct {
	*mock.Call
}

// GetProjectByNameAndVersionExecute is a helper method to define mock.On call
//   - r ApiGetProjectByNameAndVersionRequest
func (_e *MockProjectAPI_Expecter) GetProjectByNameAndVersionExecute(r interface{}) *MockProjectAPI_GetProjectByNameAndVersionExecute_Call {
	return &MockProjectAPI_GetProjectByNameAndVersionExecute_Call{Call: _e.mock.On("GetProjectByNameAndVersionExecute", r)}
}

func (_c *MockProjectAPI_GetProjectByNameAndVersionExecute_Call) Run(run func(r ApiGetProjectByNameAndVersionRequest)) *MockProjectAPI_GetProjectByNameAndVersionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectByNameAndVersionRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectByNameAndVersionExecute_Call) Return(_a0 *Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetProjectByNameAndVersionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetProjectByNameAndVersionExecute_Call) RunAndReturn(run func(ApiGetProjectByNameAndVersionRequest) (*Project, *http.Response, error)) *MockProjectAPI_GetProjectByNameAndVersionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetProjectExecute(r ApiGetProjectRequest) (*Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectExecute")
	}

	var r0 *Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectRequest) (*Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectRequest) *Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectExecute'
type MockProjectAPI_GetProjectExecute_Call struct {
	*mock.Call
}

// GetProjectExecute is a helper method to define mock.On call
//   - r ApiGetProjectRequest
func (_e *MockProjectAPI_Expecter) GetProjectExecute(r interface{}) *MockProjectAPI_GetProjectExecute_Call {
	return &MockProjectAPI_GetProjectExecute_Call{Call: _e.mock.On("GetProjectExecute", r)}
}

func (_c *MockProjectAPI_GetProjectExecute_Call) Run(run func(r ApiGetProjectRequest)) *MockProjectAPI_GetProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectExecute_Call) Return(_a0 *Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetProjectExecute_Call) RunAndReturn(run func(ApiGetProjectRequest) (*Project, *http.Response, error)) *MockProjectAPI_GetProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function with given fields: ctx
func (_m *MockProjectAPI) GetProjects(ctx context.Context) ApiGetProjectsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 ApiGetProjectsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetProjectsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetProjectsRequest)
	}

	return r0
}

// MockProjectAPI_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockProjectAPI_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) GetProjects(ctx interface{}) *MockProjectAPI_GetProjects_Call {
	return &MockProjectAPI_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx)}
}

func (_c *MockProjectAPI_GetProjects_Call) Run(run func(ctx context.Context)) *MockProjectAPI_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjects_Call) Return(_a0 ApiGetProjectsRequest) *MockProjectAPI_GetProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetProjects_Call) RunAndReturn(run func(context.Context) ApiGetProjectsRequest) *MockProjectAPI_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByClassifier provides a mock function with given fields: ctx, classifier
func (_m *MockProjectAPI) GetProjectsByClassifier(ctx context.Context, classifier string) ApiGetProjectsByClassifierRequest {
	ret := _m.Called(ctx, classifier)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByClassifier")
	}

	var r0 ApiGetProjectsByClassifierRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetProjectsByClassifierRequest); ok {
		r0 = rf(ctx, classifier)
	} else {
		r0 = ret.Get(0).(ApiGetProjectsByClassifierRequest)
	}

	return r0
}

// MockProjectAPI_GetProjectsByClassifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByClassifier'
type MockProjectAPI_GetProjectsByClassifier_Call struct {
	*mock.Call
}

// GetProjectsByClassifier is a helper method to define mock.On call
//   - ctx context.Context
//   - classifier string
func (_e *MockProjectAPI_Expecter) GetProjectsByClassifier(ctx interface{}, classifier interface{}) *MockProjectAPI_GetProjectsByClassifier_Call {
	return &MockProjectAPI_GetProjectsByClassifier_Call{Call: _e.mock.On("GetProjectsByClassifier", ctx, classifier)}
}

func (_c *MockProjectAPI_GetProjectsByClassifier_Call) Run(run func(ctx context.Context, classifier string)) *MockProjectAPI_GetProjectsByClassifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsByClassifier_Call) Return(_a0 ApiGetProjectsByClassifierRequest) *MockProjectAPI_GetProjectsByClassifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetProjectsByClassifier_Call) RunAndReturn(run func(context.Context, string) ApiGetProjectsByClassifierRequest) *MockProjectAPI_GetProjectsByClassifier_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByClassifierExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetProjectsByClassifierExecute(r ApiGetProjectsByClassifierRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByClassifierExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectsByClassifierRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectsByClassifierRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectsByClassifierRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectsByClassifierRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetProjectsByClassifierExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByClassifierExecute'
type MockProjectAPI_GetProjectsByClassifierExecute_Call struct {
	*mock.Call
}

// GetProjectsByClassifierExecute is a helper method to define mock.On call
//   - r ApiGetProjectsByClassifierRequest
func (_e *MockProjectAPI_Expecter) GetProjectsByClassifierExecute(r interface{}) *MockProjectAPI_GetProjectsByClassifierExecute_Call {
	return &MockProjectAPI_GetProjectsByClassifierExecute_Call{Call: _e.mock.On("GetProjectsByClassifierExecute", r)}
}

func (_c *MockProjectAPI_GetProjectsByClassifierExecute_Call) Run(run func(r ApiGetProjectsByClassifierRequest)) *MockProjectAPI_GetProjectsByClassifierExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectsByClassifierRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsByClassifierExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetProjectsByClassifierExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetProjectsByClassifierExecute_Call) RunAndReturn(run func(ApiGetProjectsByClassifierRequest) ([]Project, *http.Response, error)) *MockProjectAPI_GetProjectsByClassifierExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByTag provides a mock function with given fields: ctx, tag
func (_m *MockProjectAPI) GetProjectsByTag(ctx context.Context, tag string) ApiGetProjectsByTagRequest {
	ret := _m.Called(ctx, tag)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByTag")
	}

	var r0 ApiGetProjectsByTagRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetProjectsByTagRequest); ok {
		r0 = rf(ctx, tag)
	} else {
		r0 = ret.Get(0).(ApiGetProjectsByTagRequest)
	}

	return r0
}

// MockProjectAPI_GetProjectsByTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByTag'
type MockProjectAPI_GetProjectsByTag_Call struct {
	*mock.Call
}

// GetProjectsByTag is a helper method to define mock.On call
//   - ctx context.Context
//   - tag string
func (_e *MockProjectAPI_Expecter) GetProjectsByTag(ctx interface{}, tag interface{}) *MockProjectAPI_GetProjectsByTag_Call {
	return &MockProjectAPI_GetProjectsByTag_Call{Call: _e.mock.On("GetProjectsByTag", ctx, tag)}
}

func (_c *MockProjectAPI_GetProjectsByTag_Call) Run(run func(ctx context.Context, tag string)) *MockProjectAPI_GetProjectsByTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsByTag_Call) Return(_a0 ApiGetProjectsByTagRequest) *MockProjectAPI_GetProjectsByTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetProjectsByTag_Call) RunAndReturn(run func(context.Context, string) ApiGetProjectsByTagRequest) *MockProjectAPI_GetProjectsByTag_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsByTagExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetProjectsByTagExecute(r ApiGetProjectsByTagRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsByTagExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectsByTagRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectsByTagRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectsByTagRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectsByTagRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetProjectsByTagExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsByTagExecute'
type MockProjectAPI_GetProjectsByTagExecute_Call struct {
	*mock.Call
}

// GetProjectsByTagExecute is a helper method to define mock.On call
//   - r ApiGetProjectsByTagRequest
func (_e *MockProjectAPI_Expecter) GetProjectsByTagExecute(r interface{}) *MockProjectAPI_GetProjectsByTagExecute_Call {
	return &MockProjectAPI_GetProjectsByTagExecute_Call{Call: _e.mock.On("GetProjectsByTagExecute", r)}
}

func (_c *MockProjectAPI_GetProjectsByTagExecute_Call) Run(run func(r ApiGetProjectsByTagRequest)) *MockProjectAPI_GetProjectsByTagExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectsByTagRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsByTagExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetProjectsByTagExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetProjectsByTagExecute_Call) RunAndReturn(run func(ApiGetProjectsByTagRequest) ([]Project, *http.Response, error)) *MockProjectAPI_GetProjectsByTagExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetProjectsExecute(r ApiGetProjectsRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectsRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectsRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsExecute'
type MockProjectAPI_GetProjectsExecute_Call struct {
	*mock.Call
}

// GetProjectsExecute is a helper method to define mock.On call
//   - r ApiGetProjectsRequest
func (_e *MockProjectAPI_Expecter) GetProjectsExecute(r interface{}) *MockProjectAPI_GetProjectsExecute_Call {
	return &MockProjectAPI_GetProjectsExecute_Call{Call: _e.mock.On("GetProjectsExecute", r)}
}

func (_c *MockProjectAPI_GetProjectsExecute_Call) Run(run func(r ApiGetProjectsRequest)) *MockProjectAPI_GetProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectsRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetProjectsExecute_Call) RunAndReturn(run func(ApiGetProjectsRequest) ([]Project, *http.Response, error)) *MockProjectAPI_GetProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsWithoutDescendantsOf provides a mock function with given fields: ctx, uuid
func (_m *MockProjectAPI) GetProjectsWithoutDescendantsOf(ctx context.Context, uuid string) ApiGetProjectsWithoutDescendantsOfRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsWithoutDescendantsOf")
	}

	var r0 ApiGetProjectsWithoutDescendantsOfRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetProjectsWithoutDescendantsOfRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetProjectsWithoutDescendantsOfRequest)
	}

	return r0
}

// MockProjectAPI_GetProjectsWithoutDescendantsOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsWithoutDescendantsOf'
type MockProjectAPI_GetProjectsWithoutDescendantsOf_Call struct {
	*mock.Call
}

// GetProjectsWithoutDescendantsOf is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) GetProjectsWithoutDescendantsOf(ctx interface{}, uuid interface{}) *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call {
	return &MockProjectAPI_GetProjectsWithoutDescendantsOf_Call{Call: _e.mock.On("GetProjectsWithoutDescendantsOf", ctx, uuid)}
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call) Return(_a0 ApiGetProjectsWithoutDescendantsOfRequest) *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call) RunAndReturn(run func(context.Context, string) ApiGetProjectsWithoutDescendantsOfRequest) *MockProjectAPI_GetProjectsWithoutDescendantsOf_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectsWithoutDescendantsOfExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) GetProjectsWithoutDescendantsOfExecute(r ApiGetProjectsWithoutDescendantsOfRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectsWithoutDescendantsOfExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectsWithoutDescendantsOfRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectsWithoutDescendantsOfRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectsWithoutDescendantsOfRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectsWithoutDescendantsOfRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectsWithoutDescendantsOfExecute'
type MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call struct {
	*mock.Call
}

// GetProjectsWithoutDescendantsOfExecute is a helper method to define mock.On call
//   - r ApiGetProjectsWithoutDescendantsOfRequest
func (_e *MockProjectAPI_Expecter) GetProjectsWithoutDescendantsOfExecute(r interface{}) *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call {
	return &MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call{Call: _e.mock.On("GetProjectsWithoutDescendantsOfExecute", r)}
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call) Run(run func(r ApiGetProjectsWithoutDescendantsOfRequest)) *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectsWithoutDescendantsOfRequest))
	})
	return _c
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call) RunAndReturn(run func(ApiGetProjectsWithoutDescendantsOfRequest) ([]Project, *http.Response, error)) *MockProjectAPI_GetProjectsWithoutDescendantsOfExecute_Call {
	_c.Call.Return(run)
	return _c
}

// PatchProject provides a mock function with given fields: ctx, uuid
func (_m *MockProjectAPI) PatchProject(ctx context.Context, uuid string) ApiPatchProjectRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for PatchProject")
	}

	var r0 ApiPatchProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiPatchProjectRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiPatchProjectRequest)
	}

	return r0
}

// MockProjectAPI_PatchProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchProject'
type MockProjectAPI_PatchProject_Call struct {
	*mock.Call
}

// PatchProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectAPI_Expecter) PatchProject(ctx interface{}, uuid interface{}) *MockProjectAPI_PatchProject_Call {
	return &MockProjectAPI_PatchProject_Call{Call: _e.mock.On("PatchProject", ctx, uuid)}
}

func (_c *MockProjectAPI_PatchProject_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectAPI_PatchProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectAPI_PatchProject_Call) Return(_a0 ApiPatchProjectRequest) *MockProjectAPI_PatchProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_PatchProject_Call) RunAndReturn(run func(context.Context, string) ApiPatchProjectRequest) *MockProjectAPI_PatchProject_Call {
	_c.Call.Return(run)
	return _c
}

// PatchProjectExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) PatchProjectExecute(r ApiPatchProjectRequest) (*Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for PatchProjectExecute")
	}

	var r0 *Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiPatchProjectRequest) (*Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiPatchProjectRequest) *Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiPatchProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiPatchProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_PatchProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PatchProjectExecute'
type MockProjectAPI_PatchProjectExecute_Call struct {
	*mock.Call
}

// PatchProjectExecute is a helper method to define mock.On call
//   - r ApiPatchProjectRequest
func (_e *MockProjectAPI_Expecter) PatchProjectExecute(r interface{}) *MockProjectAPI_PatchProjectExecute_Call {
	return &MockProjectAPI_PatchProjectExecute_Call{Call: _e.mock.On("PatchProjectExecute", r)}
}

func (_c *MockProjectAPI_PatchProjectExecute_Call) Run(run func(r ApiPatchProjectRequest)) *MockProjectAPI_PatchProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiPatchProjectRequest))
	})
	return _c
}

func (_c *MockProjectAPI_PatchProjectExecute_Call) Return(_a0 *Project, _a1 *http.Response, _a2 error) *MockProjectAPI_PatchProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_PatchProjectExecute_Call) RunAndReturn(run func(ApiPatchProjectRequest) (*Project, *http.Response, error)) *MockProjectAPI_PatchProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProject provides a mock function with given fields: ctx
func (_m *MockProjectAPI) UpdateProject(ctx context.Context) ApiUpdateProjectRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 ApiUpdateProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateProjectRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateProjectRequest)
	}

	return r0
}

// MockProjectAPI_UpdateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProject'
type MockProjectAPI_UpdateProject_Call struct {
	*mock.Call
}

// UpdateProject is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockProjectAPI_Expecter) UpdateProject(ctx interface{}) *MockProjectAPI_UpdateProject_Call {
	return &MockProjectAPI_UpdateProject_Call{Call: _e.mock.On("UpdateProject", ctx)}
}

func (_c *MockProjectAPI_UpdateProject_Call) Run(run func(ctx context.Context)) *MockProjectAPI_UpdateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProjectAPI_UpdateProject_Call) Return(_a0 ApiUpdateProjectRequest) *MockProjectAPI_UpdateProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectAPI_UpdateProject_Call) RunAndReturn(run func(context.Context) ApiUpdateProjectRequest) *MockProjectAPI_UpdateProject_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProjectExecute provides a mock function with given fields: r
func (_m *MockProjectAPI) UpdateProjectExecute(r ApiUpdateProjectRequest) (*Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectExecute")
	}

	var r0 *Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateProjectRequest) (*Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateProjectRequest) *Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectAPI_UpdateProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectExecute'
type MockProjectAPI_UpdateProjectExecute_Call struct {
	*mock.Call
}

// UpdateProjectExecute is a helper method to define mock.On call
//   - r ApiUpdateProjectRequest
func (_e *MockProjectAPI_Expecter) UpdateProjectExecute(r interface{}) *MockProjectAPI_UpdateProjectExecute_Call {
	return &MockProjectAPI_UpdateProjectExecute_Call{Call: _e.mock.On("UpdateProjectExecute", r)}
}

func (_c *MockProjectAPI_UpdateProjectExecute_Call) Run(run func(r ApiUpdateProjectRequest)) *MockProjectAPI_UpdateProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateProjectRequest))
	})
	return _c
}

func (_c *MockProjectAPI_UpdateProjectExecute_Call) Return(_a0 *Project, _a1 *http.Response, _a2 error) *MockProjectAPI_UpdateProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectAPI_UpdateProjectExecute_Call) RunAndReturn(run func(ApiUpdateProjectRequest) (*Project, *http.Response, error)) *MockProjectAPI_UpdateProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectAPI creates a new instance of MockProjectAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectAPI {
	mock := &MockProjectAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
