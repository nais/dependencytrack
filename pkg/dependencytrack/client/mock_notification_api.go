// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationAPI is an autogenerated mock type for the NotificationAPI type
type MockNotificationAPI struct {
	mock.Mock
}

type MockNotificationAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationAPI) EXPECT() *MockNotificationAPI_Expecter {
	return &MockNotificationAPI_Expecter{mock: &_m.Mock}
}

// AddProjectToRule provides a mock function with given fields: ctx, ruleUuid, projectUuid
func (_m *MockNotificationAPI) AddProjectToRule(ctx context.Context, ruleUuid string, projectUuid string) ApiAddProjectToRuleRequest {
	ret := _m.Called(ctx, ruleUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToRule")
	}

	var r0 ApiAddProjectToRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiAddProjectToRuleRequest); ok {
		r0 = rf(ctx, ruleUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(ApiAddProjectToRuleRequest)
	}

	return r0
}

// MockNotificationAPI_AddProjectToRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToRule'
type MockNotificationAPI_AddProjectToRule_Call struct {
	*mock.Call
}

// AddProjectToRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleUuid string
//   - projectUuid string
func (_e *MockNotificationAPI_Expecter) AddProjectToRule(ctx interface{}, ruleUuid interface{}, projectUuid interface{}) *MockNotificationAPI_AddProjectToRule_Call {
	return &MockNotificationAPI_AddProjectToRule_Call{Call: _e.mock.On("AddProjectToRule", ctx, ruleUuid, projectUuid)}
}

func (_c *MockNotificationAPI_AddProjectToRule_Call) Run(run func(ctx context.Context, ruleUuid string, projectUuid string)) *MockNotificationAPI_AddProjectToRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationAPI_AddProjectToRule_Call) Return(_a0 ApiAddProjectToRuleRequest) *MockNotificationAPI_AddProjectToRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_AddProjectToRule_Call) RunAndReturn(run func(context.Context, string, string) ApiAddProjectToRuleRequest) *MockNotificationAPI_AddProjectToRule_Call {
	_c.Call.Return(run)
	return _c
}

// AddProjectToRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) AddProjectToRuleExecute(r ApiAddProjectToRuleRequest) (*NotificationRule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToRuleExecute")
	}

	var r0 *NotificationRule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddProjectToRuleRequest) (*NotificationRule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddProjectToRuleRequest) *NotificationRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddProjectToRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddProjectToRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_AddProjectToRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToRuleExecute'
type MockNotificationAPI_AddProjectToRuleExecute_Call struct {
	*mock.Call
}

// AddProjectToRuleExecute is a helper method to define mock.On call
//   - r ApiAddProjectToRuleRequest
func (_e *MockNotificationAPI_Expecter) AddProjectToRuleExecute(r interface{}) *MockNotificationAPI_AddProjectToRuleExecute_Call {
	return &MockNotificationAPI_AddProjectToRuleExecute_Call{Call: _e.mock.On("AddProjectToRuleExecute", r)}
}

func (_c *MockNotificationAPI_AddProjectToRuleExecute_Call) Run(run func(r ApiAddProjectToRuleRequest)) *MockNotificationAPI_AddProjectToRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddProjectToRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_AddProjectToRuleExecute_Call) Return(_a0 *NotificationRule, _a1 *http.Response, _a2 error) *MockNotificationAPI_AddProjectToRuleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_AddProjectToRuleExecute_Call) RunAndReturn(run func(ApiAddProjectToRuleRequest) (*NotificationRule, *http.Response, error)) *MockNotificationAPI_AddProjectToRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamToRule provides a mock function with given fields: ctx, ruleUuid, teamUuid
func (_m *MockNotificationAPI) AddTeamToRule(ctx context.Context, ruleUuid string, teamUuid string) ApiAddTeamToRuleRequest {
	ret := _m.Called(ctx, ruleUuid, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamToRule")
	}

	var r0 ApiAddTeamToRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiAddTeamToRuleRequest); ok {
		r0 = rf(ctx, ruleUuid, teamUuid)
	} else {
		r0 = ret.Get(0).(ApiAddTeamToRuleRequest)
	}

	return r0
}

// MockNotificationAPI_AddTeamToRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamToRule'
type MockNotificationAPI_AddTeamToRule_Call struct {
	*mock.Call
}

// AddTeamToRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleUuid string
//   - teamUuid string
func (_e *MockNotificationAPI_Expecter) AddTeamToRule(ctx interface{}, ruleUuid interface{}, teamUuid interface{}) *MockNotificationAPI_AddTeamToRule_Call {
	return &MockNotificationAPI_AddTeamToRule_Call{Call: _e.mock.On("AddTeamToRule", ctx, ruleUuid, teamUuid)}
}

func (_c *MockNotificationAPI_AddTeamToRule_Call) Run(run func(ctx context.Context, ruleUuid string, teamUuid string)) *MockNotificationAPI_AddTeamToRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationAPI_AddTeamToRule_Call) Return(_a0 ApiAddTeamToRuleRequest) *MockNotificationAPI_AddTeamToRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_AddTeamToRule_Call) RunAndReturn(run func(context.Context, string, string) ApiAddTeamToRuleRequest) *MockNotificationAPI_AddTeamToRule_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamToRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) AddTeamToRuleExecute(r ApiAddTeamToRuleRequest) (*NotificationRule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamToRuleExecute")
	}

	var r0 *NotificationRule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddTeamToRuleRequest) (*NotificationRule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddTeamToRuleRequest) *NotificationRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddTeamToRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddTeamToRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_AddTeamToRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamToRuleExecute'
type MockNotificationAPI_AddTeamToRuleExecute_Call struct {
	*mock.Call
}

// AddTeamToRuleExecute is a helper method to define mock.On call
//   - r ApiAddTeamToRuleRequest
func (_e *MockNotificationAPI_Expecter) AddTeamToRuleExecute(r interface{}) *MockNotificationAPI_AddTeamToRuleExecute_Call {
	return &MockNotificationAPI_AddTeamToRuleExecute_Call{Call: _e.mock.On("AddTeamToRuleExecute", r)}
}

func (_c *MockNotificationAPI_AddTeamToRuleExecute_Call) Run(run func(r ApiAddTeamToRuleRequest)) *MockNotificationAPI_AddTeamToRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddTeamToRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_AddTeamToRuleExecute_Call) Return(_a0 *NotificationRule, _a1 *http.Response, _a2 error) *MockNotificationAPI_AddTeamToRuleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_AddTeamToRuleExecute_Call) RunAndReturn(run func(ApiAddTeamToRuleRequest) (*NotificationRule, *http.Response, error)) *MockNotificationAPI_AddTeamToRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationPublisher provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) CreateNotificationPublisher(ctx context.Context) ApiCreateNotificationPublisherRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationPublisher")
	}

	var r0 ApiCreateNotificationPublisherRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateNotificationPublisherRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateNotificationPublisherRequest)
	}

	return r0
}

// MockNotificationAPI_CreateNotificationPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationPublisher'
type MockNotificationAPI_CreateNotificationPublisher_Call struct {
	*mock.Call
}

// CreateNotificationPublisher is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) CreateNotificationPublisher(ctx interface{}) *MockNotificationAPI_CreateNotificationPublisher_Call {
	return &MockNotificationAPI_CreateNotificationPublisher_Call{Call: _e.mock.On("CreateNotificationPublisher", ctx)}
}

func (_c *MockNotificationAPI_CreateNotificationPublisher_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_CreateNotificationPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationPublisher_Call) Return(_a0 ApiCreateNotificationPublisherRequest) *MockNotificationAPI_CreateNotificationPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationPublisher_Call) RunAndReturn(run func(context.Context) ApiCreateNotificationPublisherRequest) *MockNotificationAPI_CreateNotificationPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationPublisherExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) CreateNotificationPublisherExecute(r ApiCreateNotificationPublisherRequest) (*NotificationPublisher, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationPublisherExecute")
	}

	var r0 *NotificationPublisher
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateNotificationPublisherRequest) (*NotificationPublisher, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateNotificationPublisherRequest) *NotificationPublisher); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationPublisher)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateNotificationPublisherRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateNotificationPublisherRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_CreateNotificationPublisherExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationPublisherExecute'
type MockNotificationAPI_CreateNotificationPublisherExecute_Call struct {
	*mock.Call
}

// CreateNotificationPublisherExecute is a helper method to define mock.On call
//   - r ApiCreateNotificationPublisherRequest
func (_e *MockNotificationAPI_Expecter) CreateNotificationPublisherExecute(r interface{}) *MockNotificationAPI_CreateNotificationPublisherExecute_Call {
	return &MockNotificationAPI_CreateNotificationPublisherExecute_Call{Call: _e.mock.On("CreateNotificationPublisherExecute", r)}
}

func (_c *MockNotificationAPI_CreateNotificationPublisherExecute_Call) Run(run func(r ApiCreateNotificationPublisherRequest)) *MockNotificationAPI_CreateNotificationPublisherExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateNotificationPublisherRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationPublisherExecute_Call) Return(_a0 *NotificationPublisher, _a1 *http.Response, _a2 error) *MockNotificationAPI_CreateNotificationPublisherExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationPublisherExecute_Call) RunAndReturn(run func(ApiCreateNotificationPublisherRequest) (*NotificationPublisher, *http.Response, error)) *MockNotificationAPI_CreateNotificationPublisherExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationRule provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) CreateNotificationRule(ctx context.Context) ApiCreateNotificationRuleRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationRule")
	}

	var r0 ApiCreateNotificationRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateNotificationRuleRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateNotificationRuleRequest)
	}

	return r0
}

// MockNotificationAPI_CreateNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRule'
type MockNotificationAPI_CreateNotificationRule_Call struct {
	*mock.Call
}

// CreateNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) CreateNotificationRule(ctx interface{}) *MockNotificationAPI_CreateNotificationRule_Call {
	return &MockNotificationAPI_CreateNotificationRule_Call{Call: _e.mock.On("CreateNotificationRule", ctx)}
}

func (_c *MockNotificationAPI_CreateNotificationRule_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_CreateNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationRule_Call) Return(_a0 ApiCreateNotificationRuleRequest) *MockNotificationAPI_CreateNotificationRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationRule_Call) RunAndReturn(run func(context.Context) ApiCreateNotificationRuleRequest) *MockNotificationAPI_CreateNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateNotificationRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) CreateNotificationRuleExecute(r ApiCreateNotificationRuleRequest) (*NotificationRule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationRuleExecute")
	}

	var r0 *NotificationRule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateNotificationRuleRequest) (*NotificationRule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateNotificationRuleRequest) *NotificationRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateNotificationRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateNotificationRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_CreateNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateNotificationRuleExecute'
type MockNotificationAPI_CreateNotificationRuleExecute_Call struct {
	*mock.Call
}

// CreateNotificationRuleExecute is a helper method to define mock.On call
//   - r ApiCreateNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) CreateNotificationRuleExecute(r interface{}) *MockNotificationAPI_CreateNotificationRuleExecute_Call {
	return &MockNotificationAPI_CreateNotificationRuleExecute_Call{Call: _e.mock.On("CreateNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_CreateNotificationRuleExecute_Call) Run(run func(r ApiCreateNotificationRuleRequest)) *MockNotificationAPI_CreateNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateNotificationRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationRuleExecute_Call) Return(_a0 *NotificationRule, _a1 *http.Response, _a2 error) *MockNotificationAPI_CreateNotificationRuleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_CreateNotificationRuleExecute_Call) RunAndReturn(run func(ApiCreateNotificationRuleRequest) (*NotificationRule, *http.Response, error)) *MockNotificationAPI_CreateNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScheduledNotificationRule provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) CreateScheduledNotificationRule(ctx context.Context) ApiCreateScheduledNotificationRuleRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduledNotificationRule")
	}

	var r0 ApiCreateScheduledNotificationRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateScheduledNotificationRuleRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateScheduledNotificationRuleRequest)
	}

	return r0
}

// MockNotificationAPI_CreateScheduledNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScheduledNotificationRule'
type MockNotificationAPI_CreateScheduledNotificationRule_Call struct {
	*mock.Call
}

// CreateScheduledNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) CreateScheduledNotificationRule(ctx interface{}) *MockNotificationAPI_CreateScheduledNotificationRule_Call {
	return &MockNotificationAPI_CreateScheduledNotificationRule_Call{Call: _e.mock.On("CreateScheduledNotificationRule", ctx)}
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRule_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_CreateScheduledNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRule_Call) Return(_a0 ApiCreateScheduledNotificationRuleRequest) *MockNotificationAPI_CreateScheduledNotificationRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRule_Call) RunAndReturn(run func(context.Context) ApiCreateScheduledNotificationRuleRequest) *MockNotificationAPI_CreateScheduledNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// CreateScheduledNotificationRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) CreateScheduledNotificationRuleExecute(r ApiCreateScheduledNotificationRuleRequest) (*NotificationRule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduledNotificationRuleExecute")
	}

	var r0 *NotificationRule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateScheduledNotificationRuleRequest) (*NotificationRule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateScheduledNotificationRuleRequest) *NotificationRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateScheduledNotificationRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateScheduledNotificationRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateScheduledNotificationRuleExecute'
type MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call struct {
	*mock.Call
}

// CreateScheduledNotificationRuleExecute is a helper method to define mock.On call
//   - r ApiCreateScheduledNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) CreateScheduledNotificationRuleExecute(r interface{}) *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call {
	return &MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call{Call: _e.mock.On("CreateScheduledNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call) Run(run func(r ApiCreateScheduledNotificationRuleRequest)) *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateScheduledNotificationRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call) Return(_a0 *NotificationRule, _a1 *http.Response, _a2 error) *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call) RunAndReturn(run func(ApiCreateScheduledNotificationRuleRequest) (*NotificationRule, *http.Response, error)) *MockNotificationAPI_CreateScheduledNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationPublisher provides a mock function with given fields: ctx, notificationPublisherUuid
func (_m *MockNotificationAPI) DeleteNotificationPublisher(ctx context.Context, notificationPublisherUuid string) ApiDeleteNotificationPublisherRequest {
	ret := _m.Called(ctx, notificationPublisherUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationPublisher")
	}

	var r0 ApiDeleteNotificationPublisherRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteNotificationPublisherRequest); ok {
		r0 = rf(ctx, notificationPublisherUuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteNotificationPublisherRequest)
	}

	return r0
}

// MockNotificationAPI_DeleteNotificationPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationPublisher'
type MockNotificationAPI_DeleteNotificationPublisher_Call struct {
	*mock.Call
}

// DeleteNotificationPublisher is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationPublisherUuid string
func (_e *MockNotificationAPI_Expecter) DeleteNotificationPublisher(ctx interface{}, notificationPublisherUuid interface{}) *MockNotificationAPI_DeleteNotificationPublisher_Call {
	return &MockNotificationAPI_DeleteNotificationPublisher_Call{Call: _e.mock.On("DeleteNotificationPublisher", ctx, notificationPublisherUuid)}
}

func (_c *MockNotificationAPI_DeleteNotificationPublisher_Call) Run(run func(ctx context.Context, notificationPublisherUuid string)) *MockNotificationAPI_DeleteNotificationPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationPublisher_Call) Return(_a0 ApiDeleteNotificationPublisherRequest) *MockNotificationAPI_DeleteNotificationPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationPublisher_Call) RunAndReturn(run func(context.Context, string) ApiDeleteNotificationPublisherRequest) *MockNotificationAPI_DeleteNotificationPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationPublisherExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) DeleteNotificationPublisherExecute(r ApiDeleteNotificationPublisherRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationPublisherExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteNotificationPublisherRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteNotificationPublisherRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteNotificationPublisherRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationAPI_DeleteNotificationPublisherExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationPublisherExecute'
type MockNotificationAPI_DeleteNotificationPublisherExecute_Call struct {
	*mock.Call
}

// DeleteNotificationPublisherExecute is a helper method to define mock.On call
//   - r ApiDeleteNotificationPublisherRequest
func (_e *MockNotificationAPI_Expecter) DeleteNotificationPublisherExecute(r interface{}) *MockNotificationAPI_DeleteNotificationPublisherExecute_Call {
	return &MockNotificationAPI_DeleteNotificationPublisherExecute_Call{Call: _e.mock.On("DeleteNotificationPublisherExecute", r)}
}

func (_c *MockNotificationAPI_DeleteNotificationPublisherExecute_Call) Run(run func(r ApiDeleteNotificationPublisherRequest)) *MockNotificationAPI_DeleteNotificationPublisherExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteNotificationPublisherRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationPublisherExecute_Call) Return(_a0 *http.Response, _a1 error) *MockNotificationAPI_DeleteNotificationPublisherExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationPublisherExecute_Call) RunAndReturn(run func(ApiDeleteNotificationPublisherRequest) (*http.Response, error)) *MockNotificationAPI_DeleteNotificationPublisherExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationRule provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) DeleteNotificationRule(ctx context.Context) ApiDeleteNotificationRuleRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationRule")
	}

	var r0 ApiDeleteNotificationRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiDeleteNotificationRuleRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiDeleteNotificationRuleRequest)
	}

	return r0
}

// MockNotificationAPI_DeleteNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRule'
type MockNotificationAPI_DeleteNotificationRule_Call struct {
	*mock.Call
}

// DeleteNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) DeleteNotificationRule(ctx interface{}) *MockNotificationAPI_DeleteNotificationRule_Call {
	return &MockNotificationAPI_DeleteNotificationRule_Call{Call: _e.mock.On("DeleteNotificationRule", ctx)}
}

func (_c *MockNotificationAPI_DeleteNotificationRule_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_DeleteNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationRule_Call) Return(_a0 ApiDeleteNotificationRuleRequest) *MockNotificationAPI_DeleteNotificationRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationRule_Call) RunAndReturn(run func(context.Context) ApiDeleteNotificationRuleRequest) *MockNotificationAPI_DeleteNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteNotificationRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) DeleteNotificationRuleExecute(r ApiDeleteNotificationRuleRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationRuleExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteNotificationRuleRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteNotificationRuleRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteNotificationRuleRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationAPI_DeleteNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNotificationRuleExecute'
type MockNotificationAPI_DeleteNotificationRuleExecute_Call struct {
	*mock.Call
}

// DeleteNotificationRuleExecute is a helper method to define mock.On call
//   - r ApiDeleteNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) DeleteNotificationRuleExecute(r interface{}) *MockNotificationAPI_DeleteNotificationRuleExecute_Call {
	return &MockNotificationAPI_DeleteNotificationRuleExecute_Call{Call: _e.mock.On("DeleteNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_DeleteNotificationRuleExecute_Call) Run(run func(r ApiDeleteNotificationRuleRequest)) *MockNotificationAPI_DeleteNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteNotificationRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationRuleExecute_Call) Return(_a0 *http.Response, _a1 error) *MockNotificationAPI_DeleteNotificationRuleExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationAPI_DeleteNotificationRuleExecute_Call) RunAndReturn(run func(ApiDeleteNotificationRuleRequest) (*http.Response, error)) *MockNotificationAPI_DeleteNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotificationPublishers provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) GetAllNotificationPublishers(ctx context.Context) ApiGetAllNotificationPublishersRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotificationPublishers")
	}

	var r0 ApiGetAllNotificationPublishersRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetAllNotificationPublishersRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetAllNotificationPublishersRequest)
	}

	return r0
}

// MockNotificationAPI_GetAllNotificationPublishers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotificationPublishers'
type MockNotificationAPI_GetAllNotificationPublishers_Call struct {
	*mock.Call
}

// GetAllNotificationPublishers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) GetAllNotificationPublishers(ctx interface{}) *MockNotificationAPI_GetAllNotificationPublishers_Call {
	return &MockNotificationAPI_GetAllNotificationPublishers_Call{Call: _e.mock.On("GetAllNotificationPublishers", ctx)}
}

func (_c *MockNotificationAPI_GetAllNotificationPublishers_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_GetAllNotificationPublishers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationPublishers_Call) Return(_a0 ApiGetAllNotificationPublishersRequest) *MockNotificationAPI_GetAllNotificationPublishers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationPublishers_Call) RunAndReturn(run func(context.Context) ApiGetAllNotificationPublishersRequest) *MockNotificationAPI_GetAllNotificationPublishers_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotificationPublishersExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) GetAllNotificationPublishersExecute(r ApiGetAllNotificationPublishersRequest) ([]NotificationPublisher, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotificationPublishersExecute")
	}

	var r0 []NotificationPublisher
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllNotificationPublishersRequest) ([]NotificationPublisher, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllNotificationPublishersRequest) []NotificationPublisher); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NotificationPublisher)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllNotificationPublishersRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllNotificationPublishersRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_GetAllNotificationPublishersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotificationPublishersExecute'
type MockNotificationAPI_GetAllNotificationPublishersExecute_Call struct {
	*mock.Call
}

// GetAllNotificationPublishersExecute is a helper method to define mock.On call
//   - r ApiGetAllNotificationPublishersRequest
func (_e *MockNotificationAPI_Expecter) GetAllNotificationPublishersExecute(r interface{}) *MockNotificationAPI_GetAllNotificationPublishersExecute_Call {
	return &MockNotificationAPI_GetAllNotificationPublishersExecute_Call{Call: _e.mock.On("GetAllNotificationPublishersExecute", r)}
}

func (_c *MockNotificationAPI_GetAllNotificationPublishersExecute_Call) Run(run func(r ApiGetAllNotificationPublishersRequest)) *MockNotificationAPI_GetAllNotificationPublishersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllNotificationPublishersRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationPublishersExecute_Call) Return(_a0 []NotificationPublisher, _a1 *http.Response, _a2 error) *MockNotificationAPI_GetAllNotificationPublishersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationPublishersExecute_Call) RunAndReturn(run func(ApiGetAllNotificationPublishersRequest) ([]NotificationPublisher, *http.Response, error)) *MockNotificationAPI_GetAllNotificationPublishersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotificationRules provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) GetAllNotificationRules(ctx context.Context) ApiGetAllNotificationRulesRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotificationRules")
	}

	var r0 ApiGetAllNotificationRulesRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetAllNotificationRulesRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetAllNotificationRulesRequest)
	}

	return r0
}

// MockNotificationAPI_GetAllNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotificationRules'
type MockNotificationAPI_GetAllNotificationRules_Call struct {
	*mock.Call
}

// GetAllNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) GetAllNotificationRules(ctx interface{}) *MockNotificationAPI_GetAllNotificationRules_Call {
	return &MockNotificationAPI_GetAllNotificationRules_Call{Call: _e.mock.On("GetAllNotificationRules", ctx)}
}

func (_c *MockNotificationAPI_GetAllNotificationRules_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_GetAllNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationRules_Call) Return(_a0 ApiGetAllNotificationRulesRequest) *MockNotificationAPI_GetAllNotificationRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationRules_Call) RunAndReturn(run func(context.Context) ApiGetAllNotificationRulesRequest) *MockNotificationAPI_GetAllNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllNotificationRulesExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) GetAllNotificationRulesExecute(r ApiGetAllNotificationRulesRequest) ([]NotificationRule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllNotificationRulesExecute")
	}

	var r0 []NotificationRule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllNotificationRulesRequest) ([]NotificationRule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllNotificationRulesRequest) []NotificationRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllNotificationRulesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllNotificationRulesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_GetAllNotificationRulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllNotificationRulesExecute'
type MockNotificationAPI_GetAllNotificationRulesExecute_Call struct {
	*mock.Call
}

// GetAllNotificationRulesExecute is a helper method to define mock.On call
//   - r ApiGetAllNotificationRulesRequest
func (_e *MockNotificationAPI_Expecter) GetAllNotificationRulesExecute(r interface{}) *MockNotificationAPI_GetAllNotificationRulesExecute_Call {
	return &MockNotificationAPI_GetAllNotificationRulesExecute_Call{Call: _e.mock.On("GetAllNotificationRulesExecute", r)}
}

func (_c *MockNotificationAPI_GetAllNotificationRulesExecute_Call) Run(run func(r ApiGetAllNotificationRulesRequest)) *MockNotificationAPI_GetAllNotificationRulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllNotificationRulesRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationRulesExecute_Call) Return(_a0 []NotificationRule, _a1 *http.Response, _a2 error) *MockNotificationAPI_GetAllNotificationRulesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_GetAllNotificationRulesExecute_Call) RunAndReturn(run func(ApiGetAllNotificationRulesRequest) ([]NotificationRule, *http.Response, error)) *MockNotificationAPI_GetAllNotificationRulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromRule provides a mock function with given fields: ctx, ruleUuid, projectUuid
func (_m *MockNotificationAPI) RemoveProjectFromRule(ctx context.Context, ruleUuid string, projectUuid string) ApiRemoveProjectFromRuleRequest {
	ret := _m.Called(ctx, ruleUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromRule")
	}

	var r0 ApiRemoveProjectFromRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiRemoveProjectFromRuleRequest); ok {
		r0 = rf(ctx, ruleUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(ApiRemoveProjectFromRuleRequest)
	}

	return r0
}

// MockNotificationAPI_RemoveProjectFromRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromRule'
type MockNotificationAPI_RemoveProjectFromRule_Call struct {
	*mock.Call
}

// RemoveProjectFromRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleUuid string
//   - projectUuid string
func (_e *MockNotificationAPI_Expecter) RemoveProjectFromRule(ctx interface{}, ruleUuid interface{}, projectUuid interface{}) *MockNotificationAPI_RemoveProjectFromRule_Call {
	return &MockNotificationAPI_RemoveProjectFromRule_Call{Call: _e.mock.On("RemoveProjectFromRule", ctx, ruleUuid, projectUuid)}
}

func (_c *MockNotificationAPI_RemoveProjectFromRule_Call) Run(run func(ctx context.Context, ruleUuid string, projectUuid string)) *MockNotificationAPI_RemoveProjectFromRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationAPI_RemoveProjectFromRule_Call) Return(_a0 ApiRemoveProjectFromRuleRequest) *MockNotificationAPI_RemoveProjectFromRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_RemoveProjectFromRule_Call) RunAndReturn(run func(context.Context, string, string) ApiRemoveProjectFromRuleRequest) *MockNotificationAPI_RemoveProjectFromRule_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) RemoveProjectFromRuleExecute(r ApiRemoveProjectFromRuleRequest) (*NotificationRule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromRuleExecute")
	}

	var r0 *NotificationRule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRemoveProjectFromRuleRequest) (*NotificationRule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRemoveProjectFromRuleRequest) *NotificationRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRemoveProjectFromRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRemoveProjectFromRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_RemoveProjectFromRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromRuleExecute'
type MockNotificationAPI_RemoveProjectFromRuleExecute_Call struct {
	*mock.Call
}

// RemoveProjectFromRuleExecute is a helper method to define mock.On call
//   - r ApiRemoveProjectFromRuleRequest
func (_e *MockNotificationAPI_Expecter) RemoveProjectFromRuleExecute(r interface{}) *MockNotificationAPI_RemoveProjectFromRuleExecute_Call {
	return &MockNotificationAPI_RemoveProjectFromRuleExecute_Call{Call: _e.mock.On("RemoveProjectFromRuleExecute", r)}
}

func (_c *MockNotificationAPI_RemoveProjectFromRuleExecute_Call) Run(run func(r ApiRemoveProjectFromRuleRequest)) *MockNotificationAPI_RemoveProjectFromRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRemoveProjectFromRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_RemoveProjectFromRuleExecute_Call) Return(_a0 *NotificationRule, _a1 *http.Response, _a2 error) *MockNotificationAPI_RemoveProjectFromRuleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_RemoveProjectFromRuleExecute_Call) RunAndReturn(run func(ApiRemoveProjectFromRuleRequest) (*NotificationRule, *http.Response, error)) *MockNotificationAPI_RemoveProjectFromRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamFromRule provides a mock function with given fields: ctx, ruleUuid, teamUuid
func (_m *MockNotificationAPI) RemoveTeamFromRule(ctx context.Context, ruleUuid string, teamUuid string) ApiRemoveTeamFromRuleRequest {
	ret := _m.Called(ctx, ruleUuid, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamFromRule")
	}

	var r0 ApiRemoveTeamFromRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiRemoveTeamFromRuleRequest); ok {
		r0 = rf(ctx, ruleUuid, teamUuid)
	} else {
		r0 = ret.Get(0).(ApiRemoveTeamFromRuleRequest)
	}

	return r0
}

// MockNotificationAPI_RemoveTeamFromRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamFromRule'
type MockNotificationAPI_RemoveTeamFromRule_Call struct {
	*mock.Call
}

// RemoveTeamFromRule is a helper method to define mock.On call
//   - ctx context.Context
//   - ruleUuid string
//   - teamUuid string
func (_e *MockNotificationAPI_Expecter) RemoveTeamFromRule(ctx interface{}, ruleUuid interface{}, teamUuid interface{}) *MockNotificationAPI_RemoveTeamFromRule_Call {
	return &MockNotificationAPI_RemoveTeamFromRule_Call{Call: _e.mock.On("RemoveTeamFromRule", ctx, ruleUuid, teamUuid)}
}

func (_c *MockNotificationAPI_RemoveTeamFromRule_Call) Run(run func(ctx context.Context, ruleUuid string, teamUuid string)) *MockNotificationAPI_RemoveTeamFromRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockNotificationAPI_RemoveTeamFromRule_Call) Return(_a0 ApiRemoveTeamFromRuleRequest) *MockNotificationAPI_RemoveTeamFromRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_RemoveTeamFromRule_Call) RunAndReturn(run func(context.Context, string, string) ApiRemoveTeamFromRuleRequest) *MockNotificationAPI_RemoveTeamFromRule_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamFromRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) RemoveTeamFromRuleExecute(r ApiRemoveTeamFromRuleRequest) (*NotificationRule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamFromRuleExecute")
	}

	var r0 *NotificationRule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRemoveTeamFromRuleRequest) (*NotificationRule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRemoveTeamFromRuleRequest) *NotificationRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRemoveTeamFromRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRemoveTeamFromRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_RemoveTeamFromRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamFromRuleExecute'
type MockNotificationAPI_RemoveTeamFromRuleExecute_Call struct {
	*mock.Call
}

// RemoveTeamFromRuleExecute is a helper method to define mock.On call
//   - r ApiRemoveTeamFromRuleRequest
func (_e *MockNotificationAPI_Expecter) RemoveTeamFromRuleExecute(r interface{}) *MockNotificationAPI_RemoveTeamFromRuleExecute_Call {
	return &MockNotificationAPI_RemoveTeamFromRuleExecute_Call{Call: _e.mock.On("RemoveTeamFromRuleExecute", r)}
}

func (_c *MockNotificationAPI_RemoveTeamFromRuleExecute_Call) Run(run func(r ApiRemoveTeamFromRuleRequest)) *MockNotificationAPI_RemoveTeamFromRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRemoveTeamFromRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_RemoveTeamFromRuleExecute_Call) Return(_a0 *NotificationRule, _a1 *http.Response, _a2 error) *MockNotificationAPI_RemoveTeamFromRuleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_RemoveTeamFromRuleExecute_Call) RunAndReturn(run func(ApiRemoveTeamFromRuleRequest) (*NotificationRule, *http.Response, error)) *MockNotificationAPI_RemoveTeamFromRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreDefaultTemplates provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) RestoreDefaultTemplates(ctx context.Context) ApiRestoreDefaultTemplatesRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDefaultTemplates")
	}

	var r0 ApiRestoreDefaultTemplatesRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiRestoreDefaultTemplatesRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiRestoreDefaultTemplatesRequest)
	}

	return r0
}

// MockNotificationAPI_RestoreDefaultTemplates_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreDefaultTemplates'
type MockNotificationAPI_RestoreDefaultTemplates_Call struct {
	*mock.Call
}

// RestoreDefaultTemplates is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) RestoreDefaultTemplates(ctx interface{}) *MockNotificationAPI_RestoreDefaultTemplates_Call {
	return &MockNotificationAPI_RestoreDefaultTemplates_Call{Call: _e.mock.On("RestoreDefaultTemplates", ctx)}
}

func (_c *MockNotificationAPI_RestoreDefaultTemplates_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_RestoreDefaultTemplates_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_RestoreDefaultTemplates_Call) Return(_a0 ApiRestoreDefaultTemplatesRequest) *MockNotificationAPI_RestoreDefaultTemplates_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_RestoreDefaultTemplates_Call) RunAndReturn(run func(context.Context) ApiRestoreDefaultTemplatesRequest) *MockNotificationAPI_RestoreDefaultTemplates_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreDefaultTemplatesExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) RestoreDefaultTemplatesExecute(r ApiRestoreDefaultTemplatesRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDefaultTemplatesExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiRestoreDefaultTemplatesRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRestoreDefaultTemplatesRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRestoreDefaultTemplatesRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationAPI_RestoreDefaultTemplatesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreDefaultTemplatesExecute'
type MockNotificationAPI_RestoreDefaultTemplatesExecute_Call struct {
	*mock.Call
}

// RestoreDefaultTemplatesExecute is a helper method to define mock.On call
//   - r ApiRestoreDefaultTemplatesRequest
func (_e *MockNotificationAPI_Expecter) RestoreDefaultTemplatesExecute(r interface{}) *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call {
	return &MockNotificationAPI_RestoreDefaultTemplatesExecute_Call{Call: _e.mock.On("RestoreDefaultTemplatesExecute", r)}
}

func (_c *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call) Run(run func(r ApiRestoreDefaultTemplatesRequest)) *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRestoreDefaultTemplatesRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call) Return(_a0 *http.Response, _a1 error) *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call) RunAndReturn(run func(ApiRestoreDefaultTemplatesRequest) (*http.Response, error)) *MockNotificationAPI_RestoreDefaultTemplatesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TestNotificationRule provides a mock function with given fields: ctx, uuid
func (_m *MockNotificationAPI) TestNotificationRule(ctx context.Context, uuid string) ApiTestNotificationRuleRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for TestNotificationRule")
	}

	var r0 ApiTestNotificationRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiTestNotificationRuleRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiTestNotificationRuleRequest)
	}

	return r0
}

// MockNotificationAPI_TestNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestNotificationRule'
type MockNotificationAPI_TestNotificationRule_Call struct {
	*mock.Call
}

// TestNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockNotificationAPI_Expecter) TestNotificationRule(ctx interface{}, uuid interface{}) *MockNotificationAPI_TestNotificationRule_Call {
	return &MockNotificationAPI_TestNotificationRule_Call{Call: _e.mock.On("TestNotificationRule", ctx, uuid)}
}

func (_c *MockNotificationAPI_TestNotificationRule_Call) Run(run func(ctx context.Context, uuid string)) *MockNotificationAPI_TestNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationAPI_TestNotificationRule_Call) Return(_a0 ApiTestNotificationRuleRequest) *MockNotificationAPI_TestNotificationRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_TestNotificationRule_Call) RunAndReturn(run func(context.Context, string) ApiTestNotificationRuleRequest) *MockNotificationAPI_TestNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// TestNotificationRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) TestNotificationRuleExecute(r ApiTestNotificationRuleRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TestNotificationRuleExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiTestNotificationRuleRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiTestNotificationRuleRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiTestNotificationRuleRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationAPI_TestNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestNotificationRuleExecute'
type MockNotificationAPI_TestNotificationRuleExecute_Call struct {
	*mock.Call
}

// TestNotificationRuleExecute is a helper method to define mock.On call
//   - r ApiTestNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) TestNotificationRuleExecute(r interface{}) *MockNotificationAPI_TestNotificationRuleExecute_Call {
	return &MockNotificationAPI_TestNotificationRuleExecute_Call{Call: _e.mock.On("TestNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_TestNotificationRuleExecute_Call) Run(run func(r ApiTestNotificationRuleRequest)) *MockNotificationAPI_TestNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTestNotificationRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_TestNotificationRuleExecute_Call) Return(_a0 *http.Response, _a1 error) *MockNotificationAPI_TestNotificationRuleExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationAPI_TestNotificationRuleExecute_Call) RunAndReturn(run func(ApiTestNotificationRuleRequest) (*http.Response, error)) *MockNotificationAPI_TestNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TestSmtpPublisherConfig provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) TestSmtpPublisherConfig(ctx context.Context) ApiTestSmtpPublisherConfigRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TestSmtpPublisherConfig")
	}

	var r0 ApiTestSmtpPublisherConfigRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiTestSmtpPublisherConfigRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiTestSmtpPublisherConfigRequest)
	}

	return r0
}

// MockNotificationAPI_TestSmtpPublisherConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestSmtpPublisherConfig'
type MockNotificationAPI_TestSmtpPublisherConfig_Call struct {
	*mock.Call
}

// TestSmtpPublisherConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) TestSmtpPublisherConfig(ctx interface{}) *MockNotificationAPI_TestSmtpPublisherConfig_Call {
	return &MockNotificationAPI_TestSmtpPublisherConfig_Call{Call: _e.mock.On("TestSmtpPublisherConfig", ctx)}
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfig_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_TestSmtpPublisherConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfig_Call) Return(_a0 ApiTestSmtpPublisherConfigRequest) *MockNotificationAPI_TestSmtpPublisherConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfig_Call) RunAndReturn(run func(context.Context) ApiTestSmtpPublisherConfigRequest) *MockNotificationAPI_TestSmtpPublisherConfig_Call {
	_c.Call.Return(run)
	return _c
}

// TestSmtpPublisherConfigExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) TestSmtpPublisherConfigExecute(r ApiTestSmtpPublisherConfigRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TestSmtpPublisherConfigExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiTestSmtpPublisherConfigRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiTestSmtpPublisherConfigRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiTestSmtpPublisherConfigRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationAPI_TestSmtpPublisherConfigExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TestSmtpPublisherConfigExecute'
type MockNotificationAPI_TestSmtpPublisherConfigExecute_Call struct {
	*mock.Call
}

// TestSmtpPublisherConfigExecute is a helper method to define mock.On call
//   - r ApiTestSmtpPublisherConfigRequest
func (_e *MockNotificationAPI_Expecter) TestSmtpPublisherConfigExecute(r interface{}) *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call {
	return &MockNotificationAPI_TestSmtpPublisherConfigExecute_Call{Call: _e.mock.On("TestSmtpPublisherConfigExecute", r)}
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call) Run(run func(r ApiTestSmtpPublisherConfigRequest)) *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTestSmtpPublisherConfigRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call) Return(_a0 *http.Response, _a1 error) *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call) RunAndReturn(run func(ApiTestSmtpPublisherConfigRequest) (*http.Response, error)) *MockNotificationAPI_TestSmtpPublisherConfigExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationPublisher provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) UpdateNotificationPublisher(ctx context.Context) ApiUpdateNotificationPublisherRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationPublisher")
	}

	var r0 ApiUpdateNotificationPublisherRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateNotificationPublisherRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateNotificationPublisherRequest)
	}

	return r0
}

// MockNotificationAPI_UpdateNotificationPublisher_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationPublisher'
type MockNotificationAPI_UpdateNotificationPublisher_Call struct {
	*mock.Call
}

// UpdateNotificationPublisher is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) UpdateNotificationPublisher(ctx interface{}) *MockNotificationAPI_UpdateNotificationPublisher_Call {
	return &MockNotificationAPI_UpdateNotificationPublisher_Call{Call: _e.mock.On("UpdateNotificationPublisher", ctx)}
}

func (_c *MockNotificationAPI_UpdateNotificationPublisher_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_UpdateNotificationPublisher_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationPublisher_Call) Return(_a0 ApiUpdateNotificationPublisherRequest) *MockNotificationAPI_UpdateNotificationPublisher_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationPublisher_Call) RunAndReturn(run func(context.Context) ApiUpdateNotificationPublisherRequest) *MockNotificationAPI_UpdateNotificationPublisher_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationPublisherExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) UpdateNotificationPublisherExecute(r ApiUpdateNotificationPublisherRequest) (*NotificationPublisher, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationPublisherExecute")
	}

	var r0 *NotificationPublisher
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateNotificationPublisherRequest) (*NotificationPublisher, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateNotificationPublisherRequest) *NotificationPublisher); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationPublisher)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateNotificationPublisherRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateNotificationPublisherRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_UpdateNotificationPublisherExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationPublisherExecute'
type MockNotificationAPI_UpdateNotificationPublisherExecute_Call struct {
	*mock.Call
}

// UpdateNotificationPublisherExecute is a helper method to define mock.On call
//   - r ApiUpdateNotificationPublisherRequest
func (_e *MockNotificationAPI_Expecter) UpdateNotificationPublisherExecute(r interface{}) *MockNotificationAPI_UpdateNotificationPublisherExecute_Call {
	return &MockNotificationAPI_UpdateNotificationPublisherExecute_Call{Call: _e.mock.On("UpdateNotificationPublisherExecute", r)}
}

func (_c *MockNotificationAPI_UpdateNotificationPublisherExecute_Call) Run(run func(r ApiUpdateNotificationPublisherRequest)) *MockNotificationAPI_UpdateNotificationPublisherExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateNotificationPublisherRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationPublisherExecute_Call) Return(_a0 *NotificationPublisher, _a1 *http.Response, _a2 error) *MockNotificationAPI_UpdateNotificationPublisherExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationPublisherExecute_Call) RunAndReturn(run func(ApiUpdateNotificationPublisherRequest) (*NotificationPublisher, *http.Response, error)) *MockNotificationAPI_UpdateNotificationPublisherExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationRule provides a mock function with given fields: ctx
func (_m *MockNotificationAPI) UpdateNotificationRule(ctx context.Context) ApiUpdateNotificationRuleRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationRule")
	}

	var r0 ApiUpdateNotificationRuleRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateNotificationRuleRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateNotificationRuleRequest)
	}

	return r0
}

// MockNotificationAPI_UpdateNotificationRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationRule'
type MockNotificationAPI_UpdateNotificationRule_Call struct {
	*mock.Call
}

// UpdateNotificationRule is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockNotificationAPI_Expecter) UpdateNotificationRule(ctx interface{}) *MockNotificationAPI_UpdateNotificationRule_Call {
	return &MockNotificationAPI_UpdateNotificationRule_Call{Call: _e.mock.On("UpdateNotificationRule", ctx)}
}

func (_c *MockNotificationAPI_UpdateNotificationRule_Call) Run(run func(ctx context.Context)) *MockNotificationAPI_UpdateNotificationRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationRule_Call) Return(_a0 ApiUpdateNotificationRuleRequest) *MockNotificationAPI_UpdateNotificationRule_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationRule_Call) RunAndReturn(run func(context.Context) ApiUpdateNotificationRuleRequest) *MockNotificationAPI_UpdateNotificationRule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateNotificationRuleExecute provides a mock function with given fields: r
func (_m *MockNotificationAPI) UpdateNotificationRuleExecute(r ApiUpdateNotificationRuleRequest) (*NotificationRule, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationRuleExecute")
	}

	var r0 *NotificationRule
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateNotificationRuleRequest) (*NotificationRule, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateNotificationRuleRequest) *NotificationRule); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*NotificationRule)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateNotificationRuleRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateNotificationRuleRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockNotificationAPI_UpdateNotificationRuleExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateNotificationRuleExecute'
type MockNotificationAPI_UpdateNotificationRuleExecute_Call struct {
	*mock.Call
}

// UpdateNotificationRuleExecute is a helper method to define mock.On call
//   - r ApiUpdateNotificationRuleRequest
func (_e *MockNotificationAPI_Expecter) UpdateNotificationRuleExecute(r interface{}) *MockNotificationAPI_UpdateNotificationRuleExecute_Call {
	return &MockNotificationAPI_UpdateNotificationRuleExecute_Call{Call: _e.mock.On("UpdateNotificationRuleExecute", r)}
}

func (_c *MockNotificationAPI_UpdateNotificationRuleExecute_Call) Run(run func(r ApiUpdateNotificationRuleRequest)) *MockNotificationAPI_UpdateNotificationRuleExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateNotificationRuleRequest))
	})
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationRuleExecute_Call) Return(_a0 *NotificationRule, _a1 *http.Response, _a2 error) *MockNotificationAPI_UpdateNotificationRuleExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockNotificationAPI_UpdateNotificationRuleExecute_Call) RunAndReturn(run func(ApiUpdateNotificationRuleRequest) (*NotificationRule, *http.Response, error)) *MockNotificationAPI_UpdateNotificationRuleExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationAPI creates a new instance of MockNotificationAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationAPI {
	mock := &MockNotificationAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
