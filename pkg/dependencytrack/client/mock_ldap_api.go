// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockLdapAPI is an autogenerated mock type for the LdapAPI type
type MockLdapAPI struct {
	mock.Mock
}

type MockLdapAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLdapAPI) EXPECT() *MockLdapAPI_Expecter {
	return &MockLdapAPI_Expecter{mock: &_m.Mock}
}

// AddMapping1 provides a mock function with given fields: ctx
func (_m *MockLdapAPI) AddMapping1(ctx context.Context) ApiAddMapping1Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping1")
	}

	var r0 ApiAddMapping1Request
	if rf, ok := ret.Get(0).(func(context.Context) ApiAddMapping1Request); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiAddMapping1Request)
	}

	return r0
}

// MockLdapAPI_AddMapping1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping1'
type MockLdapAPI_AddMapping1_Call struct {
	*mock.Call
}

// AddMapping1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLdapAPI_Expecter) AddMapping1(ctx interface{}) *MockLdapAPI_AddMapping1_Call {
	return &MockLdapAPI_AddMapping1_Call{Call: _e.mock.On("AddMapping1", ctx)}
}

func (_c *MockLdapAPI_AddMapping1_Call) Run(run func(ctx context.Context)) *MockLdapAPI_AddMapping1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLdapAPI_AddMapping1_Call) Return(_a0 ApiAddMapping1Request) *MockLdapAPI_AddMapping1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLdapAPI_AddMapping1_Call) RunAndReturn(run func(context.Context) ApiAddMapping1Request) *MockLdapAPI_AddMapping1_Call {
	_c.Call.Return(run)
	return _c
}

// AddMapping1Execute provides a mock function with given fields: r
func (_m *MockLdapAPI) AddMapping1Execute(r ApiAddMapping1Request) (*MappedLdapGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping1Execute")
	}

	var r0 *MappedLdapGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddMapping1Request) (*MappedLdapGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddMapping1Request) *MappedLdapGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MappedLdapGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddMapping1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddMapping1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLdapAPI_AddMapping1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping1Execute'
type MockLdapAPI_AddMapping1Execute_Call struct {
	*mock.Call
}

// AddMapping1Execute is a helper method to define mock.On call
//   - r ApiAddMapping1Request
func (_e *MockLdapAPI_Expecter) AddMapping1Execute(r interface{}) *MockLdapAPI_AddMapping1Execute_Call {
	return &MockLdapAPI_AddMapping1Execute_Call{Call: _e.mock.On("AddMapping1Execute", r)}
}

func (_c *MockLdapAPI_AddMapping1Execute_Call) Run(run func(r ApiAddMapping1Request)) *MockLdapAPI_AddMapping1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddMapping1Request))
	})
	return _c
}

func (_c *MockLdapAPI_AddMapping1Execute_Call) Return(_a0 *MappedLdapGroup, _a1 *http.Response, _a2 error) *MockLdapAPI_AddMapping1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLdapAPI_AddMapping1Execute_Call) RunAndReturn(run func(ApiAddMapping1Request) (*MappedLdapGroup, *http.Response, error)) *MockLdapAPI_AddMapping1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping1 provides a mock function with given fields: ctx, uuid
func (_m *MockLdapAPI) DeleteMapping1(ctx context.Context, uuid string) ApiDeleteMapping1Request {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping1")
	}

	var r0 ApiDeleteMapping1Request
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteMapping1Request); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteMapping1Request)
	}

	return r0
}

// MockLdapAPI_DeleteMapping1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping1'
type MockLdapAPI_DeleteMapping1_Call struct {
	*mock.Call
}

// DeleteMapping1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockLdapAPI_Expecter) DeleteMapping1(ctx interface{}, uuid interface{}) *MockLdapAPI_DeleteMapping1_Call {
	return &MockLdapAPI_DeleteMapping1_Call{Call: _e.mock.On("DeleteMapping1", ctx, uuid)}
}

func (_c *MockLdapAPI_DeleteMapping1_Call) Run(run func(ctx context.Context, uuid string)) *MockLdapAPI_DeleteMapping1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLdapAPI_DeleteMapping1_Call) Return(_a0 ApiDeleteMapping1Request) *MockLdapAPI_DeleteMapping1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLdapAPI_DeleteMapping1_Call) RunAndReturn(run func(context.Context, string) ApiDeleteMapping1Request) *MockLdapAPI_DeleteMapping1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping1Execute provides a mock function with given fields: r
func (_m *MockLdapAPI) DeleteMapping1Execute(r ApiDeleteMapping1Request) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping1Execute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteMapping1Request) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteMapping1Request) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteMapping1Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLdapAPI_DeleteMapping1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping1Execute'
type MockLdapAPI_DeleteMapping1Execute_Call struct {
	*mock.Call
}

// DeleteMapping1Execute is a helper method to define mock.On call
//   - r ApiDeleteMapping1Request
func (_e *MockLdapAPI_Expecter) DeleteMapping1Execute(r interface{}) *MockLdapAPI_DeleteMapping1Execute_Call {
	return &MockLdapAPI_DeleteMapping1Execute_Call{Call: _e.mock.On("DeleteMapping1Execute", r)}
}

func (_c *MockLdapAPI_DeleteMapping1Execute_Call) Run(run func(r ApiDeleteMapping1Request)) *MockLdapAPI_DeleteMapping1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteMapping1Request))
	})
	return _c
}

func (_c *MockLdapAPI_DeleteMapping1Execute_Call) Return(_a0 *http.Response, _a1 error) *MockLdapAPI_DeleteMapping1Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLdapAPI_DeleteMapping1Execute_Call) RunAndReturn(run func(ApiDeleteMapping1Request) (*http.Response, error)) *MockLdapAPI_DeleteMapping1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLdapGroups provides a mock function with given fields: ctx
func (_m *MockLdapAPI) RetrieveLdapGroups(ctx context.Context) ApiRetrieveLdapGroupsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLdapGroups")
	}

	var r0 ApiRetrieveLdapGroupsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiRetrieveLdapGroupsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiRetrieveLdapGroupsRequest)
	}

	return r0
}

// MockLdapAPI_RetrieveLdapGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLdapGroups'
type MockLdapAPI_RetrieveLdapGroups_Call struct {
	*mock.Call
}

// RetrieveLdapGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLdapAPI_Expecter) RetrieveLdapGroups(ctx interface{}) *MockLdapAPI_RetrieveLdapGroups_Call {
	return &MockLdapAPI_RetrieveLdapGroups_Call{Call: _e.mock.On("RetrieveLdapGroups", ctx)}
}

func (_c *MockLdapAPI_RetrieveLdapGroups_Call) Run(run func(ctx context.Context)) *MockLdapAPI_RetrieveLdapGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups_Call) Return(_a0 ApiRetrieveLdapGroupsRequest) *MockLdapAPI_RetrieveLdapGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups_Call) RunAndReturn(run func(context.Context) ApiRetrieveLdapGroupsRequest) *MockLdapAPI_RetrieveLdapGroups_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLdapGroups1 provides a mock function with given fields: ctx, uuid
func (_m *MockLdapAPI) RetrieveLdapGroups1(ctx context.Context, uuid string) ApiRetrieveLdapGroups1Request {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLdapGroups1")
	}

	var r0 ApiRetrieveLdapGroups1Request
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiRetrieveLdapGroups1Request); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiRetrieveLdapGroups1Request)
	}

	return r0
}

// MockLdapAPI_RetrieveLdapGroups1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLdapGroups1'
type MockLdapAPI_RetrieveLdapGroups1_Call struct {
	*mock.Call
}

// RetrieveLdapGroups1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockLdapAPI_Expecter) RetrieveLdapGroups1(ctx interface{}, uuid interface{}) *MockLdapAPI_RetrieveLdapGroups1_Call {
	return &MockLdapAPI_RetrieveLdapGroups1_Call{Call: _e.mock.On("RetrieveLdapGroups1", ctx, uuid)}
}

func (_c *MockLdapAPI_RetrieveLdapGroups1_Call) Run(run func(ctx context.Context, uuid string)) *MockLdapAPI_RetrieveLdapGroups1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups1_Call) Return(_a0 ApiRetrieveLdapGroups1Request) *MockLdapAPI_RetrieveLdapGroups1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups1_Call) RunAndReturn(run func(context.Context, string) ApiRetrieveLdapGroups1Request) *MockLdapAPI_RetrieveLdapGroups1_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLdapGroups1Execute provides a mock function with given fields: r
func (_m *MockLdapAPI) RetrieveLdapGroups1Execute(r ApiRetrieveLdapGroups1Request) ([]MappedLdapGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLdapGroups1Execute")
	}

	var r0 []MappedLdapGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRetrieveLdapGroups1Request) ([]MappedLdapGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRetrieveLdapGroups1Request) []MappedLdapGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]MappedLdapGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRetrieveLdapGroups1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRetrieveLdapGroups1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLdapAPI_RetrieveLdapGroups1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLdapGroups1Execute'
type MockLdapAPI_RetrieveLdapGroups1Execute_Call struct {
	*mock.Call
}

// RetrieveLdapGroups1Execute is a helper method to define mock.On call
//   - r ApiRetrieveLdapGroups1Request
func (_e *MockLdapAPI_Expecter) RetrieveLdapGroups1Execute(r interface{}) *MockLdapAPI_RetrieveLdapGroups1Execute_Call {
	return &MockLdapAPI_RetrieveLdapGroups1Execute_Call{Call: _e.mock.On("RetrieveLdapGroups1Execute", r)}
}

func (_c *MockLdapAPI_RetrieveLdapGroups1Execute_Call) Run(run func(r ApiRetrieveLdapGroups1Request)) *MockLdapAPI_RetrieveLdapGroups1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRetrieveLdapGroups1Request))
	})
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups1Execute_Call) Return(_a0 []MappedLdapGroup, _a1 *http.Response, _a2 error) *MockLdapAPI_RetrieveLdapGroups1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroups1Execute_Call) RunAndReturn(run func(ApiRetrieveLdapGroups1Request) ([]MappedLdapGroup, *http.Response, error)) *MockLdapAPI_RetrieveLdapGroups1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveLdapGroupsExecute provides a mock function with given fields: r
func (_m *MockLdapAPI) RetrieveLdapGroupsExecute(r ApiRetrieveLdapGroupsRequest) ([]string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveLdapGroupsExecute")
	}

	var r0 []string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRetrieveLdapGroupsRequest) ([]string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRetrieveLdapGroupsRequest) []string); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRetrieveLdapGroupsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRetrieveLdapGroupsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLdapAPI_RetrieveLdapGroupsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveLdapGroupsExecute'
type MockLdapAPI_RetrieveLdapGroupsExecute_Call struct {
	*mock.Call
}

// RetrieveLdapGroupsExecute is a helper method to define mock.On call
//   - r ApiRetrieveLdapGroupsRequest
func (_e *MockLdapAPI_Expecter) RetrieveLdapGroupsExecute(r interface{}) *MockLdapAPI_RetrieveLdapGroupsExecute_Call {
	return &MockLdapAPI_RetrieveLdapGroupsExecute_Call{Call: _e.mock.On("RetrieveLdapGroupsExecute", r)}
}

func (_c *MockLdapAPI_RetrieveLdapGroupsExecute_Call) Run(run func(r ApiRetrieveLdapGroupsRequest)) *MockLdapAPI_RetrieveLdapGroupsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRetrieveLdapGroupsRequest))
	})
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroupsExecute_Call) Return(_a0 []string, _a1 *http.Response, _a2 error) *MockLdapAPI_RetrieveLdapGroupsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLdapAPI_RetrieveLdapGroupsExecute_Call) RunAndReturn(run func(ApiRetrieveLdapGroupsRequest) ([]string, *http.Response, error)) *MockLdapAPI_RetrieveLdapGroupsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLdapAPI creates a new instance of MockLdapAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLdapAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLdapAPI {
	mock := &MockLdapAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
