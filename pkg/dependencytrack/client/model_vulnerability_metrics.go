/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VulnerabilityMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerabilityMetrics{}

// VulnerabilityMetrics struct for VulnerabilityMetrics
type VulnerabilityMetrics struct {
	Year *int32 `json:"year,omitempty"`
	Month *int32 `json:"month,omitempty"`
	Count *int32 `json:"count,omitempty"`
	// UNIX epoch timestamp in milliseconds
	MeasuredAt int64 `json:"measuredAt"`
}

type _VulnerabilityMetrics VulnerabilityMetrics

// NewVulnerabilityMetrics instantiates a new VulnerabilityMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilityMetrics(measuredAt int64) *VulnerabilityMetrics {
	this := VulnerabilityMetrics{}
	this.MeasuredAt = measuredAt
	return &this
}

// NewVulnerabilityMetricsWithDefaults instantiates a new VulnerabilityMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityMetricsWithDefaults() *VulnerabilityMetrics {
	this := VulnerabilityMetrics{}
	return &this
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *VulnerabilityMetrics) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityMetrics) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *VulnerabilityMetrics) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *VulnerabilityMetrics) SetYear(v int32) {
	o.Year = &v
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *VulnerabilityMetrics) GetMonth() int32 {
	if o == nil || IsNil(o.Month) {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityMetrics) GetMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *VulnerabilityMetrics) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *VulnerabilityMetrics) SetMonth(v int32) {
	o.Month = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *VulnerabilityMetrics) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VulnerabilityMetrics) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *VulnerabilityMetrics) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *VulnerabilityMetrics) SetCount(v int32) {
	o.Count = &v
}

// GetMeasuredAt returns the MeasuredAt field value
func (o *VulnerabilityMetrics) GetMeasuredAt() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MeasuredAt
}

// GetMeasuredAtOk returns a tuple with the MeasuredAt field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityMetrics) GetMeasuredAtOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MeasuredAt, true
}

// SetMeasuredAt sets field value
func (o *VulnerabilityMetrics) SetMeasuredAt(v int64) {
	o.MeasuredAt = v
}

func (o VulnerabilityMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerabilityMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Year) {
		toSerialize["year"] = o.Year
	}
	if !IsNil(o.Month) {
		toSerialize["month"] = o.Month
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	toSerialize["measuredAt"] = o.MeasuredAt
	return toSerialize, nil
}

func (o *VulnerabilityMetrics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"measuredAt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVulnerabilityMetrics := _VulnerabilityMetrics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVulnerabilityMetrics)

	if err != nil {
		return err
	}

	*o = VulnerabilityMetrics(varVulnerabilityMetrics)

	return err
}

type NullableVulnerabilityMetrics struct {
	value *VulnerabilityMetrics
	isSet bool
}

func (v NullableVulnerabilityMetrics) Get() *VulnerabilityMetrics {
	return v.value
}

func (v *NullableVulnerabilityMetrics) Set(val *VulnerabilityMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilityMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilityMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilityMetrics(val *VulnerabilityMetrics) *NullableVulnerabilityMetrics {
	return &NullableVulnerabilityMetrics{value: val, isSet: true}
}

func (v NullableVulnerabilityMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilityMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


