// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockIntegrationAPI is an autogenerated mock type for the IntegrationAPI type
type MockIntegrationAPI struct {
	mock.Mock
}

type MockIntegrationAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIntegrationAPI) EXPECT() *MockIntegrationAPI_Expecter {
	return &MockIntegrationAPI_Expecter{mock: &_m.Mock}
}

// GetAllEcosystems provides a mock function with given fields: ctx
func (_m *MockIntegrationAPI) GetAllEcosystems(ctx context.Context) ApiGetAllEcosystemsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEcosystems")
	}

	var r0 ApiGetAllEcosystemsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetAllEcosystemsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetAllEcosystemsRequest)
	}

	return r0
}

// MockIntegrationAPI_GetAllEcosystems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEcosystems'
type MockIntegrationAPI_GetAllEcosystems_Call struct {
	*mock.Call
}

// GetAllEcosystems is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIntegrationAPI_Expecter) GetAllEcosystems(ctx interface{}) *MockIntegrationAPI_GetAllEcosystems_Call {
	return &MockIntegrationAPI_GetAllEcosystems_Call{Call: _e.mock.On("GetAllEcosystems", ctx)}
}

func (_c *MockIntegrationAPI_GetAllEcosystems_Call) Run(run func(ctx context.Context)) *MockIntegrationAPI_GetAllEcosystems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIntegrationAPI_GetAllEcosystems_Call) Return(_a0 ApiGetAllEcosystemsRequest) *MockIntegrationAPI_GetAllEcosystems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIntegrationAPI_GetAllEcosystems_Call) RunAndReturn(run func(context.Context) ApiGetAllEcosystemsRequest) *MockIntegrationAPI_GetAllEcosystems_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllEcosystemsExecute provides a mock function with given fields: r
func (_m *MockIntegrationAPI) GetAllEcosystemsExecute(r ApiGetAllEcosystemsRequest) ([]string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllEcosystemsExecute")
	}

	var r0 []string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllEcosystemsRequest) ([]string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllEcosystemsRequest) []string); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllEcosystemsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllEcosystemsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIntegrationAPI_GetAllEcosystemsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEcosystemsExecute'
type MockIntegrationAPI_GetAllEcosystemsExecute_Call struct {
	*mock.Call
}

// GetAllEcosystemsExecute is a helper method to define mock.On call
//   - r ApiGetAllEcosystemsRequest
func (_e *MockIntegrationAPI_Expecter) GetAllEcosystemsExecute(r interface{}) *MockIntegrationAPI_GetAllEcosystemsExecute_Call {
	return &MockIntegrationAPI_GetAllEcosystemsExecute_Call{Call: _e.mock.On("GetAllEcosystemsExecute", r)}
}

func (_c *MockIntegrationAPI_GetAllEcosystemsExecute_Call) Run(run func(r ApiGetAllEcosystemsRequest)) *MockIntegrationAPI_GetAllEcosystemsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllEcosystemsRequest))
	})
	return _c
}

func (_c *MockIntegrationAPI_GetAllEcosystemsExecute_Call) Return(_a0 []string, _a1 *http.Response, _a2 error) *MockIntegrationAPI_GetAllEcosystemsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIntegrationAPI_GetAllEcosystemsExecute_Call) RunAndReturn(run func(ApiGetAllEcosystemsRequest) ([]string, *http.Response, error)) *MockIntegrationAPI_GetAllEcosystemsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetInactiveEcosystems provides a mock function with given fields: ctx
func (_m *MockIntegrationAPI) GetInactiveEcosystems(ctx context.Context) ApiGetInactiveEcosystemsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetInactiveEcosystems")
	}

	var r0 ApiGetInactiveEcosystemsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetInactiveEcosystemsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetInactiveEcosystemsRequest)
	}

	return r0
}

// MockIntegrationAPI_GetInactiveEcosystems_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInactiveEcosystems'
type MockIntegrationAPI_GetInactiveEcosystems_Call struct {
	*mock.Call
}

// GetInactiveEcosystems is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIntegrationAPI_Expecter) GetInactiveEcosystems(ctx interface{}) *MockIntegrationAPI_GetInactiveEcosystems_Call {
	return &MockIntegrationAPI_GetInactiveEcosystems_Call{Call: _e.mock.On("GetInactiveEcosystems", ctx)}
}

func (_c *MockIntegrationAPI_GetInactiveEcosystems_Call) Run(run func(ctx context.Context)) *MockIntegrationAPI_GetInactiveEcosystems_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIntegrationAPI_GetInactiveEcosystems_Call) Return(_a0 ApiGetInactiveEcosystemsRequest) *MockIntegrationAPI_GetInactiveEcosystems_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIntegrationAPI_GetInactiveEcosystems_Call) RunAndReturn(run func(context.Context) ApiGetInactiveEcosystemsRequest) *MockIntegrationAPI_GetInactiveEcosystems_Call {
	_c.Call.Return(run)
	return _c
}

// GetInactiveEcosystemsExecute provides a mock function with given fields: r
func (_m *MockIntegrationAPI) GetInactiveEcosystemsExecute(r ApiGetInactiveEcosystemsRequest) ([]string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetInactiveEcosystemsExecute")
	}

	var r0 []string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetInactiveEcosystemsRequest) ([]string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetInactiveEcosystemsRequest) []string); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetInactiveEcosystemsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetInactiveEcosystemsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIntegrationAPI_GetInactiveEcosystemsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInactiveEcosystemsExecute'
type MockIntegrationAPI_GetInactiveEcosystemsExecute_Call struct {
	*mock.Call
}

// GetInactiveEcosystemsExecute is a helper method to define mock.On call
//   - r ApiGetInactiveEcosystemsRequest
func (_e *MockIntegrationAPI_Expecter) GetInactiveEcosystemsExecute(r interface{}) *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call {
	return &MockIntegrationAPI_GetInactiveEcosystemsExecute_Call{Call: _e.mock.On("GetInactiveEcosystemsExecute", r)}
}

func (_c *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call) Run(run func(r ApiGetInactiveEcosystemsRequest)) *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetInactiveEcosystemsRequest))
	})
	return _c
}

func (_c *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call) Return(_a0 []string, _a1 *http.Response, _a2 error) *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call) RunAndReturn(run func(ApiGetInactiveEcosystemsRequest) ([]string, *http.Response, error)) *MockIntegrationAPI_GetInactiveEcosystemsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIntegrationAPI creates a new instance of MockIntegrationAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIntegrationAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIntegrationAPI {
	mock := &MockIntegrationAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
