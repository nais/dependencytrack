/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IsTokenBeingProcessedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IsTokenBeingProcessedResponse{}

// IsTokenBeingProcessedResponse struct for IsTokenBeingProcessedResponse
type IsTokenBeingProcessedResponse struct {
	Processing bool `json:"processing"`
}

type _IsTokenBeingProcessedResponse IsTokenBeingProcessedResponse

// NewIsTokenBeingProcessedResponse instantiates a new IsTokenBeingProcessedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsTokenBeingProcessedResponse(processing bool) *IsTokenBeingProcessedResponse {
	this := IsTokenBeingProcessedResponse{}
	this.Processing = processing
	return &this
}

// NewIsTokenBeingProcessedResponseWithDefaults instantiates a new IsTokenBeingProcessedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsTokenBeingProcessedResponseWithDefaults() *IsTokenBeingProcessedResponse {
	this := IsTokenBeingProcessedResponse{}
	return &this
}

// GetProcessing returns the Processing field value
func (o *IsTokenBeingProcessedResponse) GetProcessing() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Processing
}

// GetProcessingOk returns a tuple with the Processing field value
// and a boolean to check if the value has been set.
func (o *IsTokenBeingProcessedResponse) GetProcessingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Processing, true
}

// SetProcessing sets field value
func (o *IsTokenBeingProcessedResponse) SetProcessing(v bool) {
	o.Processing = v
}

func (o IsTokenBeingProcessedResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IsTokenBeingProcessedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["processing"] = o.Processing
	return toSerialize, nil
}

func (o *IsTokenBeingProcessedResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"processing",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIsTokenBeingProcessedResponse := _IsTokenBeingProcessedResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIsTokenBeingProcessedResponse)

	if err != nil {
		return err
	}

	*o = IsTokenBeingProcessedResponse(varIsTokenBeingProcessedResponse)

	return err
}

type NullableIsTokenBeingProcessedResponse struct {
	value *IsTokenBeingProcessedResponse
	isSet bool
}

func (v NullableIsTokenBeingProcessedResponse) Get() *IsTokenBeingProcessedResponse {
	return v.value
}

func (v *NullableIsTokenBeingProcessedResponse) Set(val *IsTokenBeingProcessedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIsTokenBeingProcessedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIsTokenBeingProcessedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsTokenBeingProcessedResponse(val *IsTokenBeingProcessedResponse) *NullableIsTokenBeingProcessedResponse {
	return &NullableIsTokenBeingProcessedResponse{value: val, isSet: true}
}

func (v NullableIsTokenBeingProcessedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsTokenBeingProcessedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


