/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ViolationAPI interface {

	/*
	GetViolations Returns a list of all policy violations for the entire portfolio

	<p>Requires permission <strong>VIEW_POLICY_VIOLATION</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetViolationsRequest
	*/
	GetViolations(ctx context.Context) ApiGetViolationsRequest

	// GetViolationsExecute executes the request
	//  @return []PolicyViolation
	GetViolationsExecute(r ApiGetViolationsRequest) ([]PolicyViolation, *http.Response, error)

	/*
	GetViolationsByComponent Returns a list of all policy violations for a specific component

	<p>Requires permission <strong>VIEW_POLICY_VIOLATION</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the component
	@return ApiGetViolationsByComponentRequest
	*/
	GetViolationsByComponent(ctx context.Context, uuid string) ApiGetViolationsByComponentRequest

	// GetViolationsByComponentExecute executes the request
	//  @return []PolicyViolation
	GetViolationsByComponentExecute(r ApiGetViolationsByComponentRequest) ([]PolicyViolation, *http.Response, error)

	/*
	GetViolationsByProject Returns a list of all policy violations for a specific project

	<p>Requires permission <strong>VIEW_POLICY_VIOLATION</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the project
	@return ApiGetViolationsByProjectRequest
	*/
	GetViolationsByProject(ctx context.Context, uuid string) ApiGetViolationsByProjectRequest

	// GetViolationsByProjectExecute executes the request
	//  @return []PolicyViolation
	GetViolationsByProjectExecute(r ApiGetViolationsByProjectRequest) ([]PolicyViolation, *http.Response, error)
}

// ViolationAPIService ViolationAPI service
type ViolationAPIService service

type ApiGetViolationsRequest struct {
	ctx context.Context
	ApiService ViolationAPI
	pageNumber *string
	pageSize *string
	offset *string
	limit *string
	sortName *string
	sortOrder *string
	suppressed *bool
	showInactive *bool
	violationState *string
	riskType *string
	policy *string
	analysisState *string
	occurredOnDateFrom *string
	occurredOnDateTo *string
	textSearchField *string
	textSearchInput *string
}

// The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;.
func (r ApiGetViolationsRequest) PageNumber(pageNumber string) ApiGetViolationsRequest {
	r.pageNumber = &pageNumber
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;.
func (r ApiGetViolationsRequest) PageSize(pageSize string) ApiGetViolationsRequest {
	r.pageSize = &pageSize
	return r
}

// Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;.
func (r ApiGetViolationsRequest) Offset(offset string) ApiGetViolationsRequest {
	r.offset = &offset
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;.
func (r ApiGetViolationsRequest) Limit(limit string) ApiGetViolationsRequest {
	r.limit = &limit
	return r
}

// Name of the resource field to sort on.
func (r ApiGetViolationsRequest) SortName(sortName string) ApiGetViolationsRequest {
	r.sortName = &sortName
	return r
}

// Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;.
func (r ApiGetViolationsRequest) SortOrder(sortOrder string) ApiGetViolationsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Optionally includes suppressed violations
func (r ApiGetViolationsRequest) Suppressed(suppressed bool) ApiGetViolationsRequest {
	r.suppressed = &suppressed
	return r
}

// Optionally includes inactive projects
func (r ApiGetViolationsRequest) ShowInactive(showInactive bool) ApiGetViolationsRequest {
	r.showInactive = &showInactive
	return r
}

// Filter by violation state
func (r ApiGetViolationsRequest) ViolationState(violationState string) ApiGetViolationsRequest {
	r.violationState = &violationState
	return r
}

// Filter by risk type
func (r ApiGetViolationsRequest) RiskType(riskType string) ApiGetViolationsRequest {
	r.riskType = &riskType
	return r
}

// Filter by policy
func (r ApiGetViolationsRequest) Policy(policy string) ApiGetViolationsRequest {
	r.policy = &policy
	return r
}

// Filter by analysis state
func (r ApiGetViolationsRequest) AnalysisState(analysisState string) ApiGetViolationsRequest {
	r.analysisState = &analysisState
	return r
}

// Filter occurred on from
func (r ApiGetViolationsRequest) OccurredOnDateFrom(occurredOnDateFrom string) ApiGetViolationsRequest {
	r.occurredOnDateFrom = &occurredOnDateFrom
	return r
}

// Filter occurred on to
func (r ApiGetViolationsRequest) OccurredOnDateTo(occurredOnDateTo string) ApiGetViolationsRequest {
	r.occurredOnDateTo = &occurredOnDateTo
	return r
}

// Filter the text input in these fields
func (r ApiGetViolationsRequest) TextSearchField(textSearchField string) ApiGetViolationsRequest {
	r.textSearchField = &textSearchField
	return r
}

// Filter by this text input
func (r ApiGetViolationsRequest) TextSearchInput(textSearchInput string) ApiGetViolationsRequest {
	r.textSearchInput = &textSearchInput
	return r
}

func (r ApiGetViolationsRequest) Execute() ([]PolicyViolation, *http.Response, error) {
	return r.ApiService.GetViolationsExecute(r)
}

/*
GetViolations Returns a list of all policy violations for the entire portfolio

<p>Requires permission <strong>VIEW_POLICY_VIOLATION</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetViolationsRequest
*/
func (a *ViolationAPIService) GetViolations(ctx context.Context) ApiGetViolationsRequest {
	return ApiGetViolationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []PolicyViolation
func (a *ViolationAPIService) GetViolationsExecute(r ApiGetViolationsRequest) ([]PolicyViolation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PolicyViolation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ViolationAPIService.GetViolations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/violation"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "form", "")
	} else {
		var defaultValue string = "1"
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue string = "100"
		r.pageSize = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sortName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortName", r.sortName, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.suppressed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suppressed", r.suppressed, "form", "")
	}
	if r.showInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "showInactive", r.showInactive, "form", "")
	}
	if r.violationState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "violationState", r.violationState, "form", "")
	}
	if r.riskType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "riskType", r.riskType, "form", "")
	}
	if r.policy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "policy", r.policy, "form", "")
	}
	if r.analysisState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "analysisState", r.analysisState, "form", "")
	}
	if r.occurredOnDateFrom != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredOnDateFrom", r.occurredOnDateFrom, "form", "")
	}
	if r.occurredOnDateTo != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "occurredOnDateTo", r.occurredOnDateTo, "form", "")
	}
	if r.textSearchField != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "textSearchField", r.textSearchField, "form", "")
	}
	if r.textSearchInput != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "textSearchInput", r.textSearchInput, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetViolationsByComponentRequest struct {
	ctx context.Context
	ApiService ViolationAPI
	uuid string
	pageNumber *string
	pageSize *string
	offset *string
	limit *string
	sortName *string
	sortOrder *string
	suppressed *bool
}

// The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;.
func (r ApiGetViolationsByComponentRequest) PageNumber(pageNumber string) ApiGetViolationsByComponentRequest {
	r.pageNumber = &pageNumber
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;.
func (r ApiGetViolationsByComponentRequest) PageSize(pageSize string) ApiGetViolationsByComponentRequest {
	r.pageSize = &pageSize
	return r
}

// Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;.
func (r ApiGetViolationsByComponentRequest) Offset(offset string) ApiGetViolationsByComponentRequest {
	r.offset = &offset
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;.
func (r ApiGetViolationsByComponentRequest) Limit(limit string) ApiGetViolationsByComponentRequest {
	r.limit = &limit
	return r
}

// Name of the resource field to sort on.
func (r ApiGetViolationsByComponentRequest) SortName(sortName string) ApiGetViolationsByComponentRequest {
	r.sortName = &sortName
	return r
}

// Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;.
func (r ApiGetViolationsByComponentRequest) SortOrder(sortOrder string) ApiGetViolationsByComponentRequest {
	r.sortOrder = &sortOrder
	return r
}

// Optionally includes suppressed violations
func (r ApiGetViolationsByComponentRequest) Suppressed(suppressed bool) ApiGetViolationsByComponentRequest {
	r.suppressed = &suppressed
	return r
}

func (r ApiGetViolationsByComponentRequest) Execute() ([]PolicyViolation, *http.Response, error) {
	return r.ApiService.GetViolationsByComponentExecute(r)
}

/*
GetViolationsByComponent Returns a list of all policy violations for a specific component

<p>Requires permission <strong>VIEW_POLICY_VIOLATION</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the component
 @return ApiGetViolationsByComponentRequest
*/
func (a *ViolationAPIService) GetViolationsByComponent(ctx context.Context, uuid string) ApiGetViolationsByComponentRequest {
	return ApiGetViolationsByComponentRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return []PolicyViolation
func (a *ViolationAPIService) GetViolationsByComponentExecute(r ApiGetViolationsByComponentRequest) ([]PolicyViolation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PolicyViolation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ViolationAPIService.GetViolationsByComponent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/violation/component/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "form", "")
	} else {
		var defaultValue string = "1"
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue string = "100"
		r.pageSize = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sortName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortName", r.sortName, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.suppressed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suppressed", r.suppressed, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetViolationsByProjectRequest struct {
	ctx context.Context
	ApiService ViolationAPI
	uuid string
	pageNumber *string
	pageSize *string
	offset *string
	limit *string
	sortName *string
	sortOrder *string
	suppressed *bool
}

// The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;.
func (r ApiGetViolationsByProjectRequest) PageNumber(pageNumber string) ApiGetViolationsByProjectRequest {
	r.pageNumber = &pageNumber
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;.
func (r ApiGetViolationsByProjectRequest) PageSize(pageSize string) ApiGetViolationsByProjectRequest {
	r.pageSize = &pageSize
	return r
}

// Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;.
func (r ApiGetViolationsByProjectRequest) Offset(offset string) ApiGetViolationsByProjectRequest {
	r.offset = &offset
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;.
func (r ApiGetViolationsByProjectRequest) Limit(limit string) ApiGetViolationsByProjectRequest {
	r.limit = &limit
	return r
}

// Name of the resource field to sort on.
func (r ApiGetViolationsByProjectRequest) SortName(sortName string) ApiGetViolationsByProjectRequest {
	r.sortName = &sortName
	return r
}

// Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;.
func (r ApiGetViolationsByProjectRequest) SortOrder(sortOrder string) ApiGetViolationsByProjectRequest {
	r.sortOrder = &sortOrder
	return r
}

// Optionally includes suppressed violations
func (r ApiGetViolationsByProjectRequest) Suppressed(suppressed bool) ApiGetViolationsByProjectRequest {
	r.suppressed = &suppressed
	return r
}

func (r ApiGetViolationsByProjectRequest) Execute() ([]PolicyViolation, *http.Response, error) {
	return r.ApiService.GetViolationsByProjectExecute(r)
}

/*
GetViolationsByProject Returns a list of all policy violations for a specific project

<p>Requires permission <strong>VIEW_POLICY_VIOLATION</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the project
 @return ApiGetViolationsByProjectRequest
*/
func (a *ViolationAPIService) GetViolationsByProject(ctx context.Context, uuid string) ApiGetViolationsByProjectRequest {
	return ApiGetViolationsByProjectRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return []PolicyViolation
func (a *ViolationAPIService) GetViolationsByProjectExecute(r ApiGetViolationsByProjectRequest) ([]PolicyViolation, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []PolicyViolation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ViolationAPIService.GetViolationsByProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/violation/project/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "form", "")
	} else {
		var defaultValue string = "1"
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue string = "100"
		r.pageSize = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sortName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortName", r.sortName, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.suppressed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suppressed", r.suppressed, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
