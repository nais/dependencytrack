/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ComponentAPI interface {

	/*
	CreateComponent Creates a new component

	<p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the project to create a component for
	@return ApiCreateComponentRequest
	*/
	CreateComponent(ctx context.Context, uuid string) ApiCreateComponentRequest

	// CreateComponentExecute executes the request
	//  @return Component
	CreateComponentExecute(r ApiCreateComponentRequest) (*Component, *http.Response, error)

	/*
	DeleteComponent Deletes a component

	<p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the component to delete
	@return ApiDeleteComponentRequest
	*/
	DeleteComponent(ctx context.Context, uuid string) ApiDeleteComponentRequest

	// DeleteComponentExecute executes the request
	DeleteComponentExecute(r ApiDeleteComponentRequest) (*http.Response, error)

	/*
	GetAllComponents Returns a list of all components for a given project

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the project to retrieve components for
	@return ApiGetAllComponentsRequest
	*/
	GetAllComponents(ctx context.Context, uuid string) ApiGetAllComponentsRequest

	// GetAllComponentsExecute executes the request
	//  @return []Component
	GetAllComponentsExecute(r ApiGetAllComponentsRequest) ([]Component, *http.Response, error)

	/*
	GetComponentByHash Returns a list of components that have the specified hash value

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param hash The MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256, BLAKE2b-384, BLAKE2b-512, or BLAKE3 hash of the component to retrieve
	@return ApiGetComponentByHashRequest
	*/
	GetComponentByHash(ctx context.Context, hash string) ApiGetComponentByHashRequest

	// GetComponentByHashExecute executes the request
	//  @return []Component
	GetComponentByHashExecute(r ApiGetComponentByHashRequest) ([]Component, *http.Response, error)

	/*
	GetComponentByIdentity Returns a list of components that have the specified component identity. This resource accepts coordinates (group, name, version) or purl, cpe, or swidTagId

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetComponentByIdentityRequest
	*/
	GetComponentByIdentity(ctx context.Context) ApiGetComponentByIdentityRequest

	// GetComponentByIdentityExecute executes the request
	//  @return []Component
	GetComponentByIdentityExecute(r ApiGetComponentByIdentityRequest) ([]Component, *http.Response, error)

	/*
	GetComponentByUuid Returns a specific component

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the component to retrieve
	@return ApiGetComponentByUuidRequest
	*/
	GetComponentByUuid(ctx context.Context, uuid string) ApiGetComponentByUuidRequest

	// GetComponentByUuidExecute executes the request
	//  @return Component
	GetComponentByUuidExecute(r ApiGetComponentByUuidRequest) (*Component, *http.Response, error)

	/*
	GetDependencyGraphForComponent Returns the expanded dependency graph to every occurrence of a component

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectUuid The UUID of the project to get the expanded dependency graph for
	@param componentUuids List of UUIDs of the components (separated by |) to get the expanded dependency graph for
	@return ApiGetDependencyGraphForComponentRequest
	*/
	GetDependencyGraphForComponent(ctx context.Context, projectUuid string, componentUuids string) ApiGetDependencyGraphForComponentRequest

	// GetDependencyGraphForComponentExecute executes the request
	//  @return map[string]interface{}
	GetDependencyGraphForComponentExecute(r ApiGetDependencyGraphForComponentRequest) (map[string]interface{}, *http.Response, error)

	/*
	IdentifyInternalComponents Requests the identification of internal components in the portfolio

	<p>Requires permission <strong>SYSTEM_CONFIGURATION</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiIdentifyInternalComponentsRequest
	*/
	IdentifyInternalComponents(ctx context.Context) ApiIdentifyInternalComponentsRequest

	// IdentifyInternalComponentsExecute executes the request
	IdentifyInternalComponentsExecute(r ApiIdentifyInternalComponentsRequest) (*http.Response, error)

	/*
	UpdateComponent Updates a component

	<p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateComponentRequest
	*/
	UpdateComponent(ctx context.Context) ApiUpdateComponentRequest

	// UpdateComponentExecute executes the request
	//  @return Component
	UpdateComponentExecute(r ApiUpdateComponentRequest) (*Component, *http.Response, error)
}

// ComponentAPIService ComponentAPI service
type ComponentAPIService service

type ApiCreateComponentRequest struct {
	ctx context.Context
	ApiService ComponentAPI
	uuid string
	component *Component
}

func (r ApiCreateComponentRequest) Component(component Component) ApiCreateComponentRequest {
	r.component = &component
	return r
}

func (r ApiCreateComponentRequest) Execute() (*Component, *http.Response, error) {
	return r.ApiService.CreateComponentExecute(r)
}

/*
CreateComponent Creates a new component

<p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the project to create a component for
 @return ApiCreateComponentRequest
*/
func (a *ComponentAPIService) CreateComponent(ctx context.Context, uuid string) ApiCreateComponentRequest {
	return ApiCreateComponentRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return Component
func (a *ComponentAPIService) CreateComponentExecute(r ApiCreateComponentRequest) (*Component, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Component
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.CreateComponent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component/project/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.component
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteComponentRequest struct {
	ctx context.Context
	ApiService ComponentAPI
	uuid string
}

func (r ApiDeleteComponentRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteComponentExecute(r)
}

/*
DeleteComponent Deletes a component

<p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the component to delete
 @return ApiDeleteComponentRequest
*/
func (a *ComponentAPIService) DeleteComponent(ctx context.Context, uuid string) ApiDeleteComponentRequest {
	return ApiDeleteComponentRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
func (a *ComponentAPIService) DeleteComponentExecute(r ApiDeleteComponentRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.DeleteComponent")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAllComponentsRequest struct {
	ctx context.Context
	ApiService ComponentAPI
	uuid string
	pageNumber *string
	pageSize *string
	offset *string
	limit *string
	sortName *string
	sortOrder *string
	onlyOutdated *bool
	onlyDirect *bool
}

// The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;.
func (r ApiGetAllComponentsRequest) PageNumber(pageNumber string) ApiGetAllComponentsRequest {
	r.pageNumber = &pageNumber
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;.
func (r ApiGetAllComponentsRequest) PageSize(pageSize string) ApiGetAllComponentsRequest {
	r.pageSize = &pageSize
	return r
}

// Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;.
func (r ApiGetAllComponentsRequest) Offset(offset string) ApiGetAllComponentsRequest {
	r.offset = &offset
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;.
func (r ApiGetAllComponentsRequest) Limit(limit string) ApiGetAllComponentsRequest {
	r.limit = &limit
	return r
}

// Name of the resource field to sort on.
func (r ApiGetAllComponentsRequest) SortName(sortName string) ApiGetAllComponentsRequest {
	r.sortName = &sortName
	return r
}

// Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;.
func (r ApiGetAllComponentsRequest) SortOrder(sortOrder string) ApiGetAllComponentsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Optionally exclude recent components so only outdated components are returned
func (r ApiGetAllComponentsRequest) OnlyOutdated(onlyOutdated bool) ApiGetAllComponentsRequest {
	r.onlyOutdated = &onlyOutdated
	return r
}

// Optionally exclude transitive dependencies so only direct dependencies are returned
func (r ApiGetAllComponentsRequest) OnlyDirect(onlyDirect bool) ApiGetAllComponentsRequest {
	r.onlyDirect = &onlyDirect
	return r
}

func (r ApiGetAllComponentsRequest) Execute() ([]Component, *http.Response, error) {
	return r.ApiService.GetAllComponentsExecute(r)
}

/*
GetAllComponents Returns a list of all components for a given project

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the project to retrieve components for
 @return ApiGetAllComponentsRequest
*/
func (a *ComponentAPIService) GetAllComponents(ctx context.Context, uuid string) ApiGetAllComponentsRequest {
	return ApiGetAllComponentsRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return []Component
func (a *ComponentAPIService) GetAllComponentsExecute(r ApiGetAllComponentsRequest) ([]Component, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Component
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.GetAllComponents")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component/project/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "form", "")
	} else {
		var defaultValue string = "1"
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue string = "100"
		r.pageSize = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sortName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortName", r.sortName, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.onlyOutdated != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyOutdated", r.onlyOutdated, "form", "")
	}
	if r.onlyDirect != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyDirect", r.onlyDirect, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetComponentByHashRequest struct {
	ctx context.Context
	ApiService ComponentAPI
	hash string
	pageNumber *string
	pageSize *string
	offset *string
	limit *string
	sortName *string
	sortOrder *string
}

// The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;.
func (r ApiGetComponentByHashRequest) PageNumber(pageNumber string) ApiGetComponentByHashRequest {
	r.pageNumber = &pageNumber
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;.
func (r ApiGetComponentByHashRequest) PageSize(pageSize string) ApiGetComponentByHashRequest {
	r.pageSize = &pageSize
	return r
}

// Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;.
func (r ApiGetComponentByHashRequest) Offset(offset string) ApiGetComponentByHashRequest {
	r.offset = &offset
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;.
func (r ApiGetComponentByHashRequest) Limit(limit string) ApiGetComponentByHashRequest {
	r.limit = &limit
	return r
}

// Name of the resource field to sort on.
func (r ApiGetComponentByHashRequest) SortName(sortName string) ApiGetComponentByHashRequest {
	r.sortName = &sortName
	return r
}

// Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;.
func (r ApiGetComponentByHashRequest) SortOrder(sortOrder string) ApiGetComponentByHashRequest {
	r.sortOrder = &sortOrder
	return r
}

func (r ApiGetComponentByHashRequest) Execute() ([]Component, *http.Response, error) {
	return r.ApiService.GetComponentByHashExecute(r)
}

/*
GetComponentByHash Returns a list of components that have the specified hash value

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param hash The MD5, SHA-1, SHA-256, SHA-384, SHA-512, SHA3-256, SHA3-384, SHA3-512, BLAKE2b-256, BLAKE2b-384, BLAKE2b-512, or BLAKE3 hash of the component to retrieve
 @return ApiGetComponentByHashRequest
*/
func (a *ComponentAPIService) GetComponentByHash(ctx context.Context, hash string) ApiGetComponentByHashRequest {
	return ApiGetComponentByHashRequest{
		ApiService: a,
		ctx: ctx,
		hash: hash,
	}
}

// Execute executes the request
//  @return []Component
func (a *ComponentAPIService) GetComponentByHashExecute(r ApiGetComponentByHashRequest) ([]Component, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Component
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.GetComponentByHash")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component/hash/{hash}"
	localVarPath = strings.Replace(localVarPath, "{"+"hash"+"}", url.PathEscape(parameterValueToString(r.hash, "hash")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "form", "")
	} else {
		var defaultValue string = "1"
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue string = "100"
		r.pageSize = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sortName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortName", r.sortName, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetComponentByIdentityRequest struct {
	ctx context.Context
	ApiService ComponentAPI
	pageNumber *string
	pageSize *string
	offset *string
	limit *string
	sortName *string
	sortOrder *string
	group *string
	name *string
	version *string
	purl *string
	cpe *string
	swidTagId *string
	project *string
}

// The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;.
func (r ApiGetComponentByIdentityRequest) PageNumber(pageNumber string) ApiGetComponentByIdentityRequest {
	r.pageNumber = &pageNumber
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;.
func (r ApiGetComponentByIdentityRequest) PageSize(pageSize string) ApiGetComponentByIdentityRequest {
	r.pageSize = &pageSize
	return r
}

// Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;.
func (r ApiGetComponentByIdentityRequest) Offset(offset string) ApiGetComponentByIdentityRequest {
	r.offset = &offset
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;.
func (r ApiGetComponentByIdentityRequest) Limit(limit string) ApiGetComponentByIdentityRequest {
	r.limit = &limit
	return r
}

// Name of the resource field to sort on.
func (r ApiGetComponentByIdentityRequest) SortName(sortName string) ApiGetComponentByIdentityRequest {
	r.sortName = &sortName
	return r
}

// Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;.
func (r ApiGetComponentByIdentityRequest) SortOrder(sortOrder string) ApiGetComponentByIdentityRequest {
	r.sortOrder = &sortOrder
	return r
}

// The group of the component
func (r ApiGetComponentByIdentityRequest) Group(group string) ApiGetComponentByIdentityRequest {
	r.group = &group
	return r
}

// The name of the component
func (r ApiGetComponentByIdentityRequest) Name(name string) ApiGetComponentByIdentityRequest {
	r.name = &name
	return r
}

// The version of the component
func (r ApiGetComponentByIdentityRequest) Version(version string) ApiGetComponentByIdentityRequest {
	r.version = &version
	return r
}

// The purl of the component
func (r ApiGetComponentByIdentityRequest) Purl(purl string) ApiGetComponentByIdentityRequest {
	r.purl = &purl
	return r
}

// The cpe of the component
func (r ApiGetComponentByIdentityRequest) Cpe(cpe string) ApiGetComponentByIdentityRequest {
	r.cpe = &cpe
	return r
}

// The swidTagId of the component
func (r ApiGetComponentByIdentityRequest) SwidTagId(swidTagId string) ApiGetComponentByIdentityRequest {
	r.swidTagId = &swidTagId
	return r
}

// The project the component belongs to
func (r ApiGetComponentByIdentityRequest) Project(project string) ApiGetComponentByIdentityRequest {
	r.project = &project
	return r
}

func (r ApiGetComponentByIdentityRequest) Execute() ([]Component, *http.Response, error) {
	return r.ApiService.GetComponentByIdentityExecute(r)
}

/*
GetComponentByIdentity Returns a list of components that have the specified component identity. This resource accepts coordinates (group, name, version) or purl, cpe, or swidTagId

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetComponentByIdentityRequest
*/
func (a *ComponentAPIService) GetComponentByIdentity(ctx context.Context) ApiGetComponentByIdentityRequest {
	return ApiGetComponentByIdentityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Component
func (a *ComponentAPIService) GetComponentByIdentityExecute(r ApiGetComponentByIdentityRequest) ([]Component, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Component
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.GetComponentByIdentity")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component/identity"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "form", "")
	} else {
		var defaultValue string = "1"
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue string = "100"
		r.pageSize = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sortName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortName", r.sortName, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.group != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group", r.group, "form", "")
	}
	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "form", "")
	}
	if r.version != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	}
	if r.purl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purl", r.purl, "form", "")
	}
	if r.cpe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "cpe", r.cpe, "form", "")
	}
	if r.swidTagId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "swidTagId", r.swidTagId, "form", "")
	}
	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project", r.project, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetComponentByUuidRequest struct {
	ctx context.Context
	ApiService ComponentAPI
	uuid string
	includeRepositoryMetaData *bool
}

// Optionally includes third-party metadata about the component from external repositories
func (r ApiGetComponentByUuidRequest) IncludeRepositoryMetaData(includeRepositoryMetaData bool) ApiGetComponentByUuidRequest {
	r.includeRepositoryMetaData = &includeRepositoryMetaData
	return r
}

func (r ApiGetComponentByUuidRequest) Execute() (*Component, *http.Response, error) {
	return r.ApiService.GetComponentByUuidExecute(r)
}

/*
GetComponentByUuid Returns a specific component

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the component to retrieve
 @return ApiGetComponentByUuidRequest
*/
func (a *ComponentAPIService) GetComponentByUuid(ctx context.Context, uuid string) ApiGetComponentByUuidRequest {
	return ApiGetComponentByUuidRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return Component
func (a *ComponentAPIService) GetComponentByUuidExecute(r ApiGetComponentByUuidRequest) (*Component, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Component
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.GetComponentByUuid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeRepositoryMetaData != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeRepositoryMetaData", r.includeRepositoryMetaData, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDependencyGraphForComponentRequest struct {
	ctx context.Context
	ApiService ComponentAPI
	projectUuid string
	componentUuids string
}

func (r ApiGetDependencyGraphForComponentRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.GetDependencyGraphForComponentExecute(r)
}

/*
GetDependencyGraphForComponent Returns the expanded dependency graph to every occurrence of a component

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectUuid The UUID of the project to get the expanded dependency graph for
 @param componentUuids List of UUIDs of the components (separated by |) to get the expanded dependency graph for
 @return ApiGetDependencyGraphForComponentRequest
*/
func (a *ComponentAPIService) GetDependencyGraphForComponent(ctx context.Context, projectUuid string, componentUuids string) ApiGetDependencyGraphForComponentRequest {
	return ApiGetDependencyGraphForComponentRequest{
		ApiService: a,
		ctx: ctx,
		projectUuid: projectUuid,
		componentUuids: componentUuids,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ComponentAPIService) GetDependencyGraphForComponentExecute(r ApiGetDependencyGraphForComponentRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.GetDependencyGraphForComponent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component/project/{projectUuid}/dependencyGraph/{componentUuids}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectUuid"+"}", url.PathEscape(parameterValueToString(r.projectUuid, "projectUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"componentUuids"+"}", url.PathEscape(parameterValueToString(r.componentUuids, "componentUuids")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentifyInternalComponentsRequest struct {
	ctx context.Context
	ApiService ComponentAPI
}

func (r ApiIdentifyInternalComponentsRequest) Execute() (*http.Response, error) {
	return r.ApiService.IdentifyInternalComponentsExecute(r)
}

/*
IdentifyInternalComponents Requests the identification of internal components in the portfolio

<p>Requires permission <strong>SYSTEM_CONFIGURATION</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentifyInternalComponentsRequest
*/
func (a *ComponentAPIService) IdentifyInternalComponents(ctx context.Context) ApiIdentifyInternalComponentsRequest {
	return ApiIdentifyInternalComponentsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *ComponentAPIService) IdentifyInternalComponentsExecute(r ApiIdentifyInternalComponentsRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.IdentifyInternalComponents")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component/internal/identify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateComponentRequest struct {
	ctx context.Context
	ApiService ComponentAPI
	component *Component
}

func (r ApiUpdateComponentRequest) Component(component Component) ApiUpdateComponentRequest {
	r.component = &component
	return r
}

func (r ApiUpdateComponentRequest) Execute() (*Component, *http.Response, error) {
	return r.ApiService.UpdateComponentExecute(r)
}

/*
UpdateComponent Updates a component

<p>Requires permission <strong>PORTFOLIO_MANAGEMENT</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateComponentRequest
*/
func (a *ComponentAPIService) UpdateComponent(ctx context.Context) ApiUpdateComponentRequest {
	return ApiUpdateComponentRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Component
func (a *ComponentAPIService) UpdateComponentExecute(r ApiUpdateComponentRequest) (*Component, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Component
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentAPIService.UpdateComponent")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/component"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.component
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
