// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockMetricsAPI is an autogenerated mock type for the MetricsAPI type
type MockMetricsAPI struct {
	mock.Mock
}

type MockMetricsAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMetricsAPI) EXPECT() *MockMetricsAPI_Expecter {
	return &MockMetricsAPI_Expecter{mock: &_m.Mock}
}

// GetComponentCurrentMetrics provides a mock function with given fields: ctx, uuid
func (_m *MockMetricsAPI) GetComponentCurrentMetrics(ctx context.Context, uuid string) ApiGetComponentCurrentMetricsRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentCurrentMetrics")
	}

	var r0 ApiGetComponentCurrentMetricsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetComponentCurrentMetricsRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetComponentCurrentMetricsRequest)
	}

	return r0
}

// MockMetricsAPI_GetComponentCurrentMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentCurrentMetrics'
type MockMetricsAPI_GetComponentCurrentMetrics_Call struct {
	*mock.Call
}

// GetComponentCurrentMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockMetricsAPI_Expecter) GetComponentCurrentMetrics(ctx interface{}, uuid interface{}) *MockMetricsAPI_GetComponentCurrentMetrics_Call {
	return &MockMetricsAPI_GetComponentCurrentMetrics_Call{Call: _e.mock.On("GetComponentCurrentMetrics", ctx, uuid)}
}

func (_c *MockMetricsAPI_GetComponentCurrentMetrics_Call) Run(run func(ctx context.Context, uuid string)) *MockMetricsAPI_GetComponentCurrentMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentCurrentMetrics_Call) Return(_a0 ApiGetComponentCurrentMetricsRequest) *MockMetricsAPI_GetComponentCurrentMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetComponentCurrentMetrics_Call) RunAndReturn(run func(context.Context, string) ApiGetComponentCurrentMetricsRequest) *MockMetricsAPI_GetComponentCurrentMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentCurrentMetricsExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetComponentCurrentMetricsExecute(r ApiGetComponentCurrentMetricsRequest) (*DependencyMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentCurrentMetricsExecute")
	}

	var r0 *DependencyMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetComponentCurrentMetricsRequest) (*DependencyMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetComponentCurrentMetricsRequest) *DependencyMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*DependencyMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetComponentCurrentMetricsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetComponentCurrentMetricsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetComponentCurrentMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentCurrentMetricsExecute'
type MockMetricsAPI_GetComponentCurrentMetricsExecute_Call struct {
	*mock.Call
}

// GetComponentCurrentMetricsExecute is a helper method to define mock.On call
//   - r ApiGetComponentCurrentMetricsRequest
func (_e *MockMetricsAPI_Expecter) GetComponentCurrentMetricsExecute(r interface{}) *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call {
	return &MockMetricsAPI_GetComponentCurrentMetricsExecute_Call{Call: _e.mock.On("GetComponentCurrentMetricsExecute", r)}
}

func (_c *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call) Run(run func(r ApiGetComponentCurrentMetricsRequest)) *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetComponentCurrentMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call) Return(_a0 *DependencyMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call) RunAndReturn(run func(ApiGetComponentCurrentMetricsRequest) (*DependencyMetrics, *http.Response, error)) *MockMetricsAPI_GetComponentCurrentMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentMetricsSince provides a mock function with given fields: ctx, uuid, date
func (_m *MockMetricsAPI) GetComponentMetricsSince(ctx context.Context, uuid string, date string) ApiGetComponentMetricsSinceRequest {
	ret := _m.Called(ctx, uuid, date)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentMetricsSince")
	}

	var r0 ApiGetComponentMetricsSinceRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetComponentMetricsSinceRequest); ok {
		r0 = rf(ctx, uuid, date)
	} else {
		r0 = ret.Get(0).(ApiGetComponentMetricsSinceRequest)
	}

	return r0
}

// MockMetricsAPI_GetComponentMetricsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentMetricsSince'
type MockMetricsAPI_GetComponentMetricsSince_Call struct {
	*mock.Call
}

// GetComponentMetricsSince is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - date string
func (_e *MockMetricsAPI_Expecter) GetComponentMetricsSince(ctx interface{}, uuid interface{}, date interface{}) *MockMetricsAPI_GetComponentMetricsSince_Call {
	return &MockMetricsAPI_GetComponentMetricsSince_Call{Call: _e.mock.On("GetComponentMetricsSince", ctx, uuid, date)}
}

func (_c *MockMetricsAPI_GetComponentMetricsSince_Call) Run(run func(ctx context.Context, uuid string, date string)) *MockMetricsAPI_GetComponentMetricsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsSince_Call) Return(_a0 ApiGetComponentMetricsSinceRequest) *MockMetricsAPI_GetComponentMetricsSince_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsSince_Call) RunAndReturn(run func(context.Context, string, string) ApiGetComponentMetricsSinceRequest) *MockMetricsAPI_GetComponentMetricsSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentMetricsSinceExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetComponentMetricsSinceExecute(r ApiGetComponentMetricsSinceRequest) ([]DependencyMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentMetricsSinceExecute")
	}

	var r0 []DependencyMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetComponentMetricsSinceRequest) ([]DependencyMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetComponentMetricsSinceRequest) []DependencyMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DependencyMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetComponentMetricsSinceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetComponentMetricsSinceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetComponentMetricsSinceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentMetricsSinceExecute'
type MockMetricsAPI_GetComponentMetricsSinceExecute_Call struct {
	*mock.Call
}

// GetComponentMetricsSinceExecute is a helper method to define mock.On call
//   - r ApiGetComponentMetricsSinceRequest
func (_e *MockMetricsAPI_Expecter) GetComponentMetricsSinceExecute(r interface{}) *MockMetricsAPI_GetComponentMetricsSinceExecute_Call {
	return &MockMetricsAPI_GetComponentMetricsSinceExecute_Call{Call: _e.mock.On("GetComponentMetricsSinceExecute", r)}
}

func (_c *MockMetricsAPI_GetComponentMetricsSinceExecute_Call) Run(run func(r ApiGetComponentMetricsSinceRequest)) *MockMetricsAPI_GetComponentMetricsSinceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetComponentMetricsSinceRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsSinceExecute_Call) Return(_a0 []DependencyMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetComponentMetricsSinceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsSinceExecute_Call) RunAndReturn(run func(ApiGetComponentMetricsSinceRequest) ([]DependencyMetrics, *http.Response, error)) *MockMetricsAPI_GetComponentMetricsSinceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentMetricsXDays provides a mock function with given fields: ctx, uuid, days
func (_m *MockMetricsAPI) GetComponentMetricsXDays(ctx context.Context, uuid string, days int32) ApiGetComponentMetricsXDaysRequest {
	ret := _m.Called(ctx, uuid, days)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentMetricsXDays")
	}

	var r0 ApiGetComponentMetricsXDaysRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) ApiGetComponentMetricsXDaysRequest); ok {
		r0 = rf(ctx, uuid, days)
	} else {
		r0 = ret.Get(0).(ApiGetComponentMetricsXDaysRequest)
	}

	return r0
}

// MockMetricsAPI_GetComponentMetricsXDays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentMetricsXDays'
type MockMetricsAPI_GetComponentMetricsXDays_Call struct {
	*mock.Call
}

// GetComponentMetricsXDays is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - days int32
func (_e *MockMetricsAPI_Expecter) GetComponentMetricsXDays(ctx interface{}, uuid interface{}, days interface{}) *MockMetricsAPI_GetComponentMetricsXDays_Call {
	return &MockMetricsAPI_GetComponentMetricsXDays_Call{Call: _e.mock.On("GetComponentMetricsXDays", ctx, uuid, days)}
}

func (_c *MockMetricsAPI_GetComponentMetricsXDays_Call) Run(run func(ctx context.Context, uuid string, days int32)) *MockMetricsAPI_GetComponentMetricsXDays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32))
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsXDays_Call) Return(_a0 ApiGetComponentMetricsXDaysRequest) *MockMetricsAPI_GetComponentMetricsXDays_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsXDays_Call) RunAndReturn(run func(context.Context, string, int32) ApiGetComponentMetricsXDaysRequest) *MockMetricsAPI_GetComponentMetricsXDays_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentMetricsXDaysExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetComponentMetricsXDaysExecute(r ApiGetComponentMetricsXDaysRequest) ([]DependencyMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentMetricsXDaysExecute")
	}

	var r0 []DependencyMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetComponentMetricsXDaysRequest) ([]DependencyMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetComponentMetricsXDaysRequest) []DependencyMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DependencyMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetComponentMetricsXDaysRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetComponentMetricsXDaysRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetComponentMetricsXDaysExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentMetricsXDaysExecute'
type MockMetricsAPI_GetComponentMetricsXDaysExecute_Call struct {
	*mock.Call
}

// GetComponentMetricsXDaysExecute is a helper method to define mock.On call
//   - r ApiGetComponentMetricsXDaysRequest
func (_e *MockMetricsAPI_Expecter) GetComponentMetricsXDaysExecute(r interface{}) *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call {
	return &MockMetricsAPI_GetComponentMetricsXDaysExecute_Call{Call: _e.mock.On("GetComponentMetricsXDaysExecute", r)}
}

func (_c *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call) Run(run func(r ApiGetComponentMetricsXDaysRequest)) *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetComponentMetricsXDaysRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call) Return(_a0 []DependencyMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call) RunAndReturn(run func(ApiGetComponentMetricsXDaysRequest) ([]DependencyMetrics, *http.Response, error)) *MockMetricsAPI_GetComponentMetricsXDaysExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioCurrentMetrics provides a mock function with given fields: ctx
func (_m *MockMetricsAPI) GetPortfolioCurrentMetrics(ctx context.Context) ApiGetPortfolioCurrentMetricsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioCurrentMetrics")
	}

	var r0 ApiGetPortfolioCurrentMetricsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetPortfolioCurrentMetricsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetPortfolioCurrentMetricsRequest)
	}

	return r0
}

// MockMetricsAPI_GetPortfolioCurrentMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioCurrentMetrics'
type MockMetricsAPI_GetPortfolioCurrentMetrics_Call struct {
	*mock.Call
}

// GetPortfolioCurrentMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsAPI_Expecter) GetPortfolioCurrentMetrics(ctx interface{}) *MockMetricsAPI_GetPortfolioCurrentMetrics_Call {
	return &MockMetricsAPI_GetPortfolioCurrentMetrics_Call{Call: _e.mock.On("GetPortfolioCurrentMetrics", ctx)}
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetrics_Call) Run(run func(ctx context.Context)) *MockMetricsAPI_GetPortfolioCurrentMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetrics_Call) Return(_a0 ApiGetPortfolioCurrentMetricsRequest) *MockMetricsAPI_GetPortfolioCurrentMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetrics_Call) RunAndReturn(run func(context.Context) ApiGetPortfolioCurrentMetricsRequest) *MockMetricsAPI_GetPortfolioCurrentMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioCurrentMetricsExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetPortfolioCurrentMetricsExecute(r ApiGetPortfolioCurrentMetricsRequest) (*PortfolioMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioCurrentMetricsExecute")
	}

	var r0 *PortfolioMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetPortfolioCurrentMetricsRequest) (*PortfolioMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetPortfolioCurrentMetricsRequest) *PortfolioMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PortfolioMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetPortfolioCurrentMetricsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetPortfolioCurrentMetricsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioCurrentMetricsExecute'
type MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call struct {
	*mock.Call
}

// GetPortfolioCurrentMetricsExecute is a helper method to define mock.On call
//   - r ApiGetPortfolioCurrentMetricsRequest
func (_e *MockMetricsAPI_Expecter) GetPortfolioCurrentMetricsExecute(r interface{}) *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call {
	return &MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call{Call: _e.mock.On("GetPortfolioCurrentMetricsExecute", r)}
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call) Run(run func(r ApiGetPortfolioCurrentMetricsRequest)) *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetPortfolioCurrentMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call) Return(_a0 *PortfolioMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call) RunAndReturn(run func(ApiGetPortfolioCurrentMetricsRequest) (*PortfolioMetrics, *http.Response, error)) *MockMetricsAPI_GetPortfolioCurrentMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioMetricsSince provides a mock function with given fields: ctx, date
func (_m *MockMetricsAPI) GetPortfolioMetricsSince(ctx context.Context, date string) ApiGetPortfolioMetricsSinceRequest {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioMetricsSince")
	}

	var r0 ApiGetPortfolioMetricsSinceRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetPortfolioMetricsSinceRequest); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Get(0).(ApiGetPortfolioMetricsSinceRequest)
	}

	return r0
}

// MockMetricsAPI_GetPortfolioMetricsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioMetricsSince'
type MockMetricsAPI_GetPortfolioMetricsSince_Call struct {
	*mock.Call
}

// GetPortfolioMetricsSince is a helper method to define mock.On call
//   - ctx context.Context
//   - date string
func (_e *MockMetricsAPI_Expecter) GetPortfolioMetricsSince(ctx interface{}, date interface{}) *MockMetricsAPI_GetPortfolioMetricsSince_Call {
	return &MockMetricsAPI_GetPortfolioMetricsSince_Call{Call: _e.mock.On("GetPortfolioMetricsSince", ctx, date)}
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSince_Call) Run(run func(ctx context.Context, date string)) *MockMetricsAPI_GetPortfolioMetricsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSince_Call) Return(_a0 ApiGetPortfolioMetricsSinceRequest) *MockMetricsAPI_GetPortfolioMetricsSince_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSince_Call) RunAndReturn(run func(context.Context, string) ApiGetPortfolioMetricsSinceRequest) *MockMetricsAPI_GetPortfolioMetricsSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioMetricsSinceExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetPortfolioMetricsSinceExecute(r ApiGetPortfolioMetricsSinceRequest) ([]PortfolioMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioMetricsSinceExecute")
	}

	var r0 []PortfolioMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetPortfolioMetricsSinceRequest) ([]PortfolioMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetPortfolioMetricsSinceRequest) []PortfolioMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PortfolioMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetPortfolioMetricsSinceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetPortfolioMetricsSinceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioMetricsSinceExecute'
type MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call struct {
	*mock.Call
}

// GetPortfolioMetricsSinceExecute is a helper method to define mock.On call
//   - r ApiGetPortfolioMetricsSinceRequest
func (_e *MockMetricsAPI_Expecter) GetPortfolioMetricsSinceExecute(r interface{}) *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call {
	return &MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call{Call: _e.mock.On("GetPortfolioMetricsSinceExecute", r)}
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call) Run(run func(r ApiGetPortfolioMetricsSinceRequest)) *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetPortfolioMetricsSinceRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call) Return(_a0 []PortfolioMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call) RunAndReturn(run func(ApiGetPortfolioMetricsSinceRequest) ([]PortfolioMetrics, *http.Response, error)) *MockMetricsAPI_GetPortfolioMetricsSinceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioMetricsXDays provides a mock function with given fields: ctx, days
func (_m *MockMetricsAPI) GetPortfolioMetricsXDays(ctx context.Context, days int32) ApiGetPortfolioMetricsXDaysRequest {
	ret := _m.Called(ctx, days)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioMetricsXDays")
	}

	var r0 ApiGetPortfolioMetricsXDaysRequest
	if rf, ok := ret.Get(0).(func(context.Context, int32) ApiGetPortfolioMetricsXDaysRequest); ok {
		r0 = rf(ctx, days)
	} else {
		r0 = ret.Get(0).(ApiGetPortfolioMetricsXDaysRequest)
	}

	return r0
}

// MockMetricsAPI_GetPortfolioMetricsXDays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioMetricsXDays'
type MockMetricsAPI_GetPortfolioMetricsXDays_Call struct {
	*mock.Call
}

// GetPortfolioMetricsXDays is a helper method to define mock.On call
//   - ctx context.Context
//   - days int32
func (_e *MockMetricsAPI_Expecter) GetPortfolioMetricsXDays(ctx interface{}, days interface{}) *MockMetricsAPI_GetPortfolioMetricsXDays_Call {
	return &MockMetricsAPI_GetPortfolioMetricsXDays_Call{Call: _e.mock.On("GetPortfolioMetricsXDays", ctx, days)}
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDays_Call) Run(run func(ctx context.Context, days int32)) *MockMetricsAPI_GetPortfolioMetricsXDays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32))
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDays_Call) Return(_a0 ApiGetPortfolioMetricsXDaysRequest) *MockMetricsAPI_GetPortfolioMetricsXDays_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDays_Call) RunAndReturn(run func(context.Context, int32) ApiGetPortfolioMetricsXDaysRequest) *MockMetricsAPI_GetPortfolioMetricsXDays_Call {
	_c.Call.Return(run)
	return _c
}

// GetPortfolioMetricsXDaysExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetPortfolioMetricsXDaysExecute(r ApiGetPortfolioMetricsXDaysRequest) ([]PortfolioMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPortfolioMetricsXDaysExecute")
	}

	var r0 []PortfolioMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetPortfolioMetricsXDaysRequest) ([]PortfolioMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetPortfolioMetricsXDaysRequest) []PortfolioMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PortfolioMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetPortfolioMetricsXDaysRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetPortfolioMetricsXDaysRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPortfolioMetricsXDaysExecute'
type MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call struct {
	*mock.Call
}

// GetPortfolioMetricsXDaysExecute is a helper method to define mock.On call
//   - r ApiGetPortfolioMetricsXDaysRequest
func (_e *MockMetricsAPI_Expecter) GetPortfolioMetricsXDaysExecute(r interface{}) *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call {
	return &MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call{Call: _e.mock.On("GetPortfolioMetricsXDaysExecute", r)}
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call) Run(run func(r ApiGetPortfolioMetricsXDaysRequest)) *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetPortfolioMetricsXDaysRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call) Return(_a0 []PortfolioMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call) RunAndReturn(run func(ApiGetPortfolioMetricsXDaysRequest) ([]PortfolioMetrics, *http.Response, error)) *MockMetricsAPI_GetPortfolioMetricsXDaysExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectCurrentMetrics provides a mock function with given fields: ctx, uuid
func (_m *MockMetricsAPI) GetProjectCurrentMetrics(ctx context.Context, uuid string) ApiGetProjectCurrentMetricsRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectCurrentMetrics")
	}

	var r0 ApiGetProjectCurrentMetricsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetProjectCurrentMetricsRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetProjectCurrentMetricsRequest)
	}

	return r0
}

// MockMetricsAPI_GetProjectCurrentMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectCurrentMetrics'
type MockMetricsAPI_GetProjectCurrentMetrics_Call struct {
	*mock.Call
}

// GetProjectCurrentMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockMetricsAPI_Expecter) GetProjectCurrentMetrics(ctx interface{}, uuid interface{}) *MockMetricsAPI_GetProjectCurrentMetrics_Call {
	return &MockMetricsAPI_GetProjectCurrentMetrics_Call{Call: _e.mock.On("GetProjectCurrentMetrics", ctx, uuid)}
}

func (_c *MockMetricsAPI_GetProjectCurrentMetrics_Call) Run(run func(ctx context.Context, uuid string)) *MockMetricsAPI_GetProjectCurrentMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectCurrentMetrics_Call) Return(_a0 ApiGetProjectCurrentMetricsRequest) *MockMetricsAPI_GetProjectCurrentMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetProjectCurrentMetrics_Call) RunAndReturn(run func(context.Context, string) ApiGetProjectCurrentMetricsRequest) *MockMetricsAPI_GetProjectCurrentMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectCurrentMetricsExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetProjectCurrentMetricsExecute(r ApiGetProjectCurrentMetricsRequest) (*ProjectMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectCurrentMetricsExecute")
	}

	var r0 *ProjectMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectCurrentMetricsRequest) (*ProjectMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectCurrentMetricsRequest) *ProjectMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectCurrentMetricsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectCurrentMetricsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetProjectCurrentMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectCurrentMetricsExecute'
type MockMetricsAPI_GetProjectCurrentMetricsExecute_Call struct {
	*mock.Call
}

// GetProjectCurrentMetricsExecute is a helper method to define mock.On call
//   - r ApiGetProjectCurrentMetricsRequest
func (_e *MockMetricsAPI_Expecter) GetProjectCurrentMetricsExecute(r interface{}) *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call {
	return &MockMetricsAPI_GetProjectCurrentMetricsExecute_Call{Call: _e.mock.On("GetProjectCurrentMetricsExecute", r)}
}

func (_c *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call) Run(run func(r ApiGetProjectCurrentMetricsRequest)) *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectCurrentMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call) Return(_a0 *ProjectMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call) RunAndReturn(run func(ApiGetProjectCurrentMetricsRequest) (*ProjectMetrics, *http.Response, error)) *MockMetricsAPI_GetProjectCurrentMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsSince provides a mock function with given fields: ctx, uuid, date
func (_m *MockMetricsAPI) GetProjectMetricsSince(ctx context.Context, uuid string, date string) ApiGetProjectMetricsSinceRequest {
	ret := _m.Called(ctx, uuid, date)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsSince")
	}

	var r0 ApiGetProjectMetricsSinceRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetProjectMetricsSinceRequest); ok {
		r0 = rf(ctx, uuid, date)
	} else {
		r0 = ret.Get(0).(ApiGetProjectMetricsSinceRequest)
	}

	return r0
}

// MockMetricsAPI_GetProjectMetricsSince_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsSince'
type MockMetricsAPI_GetProjectMetricsSince_Call struct {
	*mock.Call
}

// GetProjectMetricsSince is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - date string
func (_e *MockMetricsAPI_Expecter) GetProjectMetricsSince(ctx interface{}, uuid interface{}, date interface{}) *MockMetricsAPI_GetProjectMetricsSince_Call {
	return &MockMetricsAPI_GetProjectMetricsSince_Call{Call: _e.mock.On("GetProjectMetricsSince", ctx, uuid, date)}
}

func (_c *MockMetricsAPI_GetProjectMetricsSince_Call) Run(run func(ctx context.Context, uuid string, date string)) *MockMetricsAPI_GetProjectMetricsSince_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsSince_Call) Return(_a0 ApiGetProjectMetricsSinceRequest) *MockMetricsAPI_GetProjectMetricsSince_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsSince_Call) RunAndReturn(run func(context.Context, string, string) ApiGetProjectMetricsSinceRequest) *MockMetricsAPI_GetProjectMetricsSince_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsSinceExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetProjectMetricsSinceExecute(r ApiGetProjectMetricsSinceRequest) ([]ProjectMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsSinceExecute")
	}

	var r0 []ProjectMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectMetricsSinceRequest) ([]ProjectMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectMetricsSinceRequest) []ProjectMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProjectMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectMetricsSinceRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectMetricsSinceRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetProjectMetricsSinceExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsSinceExecute'
type MockMetricsAPI_GetProjectMetricsSinceExecute_Call struct {
	*mock.Call
}

// GetProjectMetricsSinceExecute is a helper method to define mock.On call
//   - r ApiGetProjectMetricsSinceRequest
func (_e *MockMetricsAPI_Expecter) GetProjectMetricsSinceExecute(r interface{}) *MockMetricsAPI_GetProjectMetricsSinceExecute_Call {
	return &MockMetricsAPI_GetProjectMetricsSinceExecute_Call{Call: _e.mock.On("GetProjectMetricsSinceExecute", r)}
}

func (_c *MockMetricsAPI_GetProjectMetricsSinceExecute_Call) Run(run func(r ApiGetProjectMetricsSinceRequest)) *MockMetricsAPI_GetProjectMetricsSinceExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectMetricsSinceRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsSinceExecute_Call) Return(_a0 []ProjectMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetProjectMetricsSinceExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsSinceExecute_Call) RunAndReturn(run func(ApiGetProjectMetricsSinceRequest) ([]ProjectMetrics, *http.Response, error)) *MockMetricsAPI_GetProjectMetricsSinceExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsXDays provides a mock function with given fields: ctx, uuid, days
func (_m *MockMetricsAPI) GetProjectMetricsXDays(ctx context.Context, uuid string, days int32) ApiGetProjectMetricsXDaysRequest {
	ret := _m.Called(ctx, uuid, days)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsXDays")
	}

	var r0 ApiGetProjectMetricsXDaysRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, int32) ApiGetProjectMetricsXDaysRequest); ok {
		r0 = rf(ctx, uuid, days)
	} else {
		r0 = ret.Get(0).(ApiGetProjectMetricsXDaysRequest)
	}

	return r0
}

// MockMetricsAPI_GetProjectMetricsXDays_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsXDays'
type MockMetricsAPI_GetProjectMetricsXDays_Call struct {
	*mock.Call
}

// GetProjectMetricsXDays is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - days int32
func (_e *MockMetricsAPI_Expecter) GetProjectMetricsXDays(ctx interface{}, uuid interface{}, days interface{}) *MockMetricsAPI_GetProjectMetricsXDays_Call {
	return &MockMetricsAPI_GetProjectMetricsXDays_Call{Call: _e.mock.On("GetProjectMetricsXDays", ctx, uuid, days)}
}

func (_c *MockMetricsAPI_GetProjectMetricsXDays_Call) Run(run func(ctx context.Context, uuid string, days int32)) *MockMetricsAPI_GetProjectMetricsXDays_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int32))
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsXDays_Call) Return(_a0 ApiGetProjectMetricsXDaysRequest) *MockMetricsAPI_GetProjectMetricsXDays_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsXDays_Call) RunAndReturn(run func(context.Context, string, int32) ApiGetProjectMetricsXDaysRequest) *MockMetricsAPI_GetProjectMetricsXDays_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectMetricsXDaysExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetProjectMetricsXDaysExecute(r ApiGetProjectMetricsXDaysRequest) ([]ProjectMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectMetricsXDaysExecute")
	}

	var r0 []ProjectMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectMetricsXDaysRequest) ([]ProjectMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectMetricsXDaysRequest) []ProjectMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProjectMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectMetricsXDaysRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectMetricsXDaysRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetProjectMetricsXDaysExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectMetricsXDaysExecute'
type MockMetricsAPI_GetProjectMetricsXDaysExecute_Call struct {
	*mock.Call
}

// GetProjectMetricsXDaysExecute is a helper method to define mock.On call
//   - r ApiGetProjectMetricsXDaysRequest
func (_e *MockMetricsAPI_Expecter) GetProjectMetricsXDaysExecute(r interface{}) *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call {
	return &MockMetricsAPI_GetProjectMetricsXDaysExecute_Call{Call: _e.mock.On("GetProjectMetricsXDaysExecute", r)}
}

func (_c *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call) Run(run func(r ApiGetProjectMetricsXDaysRequest)) *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectMetricsXDaysRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call) Return(_a0 []ProjectMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call) RunAndReturn(run func(ApiGetProjectMetricsXDaysRequest) ([]ProjectMetrics, *http.Response, error)) *MockMetricsAPI_GetProjectMetricsXDaysExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityMetrics provides a mock function with given fields: ctx
func (_m *MockMetricsAPI) GetVulnerabilityMetrics(ctx context.Context) ApiGetVulnerabilityMetricsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityMetrics")
	}

	var r0 ApiGetVulnerabilityMetricsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetVulnerabilityMetricsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetVulnerabilityMetricsRequest)
	}

	return r0
}

// MockMetricsAPI_GetVulnerabilityMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityMetrics'
type MockMetricsAPI_GetVulnerabilityMetrics_Call struct {
	*mock.Call
}

// GetVulnerabilityMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsAPI_Expecter) GetVulnerabilityMetrics(ctx interface{}) *MockMetricsAPI_GetVulnerabilityMetrics_Call {
	return &MockMetricsAPI_GetVulnerabilityMetrics_Call{Call: _e.mock.On("GetVulnerabilityMetrics", ctx)}
}

func (_c *MockMetricsAPI_GetVulnerabilityMetrics_Call) Run(run func(ctx context.Context)) *MockMetricsAPI_GetVulnerabilityMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMetricsAPI_GetVulnerabilityMetrics_Call) Return(_a0 ApiGetVulnerabilityMetricsRequest) *MockMetricsAPI_GetVulnerabilityMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_GetVulnerabilityMetrics_Call) RunAndReturn(run func(context.Context) ApiGetVulnerabilityMetricsRequest) *MockMetricsAPI_GetVulnerabilityMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityMetricsExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) GetVulnerabilityMetricsExecute(r ApiGetVulnerabilityMetricsRequest) ([]VulnerabilityMetrics, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityMetricsExecute")
	}

	var r0 []VulnerabilityMetrics
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilityMetricsRequest) ([]VulnerabilityMetrics, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilityMetricsRequest) []VulnerabilityMetrics); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]VulnerabilityMetrics)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetVulnerabilityMetricsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetVulnerabilityMetricsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockMetricsAPI_GetVulnerabilityMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityMetricsExecute'
type MockMetricsAPI_GetVulnerabilityMetricsExecute_Call struct {
	*mock.Call
}

// GetVulnerabilityMetricsExecute is a helper method to define mock.On call
//   - r ApiGetVulnerabilityMetricsRequest
func (_e *MockMetricsAPI_Expecter) GetVulnerabilityMetricsExecute(r interface{}) *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call {
	return &MockMetricsAPI_GetVulnerabilityMetricsExecute_Call{Call: _e.mock.On("GetVulnerabilityMetricsExecute", r)}
}

func (_c *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call) Run(run func(r ApiGetVulnerabilityMetricsRequest)) *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetVulnerabilityMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call) Return(_a0 []VulnerabilityMetrics, _a1 *http.Response, _a2 error) *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call) RunAndReturn(run func(ApiGetVulnerabilityMetricsRequest) ([]VulnerabilityMetrics, *http.Response, error)) *MockMetricsAPI_GetVulnerabilityMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshComponentMetrics provides a mock function with given fields: ctx, uuid
func (_m *MockMetricsAPI) RefreshComponentMetrics(ctx context.Context, uuid string) ApiRefreshComponentMetricsRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RefreshComponentMetrics")
	}

	var r0 ApiRefreshComponentMetricsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiRefreshComponentMetricsRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiRefreshComponentMetricsRequest)
	}

	return r0
}

// MockMetricsAPI_RefreshComponentMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshComponentMetrics'
type MockMetricsAPI_RefreshComponentMetrics_Call struct {
	*mock.Call
}

// RefreshComponentMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockMetricsAPI_Expecter) RefreshComponentMetrics(ctx interface{}, uuid interface{}) *MockMetricsAPI_RefreshComponentMetrics_Call {
	return &MockMetricsAPI_RefreshComponentMetrics_Call{Call: _e.mock.On("RefreshComponentMetrics", ctx, uuid)}
}

func (_c *MockMetricsAPI_RefreshComponentMetrics_Call) Run(run func(ctx context.Context, uuid string)) *MockMetricsAPI_RefreshComponentMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshComponentMetrics_Call) Return(_a0 ApiRefreshComponentMetricsRequest) *MockMetricsAPI_RefreshComponentMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_RefreshComponentMetrics_Call) RunAndReturn(run func(context.Context, string) ApiRefreshComponentMetricsRequest) *MockMetricsAPI_RefreshComponentMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshComponentMetricsExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) RefreshComponentMetricsExecute(r ApiRefreshComponentMetricsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RefreshComponentMetricsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiRefreshComponentMetricsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRefreshComponentMetricsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRefreshComponentMetricsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetricsAPI_RefreshComponentMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshComponentMetricsExecute'
type MockMetricsAPI_RefreshComponentMetricsExecute_Call struct {
	*mock.Call
}

// RefreshComponentMetricsExecute is a helper method to define mock.On call
//   - r ApiRefreshComponentMetricsRequest
func (_e *MockMetricsAPI_Expecter) RefreshComponentMetricsExecute(r interface{}) *MockMetricsAPI_RefreshComponentMetricsExecute_Call {
	return &MockMetricsAPI_RefreshComponentMetricsExecute_Call{Call: _e.mock.On("RefreshComponentMetricsExecute", r)}
}

func (_c *MockMetricsAPI_RefreshComponentMetricsExecute_Call) Run(run func(r ApiRefreshComponentMetricsRequest)) *MockMetricsAPI_RefreshComponentMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRefreshComponentMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshComponentMetricsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockMetricsAPI_RefreshComponentMetricsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetricsAPI_RefreshComponentMetricsExecute_Call) RunAndReturn(run func(ApiRefreshComponentMetricsRequest) (*http.Response, error)) *MockMetricsAPI_RefreshComponentMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshPortfolioMetrics provides a mock function with given fields: ctx
func (_m *MockMetricsAPI) RefreshPortfolioMetrics(ctx context.Context) ApiRefreshPortfolioMetricsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RefreshPortfolioMetrics")
	}

	var r0 ApiRefreshPortfolioMetricsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiRefreshPortfolioMetricsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiRefreshPortfolioMetricsRequest)
	}

	return r0
}

// MockMetricsAPI_RefreshPortfolioMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshPortfolioMetrics'
type MockMetricsAPI_RefreshPortfolioMetrics_Call struct {
	*mock.Call
}

// RefreshPortfolioMetrics is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockMetricsAPI_Expecter) RefreshPortfolioMetrics(ctx interface{}) *MockMetricsAPI_RefreshPortfolioMetrics_Call {
	return &MockMetricsAPI_RefreshPortfolioMetrics_Call{Call: _e.mock.On("RefreshPortfolioMetrics", ctx)}
}

func (_c *MockMetricsAPI_RefreshPortfolioMetrics_Call) Run(run func(ctx context.Context)) *MockMetricsAPI_RefreshPortfolioMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshPortfolioMetrics_Call) Return(_a0 ApiRefreshPortfolioMetricsRequest) *MockMetricsAPI_RefreshPortfolioMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_RefreshPortfolioMetrics_Call) RunAndReturn(run func(context.Context) ApiRefreshPortfolioMetricsRequest) *MockMetricsAPI_RefreshPortfolioMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshPortfolioMetricsExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) RefreshPortfolioMetricsExecute(r ApiRefreshPortfolioMetricsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RefreshPortfolioMetricsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiRefreshPortfolioMetricsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRefreshPortfolioMetricsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRefreshPortfolioMetricsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetricsAPI_RefreshPortfolioMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshPortfolioMetricsExecute'
type MockMetricsAPI_RefreshPortfolioMetricsExecute_Call struct {
	*mock.Call
}

// RefreshPortfolioMetricsExecute is a helper method to define mock.On call
//   - r ApiRefreshPortfolioMetricsRequest
func (_e *MockMetricsAPI_Expecter) RefreshPortfolioMetricsExecute(r interface{}) *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call {
	return &MockMetricsAPI_RefreshPortfolioMetricsExecute_Call{Call: _e.mock.On("RefreshPortfolioMetricsExecute", r)}
}

func (_c *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call) Run(run func(r ApiRefreshPortfolioMetricsRequest)) *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRefreshPortfolioMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call) RunAndReturn(run func(ApiRefreshPortfolioMetricsRequest) (*http.Response, error)) *MockMetricsAPI_RefreshPortfolioMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshProjectMetrics provides a mock function with given fields: ctx, uuid
func (_m *MockMetricsAPI) RefreshProjectMetrics(ctx context.Context, uuid string) ApiRefreshProjectMetricsRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RefreshProjectMetrics")
	}

	var r0 ApiRefreshProjectMetricsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiRefreshProjectMetricsRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiRefreshProjectMetricsRequest)
	}

	return r0
}

// MockMetricsAPI_RefreshProjectMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshProjectMetrics'
type MockMetricsAPI_RefreshProjectMetrics_Call struct {
	*mock.Call
}

// RefreshProjectMetrics is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockMetricsAPI_Expecter) RefreshProjectMetrics(ctx interface{}, uuid interface{}) *MockMetricsAPI_RefreshProjectMetrics_Call {
	return &MockMetricsAPI_RefreshProjectMetrics_Call{Call: _e.mock.On("RefreshProjectMetrics", ctx, uuid)}
}

func (_c *MockMetricsAPI_RefreshProjectMetrics_Call) Run(run func(ctx context.Context, uuid string)) *MockMetricsAPI_RefreshProjectMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshProjectMetrics_Call) Return(_a0 ApiRefreshProjectMetricsRequest) *MockMetricsAPI_RefreshProjectMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMetricsAPI_RefreshProjectMetrics_Call) RunAndReturn(run func(context.Context, string) ApiRefreshProjectMetricsRequest) *MockMetricsAPI_RefreshProjectMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshProjectMetricsExecute provides a mock function with given fields: r
func (_m *MockMetricsAPI) RefreshProjectMetricsExecute(r ApiRefreshProjectMetricsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RefreshProjectMetricsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiRefreshProjectMetricsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRefreshProjectMetricsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRefreshProjectMetricsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMetricsAPI_RefreshProjectMetricsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshProjectMetricsExecute'
type MockMetricsAPI_RefreshProjectMetricsExecute_Call struct {
	*mock.Call
}

// RefreshProjectMetricsExecute is a helper method to define mock.On call
//   - r ApiRefreshProjectMetricsRequest
func (_e *MockMetricsAPI_Expecter) RefreshProjectMetricsExecute(r interface{}) *MockMetricsAPI_RefreshProjectMetricsExecute_Call {
	return &MockMetricsAPI_RefreshProjectMetricsExecute_Call{Call: _e.mock.On("RefreshProjectMetricsExecute", r)}
}

func (_c *MockMetricsAPI_RefreshProjectMetricsExecute_Call) Run(run func(r ApiRefreshProjectMetricsRequest)) *MockMetricsAPI_RefreshProjectMetricsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRefreshProjectMetricsRequest))
	})
	return _c
}

func (_c *MockMetricsAPI_RefreshProjectMetricsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockMetricsAPI_RefreshProjectMetricsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMetricsAPI_RefreshProjectMetricsExecute_Call) RunAndReturn(run func(ApiRefreshProjectMetricsRequest) (*http.Response, error)) *MockMetricsAPI_RefreshProjectMetricsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMetricsAPI creates a new instance of MockMetricsAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMetricsAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMetricsAPI {
	mock := &MockMetricsAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
