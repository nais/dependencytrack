/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type AnalysisAPI interface {

	/*
	RetrieveAnalysis Retrieves an analysis trail

	<p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiRetrieveAnalysisRequest
	*/
	RetrieveAnalysis(ctx context.Context) ApiRetrieveAnalysisRequest

	// RetrieveAnalysisExecute executes the request
	//  @return Analysis
	RetrieveAnalysisExecute(r ApiRetrieveAnalysisRequest) (*Analysis, *http.Response, error)

	/*
	UpdateAnalysis Records an analysis decision

	<p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateAnalysisRequest
	*/
	UpdateAnalysis(ctx context.Context) ApiUpdateAnalysisRequest

	// UpdateAnalysisExecute executes the request
	//  @return Analysis
	UpdateAnalysisExecute(r ApiUpdateAnalysisRequest) (*Analysis, *http.Response, error)
}

// AnalysisAPIService AnalysisAPI service
type AnalysisAPIService service

type ApiRetrieveAnalysisRequest struct {
	ctx context.Context
	ApiService AnalysisAPI
	component *string
	vulnerability *string
	project *string
}

// The UUID of the component
func (r ApiRetrieveAnalysisRequest) Component(component string) ApiRetrieveAnalysisRequest {
	r.component = &component
	return r
}

// The UUID of the vulnerability
func (r ApiRetrieveAnalysisRequest) Vulnerability(vulnerability string) ApiRetrieveAnalysisRequest {
	r.vulnerability = &vulnerability
	return r
}

// The UUID of the project
func (r ApiRetrieveAnalysisRequest) Project(project string) ApiRetrieveAnalysisRequest {
	r.project = &project
	return r
}

func (r ApiRetrieveAnalysisRequest) Execute() (*Analysis, *http.Response, error) {
	return r.ApiService.RetrieveAnalysisExecute(r)
}

/*
RetrieveAnalysis Retrieves an analysis trail

<p>Requires permission <strong>VIEW_VULNERABILITY</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRetrieveAnalysisRequest
*/
func (a *AnalysisAPIService) RetrieveAnalysis(ctx context.Context) ApiRetrieveAnalysisRequest {
	return ApiRetrieveAnalysisRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Analysis
func (a *AnalysisAPIService) RetrieveAnalysisExecute(r ApiRetrieveAnalysisRequest) (*Analysis, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Analysis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalysisAPIService.RetrieveAnalysis")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/analysis"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.component == nil {
		return localVarReturnValue, nil, reportError("component is required and must be specified")
	}
	if r.vulnerability == nil {
		return localVarReturnValue, nil, reportError("vulnerability is required and must be specified")
	}

	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project", r.project, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "component", r.component, "form", "")
	parameterAddToHeaderOrQuery(localVarQueryParams, "vulnerability", r.vulnerability, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAnalysisRequest struct {
	ctx context.Context
	ApiService AnalysisAPI
	analysisRequest *AnalysisRequest
}

func (r ApiUpdateAnalysisRequest) AnalysisRequest(analysisRequest AnalysisRequest) ApiUpdateAnalysisRequest {
	r.analysisRequest = &analysisRequest
	return r
}

func (r ApiUpdateAnalysisRequest) Execute() (*Analysis, *http.Response, error) {
	return r.ApiService.UpdateAnalysisExecute(r)
}

/*
UpdateAnalysis Records an analysis decision

<p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateAnalysisRequest
*/
func (a *AnalysisAPIService) UpdateAnalysis(ctx context.Context) ApiUpdateAnalysisRequest {
	return ApiUpdateAnalysisRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Analysis
func (a *AnalysisAPIService) UpdateAnalysisExecute(r ApiUpdateAnalysisRequest) (*Analysis, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Analysis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnalysisAPIService.UpdateAnalysis")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/analysis"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.analysisRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
