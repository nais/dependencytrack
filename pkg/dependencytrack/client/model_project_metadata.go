/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the ProjectMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectMetadata{}

// ProjectMetadata struct for ProjectMetadata
type ProjectMetadata struct {
	Supplier *OrganizationalEntity `json:"supplier,omitempty"`
	Authors []OrganizationalContact `json:"authors,omitempty"`
}

// NewProjectMetadata instantiates a new ProjectMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectMetadata() *ProjectMetadata {
	this := ProjectMetadata{}
	return &this
}

// NewProjectMetadataWithDefaults instantiates a new ProjectMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectMetadataWithDefaults() *ProjectMetadata {
	this := ProjectMetadata{}
	return &this
}

// GetSupplier returns the Supplier field value if set, zero value otherwise.
func (o *ProjectMetadata) GetSupplier() OrganizationalEntity {
	if o == nil || IsNil(o.Supplier) {
		var ret OrganizationalEntity
		return ret
	}
	return *o.Supplier
}

// GetSupplierOk returns a tuple with the Supplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadata) GetSupplierOk() (*OrganizationalEntity, bool) {
	if o == nil || IsNil(o.Supplier) {
		return nil, false
	}
	return o.Supplier, true
}

// HasSupplier returns a boolean if a field has been set.
func (o *ProjectMetadata) HasSupplier() bool {
	if o != nil && !IsNil(o.Supplier) {
		return true
	}

	return false
}

// SetSupplier gets a reference to the given OrganizationalEntity and assigns it to the Supplier field.
func (o *ProjectMetadata) SetSupplier(v OrganizationalEntity) {
	o.Supplier = &v
}

// GetAuthors returns the Authors field value if set, zero value otherwise.
func (o *ProjectMetadata) GetAuthors() []OrganizationalContact {
	if o == nil || IsNil(o.Authors) {
		var ret []OrganizationalContact
		return ret
	}
	return o.Authors
}

// GetAuthorsOk returns a tuple with the Authors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectMetadata) GetAuthorsOk() ([]OrganizationalContact, bool) {
	if o == nil || IsNil(o.Authors) {
		return nil, false
	}
	return o.Authors, true
}

// HasAuthors returns a boolean if a field has been set.
func (o *ProjectMetadata) HasAuthors() bool {
	if o != nil && !IsNil(o.Authors) {
		return true
	}

	return false
}

// SetAuthors gets a reference to the given []OrganizationalContact and assigns it to the Authors field.
func (o *ProjectMetadata) SetAuthors(v []OrganizationalContact) {
	o.Authors = v
}

func (o ProjectMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Supplier) {
		toSerialize["supplier"] = o.Supplier
	}
	if !IsNil(o.Authors) {
		toSerialize["authors"] = o.Authors
	}
	return toSerialize, nil
}

type NullableProjectMetadata struct {
	value *ProjectMetadata
	isSet bool
}

func (v NullableProjectMetadata) Get() *ProjectMetadata {
	return v.value
}

func (v *NullableProjectMetadata) Set(val *ProjectMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectMetadata(val *ProjectMetadata) *NullableProjectMetadata {
	return &NullableProjectMetadata{value: val, isSet: true}
}

func (v NullableProjectMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


