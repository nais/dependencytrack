// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockAnalysisAPI is an autogenerated mock type for the AnalysisAPI type
type MockAnalysisAPI struct {
	mock.Mock
}

type MockAnalysisAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAnalysisAPI) EXPECT() *MockAnalysisAPI_Expecter {
	return &MockAnalysisAPI_Expecter{mock: &_m.Mock}
}

// RetrieveAnalysis provides a mock function with given fields: ctx
func (_m *MockAnalysisAPI) RetrieveAnalysis(ctx context.Context) ApiRetrieveAnalysisRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAnalysis")
	}

	var r0 ApiRetrieveAnalysisRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiRetrieveAnalysisRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiRetrieveAnalysisRequest)
	}

	return r0
}

// MockAnalysisAPI_RetrieveAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAnalysis'
type MockAnalysisAPI_RetrieveAnalysis_Call struct {
	*mock.Call
}

// RetrieveAnalysis is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAnalysisAPI_Expecter) RetrieveAnalysis(ctx interface{}) *MockAnalysisAPI_RetrieveAnalysis_Call {
	return &MockAnalysisAPI_RetrieveAnalysis_Call{Call: _e.mock.On("RetrieveAnalysis", ctx)}
}

func (_c *MockAnalysisAPI_RetrieveAnalysis_Call) Run(run func(ctx context.Context)) *MockAnalysisAPI_RetrieveAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAnalysisAPI_RetrieveAnalysis_Call) Return(_a0 ApiRetrieveAnalysisRequest) *MockAnalysisAPI_RetrieveAnalysis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnalysisAPI_RetrieveAnalysis_Call) RunAndReturn(run func(context.Context) ApiRetrieveAnalysisRequest) *MockAnalysisAPI_RetrieveAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveAnalysisExecute provides a mock function with given fields: r
func (_m *MockAnalysisAPI) RetrieveAnalysisExecute(r ApiRetrieveAnalysisRequest) (*Analysis, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveAnalysisExecute")
	}

	var r0 *Analysis
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRetrieveAnalysisRequest) (*Analysis, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRetrieveAnalysisRequest) *Analysis); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Analysis)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRetrieveAnalysisRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRetrieveAnalysisRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAnalysisAPI_RetrieveAnalysisExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveAnalysisExecute'
type MockAnalysisAPI_RetrieveAnalysisExecute_Call struct {
	*mock.Call
}

// RetrieveAnalysisExecute is a helper method to define mock.On call
//   - r ApiRetrieveAnalysisRequest
func (_e *MockAnalysisAPI_Expecter) RetrieveAnalysisExecute(r interface{}) *MockAnalysisAPI_RetrieveAnalysisExecute_Call {
	return &MockAnalysisAPI_RetrieveAnalysisExecute_Call{Call: _e.mock.On("RetrieveAnalysisExecute", r)}
}

func (_c *MockAnalysisAPI_RetrieveAnalysisExecute_Call) Run(run func(r ApiRetrieveAnalysisRequest)) *MockAnalysisAPI_RetrieveAnalysisExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRetrieveAnalysisRequest))
	})
	return _c
}

func (_c *MockAnalysisAPI_RetrieveAnalysisExecute_Call) Return(_a0 *Analysis, _a1 *http.Response, _a2 error) *MockAnalysisAPI_RetrieveAnalysisExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAnalysisAPI_RetrieveAnalysisExecute_Call) RunAndReturn(run func(ApiRetrieveAnalysisRequest) (*Analysis, *http.Response, error)) *MockAnalysisAPI_RetrieveAnalysisExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalysis provides a mock function with given fields: ctx
func (_m *MockAnalysisAPI) UpdateAnalysis(ctx context.Context) ApiUpdateAnalysisRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysis")
	}

	var r0 ApiUpdateAnalysisRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateAnalysisRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateAnalysisRequest)
	}

	return r0
}

// MockAnalysisAPI_UpdateAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalysis'
type MockAnalysisAPI_UpdateAnalysis_Call struct {
	*mock.Call
}

// UpdateAnalysis is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAnalysisAPI_Expecter) UpdateAnalysis(ctx interface{}) *MockAnalysisAPI_UpdateAnalysis_Call {
	return &MockAnalysisAPI_UpdateAnalysis_Call{Call: _e.mock.On("UpdateAnalysis", ctx)}
}

func (_c *MockAnalysisAPI_UpdateAnalysis_Call) Run(run func(ctx context.Context)) *MockAnalysisAPI_UpdateAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAnalysisAPI_UpdateAnalysis_Call) Return(_a0 ApiUpdateAnalysisRequest) *MockAnalysisAPI_UpdateAnalysis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAnalysisAPI_UpdateAnalysis_Call) RunAndReturn(run func(context.Context) ApiUpdateAnalysisRequest) *MockAnalysisAPI_UpdateAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAnalysisExecute provides a mock function with given fields: r
func (_m *MockAnalysisAPI) UpdateAnalysisExecute(r ApiUpdateAnalysisRequest) (*Analysis, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysisExecute")
	}

	var r0 *Analysis
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateAnalysisRequest) (*Analysis, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateAnalysisRequest) *Analysis); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Analysis)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateAnalysisRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateAnalysisRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAnalysisAPI_UpdateAnalysisExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAnalysisExecute'
type MockAnalysisAPI_UpdateAnalysisExecute_Call struct {
	*mock.Call
}

// UpdateAnalysisExecute is a helper method to define mock.On call
//   - r ApiUpdateAnalysisRequest
func (_e *MockAnalysisAPI_Expecter) UpdateAnalysisExecute(r interface{}) *MockAnalysisAPI_UpdateAnalysisExecute_Call {
	return &MockAnalysisAPI_UpdateAnalysisExecute_Call{Call: _e.mock.On("UpdateAnalysisExecute", r)}
}

func (_c *MockAnalysisAPI_UpdateAnalysisExecute_Call) Run(run func(r ApiUpdateAnalysisRequest)) *MockAnalysisAPI_UpdateAnalysisExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateAnalysisRequest))
	})
	return _c
}

func (_c *MockAnalysisAPI_UpdateAnalysisExecute_Call) Return(_a0 *Analysis, _a1 *http.Response, _a2 error) *MockAnalysisAPI_UpdateAnalysisExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAnalysisAPI_UpdateAnalysisExecute_Call) RunAndReturn(run func(ApiUpdateAnalysisRequest) (*Analysis, *http.Response, error)) *MockAnalysisAPI_UpdateAnalysisExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAnalysisAPI creates a new instance of MockAnalysisAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAnalysisAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAnalysisAPI {
	mock := &MockAnalysisAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
