/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PolicyViolation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PolicyViolation{}

// PolicyViolation struct for PolicyViolation
type PolicyViolation struct {
	Type *string `json:"type,omitempty"`
	Project *Project `json:"project,omitempty"`
	Component *Component `json:"component,omitempty"`
	PolicyCondition *PolicyCondition `json:"policyCondition,omitempty"`
	// UNIX epoch timestamp in milliseconds
	Timestamp int64 `json:"timestamp"`
	Text *string `json:"text,omitempty" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	Analysis *ViolationAnalysis `json:"analysis,omitempty"`
	Uuid string `json:"uuid"`
}

type _PolicyViolation PolicyViolation

// NewPolicyViolation instantiates a new PolicyViolation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyViolation(timestamp int64, uuid string) *PolicyViolation {
	this := PolicyViolation{}
	this.Timestamp = timestamp
	this.Uuid = uuid
	return &this
}

// NewPolicyViolationWithDefaults instantiates a new PolicyViolation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyViolationWithDefaults() *PolicyViolation {
	this := PolicyViolation{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PolicyViolation) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyViolation) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PolicyViolation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PolicyViolation) SetType(v string) {
	o.Type = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *PolicyViolation) GetProject() Project {
	if o == nil || IsNil(o.Project) {
		var ret Project
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyViolation) GetProjectOk() (*Project, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *PolicyViolation) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given Project and assigns it to the Project field.
func (o *PolicyViolation) SetProject(v Project) {
	o.Project = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *PolicyViolation) GetComponent() Component {
	if o == nil || IsNil(o.Component) {
		var ret Component
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyViolation) GetComponentOk() (*Component, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *PolicyViolation) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given Component and assigns it to the Component field.
func (o *PolicyViolation) SetComponent(v Component) {
	o.Component = &v
}

// GetPolicyCondition returns the PolicyCondition field value if set, zero value otherwise.
func (o *PolicyViolation) GetPolicyCondition() PolicyCondition {
	if o == nil || IsNil(o.PolicyCondition) {
		var ret PolicyCondition
		return ret
	}
	return *o.PolicyCondition
}

// GetPolicyConditionOk returns a tuple with the PolicyCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyViolation) GetPolicyConditionOk() (*PolicyCondition, bool) {
	if o == nil || IsNil(o.PolicyCondition) {
		return nil, false
	}
	return o.PolicyCondition, true
}

// HasPolicyCondition returns a boolean if a field has been set.
func (o *PolicyViolation) HasPolicyCondition() bool {
	if o != nil && !IsNil(o.PolicyCondition) {
		return true
	}

	return false
}

// SetPolicyCondition gets a reference to the given PolicyCondition and assigns it to the PolicyCondition field.
func (o *PolicyViolation) SetPolicyCondition(v PolicyCondition) {
	o.PolicyCondition = &v
}

// GetTimestamp returns the Timestamp field value
func (o *PolicyViolation) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *PolicyViolation) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *PolicyViolation) SetTimestamp(v int64) {
	o.Timestamp = v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *PolicyViolation) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyViolation) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *PolicyViolation) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *PolicyViolation) SetText(v string) {
	o.Text = &v
}

// GetAnalysis returns the Analysis field value if set, zero value otherwise.
func (o *PolicyViolation) GetAnalysis() ViolationAnalysis {
	if o == nil || IsNil(o.Analysis) {
		var ret ViolationAnalysis
		return ret
	}
	return *o.Analysis
}

// GetAnalysisOk returns a tuple with the Analysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyViolation) GetAnalysisOk() (*ViolationAnalysis, bool) {
	if o == nil || IsNil(o.Analysis) {
		return nil, false
	}
	return o.Analysis, true
}

// HasAnalysis returns a boolean if a field has been set.
func (o *PolicyViolation) HasAnalysis() bool {
	if o != nil && !IsNil(o.Analysis) {
		return true
	}

	return false
}

// SetAnalysis gets a reference to the given ViolationAnalysis and assigns it to the Analysis field.
func (o *PolicyViolation) SetAnalysis(v ViolationAnalysis) {
	o.Analysis = &v
}

// GetUuid returns the Uuid field value
func (o *PolicyViolation) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *PolicyViolation) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *PolicyViolation) SetUuid(v string) {
	o.Uuid = v
}

func (o PolicyViolation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PolicyViolation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.PolicyCondition) {
		toSerialize["policyCondition"] = o.PolicyCondition
	}
	toSerialize["timestamp"] = o.Timestamp
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Analysis) {
		toSerialize["analysis"] = o.Analysis
	}
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *PolicyViolation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"timestamp",
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPolicyViolation := _PolicyViolation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPolicyViolation)

	if err != nil {
		return err
	}

	*o = PolicyViolation(varPolicyViolation)

	return err
}

type NullablePolicyViolation struct {
	value *PolicyViolation
	isSet bool
}

func (v NullablePolicyViolation) Get() *PolicyViolation {
	return v.value
}

func (v *NullablePolicyViolation) Set(val *PolicyViolation) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyViolation) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyViolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyViolation(val *PolicyViolation) *NullablePolicyViolation {
	return &NullablePolicyViolation{value: val, isSet: true}
}

func (v NullablePolicyViolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyViolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


