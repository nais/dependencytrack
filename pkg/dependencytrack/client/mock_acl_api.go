// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockAclAPI is an autogenerated mock type for the AclAPI type
type MockAclAPI struct {
	mock.Mock
}

type MockAclAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAclAPI) EXPECT() *MockAclAPI_Expecter {
	return &MockAclAPI_Expecter{mock: &_m.Mock}
}

// AddMapping provides a mock function with given fields: ctx
func (_m *MockAclAPI) AddMapping(ctx context.Context) ApiAddMappingRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping")
	}

	var r0 ApiAddMappingRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiAddMappingRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiAddMappingRequest)
	}

	return r0
}

// MockAclAPI_AddMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping'
type MockAclAPI_AddMapping_Call struct {
	*mock.Call
}

// AddMapping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAclAPI_Expecter) AddMapping(ctx interface{}) *MockAclAPI_AddMapping_Call {
	return &MockAclAPI_AddMapping_Call{Call: _e.mock.On("AddMapping", ctx)}
}

func (_c *MockAclAPI_AddMapping_Call) Run(run func(ctx context.Context)) *MockAclAPI_AddMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAclAPI_AddMapping_Call) Return(_a0 ApiAddMappingRequest) *MockAclAPI_AddMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAclAPI_AddMapping_Call) RunAndReturn(run func(context.Context) ApiAddMappingRequest) *MockAclAPI_AddMapping_Call {
	_c.Call.Return(run)
	return _c
}

// AddMappingExecute provides a mock function with given fields: r
func (_m *MockAclAPI) AddMappingExecute(r ApiAddMappingRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddMappingExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiAddMappingRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddMappingRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddMappingRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAclAPI_AddMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMappingExecute'
type MockAclAPI_AddMappingExecute_Call struct {
	*mock.Call
}

// AddMappingExecute is a helper method to define mock.On call
//   - r ApiAddMappingRequest
func (_e *MockAclAPI_Expecter) AddMappingExecute(r interface{}) *MockAclAPI_AddMappingExecute_Call {
	return &MockAclAPI_AddMappingExecute_Call{Call: _e.mock.On("AddMappingExecute", r)}
}

func (_c *MockAclAPI_AddMappingExecute_Call) Run(run func(r ApiAddMappingRequest)) *MockAclAPI_AddMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddMappingRequest))
	})
	return _c
}

func (_c *MockAclAPI_AddMappingExecute_Call) Return(_a0 *http.Response, _a1 error) *MockAclAPI_AddMappingExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAclAPI_AddMappingExecute_Call) RunAndReturn(run func(ApiAddMappingRequest) (*http.Response, error)) *MockAclAPI_AddMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping provides a mock function with given fields: ctx, teamUuid, projectUuid
func (_m *MockAclAPI) DeleteMapping(ctx context.Context, teamUuid string, projectUuid string) ApiDeleteMappingRequest {
	ret := _m.Called(ctx, teamUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping")
	}

	var r0 ApiDeleteMappingRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiDeleteMappingRequest); ok {
		r0 = rf(ctx, teamUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteMappingRequest)
	}

	return r0
}

// MockAclAPI_DeleteMapping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping'
type MockAclAPI_DeleteMapping_Call struct {
	*mock.Call
}

// DeleteMapping is a helper method to define mock.On call
//   - ctx context.Context
//   - teamUuid string
//   - projectUuid string
func (_e *MockAclAPI_Expecter) DeleteMapping(ctx interface{}, teamUuid interface{}, projectUuid interface{}) *MockAclAPI_DeleteMapping_Call {
	return &MockAclAPI_DeleteMapping_Call{Call: _e.mock.On("DeleteMapping", ctx, teamUuid, projectUuid)}
}

func (_c *MockAclAPI_DeleteMapping_Call) Run(run func(ctx context.Context, teamUuid string, projectUuid string)) *MockAclAPI_DeleteMapping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAclAPI_DeleteMapping_Call) Return(_a0 ApiDeleteMappingRequest) *MockAclAPI_DeleteMapping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAclAPI_DeleteMapping_Call) RunAndReturn(run func(context.Context, string, string) ApiDeleteMappingRequest) *MockAclAPI_DeleteMapping_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMappingExecute provides a mock function with given fields: r
func (_m *MockAclAPI) DeleteMappingExecute(r ApiDeleteMappingRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMappingExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteMappingRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteMappingRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteMappingRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAclAPI_DeleteMappingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMappingExecute'
type MockAclAPI_DeleteMappingExecute_Call struct {
	*mock.Call
}

// DeleteMappingExecute is a helper method to define mock.On call
//   - r ApiDeleteMappingRequest
func (_e *MockAclAPI_Expecter) DeleteMappingExecute(r interface{}) *MockAclAPI_DeleteMappingExecute_Call {
	return &MockAclAPI_DeleteMappingExecute_Call{Call: _e.mock.On("DeleteMappingExecute", r)}
}

func (_c *MockAclAPI_DeleteMappingExecute_Call) Run(run func(r ApiDeleteMappingRequest)) *MockAclAPI_DeleteMappingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteMappingRequest))
	})
	return _c
}

func (_c *MockAclAPI_DeleteMappingExecute_Call) Return(_a0 *http.Response, _a1 error) *MockAclAPI_DeleteMappingExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAclAPI_DeleteMappingExecute_Call) RunAndReturn(run func(ApiDeleteMappingRequest) (*http.Response, error)) *MockAclAPI_DeleteMappingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveProjects provides a mock function with given fields: ctx, uuid
func (_m *MockAclAPI) RetrieveProjects(ctx context.Context, uuid string) ApiRetrieveProjectsRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveProjects")
	}

	var r0 ApiRetrieveProjectsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiRetrieveProjectsRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiRetrieveProjectsRequest)
	}

	return r0
}

// MockAclAPI_RetrieveProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveProjects'
type MockAclAPI_RetrieveProjects_Call struct {
	*mock.Call
}

// RetrieveProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockAclAPI_Expecter) RetrieveProjects(ctx interface{}, uuid interface{}) *MockAclAPI_RetrieveProjects_Call {
	return &MockAclAPI_RetrieveProjects_Call{Call: _e.mock.On("RetrieveProjects", ctx, uuid)}
}

func (_c *MockAclAPI_RetrieveProjects_Call) Run(run func(ctx context.Context, uuid string)) *MockAclAPI_RetrieveProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAclAPI_RetrieveProjects_Call) Return(_a0 ApiRetrieveProjectsRequest) *MockAclAPI_RetrieveProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAclAPI_RetrieveProjects_Call) RunAndReturn(run func(context.Context, string) ApiRetrieveProjectsRequest) *MockAclAPI_RetrieveProjects_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveProjectsExecute provides a mock function with given fields: r
func (_m *MockAclAPI) RetrieveProjectsExecute(r ApiRetrieveProjectsRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveProjectsExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRetrieveProjectsRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRetrieveProjectsRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRetrieveProjectsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRetrieveProjectsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAclAPI_RetrieveProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveProjectsExecute'
type MockAclAPI_RetrieveProjectsExecute_Call struct {
	*mock.Call
}

// RetrieveProjectsExecute is a helper method to define mock.On call
//   - r ApiRetrieveProjectsRequest
func (_e *MockAclAPI_Expecter) RetrieveProjectsExecute(r interface{}) *MockAclAPI_RetrieveProjectsExecute_Call {
	return &MockAclAPI_RetrieveProjectsExecute_Call{Call: _e.mock.On("RetrieveProjectsExecute", r)}
}

func (_c *MockAclAPI_RetrieveProjectsExecute_Call) Run(run func(r ApiRetrieveProjectsRequest)) *MockAclAPI_RetrieveProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRetrieveProjectsRequest))
	})
	return _c
}

func (_c *MockAclAPI_RetrieveProjectsExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockAclAPI_RetrieveProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAclAPI_RetrieveProjectsExecute_Call) RunAndReturn(run func(ApiRetrieveProjectsRequest) ([]Project, *http.Response, error)) *MockAclAPI_RetrieveProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAclAPI creates a new instance of MockAclAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAclAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAclAPI {
	mock := &MockAclAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
