// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockDependencyGraphAPI is an autogenerated mock type for the DependencyGraphAPI type
type MockDependencyGraphAPI struct {
	mock.Mock
}

type MockDependencyGraphAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDependencyGraphAPI) EXPECT() *MockDependencyGraphAPI_Expecter {
	return &MockDependencyGraphAPI_Expecter{mock: &_m.Mock}
}

// GetComponentsAndServicesByComponentUuid provides a mock function with given fields: ctx, uuid
func (_m *MockDependencyGraphAPI) GetComponentsAndServicesByComponentUuid(ctx context.Context, uuid string) ApiGetComponentsAndServicesByComponentUuidRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsAndServicesByComponentUuid")
	}

	var r0 ApiGetComponentsAndServicesByComponentUuidRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetComponentsAndServicesByComponentUuidRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetComponentsAndServicesByComponentUuidRequest)
	}

	return r0
}

// MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentsAndServicesByComponentUuid'
type MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call struct {
	*mock.Call
}

// GetComponentsAndServicesByComponentUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockDependencyGraphAPI_Expecter) GetComponentsAndServicesByComponentUuid(ctx interface{}, uuid interface{}) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call {
	return &MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call{Call: _e.mock.On("GetComponentsAndServicesByComponentUuid", ctx, uuid)}
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call) Return(_a0 ApiGetComponentsAndServicesByComponentUuidRequest) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call) RunAndReturn(run func(context.Context, string) ApiGetComponentsAndServicesByComponentUuidRequest) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentsAndServicesByComponentUuidExecute provides a mock function with given fields: r
func (_m *MockDependencyGraphAPI) GetComponentsAndServicesByComponentUuidExecute(r ApiGetComponentsAndServicesByComponentUuidRequest) ([]DependencyGraphResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsAndServicesByComponentUuidExecute")
	}

	var r0 []DependencyGraphResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetComponentsAndServicesByComponentUuidRequest) ([]DependencyGraphResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetComponentsAndServicesByComponentUuidRequest) []DependencyGraphResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DependencyGraphResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetComponentsAndServicesByComponentUuidRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetComponentsAndServicesByComponentUuidRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentsAndServicesByComponentUuidExecute'
type MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call struct {
	*mock.Call
}

// GetComponentsAndServicesByComponentUuidExecute is a helper method to define mock.On call
//   - r ApiGetComponentsAndServicesByComponentUuidRequest
func (_e *MockDependencyGraphAPI_Expecter) GetComponentsAndServicesByComponentUuidExecute(r interface{}) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call {
	return &MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call{Call: _e.mock.On("GetComponentsAndServicesByComponentUuidExecute", r)}
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call) Run(run func(r ApiGetComponentsAndServicesByComponentUuidRequest)) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetComponentsAndServicesByComponentUuidRequest))
	})
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call) Return(_a0 []DependencyGraphResponse, _a1 *http.Response, _a2 error) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call) RunAndReturn(run func(ApiGetComponentsAndServicesByComponentUuidRequest) ([]DependencyGraphResponse, *http.Response, error)) *MockDependencyGraphAPI_GetComponentsAndServicesByComponentUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentsAndServicesByProjectUuid provides a mock function with given fields: ctx, uuid
func (_m *MockDependencyGraphAPI) GetComponentsAndServicesByProjectUuid(ctx context.Context, uuid string) ApiGetComponentsAndServicesByProjectUuidRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsAndServicesByProjectUuid")
	}

	var r0 ApiGetComponentsAndServicesByProjectUuidRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetComponentsAndServicesByProjectUuidRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetComponentsAndServicesByProjectUuidRequest)
	}

	return r0
}

// MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentsAndServicesByProjectUuid'
type MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call struct {
	*mock.Call
}

// GetComponentsAndServicesByProjectUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockDependencyGraphAPI_Expecter) GetComponentsAndServicesByProjectUuid(ctx interface{}, uuid interface{}) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call {
	return &MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call{Call: _e.mock.On("GetComponentsAndServicesByProjectUuid", ctx, uuid)}
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call) Return(_a0 ApiGetComponentsAndServicesByProjectUuidRequest) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call) RunAndReturn(run func(context.Context, string) ApiGetComponentsAndServicesByProjectUuidRequest) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentsAndServicesByProjectUuidExecute provides a mock function with given fields: r
func (_m *MockDependencyGraphAPI) GetComponentsAndServicesByProjectUuidExecute(r ApiGetComponentsAndServicesByProjectUuidRequest) ([]DependencyGraphResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentsAndServicesByProjectUuidExecute")
	}

	var r0 []DependencyGraphResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetComponentsAndServicesByProjectUuidRequest) ([]DependencyGraphResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetComponentsAndServicesByProjectUuidRequest) []DependencyGraphResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DependencyGraphResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetComponentsAndServicesByProjectUuidRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetComponentsAndServicesByProjectUuidRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentsAndServicesByProjectUuidExecute'
type MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call struct {
	*mock.Call
}

// GetComponentsAndServicesByProjectUuidExecute is a helper method to define mock.On call
//   - r ApiGetComponentsAndServicesByProjectUuidRequest
func (_e *MockDependencyGraphAPI_Expecter) GetComponentsAndServicesByProjectUuidExecute(r interface{}) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call {
	return &MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call{Call: _e.mock.On("GetComponentsAndServicesByProjectUuidExecute", r)}
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call) Run(run func(r ApiGetComponentsAndServicesByProjectUuidRequest)) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetComponentsAndServicesByProjectUuidRequest))
	})
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call) Return(_a0 []DependencyGraphResponse, _a1 *http.Response, _a2 error) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call) RunAndReturn(run func(ApiGetComponentsAndServicesByProjectUuidRequest) ([]DependencyGraphResponse, *http.Response, error)) *MockDependencyGraphAPI_GetComponentsAndServicesByProjectUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDependencyGraphAPI creates a new instance of MockDependencyGraphAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDependencyGraphAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDependencyGraphAPI {
	mock := &MockDependencyGraphAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
