// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockConfigPropertyAPI is an autogenerated mock type for the ConfigPropertyAPI type
type MockConfigPropertyAPI struct {
	mock.Mock
}

type MockConfigPropertyAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigPropertyAPI) EXPECT() *MockConfigPropertyAPI_Expecter {
	return &MockConfigPropertyAPI_Expecter{mock: &_m.Mock}
}

// GetConfigProperties provides a mock function with given fields: ctx
func (_m *MockConfigPropertyAPI) GetConfigProperties(ctx context.Context) ApiGetConfigPropertiesRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigProperties")
	}

	var r0 ApiGetConfigPropertiesRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetConfigPropertiesRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetConfigPropertiesRequest)
	}

	return r0
}

// MockConfigPropertyAPI_GetConfigProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigProperties'
type MockConfigPropertyAPI_GetConfigProperties_Call struct {
	*mock.Call
}

// GetConfigProperties is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigPropertyAPI_Expecter) GetConfigProperties(ctx interface{}) *MockConfigPropertyAPI_GetConfigProperties_Call {
	return &MockConfigPropertyAPI_GetConfigProperties_Call{Call: _e.mock.On("GetConfigProperties", ctx)}
}

func (_c *MockConfigPropertyAPI_GetConfigProperties_Call) Run(run func(ctx context.Context)) *MockConfigPropertyAPI_GetConfigProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigPropertyAPI_GetConfigProperties_Call) Return(_a0 ApiGetConfigPropertiesRequest) *MockConfigPropertyAPI_GetConfigProperties_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigPropertyAPI_GetConfigProperties_Call) RunAndReturn(run func(context.Context) ApiGetConfigPropertiesRequest) *MockConfigPropertyAPI_GetConfigProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfigPropertiesExecute provides a mock function with given fields: r
func (_m *MockConfigPropertyAPI) GetConfigPropertiesExecute(r ApiGetConfigPropertiesRequest) ([]ConfigProperty, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigPropertiesExecute")
	}

	var r0 []ConfigProperty
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetConfigPropertiesRequest) ([]ConfigProperty, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetConfigPropertiesRequest) []ConfigProperty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ConfigProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetConfigPropertiesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetConfigPropertiesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConfigPropertyAPI_GetConfigPropertiesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfigPropertiesExecute'
type MockConfigPropertyAPI_GetConfigPropertiesExecute_Call struct {
	*mock.Call
}

// GetConfigPropertiesExecute is a helper method to define mock.On call
//   - r ApiGetConfigPropertiesRequest
func (_e *MockConfigPropertyAPI_Expecter) GetConfigPropertiesExecute(r interface{}) *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call {
	return &MockConfigPropertyAPI_GetConfigPropertiesExecute_Call{Call: _e.mock.On("GetConfigPropertiesExecute", r)}
}

func (_c *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call) Run(run func(r ApiGetConfigPropertiesRequest)) *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetConfigPropertiesRequest))
	})
	return _c
}

func (_c *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call) Return(_a0 []ConfigProperty, _a1 *http.Response, _a2 error) *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call) RunAndReturn(run func(ApiGetConfigPropertiesRequest) ([]ConfigProperty, *http.Response, error)) *MockConfigPropertyAPI_GetConfigPropertiesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicConfigProperty provides a mock function with given fields: ctx, groupName, propertyName
func (_m *MockConfigPropertyAPI) GetPublicConfigProperty(ctx context.Context, groupName string, propertyName string) ApiGetPublicConfigPropertyRequest {
	ret := _m.Called(ctx, groupName, propertyName)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicConfigProperty")
	}

	var r0 ApiGetPublicConfigPropertyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetPublicConfigPropertyRequest); ok {
		r0 = rf(ctx, groupName, propertyName)
	} else {
		r0 = ret.Get(0).(ApiGetPublicConfigPropertyRequest)
	}

	return r0
}

// MockConfigPropertyAPI_GetPublicConfigProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicConfigProperty'
type MockConfigPropertyAPI_GetPublicConfigProperty_Call struct {
	*mock.Call
}

// GetPublicConfigProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - groupName string
//   - propertyName string
func (_e *MockConfigPropertyAPI_Expecter) GetPublicConfigProperty(ctx interface{}, groupName interface{}, propertyName interface{}) *MockConfigPropertyAPI_GetPublicConfigProperty_Call {
	return &MockConfigPropertyAPI_GetPublicConfigProperty_Call{Call: _e.mock.On("GetPublicConfigProperty", ctx, groupName, propertyName)}
}

func (_c *MockConfigPropertyAPI_GetPublicConfigProperty_Call) Run(run func(ctx context.Context, groupName string, propertyName string)) *MockConfigPropertyAPI_GetPublicConfigProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockConfigPropertyAPI_GetPublicConfigProperty_Call) Return(_a0 ApiGetPublicConfigPropertyRequest) *MockConfigPropertyAPI_GetPublicConfigProperty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigPropertyAPI_GetPublicConfigProperty_Call) RunAndReturn(run func(context.Context, string, string) ApiGetPublicConfigPropertyRequest) *MockConfigPropertyAPI_GetPublicConfigProperty_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicConfigPropertyExecute provides a mock function with given fields: r
func (_m *MockConfigPropertyAPI) GetPublicConfigPropertyExecute(r ApiGetPublicConfigPropertyRequest) (*ConfigProperty, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicConfigPropertyExecute")
	}

	var r0 *ConfigProperty
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetPublicConfigPropertyRequest) (*ConfigProperty, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetPublicConfigPropertyRequest) *ConfigProperty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetPublicConfigPropertyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetPublicConfigPropertyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicConfigPropertyExecute'
type MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call struct {
	*mock.Call
}

// GetPublicConfigPropertyExecute is a helper method to define mock.On call
//   - r ApiGetPublicConfigPropertyRequest
func (_e *MockConfigPropertyAPI_Expecter) GetPublicConfigPropertyExecute(r interface{}) *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call {
	return &MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call{Call: _e.mock.On("GetPublicConfigPropertyExecute", r)}
}

func (_c *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call) Run(run func(r ApiGetPublicConfigPropertyRequest)) *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetPublicConfigPropertyRequest))
	})
	return _c
}

func (_c *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call) Return(_a0 *ConfigProperty, _a1 *http.Response, _a2 error) *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call) RunAndReturn(run func(ApiGetPublicConfigPropertyRequest) (*ConfigProperty, *http.Response, error)) *MockConfigPropertyAPI_GetPublicConfigPropertyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigProperty provides a mock function with given fields: ctx
func (_m *MockConfigPropertyAPI) UpdateConfigProperty(ctx context.Context) ApiUpdateConfigPropertyRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigProperty")
	}

	var r0 ApiUpdateConfigPropertyRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateConfigPropertyRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateConfigPropertyRequest)
	}

	return r0
}

// MockConfigPropertyAPI_UpdateConfigProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigProperty'
type MockConfigPropertyAPI_UpdateConfigProperty_Call struct {
	*mock.Call
}

// UpdateConfigProperty is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigPropertyAPI_Expecter) UpdateConfigProperty(ctx interface{}) *MockConfigPropertyAPI_UpdateConfigProperty_Call {
	return &MockConfigPropertyAPI_UpdateConfigProperty_Call{Call: _e.mock.On("UpdateConfigProperty", ctx)}
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty_Call) Run(run func(ctx context.Context)) *MockConfigPropertyAPI_UpdateConfigProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty_Call) Return(_a0 ApiUpdateConfigPropertyRequest) *MockConfigPropertyAPI_UpdateConfigProperty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty_Call) RunAndReturn(run func(context.Context) ApiUpdateConfigPropertyRequest) *MockConfigPropertyAPI_UpdateConfigProperty_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigProperty1 provides a mock function with given fields: ctx
func (_m *MockConfigPropertyAPI) UpdateConfigProperty1(ctx context.Context) ApiUpdateConfigProperty1Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigProperty1")
	}

	var r0 ApiUpdateConfigProperty1Request
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateConfigProperty1Request); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateConfigProperty1Request)
	}

	return r0
}

// MockConfigPropertyAPI_UpdateConfigProperty1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigProperty1'
type MockConfigPropertyAPI_UpdateConfigProperty1_Call struct {
	*mock.Call
}

// UpdateConfigProperty1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockConfigPropertyAPI_Expecter) UpdateConfigProperty1(ctx interface{}) *MockConfigPropertyAPI_UpdateConfigProperty1_Call {
	return &MockConfigPropertyAPI_UpdateConfigProperty1_Call{Call: _e.mock.On("UpdateConfigProperty1", ctx)}
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1_Call) Run(run func(ctx context.Context)) *MockConfigPropertyAPI_UpdateConfigProperty1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1_Call) Return(_a0 ApiUpdateConfigProperty1Request) *MockConfigPropertyAPI_UpdateConfigProperty1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1_Call) RunAndReturn(run func(context.Context) ApiUpdateConfigProperty1Request) *MockConfigPropertyAPI_UpdateConfigProperty1_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigProperty1Execute provides a mock function with given fields: r
func (_m *MockConfigPropertyAPI) UpdateConfigProperty1Execute(r ApiUpdateConfigProperty1Request) ([]ConfigProperty, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigProperty1Execute")
	}

	var r0 []ConfigProperty
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateConfigProperty1Request) ([]ConfigProperty, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateConfigProperty1Request) []ConfigProperty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ConfigProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateConfigProperty1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateConfigProperty1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigProperty1Execute'
type MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call struct {
	*mock.Call
}

// UpdateConfigProperty1Execute is a helper method to define mock.On call
//   - r ApiUpdateConfigProperty1Request
func (_e *MockConfigPropertyAPI_Expecter) UpdateConfigProperty1Execute(r interface{}) *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call {
	return &MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call{Call: _e.mock.On("UpdateConfigProperty1Execute", r)}
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call) Run(run func(r ApiUpdateConfigProperty1Request)) *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateConfigProperty1Request))
	})
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call) Return(_a0 []ConfigProperty, _a1 *http.Response, _a2 error) *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call) RunAndReturn(run func(ApiUpdateConfigProperty1Request) ([]ConfigProperty, *http.Response, error)) *MockConfigPropertyAPI_UpdateConfigProperty1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfigPropertyExecute provides a mock function with given fields: r
func (_m *MockConfigPropertyAPI) UpdateConfigPropertyExecute(r ApiUpdateConfigPropertyRequest) (*ConfigProperty, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigPropertyExecute")
	}

	var r0 *ConfigProperty
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateConfigPropertyRequest) (*ConfigProperty, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateConfigPropertyRequest) *ConfigProperty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConfigProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateConfigPropertyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateConfigPropertyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigPropertyExecute'
type MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call struct {
	*mock.Call
}

// UpdateConfigPropertyExecute is a helper method to define mock.On call
//   - r ApiUpdateConfigPropertyRequest
func (_e *MockConfigPropertyAPI_Expecter) UpdateConfigPropertyExecute(r interface{}) *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call {
	return &MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call{Call: _e.mock.On("UpdateConfigPropertyExecute", r)}
}

func (_c *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call) Run(run func(r ApiUpdateConfigPropertyRequest)) *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateConfigPropertyRequest))
	})
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call) Return(_a0 *ConfigProperty, _a1 *http.Response, _a2 error) *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call) RunAndReturn(run func(ApiUpdateConfigPropertyRequest) (*ConfigProperty, *http.Response, error)) *MockConfigPropertyAPI_UpdateConfigPropertyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigPropertyAPI creates a new instance of MockConfigPropertyAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigPropertyAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigPropertyAPI {
	mock := &MockConfigPropertyAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
