// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockProjectPropertyAPI is an autogenerated mock type for the ProjectPropertyAPI type
type MockProjectPropertyAPI struct {
	mock.Mock
}

type MockProjectPropertyAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectPropertyAPI) EXPECT() *MockProjectPropertyAPI_Expecter {
	return &MockProjectPropertyAPI_Expecter{mock: &_m.Mock}
}

// CreateProperty1 provides a mock function with given fields: ctx, uuid
func (_m *MockProjectPropertyAPI) CreateProperty1(ctx context.Context, uuid string) ApiCreateProperty1Request {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateProperty1")
	}

	var r0 ApiCreateProperty1Request
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiCreateProperty1Request); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiCreateProperty1Request)
	}

	return r0
}

// MockProjectPropertyAPI_CreateProperty1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProperty1'
type MockProjectPropertyAPI_CreateProperty1_Call struct {
	*mock.Call
}

// CreateProperty1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectPropertyAPI_Expecter) CreateProperty1(ctx interface{}, uuid interface{}) *MockProjectPropertyAPI_CreateProperty1_Call {
	return &MockProjectPropertyAPI_CreateProperty1_Call{Call: _e.mock.On("CreateProperty1", ctx, uuid)}
}

func (_c *MockProjectPropertyAPI_CreateProperty1_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectPropertyAPI_CreateProperty1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectPropertyAPI_CreateProperty1_Call) Return(_a0 ApiCreateProperty1Request) *MockProjectPropertyAPI_CreateProperty1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectPropertyAPI_CreateProperty1_Call) RunAndReturn(run func(context.Context, string) ApiCreateProperty1Request) *MockProjectPropertyAPI_CreateProperty1_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProperty1Execute provides a mock function with given fields: r
func (_m *MockProjectPropertyAPI) CreateProperty1Execute(r ApiCreateProperty1Request) (*ProjectProperty, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateProperty1Execute")
	}

	var r0 *ProjectProperty
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateProperty1Request) (*ProjectProperty, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateProperty1Request) *ProjectProperty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateProperty1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateProperty1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectPropertyAPI_CreateProperty1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProperty1Execute'
type MockProjectPropertyAPI_CreateProperty1Execute_Call struct {
	*mock.Call
}

// CreateProperty1Execute is a helper method to define mock.On call
//   - r ApiCreateProperty1Request
func (_e *MockProjectPropertyAPI_Expecter) CreateProperty1Execute(r interface{}) *MockProjectPropertyAPI_CreateProperty1Execute_Call {
	return &MockProjectPropertyAPI_CreateProperty1Execute_Call{Call: _e.mock.On("CreateProperty1Execute", r)}
}

func (_c *MockProjectPropertyAPI_CreateProperty1Execute_Call) Run(run func(r ApiCreateProperty1Request)) *MockProjectPropertyAPI_CreateProperty1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateProperty1Request))
	})
	return _c
}

func (_c *MockProjectPropertyAPI_CreateProperty1Execute_Call) Return(_a0 *ProjectProperty, _a1 *http.Response, _a2 error) *MockProjectPropertyAPI_CreateProperty1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectPropertyAPI_CreateProperty1Execute_Call) RunAndReturn(run func(ApiCreateProperty1Request) (*ProjectProperty, *http.Response, error)) *MockProjectPropertyAPI_CreateProperty1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProperty1 provides a mock function with given fields: ctx, uuid
func (_m *MockProjectPropertyAPI) DeleteProperty1(ctx context.Context, uuid string) ApiDeleteProperty1Request {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProperty1")
	}

	var r0 ApiDeleteProperty1Request
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteProperty1Request); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteProperty1Request)
	}

	return r0
}

// MockProjectPropertyAPI_DeleteProperty1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProperty1'
type MockProjectPropertyAPI_DeleteProperty1_Call struct {
	*mock.Call
}

// DeleteProperty1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectPropertyAPI_Expecter) DeleteProperty1(ctx interface{}, uuid interface{}) *MockProjectPropertyAPI_DeleteProperty1_Call {
	return &MockProjectPropertyAPI_DeleteProperty1_Call{Call: _e.mock.On("DeleteProperty1", ctx, uuid)}
}

func (_c *MockProjectPropertyAPI_DeleteProperty1_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectPropertyAPI_DeleteProperty1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectPropertyAPI_DeleteProperty1_Call) Return(_a0 ApiDeleteProperty1Request) *MockProjectPropertyAPI_DeleteProperty1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectPropertyAPI_DeleteProperty1_Call) RunAndReturn(run func(context.Context, string) ApiDeleteProperty1Request) *MockProjectPropertyAPI_DeleteProperty1_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProperty1Execute provides a mock function with given fields: r
func (_m *MockProjectPropertyAPI) DeleteProperty1Execute(r ApiDeleteProperty1Request) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProperty1Execute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteProperty1Request) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteProperty1Request) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteProperty1Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProjectPropertyAPI_DeleteProperty1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProperty1Execute'
type MockProjectPropertyAPI_DeleteProperty1Execute_Call struct {
	*mock.Call
}

// DeleteProperty1Execute is a helper method to define mock.On call
//   - r ApiDeleteProperty1Request
func (_e *MockProjectPropertyAPI_Expecter) DeleteProperty1Execute(r interface{}) *MockProjectPropertyAPI_DeleteProperty1Execute_Call {
	return &MockProjectPropertyAPI_DeleteProperty1Execute_Call{Call: _e.mock.On("DeleteProperty1Execute", r)}
}

func (_c *MockProjectPropertyAPI_DeleteProperty1Execute_Call) Run(run func(r ApiDeleteProperty1Request)) *MockProjectPropertyAPI_DeleteProperty1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteProperty1Request))
	})
	return _c
}

func (_c *MockProjectPropertyAPI_DeleteProperty1Execute_Call) Return(_a0 *http.Response, _a1 error) *MockProjectPropertyAPI_DeleteProperty1Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProjectPropertyAPI_DeleteProperty1Execute_Call) RunAndReturn(run func(ApiDeleteProperty1Request) (*http.Response, error)) *MockProjectPropertyAPI_DeleteProperty1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProperties1 provides a mock function with given fields: ctx, uuid
func (_m *MockProjectPropertyAPI) GetProperties1(ctx context.Context, uuid string) ApiGetProperties1Request {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProperties1")
	}

	var r0 ApiGetProperties1Request
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetProperties1Request); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetProperties1Request)
	}

	return r0
}

// MockProjectPropertyAPI_GetProperties1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperties1'
type MockProjectPropertyAPI_GetProperties1_Call struct {
	*mock.Call
}

// GetProperties1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectPropertyAPI_Expecter) GetProperties1(ctx interface{}, uuid interface{}) *MockProjectPropertyAPI_GetProperties1_Call {
	return &MockProjectPropertyAPI_GetProperties1_Call{Call: _e.mock.On("GetProperties1", ctx, uuid)}
}

func (_c *MockProjectPropertyAPI_GetProperties1_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectPropertyAPI_GetProperties1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectPropertyAPI_GetProperties1_Call) Return(_a0 ApiGetProperties1Request) *MockProjectPropertyAPI_GetProperties1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectPropertyAPI_GetProperties1_Call) RunAndReturn(run func(context.Context, string) ApiGetProperties1Request) *MockProjectPropertyAPI_GetProperties1_Call {
	_c.Call.Return(run)
	return _c
}

// GetProperties1Execute provides a mock function with given fields: r
func (_m *MockProjectPropertyAPI) GetProperties1Execute(r ApiGetProperties1Request) ([]ProjectProperty, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProperties1Execute")
	}

	var r0 []ProjectProperty
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProperties1Request) ([]ProjectProperty, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProperties1Request) []ProjectProperty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ProjectProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetProperties1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProperties1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectPropertyAPI_GetProperties1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProperties1Execute'
type MockProjectPropertyAPI_GetProperties1Execute_Call struct {
	*mock.Call
}

// GetProperties1Execute is a helper method to define mock.On call
//   - r ApiGetProperties1Request
func (_e *MockProjectPropertyAPI_Expecter) GetProperties1Execute(r interface{}) *MockProjectPropertyAPI_GetProperties1Execute_Call {
	return &MockProjectPropertyAPI_GetProperties1Execute_Call{Call: _e.mock.On("GetProperties1Execute", r)}
}

func (_c *MockProjectPropertyAPI_GetProperties1Execute_Call) Run(run func(r ApiGetProperties1Request)) *MockProjectPropertyAPI_GetProperties1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProperties1Request))
	})
	return _c
}

func (_c *MockProjectPropertyAPI_GetProperties1Execute_Call) Return(_a0 []ProjectProperty, _a1 *http.Response, _a2 error) *MockProjectPropertyAPI_GetProperties1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectPropertyAPI_GetProperties1Execute_Call) RunAndReturn(run func(ApiGetProperties1Request) ([]ProjectProperty, *http.Response, error)) *MockProjectPropertyAPI_GetProperties1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProperty provides a mock function with given fields: ctx, uuid
func (_m *MockProjectPropertyAPI) UpdateProperty(ctx context.Context, uuid string) ApiUpdatePropertyRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProperty")
	}

	var r0 ApiUpdatePropertyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiUpdatePropertyRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiUpdatePropertyRequest)
	}

	return r0
}

// MockProjectPropertyAPI_UpdateProperty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProperty'
type MockProjectPropertyAPI_UpdateProperty_Call struct {
	*mock.Call
}

// UpdateProperty is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockProjectPropertyAPI_Expecter) UpdateProperty(ctx interface{}, uuid interface{}) *MockProjectPropertyAPI_UpdateProperty_Call {
	return &MockProjectPropertyAPI_UpdateProperty_Call{Call: _e.mock.On("UpdateProperty", ctx, uuid)}
}

func (_c *MockProjectPropertyAPI_UpdateProperty_Call) Run(run func(ctx context.Context, uuid string)) *MockProjectPropertyAPI_UpdateProperty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockProjectPropertyAPI_UpdateProperty_Call) Return(_a0 ApiUpdatePropertyRequest) *MockProjectPropertyAPI_UpdateProperty_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockProjectPropertyAPI_UpdateProperty_Call) RunAndReturn(run func(context.Context, string) ApiUpdatePropertyRequest) *MockProjectPropertyAPI_UpdateProperty_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePropertyExecute provides a mock function with given fields: r
func (_m *MockProjectPropertyAPI) UpdatePropertyExecute(r ApiUpdatePropertyRequest) (*ProjectProperty, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePropertyExecute")
	}

	var r0 *ProjectProperty
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdatePropertyRequest) (*ProjectProperty, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdatePropertyRequest) *ProjectProperty); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectProperty)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdatePropertyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdatePropertyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockProjectPropertyAPI_UpdatePropertyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePropertyExecute'
type MockProjectPropertyAPI_UpdatePropertyExecute_Call struct {
	*mock.Call
}

// UpdatePropertyExecute is a helper method to define mock.On call
//   - r ApiUpdatePropertyRequest
func (_e *MockProjectPropertyAPI_Expecter) UpdatePropertyExecute(r interface{}) *MockProjectPropertyAPI_UpdatePropertyExecute_Call {
	return &MockProjectPropertyAPI_UpdatePropertyExecute_Call{Call: _e.mock.On("UpdatePropertyExecute", r)}
}

func (_c *MockProjectPropertyAPI_UpdatePropertyExecute_Call) Run(run func(r ApiUpdatePropertyRequest)) *MockProjectPropertyAPI_UpdatePropertyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdatePropertyRequest))
	})
	return _c
}

func (_c *MockProjectPropertyAPI_UpdatePropertyExecute_Call) Return(_a0 *ProjectProperty, _a1 *http.Response, _a2 error) *MockProjectPropertyAPI_UpdatePropertyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockProjectPropertyAPI_UpdatePropertyExecute_Call) RunAndReturn(run func(ApiUpdatePropertyRequest) (*ProjectProperty, *http.Response, error)) *MockProjectPropertyAPI_UpdatePropertyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockProjectPropertyAPI creates a new instance of MockProjectPropertyAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectPropertyAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectPropertyAPI {
	mock := &MockProjectPropertyAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
