// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockBadgeAPI is an autogenerated mock type for the BadgeAPI type
type MockBadgeAPI struct {
	mock.Mock
}

type MockBadgeAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBadgeAPI) EXPECT() *MockBadgeAPI_Expecter {
	return &MockBadgeAPI_Expecter{mock: &_m.Mock}
}

// GetProjectPolicyViolationsBadge provides a mock function with given fields: ctx, uuid
func (_m *MockBadgeAPI) GetProjectPolicyViolationsBadge(ctx context.Context, uuid string) ApiGetProjectPolicyViolationsBadgeRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPolicyViolationsBadge")
	}

	var r0 ApiGetProjectPolicyViolationsBadgeRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetProjectPolicyViolationsBadgeRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetProjectPolicyViolationsBadgeRequest)
	}

	return r0
}

// MockBadgeAPI_GetProjectPolicyViolationsBadge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPolicyViolationsBadge'
type MockBadgeAPI_GetProjectPolicyViolationsBadge_Call struct {
	*mock.Call
}

// GetProjectPolicyViolationsBadge is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBadgeAPI_Expecter) GetProjectPolicyViolationsBadge(ctx interface{}, uuid interface{}) *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call {
	return &MockBadgeAPI_GetProjectPolicyViolationsBadge_Call{Call: _e.mock.On("GetProjectPolicyViolationsBadge", ctx, uuid)}
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call) Run(run func(ctx context.Context, uuid string)) *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call) Return(_a0 ApiGetProjectPolicyViolationsBadgeRequest) *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call) RunAndReturn(run func(context.Context, string) ApiGetProjectPolicyViolationsBadgeRequest) *MockBadgeAPI_GetProjectPolicyViolationsBadge_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectPolicyViolationsBadge1 provides a mock function with given fields: ctx, name, version
func (_m *MockBadgeAPI) GetProjectPolicyViolationsBadge1(ctx context.Context, name string, version string) ApiGetProjectPolicyViolationsBadge1Request {
	ret := _m.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPolicyViolationsBadge1")
	}

	var r0 ApiGetProjectPolicyViolationsBadge1Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetProjectPolicyViolationsBadge1Request); ok {
		r0 = rf(ctx, name, version)
	} else {
		r0 = ret.Get(0).(ApiGetProjectPolicyViolationsBadge1Request)
	}

	return r0
}

// MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPolicyViolationsBadge1'
type MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call struct {
	*mock.Call
}

// GetProjectPolicyViolationsBadge1 is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockBadgeAPI_Expecter) GetProjectPolicyViolationsBadge1(ctx interface{}, name interface{}, version interface{}) *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call {
	return &MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call{Call: _e.mock.On("GetProjectPolicyViolationsBadge1", ctx, name, version)}
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call) Run(run func(ctx context.Context, name string, version string)) *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call) Return(_a0 ApiGetProjectPolicyViolationsBadge1Request) *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call) RunAndReturn(run func(context.Context, string, string) ApiGetProjectPolicyViolationsBadge1Request) *MockBadgeAPI_GetProjectPolicyViolationsBadge1_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectPolicyViolationsBadge1Execute provides a mock function with given fields: r
func (_m *MockBadgeAPI) GetProjectPolicyViolationsBadge1Execute(r ApiGetProjectPolicyViolationsBadge1Request) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPolicyViolationsBadge1Execute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectPolicyViolationsBadge1Request) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectPolicyViolationsBadge1Request) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectPolicyViolationsBadge1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectPolicyViolationsBadge1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPolicyViolationsBadge1Execute'
type MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call struct {
	*mock.Call
}

// GetProjectPolicyViolationsBadge1Execute is a helper method to define mock.On call
//   - r ApiGetProjectPolicyViolationsBadge1Request
func (_e *MockBadgeAPI_Expecter) GetProjectPolicyViolationsBadge1Execute(r interface{}) *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call {
	return &MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call{Call: _e.mock.On("GetProjectPolicyViolationsBadge1Execute", r)}
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call) Run(run func(r ApiGetProjectPolicyViolationsBadge1Request)) *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectPolicyViolationsBadge1Request))
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call) RunAndReturn(run func(ApiGetProjectPolicyViolationsBadge1Request) (string, *http.Response, error)) *MockBadgeAPI_GetProjectPolicyViolationsBadge1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectPolicyViolationsBadgeExecute provides a mock function with given fields: r
func (_m *MockBadgeAPI) GetProjectPolicyViolationsBadgeExecute(r ApiGetProjectPolicyViolationsBadgeRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectPolicyViolationsBadgeExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectPolicyViolationsBadgeRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectPolicyViolationsBadgeRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectPolicyViolationsBadgeRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectPolicyViolationsBadgeRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectPolicyViolationsBadgeExecute'
type MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call struct {
	*mock.Call
}

// GetProjectPolicyViolationsBadgeExecute is a helper method to define mock.On call
//   - r ApiGetProjectPolicyViolationsBadgeRequest
func (_e *MockBadgeAPI_Expecter) GetProjectPolicyViolationsBadgeExecute(r interface{}) *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call {
	return &MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call{Call: _e.mock.On("GetProjectPolicyViolationsBadgeExecute", r)}
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call) Run(run func(r ApiGetProjectPolicyViolationsBadgeRequest)) *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectPolicyViolationsBadgeRequest))
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call) RunAndReturn(run func(ApiGetProjectPolicyViolationsBadgeRequest) (string, *http.Response, error)) *MockBadgeAPI_GetProjectPolicyViolationsBadgeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectVulnerabilitiesBadge provides a mock function with given fields: ctx, uuid
func (_m *MockBadgeAPI) GetProjectVulnerabilitiesBadge(ctx context.Context, uuid string) ApiGetProjectVulnerabilitiesBadgeRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVulnerabilitiesBadge")
	}

	var r0 ApiGetProjectVulnerabilitiesBadgeRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetProjectVulnerabilitiesBadgeRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetProjectVulnerabilitiesBadgeRequest)
	}

	return r0
}

// MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectVulnerabilitiesBadge'
type MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call struct {
	*mock.Call
}

// GetProjectVulnerabilitiesBadge is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBadgeAPI_Expecter) GetProjectVulnerabilitiesBadge(ctx interface{}, uuid interface{}) *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call {
	return &MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call{Call: _e.mock.On("GetProjectVulnerabilitiesBadge", ctx, uuid)}
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call) Run(run func(ctx context.Context, uuid string)) *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call) Return(_a0 ApiGetProjectVulnerabilitiesBadgeRequest) *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call) RunAndReturn(run func(context.Context, string) ApiGetProjectVulnerabilitiesBadgeRequest) *MockBadgeAPI_GetProjectVulnerabilitiesBadge_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectVulnerabilitiesBadge1 provides a mock function with given fields: ctx, name, version
func (_m *MockBadgeAPI) GetProjectVulnerabilitiesBadge1(ctx context.Context, name string, version string) ApiGetProjectVulnerabilitiesBadge1Request {
	ret := _m.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVulnerabilitiesBadge1")
	}

	var r0 ApiGetProjectVulnerabilitiesBadge1Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetProjectVulnerabilitiesBadge1Request); ok {
		r0 = rf(ctx, name, version)
	} else {
		r0 = ret.Get(0).(ApiGetProjectVulnerabilitiesBadge1Request)
	}

	return r0
}

// MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectVulnerabilitiesBadge1'
type MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call struct {
	*mock.Call
}

// GetProjectVulnerabilitiesBadge1 is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockBadgeAPI_Expecter) GetProjectVulnerabilitiesBadge1(ctx interface{}, name interface{}, version interface{}) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call {
	return &MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call{Call: _e.mock.On("GetProjectVulnerabilitiesBadge1", ctx, name, version)}
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call) Run(run func(ctx context.Context, name string, version string)) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call) Return(_a0 ApiGetProjectVulnerabilitiesBadge1Request) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call) RunAndReturn(run func(context.Context, string, string) ApiGetProjectVulnerabilitiesBadge1Request) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectVulnerabilitiesBadge1Execute provides a mock function with given fields: r
func (_m *MockBadgeAPI) GetProjectVulnerabilitiesBadge1Execute(r ApiGetProjectVulnerabilitiesBadge1Request) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVulnerabilitiesBadge1Execute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectVulnerabilitiesBadge1Request) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectVulnerabilitiesBadge1Request) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectVulnerabilitiesBadge1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectVulnerabilitiesBadge1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectVulnerabilitiesBadge1Execute'
type MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call struct {
	*mock.Call
}

// GetProjectVulnerabilitiesBadge1Execute is a helper method to define mock.On call
//   - r ApiGetProjectVulnerabilitiesBadge1Request
func (_e *MockBadgeAPI_Expecter) GetProjectVulnerabilitiesBadge1Execute(r interface{}) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call {
	return &MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call{Call: _e.mock.On("GetProjectVulnerabilitiesBadge1Execute", r)}
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call) Run(run func(r ApiGetProjectVulnerabilitiesBadge1Request)) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectVulnerabilitiesBadge1Request))
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call) RunAndReturn(run func(ApiGetProjectVulnerabilitiesBadge1Request) (string, *http.Response, error)) *MockBadgeAPI_GetProjectVulnerabilitiesBadge1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjectVulnerabilitiesBadgeExecute provides a mock function with given fields: r
func (_m *MockBadgeAPI) GetProjectVulnerabilitiesBadgeExecute(r ApiGetProjectVulnerabilitiesBadgeRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetProjectVulnerabilitiesBadgeExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetProjectVulnerabilitiesBadgeRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetProjectVulnerabilitiesBadgeRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiGetProjectVulnerabilitiesBadgeRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetProjectVulnerabilitiesBadgeRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectVulnerabilitiesBadgeExecute'
type MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call struct {
	*mock.Call
}

// GetProjectVulnerabilitiesBadgeExecute is a helper method to define mock.On call
//   - r ApiGetProjectVulnerabilitiesBadgeRequest
func (_e *MockBadgeAPI_Expecter) GetProjectVulnerabilitiesBadgeExecute(r interface{}) *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call {
	return &MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call{Call: _e.mock.On("GetProjectVulnerabilitiesBadgeExecute", r)}
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call) Run(run func(r ApiGetProjectVulnerabilitiesBadgeRequest)) *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetProjectVulnerabilitiesBadgeRequest))
	})
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call) RunAndReturn(run func(ApiGetProjectVulnerabilitiesBadgeRequest) (string, *http.Response, error)) *MockBadgeAPI_GetProjectVulnerabilitiesBadgeExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBadgeAPI creates a new instance of MockBadgeAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBadgeAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBadgeAPI {
	mock := &MockBadgeAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
