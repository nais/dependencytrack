/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type VexAPI interface {

	/*
	ExportProjectAsCycloneDx1 Returns a VEX for a project in CycloneDX format

	<p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the project to export
	@return ApiExportProjectAsCycloneDx1Request
	*/
	ExportProjectAsCycloneDx1(ctx context.Context, uuid string) ApiExportProjectAsCycloneDx1Request

	// ExportProjectAsCycloneDx1Execute executes the request
	//  @return string
	ExportProjectAsCycloneDx1Execute(r ApiExportProjectAsCycloneDx1Request) (string, *http.Response, error)

	/*
	UploadVex Upload a supported VEX document

	<p>
  Expects CycloneDX and a valid project UUID. If a UUID is not specified,
  then the <code>projectName</code> and <code>projectVersion</code> must be specified.
</p>
<p>
  The VEX will be validated against the CycloneDX schema. If schema validation fails,
  a response with problem details in RFC 9457 format will be returned. In this case,
  the response's content type will be <code>application/problem+json</code>.
</p>
<p>
  The maximum allowed length of the <code>vex</code> value is 20'000'000 characters.
  When uploading large VEX files, the <code>POST</code> endpoint is preferred,
  as it does not have this limit.
</p>
<p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUploadVexRequest
	*/
	UploadVex(ctx context.Context) ApiUploadVexRequest

	// UploadVexExecute executes the request
	//  @return BomUploadResponse
	UploadVexExecute(r ApiUploadVexRequest) (*BomUploadResponse, *http.Response, error)

	/*
	UploadVex1 Upload a supported VEX document

	<p>
  Expects CycloneDX and a valid project UUID. If a UUID is not specified,
  then the <code>projectName</code> and <code>projectVersion</code> must be specified.
</p>
<p>
  The VEX will be validated against the CycloneDX schema. If schema validation fails,
  a response with problem details in RFC 9457 format will be returned. In this case,
  the response's content type will be <code>application/problem+json</code>.
</p>
<p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUploadVex1Request
	*/
	UploadVex1(ctx context.Context) ApiUploadVex1Request

	// UploadVex1Execute executes the request
	//  @return BomUploadResponse
	UploadVex1Execute(r ApiUploadVex1Request) (*BomUploadResponse, *http.Response, error)
}

// VexAPIService VexAPI service
type VexAPIService service

type ApiExportProjectAsCycloneDx1Request struct {
	ctx context.Context
	ApiService VexAPI
	uuid string
	download *bool
}

// Force the resulting VEX to be downloaded as a file (defaults to &#39;false&#39;)
func (r ApiExportProjectAsCycloneDx1Request) Download(download bool) ApiExportProjectAsCycloneDx1Request {
	r.download = &download
	return r
}

func (r ApiExportProjectAsCycloneDx1Request) Execute() (string, *http.Response, error) {
	return r.ApiService.ExportProjectAsCycloneDx1Execute(r)
}

/*
ExportProjectAsCycloneDx1 Returns a VEX for a project in CycloneDX format

<p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the project to export
 @return ApiExportProjectAsCycloneDx1Request
*/
func (a *VexAPIService) ExportProjectAsCycloneDx1(ctx context.Context, uuid string) ApiExportProjectAsCycloneDx1Request {
	return ApiExportProjectAsCycloneDx1Request{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return string
func (a *VexAPIService) ExportProjectAsCycloneDx1Execute(r ApiExportProjectAsCycloneDx1Request) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VexAPIService.ExportProjectAsCycloneDx1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vex/cyclonedx/project/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.download != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "download", r.download, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.cyclonedx+json", "application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadVexRequest struct {
	ctx context.Context
	ApiService VexAPI
	vexSubmitRequest *VexSubmitRequest
}

func (r ApiUploadVexRequest) VexSubmitRequest(vexSubmitRequest VexSubmitRequest) ApiUploadVexRequest {
	r.vexSubmitRequest = &vexSubmitRequest
	return r
}

func (r ApiUploadVexRequest) Execute() (*BomUploadResponse, *http.Response, error) {
	return r.ApiService.UploadVexExecute(r)
}

/*
UploadVex Upload a supported VEX document

<p>
  Expects CycloneDX and a valid project UUID. If a UUID is not specified,
  then the <code>projectName</code> and <code>projectVersion</code> must be specified.
</p>
<p>
  The VEX will be validated against the CycloneDX schema. If schema validation fails,
  a response with problem details in RFC 9457 format will be returned. In this case,
  the response's content type will be <code>application/problem+json</code>.
</p>
<p>
  The maximum allowed length of the <code>vex</code> value is 20'000'000 characters.
  When uploading large VEX files, the <code>POST</code> endpoint is preferred,
  as it does not have this limit.
</p>
<p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUploadVexRequest
*/
func (a *VexAPIService) UploadVex(ctx context.Context) ApiUploadVexRequest {
	return ApiUploadVexRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BomUploadResponse
func (a *VexAPIService) UploadVexExecute(r ApiUploadVexRequest) (*BomUploadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BomUploadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VexAPIService.UploadVex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vex"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.vexSubmitRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InvalidBomProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadVex1Request struct {
	ctx context.Context
	ApiService VexAPI
	project *string
	projectName *string
	projectVersion *string
	vex *string
}

func (r ApiUploadVex1Request) Project(project string) ApiUploadVex1Request {
	r.project = &project
	return r
}

func (r ApiUploadVex1Request) ProjectName(projectName string) ApiUploadVex1Request {
	r.projectName = &projectName
	return r
}

func (r ApiUploadVex1Request) ProjectVersion(projectVersion string) ApiUploadVex1Request {
	r.projectVersion = &projectVersion
	return r
}

func (r ApiUploadVex1Request) Vex(vex string) ApiUploadVex1Request {
	r.vex = &vex
	return r
}

func (r ApiUploadVex1Request) Execute() (*BomUploadResponse, *http.Response, error) {
	return r.ApiService.UploadVex1Execute(r)
}

/*
UploadVex1 Upload a supported VEX document

<p>
  Expects CycloneDX and a valid project UUID. If a UUID is not specified,
  then the <code>projectName</code> and <code>projectVersion</code> must be specified.
</p>
<p>
  The VEX will be validated against the CycloneDX schema. If schema validation fails,
  a response with problem details in RFC 9457 format will be returned. In this case,
  the response's content type will be <code>application/problem+json</code>.
</p>
<p>Requires permission <strong>VULNERABILITY_ANALYSIS</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUploadVex1Request
*/
func (a *VexAPIService) UploadVex1(ctx context.Context) ApiUploadVex1Request {
	return ApiUploadVex1Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BomUploadResponse
func (a *VexAPIService) UploadVex1Execute(r ApiUploadVex1Request) (*BomUploadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BomUploadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VexAPIService.UploadVex1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/vex"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "project", r.project, "", "")
	}
	if r.projectName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "projectName", r.projectName, "", "")
	}
	if r.projectVersion != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "projectVersion", r.projectVersion, "", "")
	}
	if r.vex != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "vex", r.vex, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InvalidBomProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
