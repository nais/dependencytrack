/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LdapUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LdapUser{}

// LdapUser struct for LdapUser
type LdapUser struct {
	Username string `json:"username" validate:"regexp=[\\\\P{Cc}]+"`
	Dn string `json:"dn" validate:"regexp=[\\\\P{Cc}]+"`
	Teams []Team `json:"teams,omitempty"`
	Email *string `json:"email,omitempty" validate:"regexp=[\\\\P{Cc}]+"`
	Permissions []Permission `json:"permissions,omitempty"`
}

type _LdapUser LdapUser

// NewLdapUser instantiates a new LdapUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapUser(username string, dn string) *LdapUser {
	this := LdapUser{}
	this.Username = username
	this.Dn = dn
	return &this
}

// NewLdapUserWithDefaults instantiates a new LdapUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapUserWithDefaults() *LdapUser {
	this := LdapUser{}
	return &this
}

// GetUsername returns the Username field value
func (o *LdapUser) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *LdapUser) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *LdapUser) SetUsername(v string) {
	o.Username = v
}

// GetDn returns the Dn field value
func (o *LdapUser) GetDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dn
}

// GetDnOk returns a tuple with the Dn field value
// and a boolean to check if the value has been set.
func (o *LdapUser) GetDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dn, true
}

// SetDn sets field value
func (o *LdapUser) SetDn(v string) {
	o.Dn = v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *LdapUser) GetTeams() []Team {
	if o == nil || IsNil(o.Teams) {
		var ret []Team
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUser) GetTeamsOk() ([]Team, bool) {
	if o == nil || IsNil(o.Teams) {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *LdapUser) HasTeams() bool {
	if o != nil && !IsNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []Team and assigns it to the Teams field.
func (o *LdapUser) SetTeams(v []Team) {
	o.Teams = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *LdapUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *LdapUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *LdapUser) SetEmail(v string) {
	o.Email = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *LdapUser) GetPermissions() []Permission {
	if o == nil || IsNil(o.Permissions) {
		var ret []Permission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapUser) GetPermissionsOk() ([]Permission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *LdapUser) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Permission and assigns it to the Permissions field.
func (o *LdapUser) SetPermissions(v []Permission) {
	o.Permissions = v
}

func (o LdapUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LdapUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["dn"] = o.Dn
	if !IsNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

func (o *LdapUser) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"dn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLdapUser := _LdapUser{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLdapUser)

	if err != nil {
		return err
	}

	*o = LdapUser(varLdapUser)

	return err
}

type NullableLdapUser struct {
	value *LdapUser
	isSet bool
}

func (v NullableLdapUser) Get() *LdapUser {
	return v.value
}

func (v *NullableLdapUser) Set(val *LdapUser) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapUser) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapUser(val *LdapUser) *NullableLdapUser {
	return &NullableLdapUser{value: val, isSet: true}
}

func (v NullableLdapUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


