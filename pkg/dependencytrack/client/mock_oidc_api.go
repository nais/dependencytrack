// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockOidcAPI is an autogenerated mock type for the OidcAPI type
type MockOidcAPI struct {
	mock.Mock
}

type MockOidcAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOidcAPI) EXPECT() *MockOidcAPI_Expecter {
	return &MockOidcAPI_Expecter{mock: &_m.Mock}
}

// AddMapping2 provides a mock function with given fields: ctx
func (_m *MockOidcAPI) AddMapping2(ctx context.Context) ApiAddMapping2Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping2")
	}

	var r0 ApiAddMapping2Request
	if rf, ok := ret.Get(0).(func(context.Context) ApiAddMapping2Request); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiAddMapping2Request)
	}

	return r0
}

// MockOidcAPI_AddMapping2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping2'
type MockOidcAPI_AddMapping2_Call struct {
	*mock.Call
}

// AddMapping2 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) AddMapping2(ctx interface{}) *MockOidcAPI_AddMapping2_Call {
	return &MockOidcAPI_AddMapping2_Call{Call: _e.mock.On("AddMapping2", ctx)}
}

func (_c *MockOidcAPI_AddMapping2_Call) Run(run func(ctx context.Context)) *MockOidcAPI_AddMapping2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOidcAPI_AddMapping2_Call) Return(_a0 ApiAddMapping2Request) *MockOidcAPI_AddMapping2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_AddMapping2_Call) RunAndReturn(run func(context.Context) ApiAddMapping2Request) *MockOidcAPI_AddMapping2_Call {
	_c.Call.Return(run)
	return _c
}

// AddMapping2Execute provides a mock function with given fields: r
func (_m *MockOidcAPI) AddMapping2Execute(r ApiAddMapping2Request) (*MappedOidcGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddMapping2Execute")
	}

	var r0 *MappedOidcGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddMapping2Request) (*MappedOidcGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddMapping2Request) *MappedOidcGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MappedOidcGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddMapping2Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddMapping2Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOidcAPI_AddMapping2Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMapping2Execute'
type MockOidcAPI_AddMapping2Execute_Call struct {
	*mock.Call
}

// AddMapping2Execute is a helper method to define mock.On call
//   - r ApiAddMapping2Request
func (_e *MockOidcAPI_Expecter) AddMapping2Execute(r interface{}) *MockOidcAPI_AddMapping2Execute_Call {
	return &MockOidcAPI_AddMapping2Execute_Call{Call: _e.mock.On("AddMapping2Execute", r)}
}

func (_c *MockOidcAPI_AddMapping2Execute_Call) Run(run func(r ApiAddMapping2Request)) *MockOidcAPI_AddMapping2Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddMapping2Request))
	})
	return _c
}

func (_c *MockOidcAPI_AddMapping2Execute_Call) Return(_a0 *MappedOidcGroup, _a1 *http.Response, _a2 error) *MockOidcAPI_AddMapping2Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOidcAPI_AddMapping2Execute_Call) RunAndReturn(run func(ApiAddMapping2Request) (*MappedOidcGroup, *http.Response, error)) *MockOidcAPI_AddMapping2Execute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function with given fields: ctx
func (_m *MockOidcAPI) CreateGroup(ctx context.Context) ApiCreateGroupRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 ApiCreateGroupRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateGroupRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateGroupRequest)
	}

	return r0
}

// MockOidcAPI_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type MockOidcAPI_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) CreateGroup(ctx interface{}) *MockOidcAPI_CreateGroup_Call {
	return &MockOidcAPI_CreateGroup_Call{Call: _e.mock.On("CreateGroup", ctx)}
}

func (_c *MockOidcAPI_CreateGroup_Call) Run(run func(ctx context.Context)) *MockOidcAPI_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOidcAPI_CreateGroup_Call) Return(_a0 ApiCreateGroupRequest) *MockOidcAPI_CreateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_CreateGroup_Call) RunAndReturn(run func(context.Context) ApiCreateGroupRequest) *MockOidcAPI_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupExecute provides a mock function with given fields: r
func (_m *MockOidcAPI) CreateGroupExecute(r ApiCreateGroupRequest) (*OidcGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupExecute")
	}

	var r0 *OidcGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateGroupRequest) (*OidcGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateGroupRequest) *OidcGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OidcGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateGroupRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateGroupRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOidcAPI_CreateGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupExecute'
type MockOidcAPI_CreateGroupExecute_Call struct {
	*mock.Call
}

// CreateGroupExecute is a helper method to define mock.On call
//   - r ApiCreateGroupRequest
func (_e *MockOidcAPI_Expecter) CreateGroupExecute(r interface{}) *MockOidcAPI_CreateGroupExecute_Call {
	return &MockOidcAPI_CreateGroupExecute_Call{Call: _e.mock.On("CreateGroupExecute", r)}
}

func (_c *MockOidcAPI_CreateGroupExecute_Call) Run(run func(r ApiCreateGroupRequest)) *MockOidcAPI_CreateGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateGroupRequest))
	})
	return _c
}

func (_c *MockOidcAPI_CreateGroupExecute_Call) Return(_a0 *OidcGroup, _a1 *http.Response, _a2 error) *MockOidcAPI_CreateGroupExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOidcAPI_CreateGroupExecute_Call) RunAndReturn(run func(ApiCreateGroupRequest) (*OidcGroup, *http.Response, error)) *MockOidcAPI_CreateGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function with given fields: ctx, uuid
func (_m *MockOidcAPI) DeleteGroup(ctx context.Context, uuid string) ApiDeleteGroupRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 ApiDeleteGroupRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteGroupRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteGroupRequest)
	}

	return r0
}

// MockOidcAPI_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type MockOidcAPI_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockOidcAPI_Expecter) DeleteGroup(ctx interface{}, uuid interface{}) *MockOidcAPI_DeleteGroup_Call {
	return &MockOidcAPI_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", ctx, uuid)}
}

func (_c *MockOidcAPI_DeleteGroup_Call) Run(run func(ctx context.Context, uuid string)) *MockOidcAPI_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOidcAPI_DeleteGroup_Call) Return(_a0 ApiDeleteGroupRequest) *MockOidcAPI_DeleteGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_DeleteGroup_Call) RunAndReturn(run func(context.Context, string) ApiDeleteGroupRequest) *MockOidcAPI_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroupExecute provides a mock function with given fields: r
func (_m *MockOidcAPI) DeleteGroupExecute(r ApiDeleteGroupRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteGroupRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteGroupRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteGroupRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOidcAPI_DeleteGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroupExecute'
type MockOidcAPI_DeleteGroupExecute_Call struct {
	*mock.Call
}

// DeleteGroupExecute is a helper method to define mock.On call
//   - r ApiDeleteGroupRequest
func (_e *MockOidcAPI_Expecter) DeleteGroupExecute(r interface{}) *MockOidcAPI_DeleteGroupExecute_Call {
	return &MockOidcAPI_DeleteGroupExecute_Call{Call: _e.mock.On("DeleteGroupExecute", r)}
}

func (_c *MockOidcAPI_DeleteGroupExecute_Call) Run(run func(r ApiDeleteGroupRequest)) *MockOidcAPI_DeleteGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteGroupRequest))
	})
	return _c
}

func (_c *MockOidcAPI_DeleteGroupExecute_Call) Return(_a0 *http.Response, _a1 error) *MockOidcAPI_DeleteGroupExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOidcAPI_DeleteGroupExecute_Call) RunAndReturn(run func(ApiDeleteGroupRequest) (*http.Response, error)) *MockOidcAPI_DeleteGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping2 provides a mock function with given fields: ctx, groupUuid, teamUuid
func (_m *MockOidcAPI) DeleteMapping2(ctx context.Context, groupUuid string, teamUuid string) ApiDeleteMapping2Request {
	ret := _m.Called(ctx, groupUuid, teamUuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping2")
	}

	var r0 ApiDeleteMapping2Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiDeleteMapping2Request); ok {
		r0 = rf(ctx, groupUuid, teamUuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteMapping2Request)
	}

	return r0
}

// MockOidcAPI_DeleteMapping2_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping2'
type MockOidcAPI_DeleteMapping2_Call struct {
	*mock.Call
}

// DeleteMapping2 is a helper method to define mock.On call
//   - ctx context.Context
//   - groupUuid string
//   - teamUuid string
func (_e *MockOidcAPI_Expecter) DeleteMapping2(ctx interface{}, groupUuid interface{}, teamUuid interface{}) *MockOidcAPI_DeleteMapping2_Call {
	return &MockOidcAPI_DeleteMapping2_Call{Call: _e.mock.On("DeleteMapping2", ctx, groupUuid, teamUuid)}
}

func (_c *MockOidcAPI_DeleteMapping2_Call) Run(run func(ctx context.Context, groupUuid string, teamUuid string)) *MockOidcAPI_DeleteMapping2_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockOidcAPI_DeleteMapping2_Call) Return(_a0 ApiDeleteMapping2Request) *MockOidcAPI_DeleteMapping2_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_DeleteMapping2_Call) RunAndReturn(run func(context.Context, string, string) ApiDeleteMapping2Request) *MockOidcAPI_DeleteMapping2_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMapping2Execute provides a mock function with given fields: r
func (_m *MockOidcAPI) DeleteMapping2Execute(r ApiDeleteMapping2Request) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMapping2Execute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteMapping2Request) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteMapping2Request) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteMapping2Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOidcAPI_DeleteMapping2Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMapping2Execute'
type MockOidcAPI_DeleteMapping2Execute_Call struct {
	*mock.Call
}

// DeleteMapping2Execute is a helper method to define mock.On call
//   - r ApiDeleteMapping2Request
func (_e *MockOidcAPI_Expecter) DeleteMapping2Execute(r interface{}) *MockOidcAPI_DeleteMapping2Execute_Call {
	return &MockOidcAPI_DeleteMapping2Execute_Call{Call: _e.mock.On("DeleteMapping2Execute", r)}
}

func (_c *MockOidcAPI_DeleteMapping2Execute_Call) Run(run func(r ApiDeleteMapping2Request)) *MockOidcAPI_DeleteMapping2Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteMapping2Request))
	})
	return _c
}

func (_c *MockOidcAPI_DeleteMapping2Execute_Call) Return(_a0 *http.Response, _a1 error) *MockOidcAPI_DeleteMapping2Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOidcAPI_DeleteMapping2Execute_Call) RunAndReturn(run func(ApiDeleteMapping2Request) (*http.Response, error)) *MockOidcAPI_DeleteMapping2Execute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMappingByUuid provides a mock function with given fields: ctx, uuid
func (_m *MockOidcAPI) DeleteMappingByUuid(ctx context.Context, uuid string) ApiDeleteMappingByUuidRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMappingByUuid")
	}

	var r0 ApiDeleteMappingByUuidRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteMappingByUuidRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteMappingByUuidRequest)
	}

	return r0
}

// MockOidcAPI_DeleteMappingByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMappingByUuid'
type MockOidcAPI_DeleteMappingByUuid_Call struct {
	*mock.Call
}

// DeleteMappingByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockOidcAPI_Expecter) DeleteMappingByUuid(ctx interface{}, uuid interface{}) *MockOidcAPI_DeleteMappingByUuid_Call {
	return &MockOidcAPI_DeleteMappingByUuid_Call{Call: _e.mock.On("DeleteMappingByUuid", ctx, uuid)}
}

func (_c *MockOidcAPI_DeleteMappingByUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockOidcAPI_DeleteMappingByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOidcAPI_DeleteMappingByUuid_Call) Return(_a0 ApiDeleteMappingByUuidRequest) *MockOidcAPI_DeleteMappingByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_DeleteMappingByUuid_Call) RunAndReturn(run func(context.Context, string) ApiDeleteMappingByUuidRequest) *MockOidcAPI_DeleteMappingByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMappingByUuidExecute provides a mock function with given fields: r
func (_m *MockOidcAPI) DeleteMappingByUuidExecute(r ApiDeleteMappingByUuidRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMappingByUuidExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteMappingByUuidRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteMappingByUuidRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteMappingByUuidRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOidcAPI_DeleteMappingByUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMappingByUuidExecute'
type MockOidcAPI_DeleteMappingByUuidExecute_Call struct {
	*mock.Call
}

// DeleteMappingByUuidExecute is a helper method to define mock.On call
//   - r ApiDeleteMappingByUuidRequest
func (_e *MockOidcAPI_Expecter) DeleteMappingByUuidExecute(r interface{}) *MockOidcAPI_DeleteMappingByUuidExecute_Call {
	return &MockOidcAPI_DeleteMappingByUuidExecute_Call{Call: _e.mock.On("DeleteMappingByUuidExecute", r)}
}

func (_c *MockOidcAPI_DeleteMappingByUuidExecute_Call) Run(run func(r ApiDeleteMappingByUuidRequest)) *MockOidcAPI_DeleteMappingByUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteMappingByUuidRequest))
	})
	return _c
}

func (_c *MockOidcAPI_DeleteMappingByUuidExecute_Call) Return(_a0 *http.Response, _a1 error) *MockOidcAPI_DeleteMappingByUuidExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOidcAPI_DeleteMappingByUuidExecute_Call) RunAndReturn(run func(ApiDeleteMappingByUuidRequest) (*http.Response, error)) *MockOidcAPI_DeleteMappingByUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// IsAvailable provides a mock function with given fields: ctx
func (_m *MockOidcAPI) IsAvailable(ctx context.Context) ApiIsAvailableRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IsAvailable")
	}

	var r0 ApiIsAvailableRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiIsAvailableRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiIsAvailableRequest)
	}

	return r0
}

// MockOidcAPI_IsAvailable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAvailable'
type MockOidcAPI_IsAvailable_Call struct {
	*mock.Call
}

// IsAvailable is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) IsAvailable(ctx interface{}) *MockOidcAPI_IsAvailable_Call {
	return &MockOidcAPI_IsAvailable_Call{Call: _e.mock.On("IsAvailable", ctx)}
}

func (_c *MockOidcAPI_IsAvailable_Call) Run(run func(ctx context.Context)) *MockOidcAPI_IsAvailable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOidcAPI_IsAvailable_Call) Return(_a0 ApiIsAvailableRequest) *MockOidcAPI_IsAvailable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_IsAvailable_Call) RunAndReturn(run func(context.Context) ApiIsAvailableRequest) *MockOidcAPI_IsAvailable_Call {
	_c.Call.Return(run)
	return _c
}

// IsAvailableExecute provides a mock function with given fields: r
func (_m *MockOidcAPI) IsAvailableExecute(r ApiIsAvailableRequest) (bool, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IsAvailableExecute")
	}

	var r0 bool
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiIsAvailableRequest) (bool, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiIsAvailableRequest) bool); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(ApiIsAvailableRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiIsAvailableRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOidcAPI_IsAvailableExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsAvailableExecute'
type MockOidcAPI_IsAvailableExecute_Call struct {
	*mock.Call
}

// IsAvailableExecute is a helper method to define mock.On call
//   - r ApiIsAvailableRequest
func (_e *MockOidcAPI_Expecter) IsAvailableExecute(r interface{}) *MockOidcAPI_IsAvailableExecute_Call {
	return &MockOidcAPI_IsAvailableExecute_Call{Call: _e.mock.On("IsAvailableExecute", r)}
}

func (_c *MockOidcAPI_IsAvailableExecute_Call) Run(run func(r ApiIsAvailableRequest)) *MockOidcAPI_IsAvailableExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiIsAvailableRequest))
	})
	return _c
}

func (_c *MockOidcAPI_IsAvailableExecute_Call) Return(_a0 bool, _a1 *http.Response, _a2 error) *MockOidcAPI_IsAvailableExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOidcAPI_IsAvailableExecute_Call) RunAndReturn(run func(ApiIsAvailableRequest) (bool, *http.Response, error)) *MockOidcAPI_IsAvailableExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveGroups provides a mock function with given fields: ctx
func (_m *MockOidcAPI) RetrieveGroups(ctx context.Context) ApiRetrieveGroupsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveGroups")
	}

	var r0 ApiRetrieveGroupsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiRetrieveGroupsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiRetrieveGroupsRequest)
	}

	return r0
}

// MockOidcAPI_RetrieveGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveGroups'
type MockOidcAPI_RetrieveGroups_Call struct {
	*mock.Call
}

// RetrieveGroups is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) RetrieveGroups(ctx interface{}) *MockOidcAPI_RetrieveGroups_Call {
	return &MockOidcAPI_RetrieveGroups_Call{Call: _e.mock.On("RetrieveGroups", ctx)}
}

func (_c *MockOidcAPI_RetrieveGroups_Call) Run(run func(ctx context.Context)) *MockOidcAPI_RetrieveGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOidcAPI_RetrieveGroups_Call) Return(_a0 ApiRetrieveGroupsRequest) *MockOidcAPI_RetrieveGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_RetrieveGroups_Call) RunAndReturn(run func(context.Context) ApiRetrieveGroupsRequest) *MockOidcAPI_RetrieveGroups_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveGroupsExecute provides a mock function with given fields: r
func (_m *MockOidcAPI) RetrieveGroupsExecute(r ApiRetrieveGroupsRequest) ([]OidcGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveGroupsExecute")
	}

	var r0 []OidcGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRetrieveGroupsRequest) ([]OidcGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRetrieveGroupsRequest) []OidcGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]OidcGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRetrieveGroupsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRetrieveGroupsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOidcAPI_RetrieveGroupsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveGroupsExecute'
type MockOidcAPI_RetrieveGroupsExecute_Call struct {
	*mock.Call
}

// RetrieveGroupsExecute is a helper method to define mock.On call
//   - r ApiRetrieveGroupsRequest
func (_e *MockOidcAPI_Expecter) RetrieveGroupsExecute(r interface{}) *MockOidcAPI_RetrieveGroupsExecute_Call {
	return &MockOidcAPI_RetrieveGroupsExecute_Call{Call: _e.mock.On("RetrieveGroupsExecute", r)}
}

func (_c *MockOidcAPI_RetrieveGroupsExecute_Call) Run(run func(r ApiRetrieveGroupsRequest)) *MockOidcAPI_RetrieveGroupsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRetrieveGroupsRequest))
	})
	return _c
}

func (_c *MockOidcAPI_RetrieveGroupsExecute_Call) Return(_a0 []OidcGroup, _a1 *http.Response, _a2 error) *MockOidcAPI_RetrieveGroupsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOidcAPI_RetrieveGroupsExecute_Call) RunAndReturn(run func(ApiRetrieveGroupsRequest) ([]OidcGroup, *http.Response, error)) *MockOidcAPI_RetrieveGroupsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveTeamsMappedToGroup provides a mock function with given fields: ctx, uuid
func (_m *MockOidcAPI) RetrieveTeamsMappedToGroup(ctx context.Context, uuid string) ApiRetrieveTeamsMappedToGroupRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveTeamsMappedToGroup")
	}

	var r0 ApiRetrieveTeamsMappedToGroupRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiRetrieveTeamsMappedToGroupRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiRetrieveTeamsMappedToGroupRequest)
	}

	return r0
}

// MockOidcAPI_RetrieveTeamsMappedToGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveTeamsMappedToGroup'
type MockOidcAPI_RetrieveTeamsMappedToGroup_Call struct {
	*mock.Call
}

// RetrieveTeamsMappedToGroup is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockOidcAPI_Expecter) RetrieveTeamsMappedToGroup(ctx interface{}, uuid interface{}) *MockOidcAPI_RetrieveTeamsMappedToGroup_Call {
	return &MockOidcAPI_RetrieveTeamsMappedToGroup_Call{Call: _e.mock.On("RetrieveTeamsMappedToGroup", ctx, uuid)}
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroup_Call) Run(run func(ctx context.Context, uuid string)) *MockOidcAPI_RetrieveTeamsMappedToGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroup_Call) Return(_a0 ApiRetrieveTeamsMappedToGroupRequest) *MockOidcAPI_RetrieveTeamsMappedToGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroup_Call) RunAndReturn(run func(context.Context, string) ApiRetrieveTeamsMappedToGroupRequest) *MockOidcAPI_RetrieveTeamsMappedToGroup_Call {
	_c.Call.Return(run)
	return _c
}

// RetrieveTeamsMappedToGroupExecute provides a mock function with given fields: r
func (_m *MockOidcAPI) RetrieveTeamsMappedToGroupExecute(r ApiRetrieveTeamsMappedToGroupRequest) ([]Team, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveTeamsMappedToGroupExecute")
	}

	var r0 []Team
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRetrieveTeamsMappedToGroupRequest) ([]Team, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRetrieveTeamsMappedToGroupRequest) []Team); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Team)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRetrieveTeamsMappedToGroupRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRetrieveTeamsMappedToGroupRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RetrieveTeamsMappedToGroupExecute'
type MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call struct {
	*mock.Call
}

// RetrieveTeamsMappedToGroupExecute is a helper method to define mock.On call
//   - r ApiRetrieveTeamsMappedToGroupRequest
func (_e *MockOidcAPI_Expecter) RetrieveTeamsMappedToGroupExecute(r interface{}) *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call {
	return &MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call{Call: _e.mock.On("RetrieveTeamsMappedToGroupExecute", r)}
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call) Run(run func(r ApiRetrieveTeamsMappedToGroupRequest)) *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRetrieveTeamsMappedToGroupRequest))
	})
	return _c
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call) Return(_a0 []Team, _a1 *http.Response, _a2 error) *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call) RunAndReturn(run func(ApiRetrieveTeamsMappedToGroupRequest) ([]Team, *http.Response, error)) *MockOidcAPI_RetrieveTeamsMappedToGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function with given fields: ctx
func (_m *MockOidcAPI) UpdateGroup(ctx context.Context) ApiUpdateGroupRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 ApiUpdateGroupRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateGroupRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateGroupRequest)
	}

	return r0
}

// MockOidcAPI_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type MockOidcAPI_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockOidcAPI_Expecter) UpdateGroup(ctx interface{}) *MockOidcAPI_UpdateGroup_Call {
	return &MockOidcAPI_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", ctx)}
}

func (_c *MockOidcAPI_UpdateGroup_Call) Run(run func(ctx context.Context)) *MockOidcAPI_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockOidcAPI_UpdateGroup_Call) Return(_a0 ApiUpdateGroupRequest) *MockOidcAPI_UpdateGroup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOidcAPI_UpdateGroup_Call) RunAndReturn(run func(context.Context) ApiUpdateGroupRequest) *MockOidcAPI_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroupExecute provides a mock function with given fields: r
func (_m *MockOidcAPI) UpdateGroupExecute(r ApiUpdateGroupRequest) (*OidcGroup, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupExecute")
	}

	var r0 *OidcGroup
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateGroupRequest) (*OidcGroup, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateGroupRequest) *OidcGroup); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OidcGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateGroupRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateGroupRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockOidcAPI_UpdateGroupExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroupExecute'
type MockOidcAPI_UpdateGroupExecute_Call struct {
	*mock.Call
}

// UpdateGroupExecute is a helper method to define mock.On call
//   - r ApiUpdateGroupRequest
func (_e *MockOidcAPI_Expecter) UpdateGroupExecute(r interface{}) *MockOidcAPI_UpdateGroupExecute_Call {
	return &MockOidcAPI_UpdateGroupExecute_Call{Call: _e.mock.On("UpdateGroupExecute", r)}
}

func (_c *MockOidcAPI_UpdateGroupExecute_Call) Run(run func(r ApiUpdateGroupRequest)) *MockOidcAPI_UpdateGroupExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateGroupRequest))
	})
	return _c
}

func (_c *MockOidcAPI_UpdateGroupExecute_Call) Return(_a0 *OidcGroup, _a1 *http.Response, _a2 error) *MockOidcAPI_UpdateGroupExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockOidcAPI_UpdateGroupExecute_Call) RunAndReturn(run func(ApiUpdateGroupRequest) (*OidcGroup, *http.Response, error)) *MockOidcAPI_UpdateGroupExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOidcAPI creates a new instance of MockOidcAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOidcAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOidcAPI {
	mock := &MockOidcAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
