/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateScheduledNotificationRuleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateScheduledNotificationRuleRequest{}

// CreateScheduledNotificationRuleRequest struct for CreateScheduledNotificationRuleRequest
type CreateScheduledNotificationRuleRequest struct {
	Name *string `json:"name,omitempty" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	Scope string `json:"scope"`
	NotificationLevel string `json:"notificationLevel"`
	Publisher Publisher `json:"publisher"`
}

type _CreateScheduledNotificationRuleRequest CreateScheduledNotificationRuleRequest

// NewCreateScheduledNotificationRuleRequest instantiates a new CreateScheduledNotificationRuleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateScheduledNotificationRuleRequest(scope string, notificationLevel string, publisher Publisher) *CreateScheduledNotificationRuleRequest {
	this := CreateScheduledNotificationRuleRequest{}
	this.Scope = scope
	this.NotificationLevel = notificationLevel
	this.Publisher = publisher
	return &this
}

// NewCreateScheduledNotificationRuleRequestWithDefaults instantiates a new CreateScheduledNotificationRuleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateScheduledNotificationRuleRequestWithDefaults() *CreateScheduledNotificationRuleRequest {
	this := CreateScheduledNotificationRuleRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateScheduledNotificationRuleRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateScheduledNotificationRuleRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateScheduledNotificationRuleRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateScheduledNotificationRuleRequest) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value
func (o *CreateScheduledNotificationRuleRequest) GetScope() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *CreateScheduledNotificationRuleRequest) GetScopeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *CreateScheduledNotificationRuleRequest) SetScope(v string) {
	o.Scope = v
}

// GetNotificationLevel returns the NotificationLevel field value
func (o *CreateScheduledNotificationRuleRequest) GetNotificationLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationLevel
}

// GetNotificationLevelOk returns a tuple with the NotificationLevel field value
// and a boolean to check if the value has been set.
func (o *CreateScheduledNotificationRuleRequest) GetNotificationLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationLevel, true
}

// SetNotificationLevel sets field value
func (o *CreateScheduledNotificationRuleRequest) SetNotificationLevel(v string) {
	o.NotificationLevel = v
}

// GetPublisher returns the Publisher field value
func (o *CreateScheduledNotificationRuleRequest) GetPublisher() Publisher {
	if o == nil {
		var ret Publisher
		return ret
	}

	return o.Publisher
}

// GetPublisherOk returns a tuple with the Publisher field value
// and a boolean to check if the value has been set.
func (o *CreateScheduledNotificationRuleRequest) GetPublisherOk() (*Publisher, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Publisher, true
}

// SetPublisher sets field value
func (o *CreateScheduledNotificationRuleRequest) SetPublisher(v Publisher) {
	o.Publisher = v
}

func (o CreateScheduledNotificationRuleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateScheduledNotificationRuleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["scope"] = o.Scope
	toSerialize["notificationLevel"] = o.NotificationLevel
	toSerialize["publisher"] = o.Publisher
	return toSerialize, nil
}

func (o *CreateScheduledNotificationRuleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"scope",
		"notificationLevel",
		"publisher",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateScheduledNotificationRuleRequest := _CreateScheduledNotificationRuleRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateScheduledNotificationRuleRequest)

	if err != nil {
		return err
	}

	*o = CreateScheduledNotificationRuleRequest(varCreateScheduledNotificationRuleRequest)

	return err
}

type NullableCreateScheduledNotificationRuleRequest struct {
	value *CreateScheduledNotificationRuleRequest
	isSet bool
}

func (v NullableCreateScheduledNotificationRuleRequest) Get() *CreateScheduledNotificationRuleRequest {
	return v.value
}

func (v *NullableCreateScheduledNotificationRuleRequest) Set(val *CreateScheduledNotificationRuleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateScheduledNotificationRuleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateScheduledNotificationRuleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateScheduledNotificationRuleRequest(val *CreateScheduledNotificationRuleRequest) *NullableCreateScheduledNotificationRuleRequest {
	return &NullableCreateScheduledNotificationRuleRequest{value: val, isSet: true}
}

func (v NullableCreateScheduledNotificationRuleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateScheduledNotificationRuleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


