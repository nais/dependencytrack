// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockCalculatorAPI is an autogenerated mock type for the CalculatorAPI type
type MockCalculatorAPI struct {
	mock.Mock
}

type MockCalculatorAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCalculatorAPI) EXPECT() *MockCalculatorAPI_Expecter {
	return &MockCalculatorAPI_Expecter{mock: &_m.Mock}
}

// GetCvssScores provides a mock function with given fields: ctx
func (_m *MockCalculatorAPI) GetCvssScores(ctx context.Context) ApiGetCvssScoresRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCvssScores")
	}

	var r0 ApiGetCvssScoresRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetCvssScoresRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetCvssScoresRequest)
	}

	return r0
}

// MockCalculatorAPI_GetCvssScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCvssScores'
type MockCalculatorAPI_GetCvssScores_Call struct {
	*mock.Call
}

// GetCvssScores is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCalculatorAPI_Expecter) GetCvssScores(ctx interface{}) *MockCalculatorAPI_GetCvssScores_Call {
	return &MockCalculatorAPI_GetCvssScores_Call{Call: _e.mock.On("GetCvssScores", ctx)}
}

func (_c *MockCalculatorAPI_GetCvssScores_Call) Run(run func(ctx context.Context)) *MockCalculatorAPI_GetCvssScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCalculatorAPI_GetCvssScores_Call) Return(_a0 ApiGetCvssScoresRequest) *MockCalculatorAPI_GetCvssScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCalculatorAPI_GetCvssScores_Call) RunAndReturn(run func(context.Context) ApiGetCvssScoresRequest) *MockCalculatorAPI_GetCvssScores_Call {
	_c.Call.Return(run)
	return _c
}

// GetCvssScoresExecute provides a mock function with given fields: r
func (_m *MockCalculatorAPI) GetCvssScoresExecute(r ApiGetCvssScoresRequest) (*Score, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetCvssScoresExecute")
	}

	var r0 *Score
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetCvssScoresRequest) (*Score, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetCvssScoresRequest) *Score); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetCvssScoresRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetCvssScoresRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCalculatorAPI_GetCvssScoresExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCvssScoresExecute'
type MockCalculatorAPI_GetCvssScoresExecute_Call struct {
	*mock.Call
}

// GetCvssScoresExecute is a helper method to define mock.On call
//   - r ApiGetCvssScoresRequest
func (_e *MockCalculatorAPI_Expecter) GetCvssScoresExecute(r interface{}) *MockCalculatorAPI_GetCvssScoresExecute_Call {
	return &MockCalculatorAPI_GetCvssScoresExecute_Call{Call: _e.mock.On("GetCvssScoresExecute", r)}
}

func (_c *MockCalculatorAPI_GetCvssScoresExecute_Call) Run(run func(r ApiGetCvssScoresRequest)) *MockCalculatorAPI_GetCvssScoresExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetCvssScoresRequest))
	})
	return _c
}

func (_c *MockCalculatorAPI_GetCvssScoresExecute_Call) Return(_a0 *Score, _a1 *http.Response, _a2 error) *MockCalculatorAPI_GetCvssScoresExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCalculatorAPI_GetCvssScoresExecute_Call) RunAndReturn(run func(ApiGetCvssScoresRequest) (*Score, *http.Response, error)) *MockCalculatorAPI_GetCvssScoresExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwaspRRScores provides a mock function with given fields: ctx
func (_m *MockCalculatorAPI) GetOwaspRRScores(ctx context.Context) ApiGetOwaspRRScoresRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOwaspRRScores")
	}

	var r0 ApiGetOwaspRRScoresRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetOwaspRRScoresRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetOwaspRRScoresRequest)
	}

	return r0
}

// MockCalculatorAPI_GetOwaspRRScores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwaspRRScores'
type MockCalculatorAPI_GetOwaspRRScores_Call struct {
	*mock.Call
}

// GetOwaspRRScores is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCalculatorAPI_Expecter) GetOwaspRRScores(ctx interface{}) *MockCalculatorAPI_GetOwaspRRScores_Call {
	return &MockCalculatorAPI_GetOwaspRRScores_Call{Call: _e.mock.On("GetOwaspRRScores", ctx)}
}

func (_c *MockCalculatorAPI_GetOwaspRRScores_Call) Run(run func(ctx context.Context)) *MockCalculatorAPI_GetOwaspRRScores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCalculatorAPI_GetOwaspRRScores_Call) Return(_a0 ApiGetOwaspRRScoresRequest) *MockCalculatorAPI_GetOwaspRRScores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCalculatorAPI_GetOwaspRRScores_Call) RunAndReturn(run func(context.Context) ApiGetOwaspRRScoresRequest) *MockCalculatorAPI_GetOwaspRRScores_Call {
	_c.Call.Return(run)
	return _c
}

// GetOwaspRRScoresExecute provides a mock function with given fields: r
func (_m *MockCalculatorAPI) GetOwaspRRScoresExecute(r ApiGetOwaspRRScoresRequest) (*Score, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOwaspRRScoresExecute")
	}

	var r0 *Score
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetOwaspRRScoresRequest) (*Score, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetOwaspRRScoresRequest) *Score); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Score)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetOwaspRRScoresRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetOwaspRRScoresRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockCalculatorAPI_GetOwaspRRScoresExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOwaspRRScoresExecute'
type MockCalculatorAPI_GetOwaspRRScoresExecute_Call struct {
	*mock.Call
}

// GetOwaspRRScoresExecute is a helper method to define mock.On call
//   - r ApiGetOwaspRRScoresRequest
func (_e *MockCalculatorAPI_Expecter) GetOwaspRRScoresExecute(r interface{}) *MockCalculatorAPI_GetOwaspRRScoresExecute_Call {
	return &MockCalculatorAPI_GetOwaspRRScoresExecute_Call{Call: _e.mock.On("GetOwaspRRScoresExecute", r)}
}

func (_c *MockCalculatorAPI_GetOwaspRRScoresExecute_Call) Run(run func(r ApiGetOwaspRRScoresRequest)) *MockCalculatorAPI_GetOwaspRRScoresExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetOwaspRRScoresRequest))
	})
	return _c
}

func (_c *MockCalculatorAPI_GetOwaspRRScoresExecute_Call) Return(_a0 *Score, _a1 *http.Response, _a2 error) *MockCalculatorAPI_GetOwaspRRScoresExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockCalculatorAPI_GetOwaspRRScoresExecute_Call) RunAndReturn(run func(ApiGetOwaspRRScoresRequest) (*Score, *http.Response, error)) *MockCalculatorAPI_GetOwaspRRScoresExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCalculatorAPI creates a new instance of MockCalculatorAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCalculatorAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCalculatorAPI {
	mock := &MockCalculatorAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
