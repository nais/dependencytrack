/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type AclAPI interface {

	/*
	AddMapping Adds an ACL mapping

	<p>Requires permission <strong>ACCESS_MANAGEMENT</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAddMappingRequest
	*/
	AddMapping(ctx context.Context) ApiAddMappingRequest

	// AddMappingExecute executes the request
	AddMappingExecute(r ApiAddMappingRequest) (*http.Response, error)

	/*
	DeleteMapping Removes an ACL mapping

	<p>Requires permission <strong>ACCESS_MANAGEMENT</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamUuid The UUID of the team to delete the mapping for
	@param projectUuid The UUID of the project to delete the mapping for
	@return ApiDeleteMappingRequest
	*/
	DeleteMapping(ctx context.Context, teamUuid string, projectUuid string) ApiDeleteMappingRequest

	// DeleteMappingExecute executes the request
	DeleteMappingExecute(r ApiDeleteMappingRequest) (*http.Response, error)

	/*
	RetrieveProjects Returns the projects assigned to the specified team

	<p>Requires permission <strong>ACCESS_MANAGEMENT</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the team to retrieve mappings for
	@return ApiRetrieveProjectsRequest
	*/
	RetrieveProjects(ctx context.Context, uuid string) ApiRetrieveProjectsRequest

	// RetrieveProjectsExecute executes the request
	//  @return []Project
	RetrieveProjectsExecute(r ApiRetrieveProjectsRequest) ([]Project, *http.Response, error)
}

// AclAPIService AclAPI service
type AclAPIService service

type ApiAddMappingRequest struct {
	ctx context.Context
	ApiService AclAPI
	aclMappingRequest *AclMappingRequest
}

func (r ApiAddMappingRequest) AclMappingRequest(aclMappingRequest AclMappingRequest) ApiAddMappingRequest {
	r.aclMappingRequest = &aclMappingRequest
	return r
}

func (r ApiAddMappingRequest) Execute() (*http.Response, error) {
	return r.ApiService.AddMappingExecute(r)
}

/*
AddMapping Adds an ACL mapping

<p>Requires permission <strong>ACCESS_MANAGEMENT</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAddMappingRequest
*/
func (a *AclAPIService) AddMapping(ctx context.Context) ApiAddMappingRequest {
	return ApiAddMappingRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *AclAPIService) AddMappingExecute(r ApiAddMappingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.AddMapping")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/acl/mapping"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aclMappingRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteMappingRequest struct {
	ctx context.Context
	ApiService AclAPI
	teamUuid string
	projectUuid string
}

func (r ApiDeleteMappingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMappingExecute(r)
}

/*
DeleteMapping Removes an ACL mapping

<p>Requires permission <strong>ACCESS_MANAGEMENT</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param teamUuid The UUID of the team to delete the mapping for
 @param projectUuid The UUID of the project to delete the mapping for
 @return ApiDeleteMappingRequest
*/
func (a *AclAPIService) DeleteMapping(ctx context.Context, teamUuid string, projectUuid string) ApiDeleteMappingRequest {
	return ApiDeleteMappingRequest{
		ApiService: a,
		ctx: ctx,
		teamUuid: teamUuid,
		projectUuid: projectUuid,
	}
}

// Execute executes the request
func (a *AclAPIService) DeleteMappingExecute(r ApiDeleteMappingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.DeleteMapping")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/acl/mapping/team/{teamUuid}/project/{projectUuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamUuid"+"}", url.PathEscape(parameterValueToString(r.teamUuid, "teamUuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"projectUuid"+"}", url.PathEscape(parameterValueToString(r.projectUuid, "projectUuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiRetrieveProjectsRequest struct {
	ctx context.Context
	ApiService AclAPI
	uuid string
	pageNumber *string
	pageSize *string
	offset *string
	limit *string
	sortName *string
	sortOrder *string
	excludeInactive *bool
	onlyRoot *bool
}

// The page to return. To be used in conjunction with &lt;code&gt;pageSize&lt;/code&gt;.
func (r ApiRetrieveProjectsRequest) PageNumber(pageNumber string) ApiRetrieveProjectsRequest {
	r.pageNumber = &pageNumber
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;pageNumber&lt;/code&gt;.
func (r ApiRetrieveProjectsRequest) PageSize(pageSize string) ApiRetrieveProjectsRequest {
	r.pageSize = &pageSize
	return r
}

// Offset to start returning elements from. To be used in conjunction with &lt;code&gt;limit&lt;/code&gt;.
func (r ApiRetrieveProjectsRequest) Offset(offset string) ApiRetrieveProjectsRequest {
	r.offset = &offset
	return r
}

// Number of elements to return per page. To be used in conjunction with &lt;code&gt;offset&lt;/code&gt;.
func (r ApiRetrieveProjectsRequest) Limit(limit string) ApiRetrieveProjectsRequest {
	r.limit = &limit
	return r
}

// Name of the resource field to sort on.
func (r ApiRetrieveProjectsRequest) SortName(sortName string) ApiRetrieveProjectsRequest {
	r.sortName = &sortName
	return r
}

// Ordering of items when sorting with &lt;code&gt;sortName&lt;/code&gt;.
func (r ApiRetrieveProjectsRequest) SortOrder(sortOrder string) ApiRetrieveProjectsRequest {
	r.sortOrder = &sortOrder
	return r
}

// Optionally excludes inactive projects from being returned
func (r ApiRetrieveProjectsRequest) ExcludeInactive(excludeInactive bool) ApiRetrieveProjectsRequest {
	r.excludeInactive = &excludeInactive
	return r
}

// Optionally excludes children projects from being returned
func (r ApiRetrieveProjectsRequest) OnlyRoot(onlyRoot bool) ApiRetrieveProjectsRequest {
	r.onlyRoot = &onlyRoot
	return r
}

func (r ApiRetrieveProjectsRequest) Execute() ([]Project, *http.Response, error) {
	return r.ApiService.RetrieveProjectsExecute(r)
}

/*
RetrieveProjects Returns the projects assigned to the specified team

<p>Requires permission <strong>ACCESS_MANAGEMENT</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the team to retrieve mappings for
 @return ApiRetrieveProjectsRequest
*/
func (a *AclAPIService) RetrieveProjects(ctx context.Context, uuid string) ApiRetrieveProjectsRequest {
	return ApiRetrieveProjectsRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return []Project
func (a *AclAPIService) RetrieveProjectsExecute(r ApiRetrieveProjectsRequest) ([]Project, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Project
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AclAPIService.RetrieveProjects")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/acl/team/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.pageNumber != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageNumber", r.pageNumber, "form", "")
	} else {
		var defaultValue string = "1"
		r.pageNumber = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "form", "")
	} else {
		var defaultValue string = "100"
		r.pageSize = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.sortName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortName", r.sortName, "form", "")
	}
	if r.sortOrder != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortOrder", r.sortOrder, "form", "")
	}
	if r.excludeInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeInactive", r.excludeInactive, "form", "")
	}
	if r.onlyRoot != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyRoot", r.onlyRoot, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
