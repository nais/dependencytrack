/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Score type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Score{}

// Score struct for Score
type Score struct {
	LikelihoodScore *float64 `json:"likelihoodScore,omitempty"`
	TechnicalImpactScore *float64 `json:"technicalImpactScore,omitempty"`
	BusinessImpactScore *float64 `json:"businessImpactScore,omitempty"`
	Likelihood *string `json:"likelihood,omitempty"`
	TechnicalImpact *string `json:"technicalImpact,omitempty"`
	BusinessImpact *string `json:"businessImpact,omitempty"`
}

// NewScore instantiates a new Score object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScore() *Score {
	this := Score{}
	return &this
}

// NewScoreWithDefaults instantiates a new Score object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScoreWithDefaults() *Score {
	this := Score{}
	return &this
}

// GetLikelihoodScore returns the LikelihoodScore field value if set, zero value otherwise.
func (o *Score) GetLikelihoodScore() float64 {
	if o == nil || IsNil(o.LikelihoodScore) {
		var ret float64
		return ret
	}
	return *o.LikelihoodScore
}

// GetLikelihoodScoreOk returns a tuple with the LikelihoodScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetLikelihoodScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.LikelihoodScore) {
		return nil, false
	}
	return o.LikelihoodScore, true
}

// HasLikelihoodScore returns a boolean if a field has been set.
func (o *Score) HasLikelihoodScore() bool {
	if o != nil && !IsNil(o.LikelihoodScore) {
		return true
	}

	return false
}

// SetLikelihoodScore gets a reference to the given float64 and assigns it to the LikelihoodScore field.
func (o *Score) SetLikelihoodScore(v float64) {
	o.LikelihoodScore = &v
}

// GetTechnicalImpactScore returns the TechnicalImpactScore field value if set, zero value otherwise.
func (o *Score) GetTechnicalImpactScore() float64 {
	if o == nil || IsNil(o.TechnicalImpactScore) {
		var ret float64
		return ret
	}
	return *o.TechnicalImpactScore
}

// GetTechnicalImpactScoreOk returns a tuple with the TechnicalImpactScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetTechnicalImpactScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.TechnicalImpactScore) {
		return nil, false
	}
	return o.TechnicalImpactScore, true
}

// HasTechnicalImpactScore returns a boolean if a field has been set.
func (o *Score) HasTechnicalImpactScore() bool {
	if o != nil && !IsNil(o.TechnicalImpactScore) {
		return true
	}

	return false
}

// SetTechnicalImpactScore gets a reference to the given float64 and assigns it to the TechnicalImpactScore field.
func (o *Score) SetTechnicalImpactScore(v float64) {
	o.TechnicalImpactScore = &v
}

// GetBusinessImpactScore returns the BusinessImpactScore field value if set, zero value otherwise.
func (o *Score) GetBusinessImpactScore() float64 {
	if o == nil || IsNil(o.BusinessImpactScore) {
		var ret float64
		return ret
	}
	return *o.BusinessImpactScore
}

// GetBusinessImpactScoreOk returns a tuple with the BusinessImpactScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetBusinessImpactScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.BusinessImpactScore) {
		return nil, false
	}
	return o.BusinessImpactScore, true
}

// HasBusinessImpactScore returns a boolean if a field has been set.
func (o *Score) HasBusinessImpactScore() bool {
	if o != nil && !IsNil(o.BusinessImpactScore) {
		return true
	}

	return false
}

// SetBusinessImpactScore gets a reference to the given float64 and assigns it to the BusinessImpactScore field.
func (o *Score) SetBusinessImpactScore(v float64) {
	o.BusinessImpactScore = &v
}

// GetLikelihood returns the Likelihood field value if set, zero value otherwise.
func (o *Score) GetLikelihood() string {
	if o == nil || IsNil(o.Likelihood) {
		var ret string
		return ret
	}
	return *o.Likelihood
}

// GetLikelihoodOk returns a tuple with the Likelihood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetLikelihoodOk() (*string, bool) {
	if o == nil || IsNil(o.Likelihood) {
		return nil, false
	}
	return o.Likelihood, true
}

// HasLikelihood returns a boolean if a field has been set.
func (o *Score) HasLikelihood() bool {
	if o != nil && !IsNil(o.Likelihood) {
		return true
	}

	return false
}

// SetLikelihood gets a reference to the given string and assigns it to the Likelihood field.
func (o *Score) SetLikelihood(v string) {
	o.Likelihood = &v
}

// GetTechnicalImpact returns the TechnicalImpact field value if set, zero value otherwise.
func (o *Score) GetTechnicalImpact() string {
	if o == nil || IsNil(o.TechnicalImpact) {
		var ret string
		return ret
	}
	return *o.TechnicalImpact
}

// GetTechnicalImpactOk returns a tuple with the TechnicalImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetTechnicalImpactOk() (*string, bool) {
	if o == nil || IsNil(o.TechnicalImpact) {
		return nil, false
	}
	return o.TechnicalImpact, true
}

// HasTechnicalImpact returns a boolean if a field has been set.
func (o *Score) HasTechnicalImpact() bool {
	if o != nil && !IsNil(o.TechnicalImpact) {
		return true
	}

	return false
}

// SetTechnicalImpact gets a reference to the given string and assigns it to the TechnicalImpact field.
func (o *Score) SetTechnicalImpact(v string) {
	o.TechnicalImpact = &v
}

// GetBusinessImpact returns the BusinessImpact field value if set, zero value otherwise.
func (o *Score) GetBusinessImpact() string {
	if o == nil || IsNil(o.BusinessImpact) {
		var ret string
		return ret
	}
	return *o.BusinessImpact
}

// GetBusinessImpactOk returns a tuple with the BusinessImpact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Score) GetBusinessImpactOk() (*string, bool) {
	if o == nil || IsNil(o.BusinessImpact) {
		return nil, false
	}
	return o.BusinessImpact, true
}

// HasBusinessImpact returns a boolean if a field has been set.
func (o *Score) HasBusinessImpact() bool {
	if o != nil && !IsNil(o.BusinessImpact) {
		return true
	}

	return false
}

// SetBusinessImpact gets a reference to the given string and assigns it to the BusinessImpact field.
func (o *Score) SetBusinessImpact(v string) {
	o.BusinessImpact = &v
}

func (o Score) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Score) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LikelihoodScore) {
		toSerialize["likelihoodScore"] = o.LikelihoodScore
	}
	if !IsNil(o.TechnicalImpactScore) {
		toSerialize["technicalImpactScore"] = o.TechnicalImpactScore
	}
	if !IsNil(o.BusinessImpactScore) {
		toSerialize["businessImpactScore"] = o.BusinessImpactScore
	}
	if !IsNil(o.Likelihood) {
		toSerialize["likelihood"] = o.Likelihood
	}
	if !IsNil(o.TechnicalImpact) {
		toSerialize["technicalImpact"] = o.TechnicalImpact
	}
	if !IsNil(o.BusinessImpact) {
		toSerialize["businessImpact"] = o.BusinessImpact
	}
	return toSerialize, nil
}

type NullableScore struct {
	value *Score
	isSet bool
}

func (v NullableScore) Get() *Score {
	return v.value
}

func (v *NullableScore) Set(val *Score) {
	v.value = val
	v.isSet = true
}

func (v NullableScore) IsSet() bool {
	return v.isSet
}

func (v *NullableScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScore(val *Score) *NullableScore {
	return &NullableScore{value: val, isSet: true}
}

func (v NullableScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


