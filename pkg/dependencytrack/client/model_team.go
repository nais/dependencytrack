/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Team type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Team{}

// Team struct for Team
type Team struct {
	Uuid string `json:"uuid"`
	Name string `json:"name" validate:"regexp=[\\\\P{Cc}]+"`
	ApiKeys []ApiKey `json:"apiKeys,omitempty"`
	LdapUsers []LdapUser `json:"ldapUsers,omitempty"`
	ManagedUsers []ManagedUser `json:"managedUsers,omitempty"`
	OidcUsers []OidcUser `json:"oidcUsers,omitempty"`
	MappedLdapGroups []MappedLdapGroup `json:"mappedLdapGroups,omitempty"`
	MappedOidcGroups []MappedOidcGroup `json:"mappedOidcGroups,omitempty"`
	Permissions []Permission `json:"permissions,omitempty"`
}

type _Team Team

// NewTeam instantiates a new Team object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeam(uuid string, name string) *Team {
	this := Team{}
	this.Uuid = uuid
	this.Name = name
	return &this
}

// NewTeamWithDefaults instantiates a new Team object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamWithDefaults() *Team {
	this := Team{}
	return &this
}

// GetUuid returns the Uuid field value
func (o *Team) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *Team) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *Team) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *Team) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Team) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Team) SetName(v string) {
	o.Name = v
}

// GetApiKeys returns the ApiKeys field value if set, zero value otherwise.
func (o *Team) GetApiKeys() []ApiKey {
	if o == nil || IsNil(o.ApiKeys) {
		var ret []ApiKey
		return ret
	}
	return o.ApiKeys
}

// GetApiKeysOk returns a tuple with the ApiKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetApiKeysOk() ([]ApiKey, bool) {
	if o == nil || IsNil(o.ApiKeys) {
		return nil, false
	}
	return o.ApiKeys, true
}

// HasApiKeys returns a boolean if a field has been set.
func (o *Team) HasApiKeys() bool {
	if o != nil && !IsNil(o.ApiKeys) {
		return true
	}

	return false
}

// SetApiKeys gets a reference to the given []ApiKey and assigns it to the ApiKeys field.
func (o *Team) SetApiKeys(v []ApiKey) {
	o.ApiKeys = v
}

// GetLdapUsers returns the LdapUsers field value if set, zero value otherwise.
func (o *Team) GetLdapUsers() []LdapUser {
	if o == nil || IsNil(o.LdapUsers) {
		var ret []LdapUser
		return ret
	}
	return o.LdapUsers
}

// GetLdapUsersOk returns a tuple with the LdapUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetLdapUsersOk() ([]LdapUser, bool) {
	if o == nil || IsNil(o.LdapUsers) {
		return nil, false
	}
	return o.LdapUsers, true
}

// HasLdapUsers returns a boolean if a field has been set.
func (o *Team) HasLdapUsers() bool {
	if o != nil && !IsNil(o.LdapUsers) {
		return true
	}

	return false
}

// SetLdapUsers gets a reference to the given []LdapUser and assigns it to the LdapUsers field.
func (o *Team) SetLdapUsers(v []LdapUser) {
	o.LdapUsers = v
}

// GetManagedUsers returns the ManagedUsers field value if set, zero value otherwise.
func (o *Team) GetManagedUsers() []ManagedUser {
	if o == nil || IsNil(o.ManagedUsers) {
		var ret []ManagedUser
		return ret
	}
	return o.ManagedUsers
}

// GetManagedUsersOk returns a tuple with the ManagedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetManagedUsersOk() ([]ManagedUser, bool) {
	if o == nil || IsNil(o.ManagedUsers) {
		return nil, false
	}
	return o.ManagedUsers, true
}

// HasManagedUsers returns a boolean if a field has been set.
func (o *Team) HasManagedUsers() bool {
	if o != nil && !IsNil(o.ManagedUsers) {
		return true
	}

	return false
}

// SetManagedUsers gets a reference to the given []ManagedUser and assigns it to the ManagedUsers field.
func (o *Team) SetManagedUsers(v []ManagedUser) {
	o.ManagedUsers = v
}

// GetOidcUsers returns the OidcUsers field value if set, zero value otherwise.
func (o *Team) GetOidcUsers() []OidcUser {
	if o == nil || IsNil(o.OidcUsers) {
		var ret []OidcUser
		return ret
	}
	return o.OidcUsers
}

// GetOidcUsersOk returns a tuple with the OidcUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetOidcUsersOk() ([]OidcUser, bool) {
	if o == nil || IsNil(o.OidcUsers) {
		return nil, false
	}
	return o.OidcUsers, true
}

// HasOidcUsers returns a boolean if a field has been set.
func (o *Team) HasOidcUsers() bool {
	if o != nil && !IsNil(o.OidcUsers) {
		return true
	}

	return false
}

// SetOidcUsers gets a reference to the given []OidcUser and assigns it to the OidcUsers field.
func (o *Team) SetOidcUsers(v []OidcUser) {
	o.OidcUsers = v
}

// GetMappedLdapGroups returns the MappedLdapGroups field value if set, zero value otherwise.
func (o *Team) GetMappedLdapGroups() []MappedLdapGroup {
	if o == nil || IsNil(o.MappedLdapGroups) {
		var ret []MappedLdapGroup
		return ret
	}
	return o.MappedLdapGroups
}

// GetMappedLdapGroupsOk returns a tuple with the MappedLdapGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetMappedLdapGroupsOk() ([]MappedLdapGroup, bool) {
	if o == nil || IsNil(o.MappedLdapGroups) {
		return nil, false
	}
	return o.MappedLdapGroups, true
}

// HasMappedLdapGroups returns a boolean if a field has been set.
func (o *Team) HasMappedLdapGroups() bool {
	if o != nil && !IsNil(o.MappedLdapGroups) {
		return true
	}

	return false
}

// SetMappedLdapGroups gets a reference to the given []MappedLdapGroup and assigns it to the MappedLdapGroups field.
func (o *Team) SetMappedLdapGroups(v []MappedLdapGroup) {
	o.MappedLdapGroups = v
}

// GetMappedOidcGroups returns the MappedOidcGroups field value if set, zero value otherwise.
func (o *Team) GetMappedOidcGroups() []MappedOidcGroup {
	if o == nil || IsNil(o.MappedOidcGroups) {
		var ret []MappedOidcGroup
		return ret
	}
	return o.MappedOidcGroups
}

// GetMappedOidcGroupsOk returns a tuple with the MappedOidcGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetMappedOidcGroupsOk() ([]MappedOidcGroup, bool) {
	if o == nil || IsNil(o.MappedOidcGroups) {
		return nil, false
	}
	return o.MappedOidcGroups, true
}

// HasMappedOidcGroups returns a boolean if a field has been set.
func (o *Team) HasMappedOidcGroups() bool {
	if o != nil && !IsNil(o.MappedOidcGroups) {
		return true
	}

	return false
}

// SetMappedOidcGroups gets a reference to the given []MappedOidcGroup and assigns it to the MappedOidcGroups field.
func (o *Team) SetMappedOidcGroups(v []MappedOidcGroup) {
	o.MappedOidcGroups = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *Team) GetPermissions() []Permission {
	if o == nil || IsNil(o.Permissions) {
		var ret []Permission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Team) GetPermissionsOk() ([]Permission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *Team) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Permission and assigns it to the Permissions field.
func (o *Team) SetPermissions(v []Permission) {
	o.Permissions = v
}

func (o Team) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Team) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	if !IsNil(o.ApiKeys) {
		toSerialize["apiKeys"] = o.ApiKeys
	}
	if !IsNil(o.LdapUsers) {
		toSerialize["ldapUsers"] = o.LdapUsers
	}
	if !IsNil(o.ManagedUsers) {
		toSerialize["managedUsers"] = o.ManagedUsers
	}
	if !IsNil(o.OidcUsers) {
		toSerialize["oidcUsers"] = o.OidcUsers
	}
	if !IsNil(o.MappedLdapGroups) {
		toSerialize["mappedLdapGroups"] = o.MappedLdapGroups
	}
	if !IsNil(o.MappedOidcGroups) {
		toSerialize["mappedOidcGroups"] = o.MappedOidcGroups
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

func (o *Team) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeam := _Team{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTeam)

	if err != nil {
		return err
	}

	*o = Team(varTeam)

	return err
}

type NullableTeam struct {
	value *Team
	isSet bool
}

func (v NullableTeam) Get() *Team {
	return v.value
}

func (v *NullableTeam) Set(val *Team) {
	v.value = val
	v.isSet = true
}

func (v NullableTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeam(val *Team) *NullableTeam {
	return &NullableTeam{value: val, isSet: true}
}

func (v NullableTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


