// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockTeamAPI is an autogenerated mock type for the TeamAPI type
type MockTeamAPI struct {
	mock.Mock
}

type MockTeamAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTeamAPI) EXPECT() *MockTeamAPI_Expecter {
	return &MockTeamAPI_Expecter{mock: &_m.Mock}
}

// AvailableTeams provides a mock function with given fields: ctx
func (_m *MockTeamAPI) AvailableTeams(ctx context.Context) ApiAvailableTeamsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AvailableTeams")
	}

	var r0 ApiAvailableTeamsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiAvailableTeamsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiAvailableTeamsRequest)
	}

	return r0
}

// MockTeamAPI_AvailableTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableTeams'
type MockTeamAPI_AvailableTeams_Call struct {
	*mock.Call
}

// AvailableTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) AvailableTeams(ctx interface{}) *MockTeamAPI_AvailableTeams_Call {
	return &MockTeamAPI_AvailableTeams_Call{Call: _e.mock.On("AvailableTeams", ctx)}
}

func (_c *MockTeamAPI_AvailableTeams_Call) Run(run func(ctx context.Context)) *MockTeamAPI_AvailableTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamAPI_AvailableTeams_Call) Return(_a0 ApiAvailableTeamsRequest) *MockTeamAPI_AvailableTeams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_AvailableTeams_Call) RunAndReturn(run func(context.Context) ApiAvailableTeamsRequest) *MockTeamAPI_AvailableTeams_Call {
	_c.Call.Return(run)
	return _c
}

// AvailableTeamsExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) AvailableTeamsExecute(r ApiAvailableTeamsRequest) ([]VisibleTeams, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AvailableTeamsExecute")
	}

	var r0 []VisibleTeams
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAvailableTeamsRequest) ([]VisibleTeams, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAvailableTeamsRequest) []VisibleTeams); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]VisibleTeams)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAvailableTeamsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAvailableTeamsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_AvailableTeamsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AvailableTeamsExecute'
type MockTeamAPI_AvailableTeamsExecute_Call struct {
	*mock.Call
}

// AvailableTeamsExecute is a helper method to define mock.On call
//   - r ApiAvailableTeamsRequest
func (_e *MockTeamAPI_Expecter) AvailableTeamsExecute(r interface{}) *MockTeamAPI_AvailableTeamsExecute_Call {
	return &MockTeamAPI_AvailableTeamsExecute_Call{Call: _e.mock.On("AvailableTeamsExecute", r)}
}

func (_c *MockTeamAPI_AvailableTeamsExecute_Call) Run(run func(r ApiAvailableTeamsRequest)) *MockTeamAPI_AvailableTeamsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAvailableTeamsRequest))
	})
	return _c
}

func (_c *MockTeamAPI_AvailableTeamsExecute_Call) Return(_a0 []VisibleTeams, _a1 *http.Response, _a2 error) *MockTeamAPI_AvailableTeamsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_AvailableTeamsExecute_Call) RunAndReturn(run func(ApiAvailableTeamsRequest) ([]VisibleTeams, *http.Response, error)) *MockTeamAPI_AvailableTeamsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeam provides a mock function with given fields: ctx
func (_m *MockTeamAPI) CreateTeam(ctx context.Context) ApiCreateTeamRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeam")
	}

	var r0 ApiCreateTeamRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateTeamRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateTeamRequest)
	}

	return r0
}

// MockTeamAPI_CreateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeam'
type MockTeamAPI_CreateTeam_Call struct {
	*mock.Call
}

// CreateTeam is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) CreateTeam(ctx interface{}) *MockTeamAPI_CreateTeam_Call {
	return &MockTeamAPI_CreateTeam_Call{Call: _e.mock.On("CreateTeam", ctx)}
}

func (_c *MockTeamAPI_CreateTeam_Call) Run(run func(ctx context.Context)) *MockTeamAPI_CreateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamAPI_CreateTeam_Call) Return(_a0 ApiCreateTeamRequest) *MockTeamAPI_CreateTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_CreateTeam_Call) RunAndReturn(run func(context.Context) ApiCreateTeamRequest) *MockTeamAPI_CreateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTeamExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) CreateTeamExecute(r ApiCreateTeamRequest) (*Team, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateTeamExecute")
	}

	var r0 *Team
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateTeamRequest) (*Team, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateTeamRequest) *Team); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateTeamRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateTeamRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_CreateTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTeamExecute'
type MockTeamAPI_CreateTeamExecute_Call struct {
	*mock.Call
}

// CreateTeamExecute is a helper method to define mock.On call
//   - r ApiCreateTeamRequest
func (_e *MockTeamAPI_Expecter) CreateTeamExecute(r interface{}) *MockTeamAPI_CreateTeamExecute_Call {
	return &MockTeamAPI_CreateTeamExecute_Call{Call: _e.mock.On("CreateTeamExecute", r)}
}

func (_c *MockTeamAPI_CreateTeamExecute_Call) Run(run func(r ApiCreateTeamRequest)) *MockTeamAPI_CreateTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateTeamRequest))
	})
	return _c
}

func (_c *MockTeamAPI_CreateTeamExecute_Call) Return(_a0 *Team, _a1 *http.Response, _a2 error) *MockTeamAPI_CreateTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_CreateTeamExecute_Call) RunAndReturn(run func(ApiCreateTeamRequest) (*Team, *http.Response, error)) *MockTeamAPI_CreateTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApiKey provides a mock function with given fields: ctx, publicIdOrKey
func (_m *MockTeamAPI) DeleteApiKey(ctx context.Context, publicIdOrKey string) ApiDeleteApiKeyRequest {
	ret := _m.Called(ctx, publicIdOrKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiKey")
	}

	var r0 ApiDeleteApiKeyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteApiKeyRequest); ok {
		r0 = rf(ctx, publicIdOrKey)
	} else {
		r0 = ret.Get(0).(ApiDeleteApiKeyRequest)
	}

	return r0
}

// MockTeamAPI_DeleteApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiKey'
type MockTeamAPI_DeleteApiKey_Call struct {
	*mock.Call
}

// DeleteApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIdOrKey string
func (_e *MockTeamAPI_Expecter) DeleteApiKey(ctx interface{}, publicIdOrKey interface{}) *MockTeamAPI_DeleteApiKey_Call {
	return &MockTeamAPI_DeleteApiKey_Call{Call: _e.mock.On("DeleteApiKey", ctx, publicIdOrKey)}
}

func (_c *MockTeamAPI_DeleteApiKey_Call) Run(run func(ctx context.Context, publicIdOrKey string)) *MockTeamAPI_DeleteApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTeamAPI_DeleteApiKey_Call) Return(_a0 ApiDeleteApiKeyRequest) *MockTeamAPI_DeleteApiKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_DeleteApiKey_Call) RunAndReturn(run func(context.Context, string) ApiDeleteApiKeyRequest) *MockTeamAPI_DeleteApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApiKeyExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) DeleteApiKeyExecute(r ApiDeleteApiKeyRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiKeyExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteApiKeyRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteApiKeyRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteApiKeyRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamAPI_DeleteApiKeyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApiKeyExecute'
type MockTeamAPI_DeleteApiKeyExecute_Call struct {
	*mock.Call
}

// DeleteApiKeyExecute is a helper method to define mock.On call
//   - r ApiDeleteApiKeyRequest
func (_e *MockTeamAPI_Expecter) DeleteApiKeyExecute(r interface{}) *MockTeamAPI_DeleteApiKeyExecute_Call {
	return &MockTeamAPI_DeleteApiKeyExecute_Call{Call: _e.mock.On("DeleteApiKeyExecute", r)}
}

func (_c *MockTeamAPI_DeleteApiKeyExecute_Call) Run(run func(r ApiDeleteApiKeyRequest)) *MockTeamAPI_DeleteApiKeyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteApiKeyRequest))
	})
	return _c
}

func (_c *MockTeamAPI_DeleteApiKeyExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTeamAPI_DeleteApiKeyExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamAPI_DeleteApiKeyExecute_Call) RunAndReturn(run func(ApiDeleteApiKeyRequest) (*http.Response, error)) *MockTeamAPI_DeleteApiKeyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeam provides a mock function with given fields: ctx
func (_m *MockTeamAPI) DeleteTeam(ctx context.Context) ApiDeleteTeamRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeam")
	}

	var r0 ApiDeleteTeamRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiDeleteTeamRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiDeleteTeamRequest)
	}

	return r0
}

// MockTeamAPI_DeleteTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeam'
type MockTeamAPI_DeleteTeam_Call struct {
	*mock.Call
}

// DeleteTeam is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) DeleteTeam(ctx interface{}) *MockTeamAPI_DeleteTeam_Call {
	return &MockTeamAPI_DeleteTeam_Call{Call: _e.mock.On("DeleteTeam", ctx)}
}

func (_c *MockTeamAPI_DeleteTeam_Call) Run(run func(ctx context.Context)) *MockTeamAPI_DeleteTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamAPI_DeleteTeam_Call) Return(_a0 ApiDeleteTeamRequest) *MockTeamAPI_DeleteTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_DeleteTeam_Call) RunAndReturn(run func(context.Context) ApiDeleteTeamRequest) *MockTeamAPI_DeleteTeam_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTeamExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) DeleteTeamExecute(r ApiDeleteTeamRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTeamExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteTeamRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteTeamRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteTeamRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTeamAPI_DeleteTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTeamExecute'
type MockTeamAPI_DeleteTeamExecute_Call struct {
	*mock.Call
}

// DeleteTeamExecute is a helper method to define mock.On call
//   - r ApiDeleteTeamRequest
func (_e *MockTeamAPI_Expecter) DeleteTeamExecute(r interface{}) *MockTeamAPI_DeleteTeamExecute_Call {
	return &MockTeamAPI_DeleteTeamExecute_Call{Call: _e.mock.On("DeleteTeamExecute", r)}
}

func (_c *MockTeamAPI_DeleteTeamExecute_Call) Run(run func(r ApiDeleteTeamRequest)) *MockTeamAPI_DeleteTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteTeamRequest))
	})
	return _c
}

func (_c *MockTeamAPI_DeleteTeamExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTeamAPI_DeleteTeamExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTeamAPI_DeleteTeamExecute_Call) RunAndReturn(run func(ApiDeleteTeamRequest) (*http.Response, error)) *MockTeamAPI_DeleteTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateApiKey provides a mock function with given fields: ctx, uuid
func (_m *MockTeamAPI) GenerateApiKey(ctx context.Context, uuid string) ApiGenerateApiKeyRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GenerateApiKey")
	}

	var r0 ApiGenerateApiKeyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGenerateApiKeyRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGenerateApiKeyRequest)
	}

	return r0
}

// MockTeamAPI_GenerateApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateApiKey'
type MockTeamAPI_GenerateApiKey_Call struct {
	*mock.Call
}

// GenerateApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockTeamAPI_Expecter) GenerateApiKey(ctx interface{}, uuid interface{}) *MockTeamAPI_GenerateApiKey_Call {
	return &MockTeamAPI_GenerateApiKey_Call{Call: _e.mock.On("GenerateApiKey", ctx, uuid)}
}

func (_c *MockTeamAPI_GenerateApiKey_Call) Run(run func(ctx context.Context, uuid string)) *MockTeamAPI_GenerateApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTeamAPI_GenerateApiKey_Call) Return(_a0 ApiGenerateApiKeyRequest) *MockTeamAPI_GenerateApiKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_GenerateApiKey_Call) RunAndReturn(run func(context.Context, string) ApiGenerateApiKeyRequest) *MockTeamAPI_GenerateApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateApiKeyExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) GenerateApiKeyExecute(r ApiGenerateApiKeyRequest) (*ApiKey, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GenerateApiKeyExecute")
	}

	var r0 *ApiKey
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGenerateApiKeyRequest) (*ApiKey, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGenerateApiKeyRequest) *ApiKey); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ApiKey)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGenerateApiKeyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGenerateApiKeyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_GenerateApiKeyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateApiKeyExecute'
type MockTeamAPI_GenerateApiKeyExecute_Call struct {
	*mock.Call
}

// GenerateApiKeyExecute is a helper method to define mock.On call
//   - r ApiGenerateApiKeyRequest
func (_e *MockTeamAPI_Expecter) GenerateApiKeyExecute(r interface{}) *MockTeamAPI_GenerateApiKeyExecute_Call {
	return &MockTeamAPI_GenerateApiKeyExecute_Call{Call: _e.mock.On("GenerateApiKeyExecute", r)}
}

func (_c *MockTeamAPI_GenerateApiKeyExecute_Call) Run(run func(r ApiGenerateApiKeyRequest)) *MockTeamAPI_GenerateApiKeyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGenerateApiKeyRequest))
	})
	return _c
}

func (_c *MockTeamAPI_GenerateApiKeyExecute_Call) Return(_a0 *ApiKey, _a1 *http.Response, _a2 error) *MockTeamAPI_GenerateApiKeyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_GenerateApiKeyExecute_Call) RunAndReturn(run func(ApiGenerateApiKeyRequest) (*ApiKey, *http.Response, error)) *MockTeamAPI_GenerateApiKeyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelf provides a mock function with given fields: ctx
func (_m *MockTeamAPI) GetSelf(ctx context.Context) ApiGetSelfRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSelf")
	}

	var r0 ApiGetSelfRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetSelfRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetSelfRequest)
	}

	return r0
}

// MockTeamAPI_GetSelf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelf'
type MockTeamAPI_GetSelf_Call struct {
	*mock.Call
}

// GetSelf is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) GetSelf(ctx interface{}) *MockTeamAPI_GetSelf_Call {
	return &MockTeamAPI_GetSelf_Call{Call: _e.mock.On("GetSelf", ctx)}
}

func (_c *MockTeamAPI_GetSelf_Call) Run(run func(ctx context.Context)) *MockTeamAPI_GetSelf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamAPI_GetSelf_Call) Return(_a0 ApiGetSelfRequest) *MockTeamAPI_GetSelf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_GetSelf_Call) RunAndReturn(run func(context.Context) ApiGetSelfRequest) *MockTeamAPI_GetSelf_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelfExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) GetSelfExecute(r ApiGetSelfRequest) (*TeamSelfResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetSelfExecute")
	}

	var r0 *TeamSelfResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetSelfRequest) (*TeamSelfResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetSelfRequest) *TeamSelfResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*TeamSelfResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetSelfRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetSelfRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_GetSelfExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelfExecute'
type MockTeamAPI_GetSelfExecute_Call struct {
	*mock.Call
}

// GetSelfExecute is a helper method to define mock.On call
//   - r ApiGetSelfRequest
func (_e *MockTeamAPI_Expecter) GetSelfExecute(r interface{}) *MockTeamAPI_GetSelfExecute_Call {
	return &MockTeamAPI_GetSelfExecute_Call{Call: _e.mock.On("GetSelfExecute", r)}
}

func (_c *MockTeamAPI_GetSelfExecute_Call) Run(run func(r ApiGetSelfRequest)) *MockTeamAPI_GetSelfExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetSelfRequest))
	})
	return _c
}

func (_c *MockTeamAPI_GetSelfExecute_Call) Return(_a0 *TeamSelfResponse, _a1 *http.Response, _a2 error) *MockTeamAPI_GetSelfExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_GetSelfExecute_Call) RunAndReturn(run func(ApiGetSelfRequest) (*TeamSelfResponse, *http.Response, error)) *MockTeamAPI_GetSelfExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeam provides a mock function with given fields: ctx, uuid
func (_m *MockTeamAPI) GetTeam(ctx context.Context, uuid string) ApiGetTeamRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetTeam")
	}

	var r0 ApiGetTeamRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetTeamRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetTeamRequest)
	}

	return r0
}

// MockTeamAPI_GetTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeam'
type MockTeamAPI_GetTeam_Call struct {
	*mock.Call
}

// GetTeam is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockTeamAPI_Expecter) GetTeam(ctx interface{}, uuid interface{}) *MockTeamAPI_GetTeam_Call {
	return &MockTeamAPI_GetTeam_Call{Call: _e.mock.On("GetTeam", ctx, uuid)}
}

func (_c *MockTeamAPI_GetTeam_Call) Run(run func(ctx context.Context, uuid string)) *MockTeamAPI_GetTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTeamAPI_GetTeam_Call) Return(_a0 ApiGetTeamRequest) *MockTeamAPI_GetTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_GetTeam_Call) RunAndReturn(run func(context.Context, string) ApiGetTeamRequest) *MockTeamAPI_GetTeam_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) GetTeamExecute(r ApiGetTeamRequest) (*Team, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamExecute")
	}

	var r0 *Team
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTeamRequest) (*Team, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTeamRequest) *Team); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTeamRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTeamRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_GetTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamExecute'
type MockTeamAPI_GetTeamExecute_Call struct {
	*mock.Call
}

// GetTeamExecute is a helper method to define mock.On call
//   - r ApiGetTeamRequest
func (_e *MockTeamAPI_Expecter) GetTeamExecute(r interface{}) *MockTeamAPI_GetTeamExecute_Call {
	return &MockTeamAPI_GetTeamExecute_Call{Call: _e.mock.On("GetTeamExecute", r)}
}

func (_c *MockTeamAPI_GetTeamExecute_Call) Run(run func(r ApiGetTeamRequest)) *MockTeamAPI_GetTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTeamRequest))
	})
	return _c
}

func (_c *MockTeamAPI_GetTeamExecute_Call) Return(_a0 *Team, _a1 *http.Response, _a2 error) *MockTeamAPI_GetTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_GetTeamExecute_Call) RunAndReturn(run func(ApiGetTeamRequest) (*Team, *http.Response, error)) *MockTeamAPI_GetTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeams provides a mock function with given fields: ctx
func (_m *MockTeamAPI) GetTeams(ctx context.Context) ApiGetTeamsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTeams")
	}

	var r0 ApiGetTeamsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetTeamsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetTeamsRequest)
	}

	return r0
}

// MockTeamAPI_GetTeams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeams'
type MockTeamAPI_GetTeams_Call struct {
	*mock.Call
}

// GetTeams is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) GetTeams(ctx interface{}) *MockTeamAPI_GetTeams_Call {
	return &MockTeamAPI_GetTeams_Call{Call: _e.mock.On("GetTeams", ctx)}
}

func (_c *MockTeamAPI_GetTeams_Call) Run(run func(ctx context.Context)) *MockTeamAPI_GetTeams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamAPI_GetTeams_Call) Return(_a0 ApiGetTeamsRequest) *MockTeamAPI_GetTeams_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_GetTeams_Call) RunAndReturn(run func(context.Context) ApiGetTeamsRequest) *MockTeamAPI_GetTeams_Call {
	_c.Call.Return(run)
	return _c
}

// GetTeamsExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) GetTeamsExecute(r ApiGetTeamsRequest) ([]Team, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTeamsExecute")
	}

	var r0 []Team
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTeamsRequest) ([]Team, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTeamsRequest) []Team); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Team)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTeamsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTeamsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_GetTeamsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTeamsExecute'
type MockTeamAPI_GetTeamsExecute_Call struct {
	*mock.Call
}

// GetTeamsExecute is a helper method to define mock.On call
//   - r ApiGetTeamsRequest
func (_e *MockTeamAPI_Expecter) GetTeamsExecute(r interface{}) *MockTeamAPI_GetTeamsExecute_Call {
	return &MockTeamAPI_GetTeamsExecute_Call{Call: _e.mock.On("GetTeamsExecute", r)}
}

func (_c *MockTeamAPI_GetTeamsExecute_Call) Run(run func(r ApiGetTeamsRequest)) *MockTeamAPI_GetTeamsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTeamsRequest))
	})
	return _c
}

func (_c *MockTeamAPI_GetTeamsExecute_Call) Return(_a0 []Team, _a1 *http.Response, _a2 error) *MockTeamAPI_GetTeamsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_GetTeamsExecute_Call) RunAndReturn(run func(ApiGetTeamsRequest) ([]Team, *http.Response, error)) *MockTeamAPI_GetTeamsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateApiKey provides a mock function with given fields: ctx, publicIdOrKey
func (_m *MockTeamAPI) RegenerateApiKey(ctx context.Context, publicIdOrKey string) ApiRegenerateApiKeyRequest {
	ret := _m.Called(ctx, publicIdOrKey)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateApiKey")
	}

	var r0 ApiRegenerateApiKeyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiRegenerateApiKeyRequest); ok {
		r0 = rf(ctx, publicIdOrKey)
	} else {
		r0 = ret.Get(0).(ApiRegenerateApiKeyRequest)
	}

	return r0
}

// MockTeamAPI_RegenerateApiKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateApiKey'
type MockTeamAPI_RegenerateApiKey_Call struct {
	*mock.Call
}

// RegenerateApiKey is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIdOrKey string
func (_e *MockTeamAPI_Expecter) RegenerateApiKey(ctx interface{}, publicIdOrKey interface{}) *MockTeamAPI_RegenerateApiKey_Call {
	return &MockTeamAPI_RegenerateApiKey_Call{Call: _e.mock.On("RegenerateApiKey", ctx, publicIdOrKey)}
}

func (_c *MockTeamAPI_RegenerateApiKey_Call) Run(run func(ctx context.Context, publicIdOrKey string)) *MockTeamAPI_RegenerateApiKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTeamAPI_RegenerateApiKey_Call) Return(_a0 ApiRegenerateApiKeyRequest) *MockTeamAPI_RegenerateApiKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_RegenerateApiKey_Call) RunAndReturn(run func(context.Context, string) ApiRegenerateApiKeyRequest) *MockTeamAPI_RegenerateApiKey_Call {
	_c.Call.Return(run)
	return _c
}

// RegenerateApiKeyExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) RegenerateApiKeyExecute(r ApiRegenerateApiKeyRequest) (*ApiKey, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RegenerateApiKeyExecute")
	}

	var r0 *ApiKey
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRegenerateApiKeyRequest) (*ApiKey, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRegenerateApiKeyRequest) *ApiKey); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ApiKey)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRegenerateApiKeyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRegenerateApiKeyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_RegenerateApiKeyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegenerateApiKeyExecute'
type MockTeamAPI_RegenerateApiKeyExecute_Call struct {
	*mock.Call
}

// RegenerateApiKeyExecute is a helper method to define mock.On call
//   - r ApiRegenerateApiKeyRequest
func (_e *MockTeamAPI_Expecter) RegenerateApiKeyExecute(r interface{}) *MockTeamAPI_RegenerateApiKeyExecute_Call {
	return &MockTeamAPI_RegenerateApiKeyExecute_Call{Call: _e.mock.On("RegenerateApiKeyExecute", r)}
}

func (_c *MockTeamAPI_RegenerateApiKeyExecute_Call) Run(run func(r ApiRegenerateApiKeyRequest)) *MockTeamAPI_RegenerateApiKeyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRegenerateApiKeyRequest))
	})
	return _c
}

func (_c *MockTeamAPI_RegenerateApiKeyExecute_Call) Return(_a0 *ApiKey, _a1 *http.Response, _a2 error) *MockTeamAPI_RegenerateApiKeyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_RegenerateApiKeyExecute_Call) RunAndReturn(run func(ApiRegenerateApiKeyRequest) (*ApiKey, *http.Response, error)) *MockTeamAPI_RegenerateApiKeyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApiKeyComment provides a mock function with given fields: ctx, publicIdOrKey
func (_m *MockTeamAPI) UpdateApiKeyComment(ctx context.Context, publicIdOrKey string) ApiUpdateApiKeyCommentRequest {
	ret := _m.Called(ctx, publicIdOrKey)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKeyComment")
	}

	var r0 ApiUpdateApiKeyCommentRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiUpdateApiKeyCommentRequest); ok {
		r0 = rf(ctx, publicIdOrKey)
	} else {
		r0 = ret.Get(0).(ApiUpdateApiKeyCommentRequest)
	}

	return r0
}

// MockTeamAPI_UpdateApiKeyComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApiKeyComment'
type MockTeamAPI_UpdateApiKeyComment_Call struct {
	*mock.Call
}

// UpdateApiKeyComment is a helper method to define mock.On call
//   - ctx context.Context
//   - publicIdOrKey string
func (_e *MockTeamAPI_Expecter) UpdateApiKeyComment(ctx interface{}, publicIdOrKey interface{}) *MockTeamAPI_UpdateApiKeyComment_Call {
	return &MockTeamAPI_UpdateApiKeyComment_Call{Call: _e.mock.On("UpdateApiKeyComment", ctx, publicIdOrKey)}
}

func (_c *MockTeamAPI_UpdateApiKeyComment_Call) Run(run func(ctx context.Context, publicIdOrKey string)) *MockTeamAPI_UpdateApiKeyComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTeamAPI_UpdateApiKeyComment_Call) Return(_a0 ApiUpdateApiKeyCommentRequest) *MockTeamAPI_UpdateApiKeyComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_UpdateApiKeyComment_Call) RunAndReturn(run func(context.Context, string) ApiUpdateApiKeyCommentRequest) *MockTeamAPI_UpdateApiKeyComment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApiKeyCommentExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) UpdateApiKeyCommentExecute(r ApiUpdateApiKeyCommentRequest) (*ApiKey, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKeyCommentExecute")
	}

	var r0 *ApiKey
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateApiKeyCommentRequest) (*ApiKey, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateApiKeyCommentRequest) *ApiKey); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ApiKey)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateApiKeyCommentRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateApiKeyCommentRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_UpdateApiKeyCommentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApiKeyCommentExecute'
type MockTeamAPI_UpdateApiKeyCommentExecute_Call struct {
	*mock.Call
}

// UpdateApiKeyCommentExecute is a helper method to define mock.On call
//   - r ApiUpdateApiKeyCommentRequest
func (_e *MockTeamAPI_Expecter) UpdateApiKeyCommentExecute(r interface{}) *MockTeamAPI_UpdateApiKeyCommentExecute_Call {
	return &MockTeamAPI_UpdateApiKeyCommentExecute_Call{Call: _e.mock.On("UpdateApiKeyCommentExecute", r)}
}

func (_c *MockTeamAPI_UpdateApiKeyCommentExecute_Call) Run(run func(r ApiUpdateApiKeyCommentRequest)) *MockTeamAPI_UpdateApiKeyCommentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateApiKeyCommentRequest))
	})
	return _c
}

func (_c *MockTeamAPI_UpdateApiKeyCommentExecute_Call) Return(_a0 *ApiKey, _a1 *http.Response, _a2 error) *MockTeamAPI_UpdateApiKeyCommentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_UpdateApiKeyCommentExecute_Call) RunAndReturn(run func(ApiUpdateApiKeyCommentRequest) (*ApiKey, *http.Response, error)) *MockTeamAPI_UpdateApiKeyCommentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeam provides a mock function with given fields: ctx
func (_m *MockTeamAPI) UpdateTeam(ctx context.Context) ApiUpdateTeamRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeam")
	}

	var r0 ApiUpdateTeamRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateTeamRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateTeamRequest)
	}

	return r0
}

// MockTeamAPI_UpdateTeam_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeam'
type MockTeamAPI_UpdateTeam_Call struct {
	*mock.Call
}

// UpdateTeam is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTeamAPI_Expecter) UpdateTeam(ctx interface{}) *MockTeamAPI_UpdateTeam_Call {
	return &MockTeamAPI_UpdateTeam_Call{Call: _e.mock.On("UpdateTeam", ctx)}
}

func (_c *MockTeamAPI_UpdateTeam_Call) Run(run func(ctx context.Context)) *MockTeamAPI_UpdateTeam_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTeamAPI_UpdateTeam_Call) Return(_a0 ApiUpdateTeamRequest) *MockTeamAPI_UpdateTeam_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTeamAPI_UpdateTeam_Call) RunAndReturn(run func(context.Context) ApiUpdateTeamRequest) *MockTeamAPI_UpdateTeam_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTeamExecute provides a mock function with given fields: r
func (_m *MockTeamAPI) UpdateTeamExecute(r ApiUpdateTeamRequest) (*Team, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTeamExecute")
	}

	var r0 *Team
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateTeamRequest) (*Team, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateTeamRequest) *Team); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Team)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateTeamRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateTeamRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTeamAPI_UpdateTeamExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTeamExecute'
type MockTeamAPI_UpdateTeamExecute_Call struct {
	*mock.Call
}

// UpdateTeamExecute is a helper method to define mock.On call
//   - r ApiUpdateTeamRequest
func (_e *MockTeamAPI_Expecter) UpdateTeamExecute(r interface{}) *MockTeamAPI_UpdateTeamExecute_Call {
	return &MockTeamAPI_UpdateTeamExecute_Call{Call: _e.mock.On("UpdateTeamExecute", r)}
}

func (_c *MockTeamAPI_UpdateTeamExecute_Call) Run(run func(r ApiUpdateTeamRequest)) *MockTeamAPI_UpdateTeamExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateTeamRequest))
	})
	return _c
}

func (_c *MockTeamAPI_UpdateTeamExecute_Call) Return(_a0 *Team, _a1 *http.Response, _a2 error) *MockTeamAPI_UpdateTeamExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTeamAPI_UpdateTeamExecute_Call) RunAndReturn(run func(ApiUpdateTeamRequest) (*Team, *http.Response, error)) *MockTeamAPI_UpdateTeamExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTeamAPI creates a new instance of MockTeamAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTeamAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTeamAPI {
	mock := &MockTeamAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
