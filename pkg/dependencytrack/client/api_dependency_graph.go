/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type DependencyGraphAPI interface {

	/*
	GetComponentsAndServicesByComponentUuid Returns a list of specific components and services from component UUID

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the component
	@return ApiGetComponentsAndServicesByComponentUuidRequest
	*/
	GetComponentsAndServicesByComponentUuid(ctx context.Context, uuid string) ApiGetComponentsAndServicesByComponentUuidRequest

	// GetComponentsAndServicesByComponentUuidExecute executes the request
	//  @return []DependencyGraphResponse
	GetComponentsAndServicesByComponentUuidExecute(r ApiGetComponentsAndServicesByComponentUuidRequest) ([]DependencyGraphResponse, *http.Response, error)

	/*
	GetComponentsAndServicesByProjectUuid Returns a list of specific components and services from project UUID

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the project
	@return ApiGetComponentsAndServicesByProjectUuidRequest
	*/
	GetComponentsAndServicesByProjectUuid(ctx context.Context, uuid string) ApiGetComponentsAndServicesByProjectUuidRequest

	// GetComponentsAndServicesByProjectUuidExecute executes the request
	//  @return []DependencyGraphResponse
	GetComponentsAndServicesByProjectUuidExecute(r ApiGetComponentsAndServicesByProjectUuidRequest) ([]DependencyGraphResponse, *http.Response, error)
}

// DependencyGraphAPIService DependencyGraphAPI service
type DependencyGraphAPIService service

type ApiGetComponentsAndServicesByComponentUuidRequest struct {
	ctx context.Context
	ApiService DependencyGraphAPI
	uuid string
}

func (r ApiGetComponentsAndServicesByComponentUuidRequest) Execute() ([]DependencyGraphResponse, *http.Response, error) {
	return r.ApiService.GetComponentsAndServicesByComponentUuidExecute(r)
}

/*
GetComponentsAndServicesByComponentUuid Returns a list of specific components and services from component UUID

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the component
 @return ApiGetComponentsAndServicesByComponentUuidRequest
*/
func (a *DependencyGraphAPIService) GetComponentsAndServicesByComponentUuid(ctx context.Context, uuid string) ApiGetComponentsAndServicesByComponentUuidRequest {
	return ApiGetComponentsAndServicesByComponentUuidRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return []DependencyGraphResponse
func (a *DependencyGraphAPIService) GetComponentsAndServicesByComponentUuidExecute(r ApiGetComponentsAndServicesByComponentUuidRequest) ([]DependencyGraphResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DependencyGraphResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DependencyGraphAPIService.GetComponentsAndServicesByComponentUuid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dependencyGraph/component/{uuid}/directDependencies"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetComponentsAndServicesByProjectUuidRequest struct {
	ctx context.Context
	ApiService DependencyGraphAPI
	uuid string
}

func (r ApiGetComponentsAndServicesByProjectUuidRequest) Execute() ([]DependencyGraphResponse, *http.Response, error) {
	return r.ApiService.GetComponentsAndServicesByProjectUuidExecute(r)
}

/*
GetComponentsAndServicesByProjectUuid Returns a list of specific components and services from project UUID

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the project
 @return ApiGetComponentsAndServicesByProjectUuidRequest
*/
func (a *DependencyGraphAPIService) GetComponentsAndServicesByProjectUuid(ctx context.Context, uuid string) ApiGetComponentsAndServicesByProjectUuidRequest {
	return ApiGetComponentsAndServicesByProjectUuidRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return []DependencyGraphResponse
func (a *DependencyGraphAPIService) GetComponentsAndServicesByProjectUuidExecute(r ApiGetComponentsAndServicesByProjectUuidRequest) ([]DependencyGraphResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []DependencyGraphResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DependencyGraphAPIService.GetComponentsAndServicesByProjectUuid")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/dependencyGraph/project/{uuid}/directDependencies"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
