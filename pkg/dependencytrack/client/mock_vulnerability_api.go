// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockVulnerabilityAPI is an autogenerated mock type for the VulnerabilityAPI type
type MockVulnerabilityAPI struct {
	mock.Mock
}

type MockVulnerabilityAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVulnerabilityAPI) EXPECT() *MockVulnerabilityAPI_Expecter {
	return &MockVulnerabilityAPI_Expecter{mock: &_m.Mock}
}

// AssignVulnerability provides a mock function with given fields: ctx, uuid, component
func (_m *MockVulnerabilityAPI) AssignVulnerability(ctx context.Context, uuid string, component string) ApiAssignVulnerabilityRequest {
	ret := _m.Called(ctx, uuid, component)

	if len(ret) == 0 {
		panic("no return value specified for AssignVulnerability")
	}

	var r0 ApiAssignVulnerabilityRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiAssignVulnerabilityRequest); ok {
		r0 = rf(ctx, uuid, component)
	} else {
		r0 = ret.Get(0).(ApiAssignVulnerabilityRequest)
	}

	return r0
}

// MockVulnerabilityAPI_AssignVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignVulnerability'
type MockVulnerabilityAPI_AssignVulnerability_Call struct {
	*mock.Call
}

// AssignVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - component string
func (_e *MockVulnerabilityAPI_Expecter) AssignVulnerability(ctx interface{}, uuid interface{}, component interface{}) *MockVulnerabilityAPI_AssignVulnerability_Call {
	return &MockVulnerabilityAPI_AssignVulnerability_Call{Call: _e.mock.On("AssignVulnerability", ctx, uuid, component)}
}

func (_c *MockVulnerabilityAPI_AssignVulnerability_Call) Run(run func(ctx context.Context, uuid string, component string)) *MockVulnerabilityAPI_AssignVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability_Call) Return(_a0 ApiAssignVulnerabilityRequest) *MockVulnerabilityAPI_AssignVulnerability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability_Call) RunAndReturn(run func(context.Context, string, string) ApiAssignVulnerabilityRequest) *MockVulnerabilityAPI_AssignVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// AssignVulnerability1 provides a mock function with given fields: ctx, source, vulnId, component
func (_m *MockVulnerabilityAPI) AssignVulnerability1(ctx context.Context, source string, vulnId string, component string) ApiAssignVulnerability1Request {
	ret := _m.Called(ctx, source, vulnId, component)

	if len(ret) == 0 {
		panic("no return value specified for AssignVulnerability1")
	}

	var r0 ApiAssignVulnerability1Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ApiAssignVulnerability1Request); ok {
		r0 = rf(ctx, source, vulnId, component)
	} else {
		r0 = ret.Get(0).(ApiAssignVulnerability1Request)
	}

	return r0
}

// MockVulnerabilityAPI_AssignVulnerability1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignVulnerability1'
type MockVulnerabilityAPI_AssignVulnerability1_Call struct {
	*mock.Call
}

// AssignVulnerability1 is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - vulnId string
//   - component string
func (_e *MockVulnerabilityAPI_Expecter) AssignVulnerability1(ctx interface{}, source interface{}, vulnId interface{}, component interface{}) *MockVulnerabilityAPI_AssignVulnerability1_Call {
	return &MockVulnerabilityAPI_AssignVulnerability1_Call{Call: _e.mock.On("AssignVulnerability1", ctx, source, vulnId, component)}
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1_Call) Run(run func(ctx context.Context, source string, vulnId string, component string)) *MockVulnerabilityAPI_AssignVulnerability1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1_Call) Return(_a0 ApiAssignVulnerability1Request) *MockVulnerabilityAPI_AssignVulnerability1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1_Call) RunAndReturn(run func(context.Context, string, string, string) ApiAssignVulnerability1Request) *MockVulnerabilityAPI_AssignVulnerability1_Call {
	_c.Call.Return(run)
	return _c
}

// AssignVulnerability1Execute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) AssignVulnerability1Execute(r ApiAssignVulnerability1Request) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AssignVulnerability1Execute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiAssignVulnerability1Request) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAssignVulnerability1Request) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAssignVulnerability1Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilityAPI_AssignVulnerability1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignVulnerability1Execute'
type MockVulnerabilityAPI_AssignVulnerability1Execute_Call struct {
	*mock.Call
}

// AssignVulnerability1Execute is a helper method to define mock.On call
//   - r ApiAssignVulnerability1Request
func (_e *MockVulnerabilityAPI_Expecter) AssignVulnerability1Execute(r interface{}) *MockVulnerabilityAPI_AssignVulnerability1Execute_Call {
	return &MockVulnerabilityAPI_AssignVulnerability1Execute_Call{Call: _e.mock.On("AssignVulnerability1Execute", r)}
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1Execute_Call) Run(run func(r ApiAssignVulnerability1Request)) *MockVulnerabilityAPI_AssignVulnerability1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAssignVulnerability1Request))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1Execute_Call) Return(_a0 *http.Response, _a1 error) *MockVulnerabilityAPI_AssignVulnerability1Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerability1Execute_Call) RunAndReturn(run func(ApiAssignVulnerability1Request) (*http.Response, error)) *MockVulnerabilityAPI_AssignVulnerability1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// AssignVulnerabilityExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) AssignVulnerabilityExecute(r ApiAssignVulnerabilityRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AssignVulnerabilityExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiAssignVulnerabilityRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAssignVulnerabilityRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAssignVulnerabilityRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilityAPI_AssignVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignVulnerabilityExecute'
type MockVulnerabilityAPI_AssignVulnerabilityExecute_Call struct {
	*mock.Call
}

// AssignVulnerabilityExecute is a helper method to define mock.On call
//   - r ApiAssignVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) AssignVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_AssignVulnerabilityExecute_Call{Call: _e.mock.On("AssignVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call) Run(run func(r ApiAssignVulnerabilityRequest)) *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAssignVulnerabilityRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call) Return(_a0 *http.Response, _a1 error) *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call) RunAndReturn(run func(ApiAssignVulnerabilityRequest) (*http.Response, error)) *MockVulnerabilityAPI_AssignVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVulnerability provides a mock function with given fields: ctx
func (_m *MockVulnerabilityAPI) CreateVulnerability(ctx context.Context) ApiCreateVulnerabilityRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateVulnerability")
	}

	var r0 ApiCreateVulnerabilityRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateVulnerabilityRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateVulnerabilityRequest)
	}

	return r0
}

// MockVulnerabilityAPI_CreateVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVulnerability'
type MockVulnerabilityAPI_CreateVulnerability_Call struct {
	*mock.Call
}

// CreateVulnerability is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVulnerabilityAPI_Expecter) CreateVulnerability(ctx interface{}) *MockVulnerabilityAPI_CreateVulnerability_Call {
	return &MockVulnerabilityAPI_CreateVulnerability_Call{Call: _e.mock.On("CreateVulnerability", ctx)}
}

func (_c *MockVulnerabilityAPI_CreateVulnerability_Call) Run(run func(ctx context.Context)) *MockVulnerabilityAPI_CreateVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_CreateVulnerability_Call) Return(_a0 ApiCreateVulnerabilityRequest) *MockVulnerabilityAPI_CreateVulnerability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_CreateVulnerability_Call) RunAndReturn(run func(context.Context) ApiCreateVulnerabilityRequest) *MockVulnerabilityAPI_CreateVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// CreateVulnerabilityExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) CreateVulnerabilityExecute(r ApiCreateVulnerabilityRequest) (*Vulnerability, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateVulnerabilityExecute")
	}

	var r0 *Vulnerability
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateVulnerabilityRequest) (*Vulnerability, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateVulnerabilityRequest) *Vulnerability); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateVulnerabilityRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateVulnerabilityRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_CreateVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateVulnerabilityExecute'
type MockVulnerabilityAPI_CreateVulnerabilityExecute_Call struct {
	*mock.Call
}

// CreateVulnerabilityExecute is a helper method to define mock.On call
//   - r ApiCreateVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) CreateVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_CreateVulnerabilityExecute_Call{Call: _e.mock.On("CreateVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call) Run(run func(r ApiCreateVulnerabilityRequest)) *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateVulnerabilityRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call) Return(_a0 *Vulnerability, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call) RunAndReturn(run func(ApiCreateVulnerabilityRequest) (*Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_CreateVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVulnerability provides a mock function with given fields: ctx, uuid
func (_m *MockVulnerabilityAPI) DeleteVulnerability(ctx context.Context, uuid string) ApiDeleteVulnerabilityRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVulnerability")
	}

	var r0 ApiDeleteVulnerabilityRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteVulnerabilityRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteVulnerabilityRequest)
	}

	return r0
}

// MockVulnerabilityAPI_DeleteVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVulnerability'
type MockVulnerabilityAPI_DeleteVulnerability_Call struct {
	*mock.Call
}

// DeleteVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVulnerabilityAPI_Expecter) DeleteVulnerability(ctx interface{}, uuid interface{}) *MockVulnerabilityAPI_DeleteVulnerability_Call {
	return &MockVulnerabilityAPI_DeleteVulnerability_Call{Call: _e.mock.On("DeleteVulnerability", ctx, uuid)}
}

func (_c *MockVulnerabilityAPI_DeleteVulnerability_Call) Run(run func(ctx context.Context, uuid string)) *MockVulnerabilityAPI_DeleteVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_DeleteVulnerability_Call) Return(_a0 ApiDeleteVulnerabilityRequest) *MockVulnerabilityAPI_DeleteVulnerability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_DeleteVulnerability_Call) RunAndReturn(run func(context.Context, string) ApiDeleteVulnerabilityRequest) *MockVulnerabilityAPI_DeleteVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteVulnerabilityExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) DeleteVulnerabilityExecute(r ApiDeleteVulnerabilityRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVulnerabilityExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteVulnerabilityRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteVulnerabilityRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteVulnerabilityRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteVulnerabilityExecute'
type MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call struct {
	*mock.Call
}

// DeleteVulnerabilityExecute is a helper method to define mock.On call
//   - r ApiDeleteVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) DeleteVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call{Call: _e.mock.On("DeleteVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call) Run(run func(r ApiDeleteVulnerabilityRequest)) *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteVulnerabilityRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call) Return(_a0 *http.Response, _a1 error) *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call) RunAndReturn(run func(ApiDeleteVulnerabilityRequest) (*http.Response, error)) *MockVulnerabilityAPI_DeleteVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateInternalVulnerabilityIdentifier provides a mock function with given fields: ctx
func (_m *MockVulnerabilityAPI) GenerateInternalVulnerabilityIdentifier(ctx context.Context) ApiGenerateInternalVulnerabilityIdentifierRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInternalVulnerabilityIdentifier")
	}

	var r0 ApiGenerateInternalVulnerabilityIdentifierRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGenerateInternalVulnerabilityIdentifierRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGenerateInternalVulnerabilityIdentifierRequest)
	}

	return r0
}

// MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateInternalVulnerabilityIdentifier'
type MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call struct {
	*mock.Call
}

// GenerateInternalVulnerabilityIdentifier is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVulnerabilityAPI_Expecter) GenerateInternalVulnerabilityIdentifier(ctx interface{}) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call {
	return &MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call{Call: _e.mock.On("GenerateInternalVulnerabilityIdentifier", ctx)}
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call) Run(run func(ctx context.Context)) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call) Return(_a0 ApiGenerateInternalVulnerabilityIdentifierRequest) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call) RunAndReturn(run func(context.Context) ApiGenerateInternalVulnerabilityIdentifierRequest) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifier_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateInternalVulnerabilityIdentifierExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) GenerateInternalVulnerabilityIdentifierExecute(r ApiGenerateInternalVulnerabilityIdentifierRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GenerateInternalVulnerabilityIdentifierExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGenerateInternalVulnerabilityIdentifierRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGenerateInternalVulnerabilityIdentifierRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiGenerateInternalVulnerabilityIdentifierRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGenerateInternalVulnerabilityIdentifierRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateInternalVulnerabilityIdentifierExecute'
type MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call struct {
	*mock.Call
}

// GenerateInternalVulnerabilityIdentifierExecute is a helper method to define mock.On call
//   - r ApiGenerateInternalVulnerabilityIdentifierRequest
func (_e *MockVulnerabilityAPI_Expecter) GenerateInternalVulnerabilityIdentifierExecute(r interface{}) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call {
	return &MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call{Call: _e.mock.On("GenerateInternalVulnerabilityIdentifierExecute", r)}
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call) Run(run func(r ApiGenerateInternalVulnerabilityIdentifierRequest)) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGenerateInternalVulnerabilityIdentifierRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call) RunAndReturn(run func(ApiGenerateInternalVulnerabilityIdentifierRequest) (string, *http.Response, error)) *MockVulnerabilityAPI_GenerateInternalVulnerabilityIdentifierExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAffectedProject provides a mock function with given fields: ctx, source, vuln
func (_m *MockVulnerabilityAPI) GetAffectedProject(ctx context.Context, source string, vuln string) ApiGetAffectedProjectRequest {
	ret := _m.Called(ctx, source, vuln)

	if len(ret) == 0 {
		panic("no return value specified for GetAffectedProject")
	}

	var r0 ApiGetAffectedProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetAffectedProjectRequest); ok {
		r0 = rf(ctx, source, vuln)
	} else {
		r0 = ret.Get(0).(ApiGetAffectedProjectRequest)
	}

	return r0
}

// MockVulnerabilityAPI_GetAffectedProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAffectedProject'
type MockVulnerabilityAPI_GetAffectedProject_Call struct {
	*mock.Call
}

// GetAffectedProject is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - vuln string
func (_e *MockVulnerabilityAPI_Expecter) GetAffectedProject(ctx interface{}, source interface{}, vuln interface{}) *MockVulnerabilityAPI_GetAffectedProject_Call {
	return &MockVulnerabilityAPI_GetAffectedProject_Call{Call: _e.mock.On("GetAffectedProject", ctx, source, vuln)}
}

func (_c *MockVulnerabilityAPI_GetAffectedProject_Call) Run(run func(ctx context.Context, source string, vuln string)) *MockVulnerabilityAPI_GetAffectedProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetAffectedProject_Call) Return(_a0 ApiGetAffectedProjectRequest) *MockVulnerabilityAPI_GetAffectedProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_GetAffectedProject_Call) RunAndReturn(run func(context.Context, string, string) ApiGetAffectedProjectRequest) *MockVulnerabilityAPI_GetAffectedProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAffectedProjectExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) GetAffectedProjectExecute(r ApiGetAffectedProjectRequest) ([]Project, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAffectedProjectExecute")
	}

	var r0 []Project
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAffectedProjectRequest) ([]Project, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAffectedProjectRequest) []Project); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAffectedProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAffectedProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_GetAffectedProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAffectedProjectExecute'
type MockVulnerabilityAPI_GetAffectedProjectExecute_Call struct {
	*mock.Call
}

// GetAffectedProjectExecute is a helper method to define mock.On call
//   - r ApiGetAffectedProjectRequest
func (_e *MockVulnerabilityAPI_Expecter) GetAffectedProjectExecute(r interface{}) *MockVulnerabilityAPI_GetAffectedProjectExecute_Call {
	return &MockVulnerabilityAPI_GetAffectedProjectExecute_Call{Call: _e.mock.On("GetAffectedProjectExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetAffectedProjectExecute_Call) Run(run func(r ApiGetAffectedProjectRequest)) *MockVulnerabilityAPI_GetAffectedProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAffectedProjectRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetAffectedProjectExecute_Call) Return(_a0 []Project, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_GetAffectedProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_GetAffectedProjectExecute_Call) RunAndReturn(run func(ApiGetAffectedProjectRequest) ([]Project, *http.Response, error)) *MockVulnerabilityAPI_GetAffectedProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVulnerabilities provides a mock function with given fields: ctx
func (_m *MockVulnerabilityAPI) GetAllVulnerabilities(ctx context.Context) ApiGetAllVulnerabilitiesRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVulnerabilities")
	}

	var r0 ApiGetAllVulnerabilitiesRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetAllVulnerabilitiesRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetAllVulnerabilitiesRequest)
	}

	return r0
}

// MockVulnerabilityAPI_GetAllVulnerabilities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVulnerabilities'
type MockVulnerabilityAPI_GetAllVulnerabilities_Call struct {
	*mock.Call
}

// GetAllVulnerabilities is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVulnerabilityAPI_Expecter) GetAllVulnerabilities(ctx interface{}) *MockVulnerabilityAPI_GetAllVulnerabilities_Call {
	return &MockVulnerabilityAPI_GetAllVulnerabilities_Call{Call: _e.mock.On("GetAllVulnerabilities", ctx)}
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilities_Call) Run(run func(ctx context.Context)) *MockVulnerabilityAPI_GetAllVulnerabilities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilities_Call) Return(_a0 ApiGetAllVulnerabilitiesRequest) *MockVulnerabilityAPI_GetAllVulnerabilities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilities_Call) RunAndReturn(run func(context.Context) ApiGetAllVulnerabilitiesRequest) *MockVulnerabilityAPI_GetAllVulnerabilities_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllVulnerabilitiesExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) GetAllVulnerabilitiesExecute(r ApiGetAllVulnerabilitiesRequest) ([]Vulnerability, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllVulnerabilitiesExecute")
	}

	var r0 []Vulnerability
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllVulnerabilitiesRequest) ([]Vulnerability, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllVulnerabilitiesRequest) []Vulnerability); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllVulnerabilitiesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllVulnerabilitiesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllVulnerabilitiesExecute'
type MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call struct {
	*mock.Call
}

// GetAllVulnerabilitiesExecute is a helper method to define mock.On call
//   - r ApiGetAllVulnerabilitiesRequest
func (_e *MockVulnerabilityAPI_Expecter) GetAllVulnerabilitiesExecute(r interface{}) *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call {
	return &MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call{Call: _e.mock.On("GetAllVulnerabilitiesExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call) Run(run func(r ApiGetAllVulnerabilitiesRequest)) *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllVulnerabilitiesRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call) Return(_a0 []Vulnerability, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call) RunAndReturn(run func(ApiGetAllVulnerabilitiesRequest) ([]Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetAllVulnerabilitiesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitiesByComponent provides a mock function with given fields: ctx, uuid
func (_m *MockVulnerabilityAPI) GetVulnerabilitiesByComponent(ctx context.Context, uuid string) ApiGetVulnerabilitiesByComponentRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitiesByComponent")
	}

	var r0 ApiGetVulnerabilitiesByComponentRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetVulnerabilitiesByComponentRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetVulnerabilitiesByComponentRequest)
	}

	return r0
}

// MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitiesByComponent'
type MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call struct {
	*mock.Call
}

// GetVulnerabilitiesByComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilitiesByComponent(ctx interface{}, uuid interface{}) *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call {
	return &MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call{Call: _e.mock.On("GetVulnerabilitiesByComponent", ctx, uuid)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call) Run(run func(ctx context.Context, uuid string)) *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call) Return(_a0 ApiGetVulnerabilitiesByComponentRequest) *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call) RunAndReturn(run func(context.Context, string) ApiGetVulnerabilitiesByComponentRequest) *MockVulnerabilityAPI_GetVulnerabilitiesByComponent_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitiesByComponentExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) GetVulnerabilitiesByComponentExecute(r ApiGetVulnerabilitiesByComponentRequest) ([]Vulnerability, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitiesByComponentExecute")
	}

	var r0 []Vulnerability
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilitiesByComponentRequest) ([]Vulnerability, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilitiesByComponentRequest) []Vulnerability); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetVulnerabilitiesByComponentRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetVulnerabilitiesByComponentRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitiesByComponentExecute'
type MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call struct {
	*mock.Call
}

// GetVulnerabilitiesByComponentExecute is a helper method to define mock.On call
//   - r ApiGetVulnerabilitiesByComponentRequest
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilitiesByComponentExecute(r interface{}) *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call {
	return &MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call{Call: _e.mock.On("GetVulnerabilitiesByComponentExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call) Run(run func(r ApiGetVulnerabilitiesByComponentRequest)) *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetVulnerabilitiesByComponentRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call) Return(_a0 []Vulnerability, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call) RunAndReturn(run func(ApiGetVulnerabilitiesByComponentRequest) ([]Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetVulnerabilitiesByComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitiesByProject provides a mock function with given fields: ctx, uuid
func (_m *MockVulnerabilityAPI) GetVulnerabilitiesByProject(ctx context.Context, uuid string) ApiGetVulnerabilitiesByProjectRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitiesByProject")
	}

	var r0 ApiGetVulnerabilitiesByProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetVulnerabilitiesByProjectRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetVulnerabilitiesByProjectRequest)
	}

	return r0
}

// MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitiesByProject'
type MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call struct {
	*mock.Call
}

// GetVulnerabilitiesByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilitiesByProject(ctx interface{}, uuid interface{}) *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call {
	return &MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call{Call: _e.mock.On("GetVulnerabilitiesByProject", ctx, uuid)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call) Run(run func(ctx context.Context, uuid string)) *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call) Return(_a0 ApiGetVulnerabilitiesByProjectRequest) *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call) RunAndReturn(run func(context.Context, string) ApiGetVulnerabilitiesByProjectRequest) *MockVulnerabilityAPI_GetVulnerabilitiesByProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilitiesByProjectExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) GetVulnerabilitiesByProjectExecute(r ApiGetVulnerabilitiesByProjectRequest) ([]Vulnerability, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilitiesByProjectExecute")
	}

	var r0 []Vulnerability
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilitiesByProjectRequest) ([]Vulnerability, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilitiesByProjectRequest) []Vulnerability); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetVulnerabilitiesByProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetVulnerabilitiesByProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilitiesByProjectExecute'
type MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call struct {
	*mock.Call
}

// GetVulnerabilitiesByProjectExecute is a helper method to define mock.On call
//   - r ApiGetVulnerabilitiesByProjectRequest
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilitiesByProjectExecute(r interface{}) *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call {
	return &MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call{Call: _e.mock.On("GetVulnerabilitiesByProjectExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call) Run(run func(r ApiGetVulnerabilitiesByProjectRequest)) *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetVulnerabilitiesByProjectRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call) Return(_a0 []Vulnerability, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call) RunAndReturn(run func(ApiGetVulnerabilitiesByProjectRequest) ([]Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetVulnerabilitiesByProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityByUuid provides a mock function with given fields: ctx, uuid
func (_m *MockVulnerabilityAPI) GetVulnerabilityByUuid(ctx context.Context, uuid string) ApiGetVulnerabilityByUuidRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityByUuid")
	}

	var r0 ApiGetVulnerabilityByUuidRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetVulnerabilityByUuidRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetVulnerabilityByUuidRequest)
	}

	return r0
}

// MockVulnerabilityAPI_GetVulnerabilityByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityByUuid'
type MockVulnerabilityAPI_GetVulnerabilityByUuid_Call struct {
	*mock.Call
}

// GetVulnerabilityByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilityByUuid(ctx interface{}, uuid interface{}) *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call {
	return &MockVulnerabilityAPI_GetVulnerabilityByUuid_Call{Call: _e.mock.On("GetVulnerabilityByUuid", ctx, uuid)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call) Return(_a0 ApiGetVulnerabilityByUuidRequest) *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call) RunAndReturn(run func(context.Context, string) ApiGetVulnerabilityByUuidRequest) *MockVulnerabilityAPI_GetVulnerabilityByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityByUuidExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) GetVulnerabilityByUuidExecute(r ApiGetVulnerabilityByUuidRequest) (*Vulnerability, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityByUuidExecute")
	}

	var r0 *Vulnerability
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilityByUuidRequest) (*Vulnerability, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilityByUuidRequest) *Vulnerability); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetVulnerabilityByUuidRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetVulnerabilityByUuidRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityByUuidExecute'
type MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call struct {
	*mock.Call
}

// GetVulnerabilityByUuidExecute is a helper method to define mock.On call
//   - r ApiGetVulnerabilityByUuidRequest
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilityByUuidExecute(r interface{}) *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call {
	return &MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call{Call: _e.mock.On("GetVulnerabilityByUuidExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call) Run(run func(r ApiGetVulnerabilityByUuidRequest)) *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetVulnerabilityByUuidRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call) Return(_a0 *Vulnerability, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call) RunAndReturn(run func(ApiGetVulnerabilityByUuidRequest) (*Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetVulnerabilityByUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityByVulnId provides a mock function with given fields: ctx, source, vuln
func (_m *MockVulnerabilityAPI) GetVulnerabilityByVulnId(ctx context.Context, source string, vuln string) ApiGetVulnerabilityByVulnIdRequest {
	ret := _m.Called(ctx, source, vuln)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityByVulnId")
	}

	var r0 ApiGetVulnerabilityByVulnIdRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetVulnerabilityByVulnIdRequest); ok {
		r0 = rf(ctx, source, vuln)
	} else {
		r0 = ret.Get(0).(ApiGetVulnerabilityByVulnIdRequest)
	}

	return r0
}

// MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityByVulnId'
type MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call struct {
	*mock.Call
}

// GetVulnerabilityByVulnId is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - vuln string
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilityByVulnId(ctx interface{}, source interface{}, vuln interface{}) *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call {
	return &MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call{Call: _e.mock.On("GetVulnerabilityByVulnId", ctx, source, vuln)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call) Run(run func(ctx context.Context, source string, vuln string)) *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call) Return(_a0 ApiGetVulnerabilityByVulnIdRequest) *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call) RunAndReturn(run func(context.Context, string, string) ApiGetVulnerabilityByVulnIdRequest) *MockVulnerabilityAPI_GetVulnerabilityByVulnId_Call {
	_c.Call.Return(run)
	return _c
}

// GetVulnerabilityByVulnIdExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) GetVulnerabilityByVulnIdExecute(r ApiGetVulnerabilityByVulnIdRequest) (*Vulnerability, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVulnerabilityByVulnIdExecute")
	}

	var r0 *Vulnerability
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilityByVulnIdRequest) (*Vulnerability, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetVulnerabilityByVulnIdRequest) *Vulnerability); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetVulnerabilityByVulnIdRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetVulnerabilityByVulnIdRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVulnerabilityByVulnIdExecute'
type MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call struct {
	*mock.Call
}

// GetVulnerabilityByVulnIdExecute is a helper method to define mock.On call
//   - r ApiGetVulnerabilityByVulnIdRequest
func (_e *MockVulnerabilityAPI_Expecter) GetVulnerabilityByVulnIdExecute(r interface{}) *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call {
	return &MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call{Call: _e.mock.On("GetVulnerabilityByVulnIdExecute", r)}
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call) Run(run func(r ApiGetVulnerabilityByVulnIdRequest)) *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetVulnerabilityByVulnIdRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call) Return(_a0 *Vulnerability, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call) RunAndReturn(run func(ApiGetVulnerabilityByVulnIdRequest) (*Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_GetVulnerabilityByVulnIdExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignVulnerability provides a mock function with given fields: ctx, uuid, component
func (_m *MockVulnerabilityAPI) UnassignVulnerability(ctx context.Context, uuid string, component string) ApiUnassignVulnerabilityRequest {
	ret := _m.Called(ctx, uuid, component)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVulnerability")
	}

	var r0 ApiUnassignVulnerabilityRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiUnassignVulnerabilityRequest); ok {
		r0 = rf(ctx, uuid, component)
	} else {
		r0 = ret.Get(0).(ApiUnassignVulnerabilityRequest)
	}

	return r0
}

// MockVulnerabilityAPI_UnassignVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignVulnerability'
type MockVulnerabilityAPI_UnassignVulnerability_Call struct {
	*mock.Call
}

// UnassignVulnerability is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - component string
func (_e *MockVulnerabilityAPI_Expecter) UnassignVulnerability(ctx interface{}, uuid interface{}, component interface{}) *MockVulnerabilityAPI_UnassignVulnerability_Call {
	return &MockVulnerabilityAPI_UnassignVulnerability_Call{Call: _e.mock.On("UnassignVulnerability", ctx, uuid, component)}
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability_Call) Run(run func(ctx context.Context, uuid string, component string)) *MockVulnerabilityAPI_UnassignVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability_Call) Return(_a0 ApiUnassignVulnerabilityRequest) *MockVulnerabilityAPI_UnassignVulnerability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability_Call) RunAndReturn(run func(context.Context, string, string) ApiUnassignVulnerabilityRequest) *MockVulnerabilityAPI_UnassignVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignVulnerability1 provides a mock function with given fields: ctx, source, vulnId, component
func (_m *MockVulnerabilityAPI) UnassignVulnerability1(ctx context.Context, source string, vulnId string, component string) ApiUnassignVulnerability1Request {
	ret := _m.Called(ctx, source, vulnId, component)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVulnerability1")
	}

	var r0 ApiUnassignVulnerability1Request
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ApiUnassignVulnerability1Request); ok {
		r0 = rf(ctx, source, vulnId, component)
	} else {
		r0 = ret.Get(0).(ApiUnassignVulnerability1Request)
	}

	return r0
}

// MockVulnerabilityAPI_UnassignVulnerability1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignVulnerability1'
type MockVulnerabilityAPI_UnassignVulnerability1_Call struct {
	*mock.Call
}

// UnassignVulnerability1 is a helper method to define mock.On call
//   - ctx context.Context
//   - source string
//   - vulnId string
//   - component string
func (_e *MockVulnerabilityAPI_Expecter) UnassignVulnerability1(ctx interface{}, source interface{}, vulnId interface{}, component interface{}) *MockVulnerabilityAPI_UnassignVulnerability1_Call {
	return &MockVulnerabilityAPI_UnassignVulnerability1_Call{Call: _e.mock.On("UnassignVulnerability1", ctx, source, vulnId, component)}
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1_Call) Run(run func(ctx context.Context, source string, vulnId string, component string)) *MockVulnerabilityAPI_UnassignVulnerability1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1_Call) Return(_a0 ApiUnassignVulnerability1Request) *MockVulnerabilityAPI_UnassignVulnerability1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1_Call) RunAndReturn(run func(context.Context, string, string, string) ApiUnassignVulnerability1Request) *MockVulnerabilityAPI_UnassignVulnerability1_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignVulnerability1Execute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) UnassignVulnerability1Execute(r ApiUnassignVulnerability1Request) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVulnerability1Execute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiUnassignVulnerability1Request) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUnassignVulnerability1Request) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUnassignVulnerability1Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilityAPI_UnassignVulnerability1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignVulnerability1Execute'
type MockVulnerabilityAPI_UnassignVulnerability1Execute_Call struct {
	*mock.Call
}

// UnassignVulnerability1Execute is a helper method to define mock.On call
//   - r ApiUnassignVulnerability1Request
func (_e *MockVulnerabilityAPI_Expecter) UnassignVulnerability1Execute(r interface{}) *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call {
	return &MockVulnerabilityAPI_UnassignVulnerability1Execute_Call{Call: _e.mock.On("UnassignVulnerability1Execute", r)}
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call) Run(run func(r ApiUnassignVulnerability1Request)) *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUnassignVulnerability1Request))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call) Return(_a0 *http.Response, _a1 error) *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call) RunAndReturn(run func(ApiUnassignVulnerability1Request) (*http.Response, error)) *MockVulnerabilityAPI_UnassignVulnerability1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UnassignVulnerabilityExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) UnassignVulnerabilityExecute(r ApiUnassignVulnerabilityRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVulnerabilityExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiUnassignVulnerabilityRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUnassignVulnerabilityRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUnassignVulnerabilityRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnassignVulnerabilityExecute'
type MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call struct {
	*mock.Call
}

// UnassignVulnerabilityExecute is a helper method to define mock.On call
//   - r ApiUnassignVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) UnassignVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call{Call: _e.mock.On("UnassignVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call) Run(run func(r ApiUnassignVulnerabilityRequest)) *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUnassignVulnerabilityRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call) Return(_a0 *http.Response, _a1 error) *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call) RunAndReturn(run func(ApiUnassignVulnerabilityRequest) (*http.Response, error)) *MockVulnerabilityAPI_UnassignVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVulnerability provides a mock function with given fields: ctx
func (_m *MockVulnerabilityAPI) UpdateVulnerability(ctx context.Context) ApiUpdateVulnerabilityRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVulnerability")
	}

	var r0 ApiUpdateVulnerabilityRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateVulnerabilityRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateVulnerabilityRequest)
	}

	return r0
}

// MockVulnerabilityAPI_UpdateVulnerability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVulnerability'
type MockVulnerabilityAPI_UpdateVulnerability_Call struct {
	*mock.Call
}

// UpdateVulnerability is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVulnerabilityAPI_Expecter) UpdateVulnerability(ctx interface{}) *MockVulnerabilityAPI_UpdateVulnerability_Call {
	return &MockVulnerabilityAPI_UpdateVulnerability_Call{Call: _e.mock.On("UpdateVulnerability", ctx)}
}

func (_c *MockVulnerabilityAPI_UpdateVulnerability_Call) Run(run func(ctx context.Context)) *MockVulnerabilityAPI_UpdateVulnerability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UpdateVulnerability_Call) Return(_a0 ApiUpdateVulnerabilityRequest) *MockVulnerabilityAPI_UpdateVulnerability_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVulnerabilityAPI_UpdateVulnerability_Call) RunAndReturn(run func(context.Context) ApiUpdateVulnerabilityRequest) *MockVulnerabilityAPI_UpdateVulnerability_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateVulnerabilityExecute provides a mock function with given fields: r
func (_m *MockVulnerabilityAPI) UpdateVulnerabilityExecute(r ApiUpdateVulnerabilityRequest) (*Vulnerability, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVulnerabilityExecute")
	}

	var r0 *Vulnerability
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateVulnerabilityRequest) (*Vulnerability, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateVulnerabilityRequest) *Vulnerability); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateVulnerabilityRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateVulnerabilityRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateVulnerabilityExecute'
type MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call struct {
	*mock.Call
}

// UpdateVulnerabilityExecute is a helper method to define mock.On call
//   - r ApiUpdateVulnerabilityRequest
func (_e *MockVulnerabilityAPI_Expecter) UpdateVulnerabilityExecute(r interface{}) *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call {
	return &MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call{Call: _e.mock.On("UpdateVulnerabilityExecute", r)}
}

func (_c *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call) Run(run func(r ApiUpdateVulnerabilityRequest)) *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateVulnerabilityRequest))
	})
	return _c
}

func (_c *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call) Return(_a0 *Vulnerability, _a1 *http.Response, _a2 error) *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call) RunAndReturn(run func(ApiUpdateVulnerabilityRequest) (*Vulnerability, *http.Response, error)) *MockVulnerabilityAPI_UpdateVulnerabilityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVulnerabilityAPI creates a new instance of MockVulnerabilityAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVulnerabilityAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVulnerabilityAPI {
	mock := &MockVulnerabilityAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
