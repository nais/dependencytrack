// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockPolicyAPI is an autogenerated mock type for the PolicyAPI type
type MockPolicyAPI struct {
	mock.Mock
}

type MockPolicyAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPolicyAPI) EXPECT() *MockPolicyAPI_Expecter {
	return &MockPolicyAPI_Expecter{mock: &_m.Mock}
}

// AddProjectToPolicy provides a mock function with given fields: ctx, policyUuid, projectUuid
func (_m *MockPolicyAPI) AddProjectToPolicy(ctx context.Context, policyUuid string, projectUuid string) ApiAddProjectToPolicyRequest {
	ret := _m.Called(ctx, policyUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToPolicy")
	}

	var r0 ApiAddProjectToPolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiAddProjectToPolicyRequest); ok {
		r0 = rf(ctx, policyUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(ApiAddProjectToPolicyRequest)
	}

	return r0
}

// MockPolicyAPI_AddProjectToPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToPolicy'
type MockPolicyAPI_AddProjectToPolicy_Call struct {
	*mock.Call
}

// AddProjectToPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
//   - projectUuid string
func (_e *MockPolicyAPI_Expecter) AddProjectToPolicy(ctx interface{}, policyUuid interface{}, projectUuid interface{}) *MockPolicyAPI_AddProjectToPolicy_Call {
	return &MockPolicyAPI_AddProjectToPolicy_Call{Call: _e.mock.On("AddProjectToPolicy", ctx, policyUuid, projectUuid)}
}

func (_c *MockPolicyAPI_AddProjectToPolicy_Call) Run(run func(ctx context.Context, policyUuid string, projectUuid string)) *MockPolicyAPI_AddProjectToPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPolicyAPI_AddProjectToPolicy_Call) Return(_a0 ApiAddProjectToPolicyRequest) *MockPolicyAPI_AddProjectToPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_AddProjectToPolicy_Call) RunAndReturn(run func(context.Context, string, string) ApiAddProjectToPolicyRequest) *MockPolicyAPI_AddProjectToPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AddProjectToPolicyExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) AddProjectToPolicyExecute(r ApiAddProjectToPolicyRequest) (*Policy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddProjectToPolicyExecute")
	}

	var r0 *Policy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddProjectToPolicyRequest) (*Policy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddProjectToPolicyRequest) *Policy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddProjectToPolicyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddProjectToPolicyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyAPI_AddProjectToPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProjectToPolicyExecute'
type MockPolicyAPI_AddProjectToPolicyExecute_Call struct {
	*mock.Call
}

// AddProjectToPolicyExecute is a helper method to define mock.On call
//   - r ApiAddProjectToPolicyRequest
func (_e *MockPolicyAPI_Expecter) AddProjectToPolicyExecute(r interface{}) *MockPolicyAPI_AddProjectToPolicyExecute_Call {
	return &MockPolicyAPI_AddProjectToPolicyExecute_Call{Call: _e.mock.On("AddProjectToPolicyExecute", r)}
}

func (_c *MockPolicyAPI_AddProjectToPolicyExecute_Call) Run(run func(r ApiAddProjectToPolicyRequest)) *MockPolicyAPI_AddProjectToPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddProjectToPolicyRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_AddProjectToPolicyExecute_Call) Return(_a0 *Policy, _a1 *http.Response, _a2 error) *MockPolicyAPI_AddProjectToPolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyAPI_AddProjectToPolicyExecute_Call) RunAndReturn(run func(ApiAddProjectToPolicyRequest) (*Policy, *http.Response, error)) *MockPolicyAPI_AddProjectToPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// AddTagToPolicy provides a mock function with given fields: ctx, policyUuid, tagName
func (_m *MockPolicyAPI) AddTagToPolicy(ctx context.Context, policyUuid string, tagName string) ApiAddTagToPolicyRequest {
	ret := _m.Called(ctx, policyUuid, tagName)

	if len(ret) == 0 {
		panic("no return value specified for AddTagToPolicy")
	}

	var r0 ApiAddTagToPolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiAddTagToPolicyRequest); ok {
		r0 = rf(ctx, policyUuid, tagName)
	} else {
		r0 = ret.Get(0).(ApiAddTagToPolicyRequest)
	}

	return r0
}

// MockPolicyAPI_AddTagToPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTagToPolicy'
type MockPolicyAPI_AddTagToPolicy_Call struct {
	*mock.Call
}

// AddTagToPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
//   - tagName string
func (_e *MockPolicyAPI_Expecter) AddTagToPolicy(ctx interface{}, policyUuid interface{}, tagName interface{}) *MockPolicyAPI_AddTagToPolicy_Call {
	return &MockPolicyAPI_AddTagToPolicy_Call{Call: _e.mock.On("AddTagToPolicy", ctx, policyUuid, tagName)}
}

func (_c *MockPolicyAPI_AddTagToPolicy_Call) Run(run func(ctx context.Context, policyUuid string, tagName string)) *MockPolicyAPI_AddTagToPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPolicyAPI_AddTagToPolicy_Call) Return(_a0 ApiAddTagToPolicyRequest) *MockPolicyAPI_AddTagToPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_AddTagToPolicy_Call) RunAndReturn(run func(context.Context, string, string) ApiAddTagToPolicyRequest) *MockPolicyAPI_AddTagToPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// AddTagToPolicyExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) AddTagToPolicyExecute(r ApiAddTagToPolicyRequest) (*Policy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddTagToPolicyExecute")
	}

	var r0 *Policy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddTagToPolicyRequest) (*Policy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddTagToPolicyRequest) *Policy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddTagToPolicyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddTagToPolicyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyAPI_AddTagToPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTagToPolicyExecute'
type MockPolicyAPI_AddTagToPolicyExecute_Call struct {
	*mock.Call
}

// AddTagToPolicyExecute is a helper method to define mock.On call
//   - r ApiAddTagToPolicyRequest
func (_e *MockPolicyAPI_Expecter) AddTagToPolicyExecute(r interface{}) *MockPolicyAPI_AddTagToPolicyExecute_Call {
	return &MockPolicyAPI_AddTagToPolicyExecute_Call{Call: _e.mock.On("AddTagToPolicyExecute", r)}
}

func (_c *MockPolicyAPI_AddTagToPolicyExecute_Call) Run(run func(r ApiAddTagToPolicyRequest)) *MockPolicyAPI_AddTagToPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddTagToPolicyRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_AddTagToPolicyExecute_Call) Return(_a0 *Policy, _a1 *http.Response, _a2 error) *MockPolicyAPI_AddTagToPolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyAPI_AddTagToPolicyExecute_Call) RunAndReturn(run func(ApiAddTagToPolicyRequest) (*Policy, *http.Response, error)) *MockPolicyAPI_AddTagToPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicy provides a mock function with given fields: ctx
func (_m *MockPolicyAPI) CreatePolicy(ctx context.Context) ApiCreatePolicyRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicy")
	}

	var r0 ApiCreatePolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreatePolicyRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreatePolicyRequest)
	}

	return r0
}

// MockPolicyAPI_CreatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicy'
type MockPolicyAPI_CreatePolicy_Call struct {
	*mock.Call
}

// CreatePolicy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPolicyAPI_Expecter) CreatePolicy(ctx interface{}) *MockPolicyAPI_CreatePolicy_Call {
	return &MockPolicyAPI_CreatePolicy_Call{Call: _e.mock.On("CreatePolicy", ctx)}
}

func (_c *MockPolicyAPI_CreatePolicy_Call) Run(run func(ctx context.Context)) *MockPolicyAPI_CreatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPolicyAPI_CreatePolicy_Call) Return(_a0 ApiCreatePolicyRequest) *MockPolicyAPI_CreatePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_CreatePolicy_Call) RunAndReturn(run func(context.Context) ApiCreatePolicyRequest) *MockPolicyAPI_CreatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) CreatePolicyExecute(r ApiCreatePolicyRequest) (*Policy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicyExecute")
	}

	var r0 *Policy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreatePolicyRequest) (*Policy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreatePolicyRequest) *Policy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreatePolicyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreatePolicyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyAPI_CreatePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyExecute'
type MockPolicyAPI_CreatePolicyExecute_Call struct {
	*mock.Call
}

// CreatePolicyExecute is a helper method to define mock.On call
//   - r ApiCreatePolicyRequest
func (_e *MockPolicyAPI_Expecter) CreatePolicyExecute(r interface{}) *MockPolicyAPI_CreatePolicyExecute_Call {
	return &MockPolicyAPI_CreatePolicyExecute_Call{Call: _e.mock.On("CreatePolicyExecute", r)}
}

func (_c *MockPolicyAPI_CreatePolicyExecute_Call) Run(run func(r ApiCreatePolicyRequest)) *MockPolicyAPI_CreatePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreatePolicyRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_CreatePolicyExecute_Call) Return(_a0 *Policy, _a1 *http.Response, _a2 error) *MockPolicyAPI_CreatePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyAPI_CreatePolicyExecute_Call) RunAndReturn(run func(ApiCreatePolicyRequest) (*Policy, *http.Response, error)) *MockPolicyAPI_CreatePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicy provides a mock function with given fields: ctx, uuid
func (_m *MockPolicyAPI) DeletePolicy(ctx context.Context, uuid string) ApiDeletePolicyRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 ApiDeletePolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeletePolicyRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeletePolicyRequest)
	}

	return r0
}

// MockPolicyAPI_DeletePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicy'
type MockPolicyAPI_DeletePolicy_Call struct {
	*mock.Call
}

// DeletePolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPolicyAPI_Expecter) DeletePolicy(ctx interface{}, uuid interface{}) *MockPolicyAPI_DeletePolicy_Call {
	return &MockPolicyAPI_DeletePolicy_Call{Call: _e.mock.On("DeletePolicy", ctx, uuid)}
}

func (_c *MockPolicyAPI_DeletePolicy_Call) Run(run func(ctx context.Context, uuid string)) *MockPolicyAPI_DeletePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPolicyAPI_DeletePolicy_Call) Return(_a0 ApiDeletePolicyRequest) *MockPolicyAPI_DeletePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_DeletePolicy_Call) RunAndReturn(run func(context.Context, string) ApiDeletePolicyRequest) *MockPolicyAPI_DeletePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) DeletePolicyExecute(r ApiDeletePolicyRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeletePolicyRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeletePolicyRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeletePolicyRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPolicyAPI_DeletePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyExecute'
type MockPolicyAPI_DeletePolicyExecute_Call struct {
	*mock.Call
}

// DeletePolicyExecute is a helper method to define mock.On call
//   - r ApiDeletePolicyRequest
func (_e *MockPolicyAPI_Expecter) DeletePolicyExecute(r interface{}) *MockPolicyAPI_DeletePolicyExecute_Call {
	return &MockPolicyAPI_DeletePolicyExecute_Call{Call: _e.mock.On("DeletePolicyExecute", r)}
}

func (_c *MockPolicyAPI_DeletePolicyExecute_Call) Run(run func(r ApiDeletePolicyRequest)) *MockPolicyAPI_DeletePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeletePolicyRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_DeletePolicyExecute_Call) Return(_a0 *http.Response, _a1 error) *MockPolicyAPI_DeletePolicyExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPolicyAPI_DeletePolicyExecute_Call) RunAndReturn(run func(ApiDeletePolicyRequest) (*http.Response, error)) *MockPolicyAPI_DeletePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicies provides a mock function with given fields: ctx
func (_m *MockPolicyAPI) GetPolicies(ctx context.Context) ApiGetPoliciesRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicies")
	}

	var r0 ApiGetPoliciesRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetPoliciesRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetPoliciesRequest)
	}

	return r0
}

// MockPolicyAPI_GetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicies'
type MockPolicyAPI_GetPolicies_Call struct {
	*mock.Call
}

// GetPolicies is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPolicyAPI_Expecter) GetPolicies(ctx interface{}) *MockPolicyAPI_GetPolicies_Call {
	return &MockPolicyAPI_GetPolicies_Call{Call: _e.mock.On("GetPolicies", ctx)}
}

func (_c *MockPolicyAPI_GetPolicies_Call) Run(run func(ctx context.Context)) *MockPolicyAPI_GetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPolicyAPI_GetPolicies_Call) Return(_a0 ApiGetPoliciesRequest) *MockPolicyAPI_GetPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_GetPolicies_Call) RunAndReturn(run func(context.Context) ApiGetPoliciesRequest) *MockPolicyAPI_GetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoliciesExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) GetPoliciesExecute(r ApiGetPoliciesRequest) ([]Policy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPoliciesExecute")
	}

	var r0 []Policy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetPoliciesRequest) ([]Policy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetPoliciesRequest) []Policy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetPoliciesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetPoliciesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyAPI_GetPoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoliciesExecute'
type MockPolicyAPI_GetPoliciesExecute_Call struct {
	*mock.Call
}

// GetPoliciesExecute is a helper method to define mock.On call
//   - r ApiGetPoliciesRequest
func (_e *MockPolicyAPI_Expecter) GetPoliciesExecute(r interface{}) *MockPolicyAPI_GetPoliciesExecute_Call {
	return &MockPolicyAPI_GetPoliciesExecute_Call{Call: _e.mock.On("GetPoliciesExecute", r)}
}

func (_c *MockPolicyAPI_GetPoliciesExecute_Call) Run(run func(r ApiGetPoliciesRequest)) *MockPolicyAPI_GetPoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetPoliciesRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_GetPoliciesExecute_Call) Return(_a0 []Policy, _a1 *http.Response, _a2 error) *MockPolicyAPI_GetPoliciesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyAPI_GetPoliciesExecute_Call) RunAndReturn(run func(ApiGetPoliciesRequest) ([]Policy, *http.Response, error)) *MockPolicyAPI_GetPoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicy provides a mock function with given fields: ctx, uuid
func (_m *MockPolicyAPI) GetPolicy(ctx context.Context, uuid string) ApiGetPolicyRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 ApiGetPolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetPolicyRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetPolicyRequest)
	}

	return r0
}

// MockPolicyAPI_GetPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicy'
type MockPolicyAPI_GetPolicy_Call struct {
	*mock.Call
}

// GetPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPolicyAPI_Expecter) GetPolicy(ctx interface{}, uuid interface{}) *MockPolicyAPI_GetPolicy_Call {
	return &MockPolicyAPI_GetPolicy_Call{Call: _e.mock.On("GetPolicy", ctx, uuid)}
}

func (_c *MockPolicyAPI_GetPolicy_Call) Run(run func(ctx context.Context, uuid string)) *MockPolicyAPI_GetPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPolicyAPI_GetPolicy_Call) Return(_a0 ApiGetPolicyRequest) *MockPolicyAPI_GetPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_GetPolicy_Call) RunAndReturn(run func(context.Context, string) ApiGetPolicyRequest) *MockPolicyAPI_GetPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) GetPolicyExecute(r ApiGetPolicyRequest) (*Policy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyExecute")
	}

	var r0 *Policy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetPolicyRequest) (*Policy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetPolicyRequest) *Policy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetPolicyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetPolicyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyAPI_GetPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyExecute'
type MockPolicyAPI_GetPolicyExecute_Call struct {
	*mock.Call
}

// GetPolicyExecute is a helper method to define mock.On call
//   - r ApiGetPolicyRequest
func (_e *MockPolicyAPI_Expecter) GetPolicyExecute(r interface{}) *MockPolicyAPI_GetPolicyExecute_Call {
	return &MockPolicyAPI_GetPolicyExecute_Call{Call: _e.mock.On("GetPolicyExecute", r)}
}

func (_c *MockPolicyAPI_GetPolicyExecute_Call) Run(run func(r ApiGetPolicyRequest)) *MockPolicyAPI_GetPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetPolicyRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_GetPolicyExecute_Call) Return(_a0 *Policy, _a1 *http.Response, _a2 error) *MockPolicyAPI_GetPolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyAPI_GetPolicyExecute_Call) RunAndReturn(run func(ApiGetPolicyRequest) (*Policy, *http.Response, error)) *MockPolicyAPI_GetPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromPolicy provides a mock function with given fields: ctx, policyUuid, projectUuid
func (_m *MockPolicyAPI) RemoveProjectFromPolicy(ctx context.Context, policyUuid string, projectUuid string) ApiRemoveProjectFromPolicyRequest {
	ret := _m.Called(ctx, policyUuid, projectUuid)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromPolicy")
	}

	var r0 ApiRemoveProjectFromPolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiRemoveProjectFromPolicyRequest); ok {
		r0 = rf(ctx, policyUuid, projectUuid)
	} else {
		r0 = ret.Get(0).(ApiRemoveProjectFromPolicyRequest)
	}

	return r0
}

// MockPolicyAPI_RemoveProjectFromPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromPolicy'
type MockPolicyAPI_RemoveProjectFromPolicy_Call struct {
	*mock.Call
}

// RemoveProjectFromPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
//   - projectUuid string
func (_e *MockPolicyAPI_Expecter) RemoveProjectFromPolicy(ctx interface{}, policyUuid interface{}, projectUuid interface{}) *MockPolicyAPI_RemoveProjectFromPolicy_Call {
	return &MockPolicyAPI_RemoveProjectFromPolicy_Call{Call: _e.mock.On("RemoveProjectFromPolicy", ctx, policyUuid, projectUuid)}
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicy_Call) Run(run func(ctx context.Context, policyUuid string, projectUuid string)) *MockPolicyAPI_RemoveProjectFromPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicy_Call) Return(_a0 ApiRemoveProjectFromPolicyRequest) *MockPolicyAPI_RemoveProjectFromPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicy_Call) RunAndReturn(run func(context.Context, string, string) ApiRemoveProjectFromPolicyRequest) *MockPolicyAPI_RemoveProjectFromPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveProjectFromPolicyExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) RemoveProjectFromPolicyExecute(r ApiRemoveProjectFromPolicyRequest) (*Policy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveProjectFromPolicyExecute")
	}

	var r0 *Policy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRemoveProjectFromPolicyRequest) (*Policy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRemoveProjectFromPolicyRequest) *Policy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRemoveProjectFromPolicyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRemoveProjectFromPolicyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyAPI_RemoveProjectFromPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveProjectFromPolicyExecute'
type MockPolicyAPI_RemoveProjectFromPolicyExecute_Call struct {
	*mock.Call
}

// RemoveProjectFromPolicyExecute is a helper method to define mock.On call
//   - r ApiRemoveProjectFromPolicyRequest
func (_e *MockPolicyAPI_Expecter) RemoveProjectFromPolicyExecute(r interface{}) *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call {
	return &MockPolicyAPI_RemoveProjectFromPolicyExecute_Call{Call: _e.mock.On("RemoveProjectFromPolicyExecute", r)}
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call) Run(run func(r ApiRemoveProjectFromPolicyRequest)) *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRemoveProjectFromPolicyRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call) Return(_a0 *Policy, _a1 *http.Response, _a2 error) *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call) RunAndReturn(run func(ApiRemoveProjectFromPolicyRequest) (*Policy, *http.Response, error)) *MockPolicyAPI_RemoveProjectFromPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTagFromPolicy provides a mock function with given fields: ctx, policyUuid, tagName
func (_m *MockPolicyAPI) RemoveTagFromPolicy(ctx context.Context, policyUuid string, tagName string) ApiRemoveTagFromPolicyRequest {
	ret := _m.Called(ctx, policyUuid, tagName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagFromPolicy")
	}

	var r0 ApiRemoveTagFromPolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiRemoveTagFromPolicyRequest); ok {
		r0 = rf(ctx, policyUuid, tagName)
	} else {
		r0 = ret.Get(0).(ApiRemoveTagFromPolicyRequest)
	}

	return r0
}

// MockPolicyAPI_RemoveTagFromPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTagFromPolicy'
type MockPolicyAPI_RemoveTagFromPolicy_Call struct {
	*mock.Call
}

// RemoveTagFromPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
//   - tagName string
func (_e *MockPolicyAPI_Expecter) RemoveTagFromPolicy(ctx interface{}, policyUuid interface{}, tagName interface{}) *MockPolicyAPI_RemoveTagFromPolicy_Call {
	return &MockPolicyAPI_RemoveTagFromPolicy_Call{Call: _e.mock.On("RemoveTagFromPolicy", ctx, policyUuid, tagName)}
}

func (_c *MockPolicyAPI_RemoveTagFromPolicy_Call) Run(run func(ctx context.Context, policyUuid string, tagName string)) *MockPolicyAPI_RemoveTagFromPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockPolicyAPI_RemoveTagFromPolicy_Call) Return(_a0 ApiRemoveTagFromPolicyRequest) *MockPolicyAPI_RemoveTagFromPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_RemoveTagFromPolicy_Call) RunAndReturn(run func(context.Context, string, string) ApiRemoveTagFromPolicyRequest) *MockPolicyAPI_RemoveTagFromPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTagFromPolicyExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) RemoveTagFromPolicyExecute(r ApiRemoveTagFromPolicyRequest) (*Policy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagFromPolicyExecute")
	}

	var r0 *Policy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRemoveTagFromPolicyRequest) (*Policy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRemoveTagFromPolicyRequest) *Policy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRemoveTagFromPolicyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRemoveTagFromPolicyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyAPI_RemoveTagFromPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTagFromPolicyExecute'
type MockPolicyAPI_RemoveTagFromPolicyExecute_Call struct {
	*mock.Call
}

// RemoveTagFromPolicyExecute is a helper method to define mock.On call
//   - r ApiRemoveTagFromPolicyRequest
func (_e *MockPolicyAPI_Expecter) RemoveTagFromPolicyExecute(r interface{}) *MockPolicyAPI_RemoveTagFromPolicyExecute_Call {
	return &MockPolicyAPI_RemoveTagFromPolicyExecute_Call{Call: _e.mock.On("RemoveTagFromPolicyExecute", r)}
}

func (_c *MockPolicyAPI_RemoveTagFromPolicyExecute_Call) Run(run func(r ApiRemoveTagFromPolicyRequest)) *MockPolicyAPI_RemoveTagFromPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRemoveTagFromPolicyRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_RemoveTagFromPolicyExecute_Call) Return(_a0 *Policy, _a1 *http.Response, _a2 error) *MockPolicyAPI_RemoveTagFromPolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyAPI_RemoveTagFromPolicyExecute_Call) RunAndReturn(run func(ApiRemoveTagFromPolicyRequest) (*Policy, *http.Response, error)) *MockPolicyAPI_RemoveTagFromPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicy provides a mock function with given fields: ctx
func (_m *MockPolicyAPI) UpdatePolicy(ctx context.Context) ApiUpdatePolicyRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicy")
	}

	var r0 ApiUpdatePolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdatePolicyRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdatePolicyRequest)
	}

	return r0
}

// MockPolicyAPI_UpdatePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicy'
type MockPolicyAPI_UpdatePolicy_Call struct {
	*mock.Call
}

// UpdatePolicy is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPolicyAPI_Expecter) UpdatePolicy(ctx interface{}) *MockPolicyAPI_UpdatePolicy_Call {
	return &MockPolicyAPI_UpdatePolicy_Call{Call: _e.mock.On("UpdatePolicy", ctx)}
}

func (_c *MockPolicyAPI_UpdatePolicy_Call) Run(run func(ctx context.Context)) *MockPolicyAPI_UpdatePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPolicyAPI_UpdatePolicy_Call) Return(_a0 ApiUpdatePolicyRequest) *MockPolicyAPI_UpdatePolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyAPI_UpdatePolicy_Call) RunAndReturn(run func(context.Context) ApiUpdatePolicyRequest) *MockPolicyAPI_UpdatePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicyExecute provides a mock function with given fields: r
func (_m *MockPolicyAPI) UpdatePolicyExecute(r ApiUpdatePolicyRequest) (*Policy, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicyExecute")
	}

	var r0 *Policy
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdatePolicyRequest) (*Policy, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdatePolicyRequest) *Policy); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Policy)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdatePolicyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdatePolicyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyAPI_UpdatePolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicyExecute'
type MockPolicyAPI_UpdatePolicyExecute_Call struct {
	*mock.Call
}

// UpdatePolicyExecute is a helper method to define mock.On call
//   - r ApiUpdatePolicyRequest
func (_e *MockPolicyAPI_Expecter) UpdatePolicyExecute(r interface{}) *MockPolicyAPI_UpdatePolicyExecute_Call {
	return &MockPolicyAPI_UpdatePolicyExecute_Call{Call: _e.mock.On("UpdatePolicyExecute", r)}
}

func (_c *MockPolicyAPI_UpdatePolicyExecute_Call) Run(run func(r ApiUpdatePolicyRequest)) *MockPolicyAPI_UpdatePolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdatePolicyRequest))
	})
	return _c
}

func (_c *MockPolicyAPI_UpdatePolicyExecute_Call) Return(_a0 *Policy, _a1 *http.Response, _a2 error) *MockPolicyAPI_UpdatePolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyAPI_UpdatePolicyExecute_Call) RunAndReturn(run func(ApiUpdatePolicyRequest) (*Policy, *http.Response, error)) *MockPolicyAPI_UpdatePolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPolicyAPI creates a new instance of MockPolicyAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPolicyAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPolicyAPI {
	mock := &MockPolicyAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
