// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockTagAPI is an autogenerated mock type for the TagAPI type
type MockTagAPI struct {
	mock.Mock
}

type MockTagAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTagAPI) EXPECT() *MockTagAPI_Expecter {
	return &MockTagAPI_Expecter{mock: &_m.Mock}
}

// CreateTags provides a mock function with given fields: ctx
func (_m *MockTagAPI) CreateTags(ctx context.Context) ApiCreateTagsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateTags")
	}

	var r0 ApiCreateTagsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateTagsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateTagsRequest)
	}

	return r0
}

// MockTagAPI_CreateTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTags'
type MockTagAPI_CreateTags_Call struct {
	*mock.Call
}

// CreateTags is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTagAPI_Expecter) CreateTags(ctx interface{}) *MockTagAPI_CreateTags_Call {
	return &MockTagAPI_CreateTags_Call{Call: _e.mock.On("CreateTags", ctx)}
}

func (_c *MockTagAPI_CreateTags_Call) Run(run func(ctx context.Context)) *MockTagAPI_CreateTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTagAPI_CreateTags_Call) Return(_a0 ApiCreateTagsRequest) *MockTagAPI_CreateTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_CreateTags_Call) RunAndReturn(run func(context.Context) ApiCreateTagsRequest) *MockTagAPI_CreateTags_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTagsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) CreateTagsExecute(r ApiCreateTagsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateTagsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiCreateTagsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateTagsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateTagsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAPI_CreateTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTagsExecute'
type MockTagAPI_CreateTagsExecute_Call struct {
	*mock.Call
}

// CreateTagsExecute is a helper method to define mock.On call
//   - r ApiCreateTagsRequest
func (_e *MockTagAPI_Expecter) CreateTagsExecute(r interface{}) *MockTagAPI_CreateTagsExecute_Call {
	return &MockTagAPI_CreateTagsExecute_Call{Call: _e.mock.On("CreateTagsExecute", r)}
}

func (_c *MockTagAPI_CreateTagsExecute_Call) Run(run func(r ApiCreateTagsRequest)) *MockTagAPI_CreateTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateTagsRequest))
	})
	return _c
}

func (_c *MockTagAPI_CreateTagsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTagAPI_CreateTagsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAPI_CreateTagsExecute_Call) RunAndReturn(run func(ApiCreateTagsRequest) (*http.Response, error)) *MockTagAPI_CreateTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTags provides a mock function with given fields: ctx
func (_m *MockTagAPI) DeleteTags(ctx context.Context) ApiDeleteTagsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTags")
	}

	var r0 ApiDeleteTagsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiDeleteTagsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiDeleteTagsRequest)
	}

	return r0
}

// MockTagAPI_DeleteTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTags'
type MockTagAPI_DeleteTags_Call struct {
	*mock.Call
}

// DeleteTags is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTagAPI_Expecter) DeleteTags(ctx interface{}) *MockTagAPI_DeleteTags_Call {
	return &MockTagAPI_DeleteTags_Call{Call: _e.mock.On("DeleteTags", ctx)}
}

func (_c *MockTagAPI_DeleteTags_Call) Run(run func(ctx context.Context)) *MockTagAPI_DeleteTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTagAPI_DeleteTags_Call) Return(_a0 ApiDeleteTagsRequest) *MockTagAPI_DeleteTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_DeleteTags_Call) RunAndReturn(run func(context.Context) ApiDeleteTagsRequest) *MockTagAPI_DeleteTags_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTagsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) DeleteTagsExecute(r ApiDeleteTagsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteTagsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteTagsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteTagsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAPI_DeleteTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTagsExecute'
type MockTagAPI_DeleteTagsExecute_Call struct {
	*mock.Call
}

// DeleteTagsExecute is a helper method to define mock.On call
//   - r ApiDeleteTagsRequest
func (_e *MockTagAPI_Expecter) DeleteTagsExecute(r interface{}) *MockTagAPI_DeleteTagsExecute_Call {
	return &MockTagAPI_DeleteTagsExecute_Call{Call: _e.mock.On("DeleteTagsExecute", r)}
}

func (_c *MockTagAPI_DeleteTagsExecute_Call) Run(run func(r ApiDeleteTagsRequest)) *MockTagAPI_DeleteTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteTagsRequest))
	})
	return _c
}

func (_c *MockTagAPI_DeleteTagsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTagAPI_DeleteTagsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAPI_DeleteTagsExecute_Call) RunAndReturn(run func(ApiDeleteTagsRequest) (*http.Response, error)) *MockTagAPI_DeleteTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTags provides a mock function with given fields: ctx
func (_m *MockTagAPI) GetAllTags(ctx context.Context) ApiGetAllTagsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTags")
	}

	var r0 ApiGetAllTagsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetAllTagsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetAllTagsRequest)
	}

	return r0
}

// MockTagAPI_GetAllTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTags'
type MockTagAPI_GetAllTags_Call struct {
	*mock.Call
}

// GetAllTags is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockTagAPI_Expecter) GetAllTags(ctx interface{}) *MockTagAPI_GetAllTags_Call {
	return &MockTagAPI_GetAllTags_Call{Call: _e.mock.On("GetAllTags", ctx)}
}

func (_c *MockTagAPI_GetAllTags_Call) Run(run func(ctx context.Context)) *MockTagAPI_GetAllTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockTagAPI_GetAllTags_Call) Return(_a0 ApiGetAllTagsRequest) *MockTagAPI_GetAllTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_GetAllTags_Call) RunAndReturn(run func(context.Context) ApiGetAllTagsRequest) *MockTagAPI_GetAllTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTagsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) GetAllTagsExecute(r ApiGetAllTagsRequest) ([]TagListResponseItem, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTagsExecute")
	}

	var r0 []TagListResponseItem
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllTagsRequest) ([]TagListResponseItem, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllTagsRequest) []TagListResponseItem); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TagListResponseItem)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllTagsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllTagsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagAPI_GetAllTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTagsExecute'
type MockTagAPI_GetAllTagsExecute_Call struct {
	*mock.Call
}

// GetAllTagsExecute is a helper method to define mock.On call
//   - r ApiGetAllTagsRequest
func (_e *MockTagAPI_Expecter) GetAllTagsExecute(r interface{}) *MockTagAPI_GetAllTagsExecute_Call {
	return &MockTagAPI_GetAllTagsExecute_Call{Call: _e.mock.On("GetAllTagsExecute", r)}
}

func (_c *MockTagAPI_GetAllTagsExecute_Call) Run(run func(r ApiGetAllTagsRequest)) *MockTagAPI_GetAllTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllTagsRequest))
	})
	return _c
}

func (_c *MockTagAPI_GetAllTagsExecute_Call) Return(_a0 []TagListResponseItem, _a1 *http.Response, _a2 error) *MockTagAPI_GetAllTagsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagAPI_GetAllTagsExecute_Call) RunAndReturn(run func(ApiGetAllTagsRequest) ([]TagListResponseItem, *http.Response, error)) *MockTagAPI_GetAllTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedCollectionProjects provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) GetTaggedCollectionProjects(ctx context.Context, name string) ApiGetTaggedCollectionProjectsRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedCollectionProjects")
	}

	var r0 ApiGetTaggedCollectionProjectsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetTaggedCollectionProjectsRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiGetTaggedCollectionProjectsRequest)
	}

	return r0
}

// MockTagAPI_GetTaggedCollectionProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedCollectionProjects'
type MockTagAPI_GetTaggedCollectionProjects_Call struct {
	*mock.Call
}

// GetTaggedCollectionProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) GetTaggedCollectionProjects(ctx interface{}, name interface{}) *MockTagAPI_GetTaggedCollectionProjects_Call {
	return &MockTagAPI_GetTaggedCollectionProjects_Call{Call: _e.mock.On("GetTaggedCollectionProjects", ctx, name)}
}

func (_c *MockTagAPI_GetTaggedCollectionProjects_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_GetTaggedCollectionProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedCollectionProjects_Call) Return(_a0 ApiGetTaggedCollectionProjectsRequest) *MockTagAPI_GetTaggedCollectionProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_GetTaggedCollectionProjects_Call) RunAndReturn(run func(context.Context, string) ApiGetTaggedCollectionProjectsRequest) *MockTagAPI_GetTaggedCollectionProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedCollectionProjectsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) GetTaggedCollectionProjectsExecute(r ApiGetTaggedCollectionProjectsRequest) ([]TaggedCollectionProjectListResponseItem, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedCollectionProjectsExecute")
	}

	var r0 []TaggedCollectionProjectListResponseItem
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTaggedCollectionProjectsRequest) ([]TaggedCollectionProjectListResponseItem, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTaggedCollectionProjectsRequest) []TaggedCollectionProjectListResponseItem); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TaggedCollectionProjectListResponseItem)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTaggedCollectionProjectsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTaggedCollectionProjectsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagAPI_GetTaggedCollectionProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedCollectionProjectsExecute'
type MockTagAPI_GetTaggedCollectionProjectsExecute_Call struct {
	*mock.Call
}

// GetTaggedCollectionProjectsExecute is a helper method to define mock.On call
//   - r ApiGetTaggedCollectionProjectsRequest
func (_e *MockTagAPI_Expecter) GetTaggedCollectionProjectsExecute(r interface{}) *MockTagAPI_GetTaggedCollectionProjectsExecute_Call {
	return &MockTagAPI_GetTaggedCollectionProjectsExecute_Call{Call: _e.mock.On("GetTaggedCollectionProjectsExecute", r)}
}

func (_c *MockTagAPI_GetTaggedCollectionProjectsExecute_Call) Run(run func(r ApiGetTaggedCollectionProjectsRequest)) *MockTagAPI_GetTaggedCollectionProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTaggedCollectionProjectsRequest))
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedCollectionProjectsExecute_Call) Return(_a0 []TaggedCollectionProjectListResponseItem, _a1 *http.Response, _a2 error) *MockTagAPI_GetTaggedCollectionProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagAPI_GetTaggedCollectionProjectsExecute_Call) RunAndReturn(run func(ApiGetTaggedCollectionProjectsRequest) ([]TaggedCollectionProjectListResponseItem, *http.Response, error)) *MockTagAPI_GetTaggedCollectionProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedNotificationRules provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) GetTaggedNotificationRules(ctx context.Context, name string) ApiGetTaggedNotificationRulesRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedNotificationRules")
	}

	var r0 ApiGetTaggedNotificationRulesRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetTaggedNotificationRulesRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiGetTaggedNotificationRulesRequest)
	}

	return r0
}

// MockTagAPI_GetTaggedNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedNotificationRules'
type MockTagAPI_GetTaggedNotificationRules_Call struct {
	*mock.Call
}

// GetTaggedNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) GetTaggedNotificationRules(ctx interface{}, name interface{}) *MockTagAPI_GetTaggedNotificationRules_Call {
	return &MockTagAPI_GetTaggedNotificationRules_Call{Call: _e.mock.On("GetTaggedNotificationRules", ctx, name)}
}

func (_c *MockTagAPI_GetTaggedNotificationRules_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_GetTaggedNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedNotificationRules_Call) Return(_a0 ApiGetTaggedNotificationRulesRequest) *MockTagAPI_GetTaggedNotificationRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_GetTaggedNotificationRules_Call) RunAndReturn(run func(context.Context, string) ApiGetTaggedNotificationRulesRequest) *MockTagAPI_GetTaggedNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedNotificationRulesExecute provides a mock function with given fields: r
func (_m *MockTagAPI) GetTaggedNotificationRulesExecute(r ApiGetTaggedNotificationRulesRequest) ([]TaggedPolicyListResponseItem, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedNotificationRulesExecute")
	}

	var r0 []TaggedPolicyListResponseItem
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTaggedNotificationRulesRequest) ([]TaggedPolicyListResponseItem, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTaggedNotificationRulesRequest) []TaggedPolicyListResponseItem); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TaggedPolicyListResponseItem)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTaggedNotificationRulesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTaggedNotificationRulesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagAPI_GetTaggedNotificationRulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedNotificationRulesExecute'
type MockTagAPI_GetTaggedNotificationRulesExecute_Call struct {
	*mock.Call
}

// GetTaggedNotificationRulesExecute is a helper method to define mock.On call
//   - r ApiGetTaggedNotificationRulesRequest
func (_e *MockTagAPI_Expecter) GetTaggedNotificationRulesExecute(r interface{}) *MockTagAPI_GetTaggedNotificationRulesExecute_Call {
	return &MockTagAPI_GetTaggedNotificationRulesExecute_Call{Call: _e.mock.On("GetTaggedNotificationRulesExecute", r)}
}

func (_c *MockTagAPI_GetTaggedNotificationRulesExecute_Call) Run(run func(r ApiGetTaggedNotificationRulesRequest)) *MockTagAPI_GetTaggedNotificationRulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTaggedNotificationRulesRequest))
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedNotificationRulesExecute_Call) Return(_a0 []TaggedPolicyListResponseItem, _a1 *http.Response, _a2 error) *MockTagAPI_GetTaggedNotificationRulesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagAPI_GetTaggedNotificationRulesExecute_Call) RunAndReturn(run func(ApiGetTaggedNotificationRulesRequest) ([]TaggedPolicyListResponseItem, *http.Response, error)) *MockTagAPI_GetTaggedNotificationRulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedPolicies provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) GetTaggedPolicies(ctx context.Context, name string) ApiGetTaggedPoliciesRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedPolicies")
	}

	var r0 ApiGetTaggedPoliciesRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetTaggedPoliciesRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiGetTaggedPoliciesRequest)
	}

	return r0
}

// MockTagAPI_GetTaggedPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedPolicies'
type MockTagAPI_GetTaggedPolicies_Call struct {
	*mock.Call
}

// GetTaggedPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) GetTaggedPolicies(ctx interface{}, name interface{}) *MockTagAPI_GetTaggedPolicies_Call {
	return &MockTagAPI_GetTaggedPolicies_Call{Call: _e.mock.On("GetTaggedPolicies", ctx, name)}
}

func (_c *MockTagAPI_GetTaggedPolicies_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_GetTaggedPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedPolicies_Call) Return(_a0 ApiGetTaggedPoliciesRequest) *MockTagAPI_GetTaggedPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_GetTaggedPolicies_Call) RunAndReturn(run func(context.Context, string) ApiGetTaggedPoliciesRequest) *MockTagAPI_GetTaggedPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedPoliciesExecute provides a mock function with given fields: r
func (_m *MockTagAPI) GetTaggedPoliciesExecute(r ApiGetTaggedPoliciesRequest) ([]TaggedPolicyListResponseItem, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedPoliciesExecute")
	}

	var r0 []TaggedPolicyListResponseItem
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTaggedPoliciesRequest) ([]TaggedPolicyListResponseItem, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTaggedPoliciesRequest) []TaggedPolicyListResponseItem); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TaggedPolicyListResponseItem)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTaggedPoliciesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTaggedPoliciesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagAPI_GetTaggedPoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedPoliciesExecute'
type MockTagAPI_GetTaggedPoliciesExecute_Call struct {
	*mock.Call
}

// GetTaggedPoliciesExecute is a helper method to define mock.On call
//   - r ApiGetTaggedPoliciesRequest
func (_e *MockTagAPI_Expecter) GetTaggedPoliciesExecute(r interface{}) *MockTagAPI_GetTaggedPoliciesExecute_Call {
	return &MockTagAPI_GetTaggedPoliciesExecute_Call{Call: _e.mock.On("GetTaggedPoliciesExecute", r)}
}

func (_c *MockTagAPI_GetTaggedPoliciesExecute_Call) Run(run func(r ApiGetTaggedPoliciesRequest)) *MockTagAPI_GetTaggedPoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTaggedPoliciesRequest))
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedPoliciesExecute_Call) Return(_a0 []TaggedPolicyListResponseItem, _a1 *http.Response, _a2 error) *MockTagAPI_GetTaggedPoliciesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagAPI_GetTaggedPoliciesExecute_Call) RunAndReturn(run func(ApiGetTaggedPoliciesRequest) ([]TaggedPolicyListResponseItem, *http.Response, error)) *MockTagAPI_GetTaggedPoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedProjects provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) GetTaggedProjects(ctx context.Context, name string) ApiGetTaggedProjectsRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedProjects")
	}

	var r0 ApiGetTaggedProjectsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetTaggedProjectsRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiGetTaggedProjectsRequest)
	}

	return r0
}

// MockTagAPI_GetTaggedProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedProjects'
type MockTagAPI_GetTaggedProjects_Call struct {
	*mock.Call
}

// GetTaggedProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) GetTaggedProjects(ctx interface{}, name interface{}) *MockTagAPI_GetTaggedProjects_Call {
	return &MockTagAPI_GetTaggedProjects_Call{Call: _e.mock.On("GetTaggedProjects", ctx, name)}
}

func (_c *MockTagAPI_GetTaggedProjects_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_GetTaggedProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedProjects_Call) Return(_a0 ApiGetTaggedProjectsRequest) *MockTagAPI_GetTaggedProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_GetTaggedProjects_Call) RunAndReturn(run func(context.Context, string) ApiGetTaggedProjectsRequest) *MockTagAPI_GetTaggedProjects_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaggedProjectsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) GetTaggedProjectsExecute(r ApiGetTaggedProjectsRequest) ([]TaggedProjectListResponseItem, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTaggedProjectsExecute")
	}

	var r0 []TaggedProjectListResponseItem
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTaggedProjectsRequest) ([]TaggedProjectListResponseItem, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTaggedProjectsRequest) []TaggedProjectListResponseItem); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]TaggedProjectListResponseItem)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTaggedProjectsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTaggedProjectsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagAPI_GetTaggedProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaggedProjectsExecute'
type MockTagAPI_GetTaggedProjectsExecute_Call struct {
	*mock.Call
}

// GetTaggedProjectsExecute is a helper method to define mock.On call
//   - r ApiGetTaggedProjectsRequest
func (_e *MockTagAPI_Expecter) GetTaggedProjectsExecute(r interface{}) *MockTagAPI_GetTaggedProjectsExecute_Call {
	return &MockTagAPI_GetTaggedProjectsExecute_Call{Call: _e.mock.On("GetTaggedProjectsExecute", r)}
}

func (_c *MockTagAPI_GetTaggedProjectsExecute_Call) Run(run func(r ApiGetTaggedProjectsRequest)) *MockTagAPI_GetTaggedProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTaggedProjectsRequest))
	})
	return _c
}

func (_c *MockTagAPI_GetTaggedProjectsExecute_Call) Return(_a0 []TaggedProjectListResponseItem, _a1 *http.Response, _a2 error) *MockTagAPI_GetTaggedProjectsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagAPI_GetTaggedProjectsExecute_Call) RunAndReturn(run func(ApiGetTaggedProjectsRequest) ([]TaggedProjectListResponseItem, *http.Response, error)) *MockTagAPI_GetTaggedProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTags provides a mock function with given fields: ctx, policyUuid
func (_m *MockTagAPI) GetTags(ctx context.Context, policyUuid string) ApiGetTagsRequest {
	ret := _m.Called(ctx, policyUuid)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 ApiGetTagsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetTagsRequest); ok {
		r0 = rf(ctx, policyUuid)
	} else {
		r0 = ret.Get(0).(ApiGetTagsRequest)
	}

	return r0
}

// MockTagAPI_GetTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTags'
type MockTagAPI_GetTags_Call struct {
	*mock.Call
}

// GetTags is a helper method to define mock.On call
//   - ctx context.Context
//   - policyUuid string
func (_e *MockTagAPI_Expecter) GetTags(ctx interface{}, policyUuid interface{}) *MockTagAPI_GetTags_Call {
	return &MockTagAPI_GetTags_Call{Call: _e.mock.On("GetTags", ctx, policyUuid)}
}

func (_c *MockTagAPI_GetTags_Call) Run(run func(ctx context.Context, policyUuid string)) *MockTagAPI_GetTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_GetTags_Call) Return(_a0 ApiGetTagsRequest) *MockTagAPI_GetTags_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_GetTags_Call) RunAndReturn(run func(context.Context, string) ApiGetTagsRequest) *MockTagAPI_GetTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) GetTagsExecute(r ApiGetTagsRequest) ([]Tag, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsExecute")
	}

	var r0 []Tag
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTagsRequest) ([]Tag, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTagsRequest) []Tag); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTagsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTagsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagAPI_GetTagsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsExecute'
type MockTagAPI_GetTagsExecute_Call struct {
	*mock.Call
}

// GetTagsExecute is a helper method to define mock.On call
//   - r ApiGetTagsRequest
func (_e *MockTagAPI_Expecter) GetTagsExecute(r interface{}) *MockTagAPI_GetTagsExecute_Call {
	return &MockTagAPI_GetTagsExecute_Call{Call: _e.mock.On("GetTagsExecute", r)}
}

func (_c *MockTagAPI_GetTagsExecute_Call) Run(run func(r ApiGetTagsRequest)) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTagsRequest))
	})
	return _c
}

func (_c *MockTagAPI_GetTagsExecute_Call) Return(_a0 []Tag, _a1 *http.Response, _a2 error) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagAPI_GetTagsExecute_Call) RunAndReturn(run func(ApiGetTagsRequest) ([]Tag, *http.Response, error)) *MockTagAPI_GetTagsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsForPolicy provides a mock function with given fields: ctx, uuid
func (_m *MockTagAPI) GetTagsForPolicy(ctx context.Context, uuid string) ApiGetTagsForPolicyRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsForPolicy")
	}

	var r0 ApiGetTagsForPolicyRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetTagsForPolicyRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetTagsForPolicyRequest)
	}

	return r0
}

// MockTagAPI_GetTagsForPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsForPolicy'
type MockTagAPI_GetTagsForPolicy_Call struct {
	*mock.Call
}

// GetTagsForPolicy is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockTagAPI_Expecter) GetTagsForPolicy(ctx interface{}, uuid interface{}) *MockTagAPI_GetTagsForPolicy_Call {
	return &MockTagAPI_GetTagsForPolicy_Call{Call: _e.mock.On("GetTagsForPolicy", ctx, uuid)}
}

func (_c *MockTagAPI_GetTagsForPolicy_Call) Run(run func(ctx context.Context, uuid string)) *MockTagAPI_GetTagsForPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_GetTagsForPolicy_Call) Return(_a0 ApiGetTagsForPolicyRequest) *MockTagAPI_GetTagsForPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_GetTagsForPolicy_Call) RunAndReturn(run func(context.Context, string) ApiGetTagsForPolicyRequest) *MockTagAPI_GetTagsForPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsForPolicyExecute provides a mock function with given fields: r
func (_m *MockTagAPI) GetTagsForPolicyExecute(r ApiGetTagsForPolicyRequest) ([]Tag, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsForPolicyExecute")
	}

	var r0 []Tag
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetTagsForPolicyRequest) ([]Tag, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetTagsForPolicyRequest) []Tag); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetTagsForPolicyRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetTagsForPolicyRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTagAPI_GetTagsForPolicyExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsForPolicyExecute'
type MockTagAPI_GetTagsForPolicyExecute_Call struct {
	*mock.Call
}

// GetTagsForPolicyExecute is a helper method to define mock.On call
//   - r ApiGetTagsForPolicyRequest
func (_e *MockTagAPI_Expecter) GetTagsForPolicyExecute(r interface{}) *MockTagAPI_GetTagsForPolicyExecute_Call {
	return &MockTagAPI_GetTagsForPolicyExecute_Call{Call: _e.mock.On("GetTagsForPolicyExecute", r)}
}

func (_c *MockTagAPI_GetTagsForPolicyExecute_Call) Run(run func(r ApiGetTagsForPolicyRequest)) *MockTagAPI_GetTagsForPolicyExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetTagsForPolicyRequest))
	})
	return _c
}

func (_c *MockTagAPI_GetTagsForPolicyExecute_Call) Return(_a0 []Tag, _a1 *http.Response, _a2 error) *MockTagAPI_GetTagsForPolicyExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTagAPI_GetTagsForPolicyExecute_Call) RunAndReturn(run func(ApiGetTagsForPolicyRequest) ([]Tag, *http.Response, error)) *MockTagAPI_GetTagsForPolicyExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TagNotificationRules provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) TagNotificationRules(ctx context.Context, name string) ApiTagNotificationRulesRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for TagNotificationRules")
	}

	var r0 ApiTagNotificationRulesRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiTagNotificationRulesRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiTagNotificationRulesRequest)
	}

	return r0
}

// MockTagAPI_TagNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagNotificationRules'
type MockTagAPI_TagNotificationRules_Call struct {
	*mock.Call
}

// TagNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) TagNotificationRules(ctx interface{}, name interface{}) *MockTagAPI_TagNotificationRules_Call {
	return &MockTagAPI_TagNotificationRules_Call{Call: _e.mock.On("TagNotificationRules", ctx, name)}
}

func (_c *MockTagAPI_TagNotificationRules_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_TagNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_TagNotificationRules_Call) Return(_a0 ApiTagNotificationRulesRequest) *MockTagAPI_TagNotificationRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_TagNotificationRules_Call) RunAndReturn(run func(context.Context, string) ApiTagNotificationRulesRequest) *MockTagAPI_TagNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// TagNotificationRulesExecute provides a mock function with given fields: r
func (_m *MockTagAPI) TagNotificationRulesExecute(r ApiTagNotificationRulesRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TagNotificationRulesExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiTagNotificationRulesRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiTagNotificationRulesRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiTagNotificationRulesRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAPI_TagNotificationRulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagNotificationRulesExecute'
type MockTagAPI_TagNotificationRulesExecute_Call struct {
	*mock.Call
}

// TagNotificationRulesExecute is a helper method to define mock.On call
//   - r ApiTagNotificationRulesRequest
func (_e *MockTagAPI_Expecter) TagNotificationRulesExecute(r interface{}) *MockTagAPI_TagNotificationRulesExecute_Call {
	return &MockTagAPI_TagNotificationRulesExecute_Call{Call: _e.mock.On("TagNotificationRulesExecute", r)}
}

func (_c *MockTagAPI_TagNotificationRulesExecute_Call) Run(run func(r ApiTagNotificationRulesRequest)) *MockTagAPI_TagNotificationRulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTagNotificationRulesRequest))
	})
	return _c
}

func (_c *MockTagAPI_TagNotificationRulesExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTagAPI_TagNotificationRulesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAPI_TagNotificationRulesExecute_Call) RunAndReturn(run func(ApiTagNotificationRulesRequest) (*http.Response, error)) *MockTagAPI_TagNotificationRulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TagPolicies provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) TagPolicies(ctx context.Context, name string) ApiTagPoliciesRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for TagPolicies")
	}

	var r0 ApiTagPoliciesRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiTagPoliciesRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiTagPoliciesRequest)
	}

	return r0
}

// MockTagAPI_TagPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagPolicies'
type MockTagAPI_TagPolicies_Call struct {
	*mock.Call
}

// TagPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) TagPolicies(ctx interface{}, name interface{}) *MockTagAPI_TagPolicies_Call {
	return &MockTagAPI_TagPolicies_Call{Call: _e.mock.On("TagPolicies", ctx, name)}
}

func (_c *MockTagAPI_TagPolicies_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_TagPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_TagPolicies_Call) Return(_a0 ApiTagPoliciesRequest) *MockTagAPI_TagPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_TagPolicies_Call) RunAndReturn(run func(context.Context, string) ApiTagPoliciesRequest) *MockTagAPI_TagPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// TagPoliciesExecute provides a mock function with given fields: r
func (_m *MockTagAPI) TagPoliciesExecute(r ApiTagPoliciesRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TagPoliciesExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiTagPoliciesRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiTagPoliciesRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiTagPoliciesRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAPI_TagPoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagPoliciesExecute'
type MockTagAPI_TagPoliciesExecute_Call struct {
	*mock.Call
}

// TagPoliciesExecute is a helper method to define mock.On call
//   - r ApiTagPoliciesRequest
func (_e *MockTagAPI_Expecter) TagPoliciesExecute(r interface{}) *MockTagAPI_TagPoliciesExecute_Call {
	return &MockTagAPI_TagPoliciesExecute_Call{Call: _e.mock.On("TagPoliciesExecute", r)}
}

func (_c *MockTagAPI_TagPoliciesExecute_Call) Run(run func(r ApiTagPoliciesRequest)) *MockTagAPI_TagPoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTagPoliciesRequest))
	})
	return _c
}

func (_c *MockTagAPI_TagPoliciesExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTagAPI_TagPoliciesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAPI_TagPoliciesExecute_Call) RunAndReturn(run func(ApiTagPoliciesRequest) (*http.Response, error)) *MockTagAPI_TagPoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// TagProjects provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) TagProjects(ctx context.Context, name string) ApiTagProjectsRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for TagProjects")
	}

	var r0 ApiTagProjectsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiTagProjectsRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiTagProjectsRequest)
	}

	return r0
}

// MockTagAPI_TagProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagProjects'
type MockTagAPI_TagProjects_Call struct {
	*mock.Call
}

// TagProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) TagProjects(ctx interface{}, name interface{}) *MockTagAPI_TagProjects_Call {
	return &MockTagAPI_TagProjects_Call{Call: _e.mock.On("TagProjects", ctx, name)}
}

func (_c *MockTagAPI_TagProjects_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_TagProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_TagProjects_Call) Return(_a0 ApiTagProjectsRequest) *MockTagAPI_TagProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_TagProjects_Call) RunAndReturn(run func(context.Context, string) ApiTagProjectsRequest) *MockTagAPI_TagProjects_Call {
	_c.Call.Return(run)
	return _c
}

// TagProjectsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) TagProjectsExecute(r ApiTagProjectsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for TagProjectsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiTagProjectsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiTagProjectsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiTagProjectsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAPI_TagProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TagProjectsExecute'
type MockTagAPI_TagProjectsExecute_Call struct {
	*mock.Call
}

// TagProjectsExecute is a helper method to define mock.On call
//   - r ApiTagProjectsRequest
func (_e *MockTagAPI_Expecter) TagProjectsExecute(r interface{}) *MockTagAPI_TagProjectsExecute_Call {
	return &MockTagAPI_TagProjectsExecute_Call{Call: _e.mock.On("TagProjectsExecute", r)}
}

func (_c *MockTagAPI_TagProjectsExecute_Call) Run(run func(r ApiTagProjectsRequest)) *MockTagAPI_TagProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiTagProjectsRequest))
	})
	return _c
}

func (_c *MockTagAPI_TagProjectsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTagAPI_TagProjectsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAPI_TagProjectsExecute_Call) RunAndReturn(run func(ApiTagProjectsRequest) (*http.Response, error)) *MockTagAPI_TagProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UntagNotificationRules provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) UntagNotificationRules(ctx context.Context, name string) ApiUntagNotificationRulesRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UntagNotificationRules")
	}

	var r0 ApiUntagNotificationRulesRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiUntagNotificationRulesRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiUntagNotificationRulesRequest)
	}

	return r0
}

// MockTagAPI_UntagNotificationRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagNotificationRules'
type MockTagAPI_UntagNotificationRules_Call struct {
	*mock.Call
}

// UntagNotificationRules is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) UntagNotificationRules(ctx interface{}, name interface{}) *MockTagAPI_UntagNotificationRules_Call {
	return &MockTagAPI_UntagNotificationRules_Call{Call: _e.mock.On("UntagNotificationRules", ctx, name)}
}

func (_c *MockTagAPI_UntagNotificationRules_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_UntagNotificationRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_UntagNotificationRules_Call) Return(_a0 ApiUntagNotificationRulesRequest) *MockTagAPI_UntagNotificationRules_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_UntagNotificationRules_Call) RunAndReturn(run func(context.Context, string) ApiUntagNotificationRulesRequest) *MockTagAPI_UntagNotificationRules_Call {
	_c.Call.Return(run)
	return _c
}

// UntagNotificationRulesExecute provides a mock function with given fields: r
func (_m *MockTagAPI) UntagNotificationRulesExecute(r ApiUntagNotificationRulesRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UntagNotificationRulesExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiUntagNotificationRulesRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUntagNotificationRulesRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUntagNotificationRulesRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAPI_UntagNotificationRulesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagNotificationRulesExecute'
type MockTagAPI_UntagNotificationRulesExecute_Call struct {
	*mock.Call
}

// UntagNotificationRulesExecute is a helper method to define mock.On call
//   - r ApiUntagNotificationRulesRequest
func (_e *MockTagAPI_Expecter) UntagNotificationRulesExecute(r interface{}) *MockTagAPI_UntagNotificationRulesExecute_Call {
	return &MockTagAPI_UntagNotificationRulesExecute_Call{Call: _e.mock.On("UntagNotificationRulesExecute", r)}
}

func (_c *MockTagAPI_UntagNotificationRulesExecute_Call) Run(run func(r ApiUntagNotificationRulesRequest)) *MockTagAPI_UntagNotificationRulesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUntagNotificationRulesRequest))
	})
	return _c
}

func (_c *MockTagAPI_UntagNotificationRulesExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTagAPI_UntagNotificationRulesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAPI_UntagNotificationRulesExecute_Call) RunAndReturn(run func(ApiUntagNotificationRulesRequest) (*http.Response, error)) *MockTagAPI_UntagNotificationRulesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UntagPolicies provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) UntagPolicies(ctx context.Context, name string) ApiUntagPoliciesRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UntagPolicies")
	}

	var r0 ApiUntagPoliciesRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiUntagPoliciesRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiUntagPoliciesRequest)
	}

	return r0
}

// MockTagAPI_UntagPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagPolicies'
type MockTagAPI_UntagPolicies_Call struct {
	*mock.Call
}

// UntagPolicies is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) UntagPolicies(ctx interface{}, name interface{}) *MockTagAPI_UntagPolicies_Call {
	return &MockTagAPI_UntagPolicies_Call{Call: _e.mock.On("UntagPolicies", ctx, name)}
}

func (_c *MockTagAPI_UntagPolicies_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_UntagPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_UntagPolicies_Call) Return(_a0 ApiUntagPoliciesRequest) *MockTagAPI_UntagPolicies_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_UntagPolicies_Call) RunAndReturn(run func(context.Context, string) ApiUntagPoliciesRequest) *MockTagAPI_UntagPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// UntagPoliciesExecute provides a mock function with given fields: r
func (_m *MockTagAPI) UntagPoliciesExecute(r ApiUntagPoliciesRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UntagPoliciesExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiUntagPoliciesRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUntagPoliciesRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUntagPoliciesRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAPI_UntagPoliciesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagPoliciesExecute'
type MockTagAPI_UntagPoliciesExecute_Call struct {
	*mock.Call
}

// UntagPoliciesExecute is a helper method to define mock.On call
//   - r ApiUntagPoliciesRequest
func (_e *MockTagAPI_Expecter) UntagPoliciesExecute(r interface{}) *MockTagAPI_UntagPoliciesExecute_Call {
	return &MockTagAPI_UntagPoliciesExecute_Call{Call: _e.mock.On("UntagPoliciesExecute", r)}
}

func (_c *MockTagAPI_UntagPoliciesExecute_Call) Run(run func(r ApiUntagPoliciesRequest)) *MockTagAPI_UntagPoliciesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUntagPoliciesRequest))
	})
	return _c
}

func (_c *MockTagAPI_UntagPoliciesExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTagAPI_UntagPoliciesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAPI_UntagPoliciesExecute_Call) RunAndReturn(run func(ApiUntagPoliciesRequest) (*http.Response, error)) *MockTagAPI_UntagPoliciesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UntagProjects provides a mock function with given fields: ctx, name
func (_m *MockTagAPI) UntagProjects(ctx context.Context, name string) ApiUntagProjectsRequest {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UntagProjects")
	}

	var r0 ApiUntagProjectsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiUntagProjectsRequest); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(ApiUntagProjectsRequest)
	}

	return r0
}

// MockTagAPI_UntagProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagProjects'
type MockTagAPI_UntagProjects_Call struct {
	*mock.Call
}

// UntagProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockTagAPI_Expecter) UntagProjects(ctx interface{}, name interface{}) *MockTagAPI_UntagProjects_Call {
	return &MockTagAPI_UntagProjects_Call{Call: _e.mock.On("UntagProjects", ctx, name)}
}

func (_c *MockTagAPI_UntagProjects_Call) Run(run func(ctx context.Context, name string)) *MockTagAPI_UntagProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTagAPI_UntagProjects_Call) Return(_a0 ApiUntagProjectsRequest) *MockTagAPI_UntagProjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTagAPI_UntagProjects_Call) RunAndReturn(run func(context.Context, string) ApiUntagProjectsRequest) *MockTagAPI_UntagProjects_Call {
	_c.Call.Return(run)
	return _c
}

// UntagProjectsExecute provides a mock function with given fields: r
func (_m *MockTagAPI) UntagProjectsExecute(r ApiUntagProjectsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UntagProjectsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiUntagProjectsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUntagProjectsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUntagProjectsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTagAPI_UntagProjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UntagProjectsExecute'
type MockTagAPI_UntagProjectsExecute_Call struct {
	*mock.Call
}

// UntagProjectsExecute is a helper method to define mock.On call
//   - r ApiUntagProjectsRequest
func (_e *MockTagAPI_Expecter) UntagProjectsExecute(r interface{}) *MockTagAPI_UntagProjectsExecute_Call {
	return &MockTagAPI_UntagProjectsExecute_Call{Call: _e.mock.On("UntagProjectsExecute", r)}
}

func (_c *MockTagAPI_UntagProjectsExecute_Call) Run(run func(r ApiUntagProjectsRequest)) *MockTagAPI_UntagProjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUntagProjectsRequest))
	})
	return _c
}

func (_c *MockTagAPI_UntagProjectsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockTagAPI_UntagProjectsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTagAPI_UntagProjectsExecute_Call) RunAndReturn(run func(ApiUntagProjectsRequest) (*http.Response, error)) *MockTagAPI_UntagProjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTagAPI creates a new instance of MockTagAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTagAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTagAPI {
	mock := &MockTagAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
