// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockBomAPI is an autogenerated mock type for the BomAPI type
type MockBomAPI struct {
	mock.Mock
}

type MockBomAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBomAPI) EXPECT() *MockBomAPI_Expecter {
	return &MockBomAPI_Expecter{mock: &_m.Mock}
}

// ExportComponentAsCycloneDx provides a mock function with given fields: ctx, uuid
func (_m *MockBomAPI) ExportComponentAsCycloneDx(ctx context.Context, uuid string) ApiExportComponentAsCycloneDxRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ExportComponentAsCycloneDx")
	}

	var r0 ApiExportComponentAsCycloneDxRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiExportComponentAsCycloneDxRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiExportComponentAsCycloneDxRequest)
	}

	return r0
}

// MockBomAPI_ExportComponentAsCycloneDx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportComponentAsCycloneDx'
type MockBomAPI_ExportComponentAsCycloneDx_Call struct {
	*mock.Call
}

// ExportComponentAsCycloneDx is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBomAPI_Expecter) ExportComponentAsCycloneDx(ctx interface{}, uuid interface{}) *MockBomAPI_ExportComponentAsCycloneDx_Call {
	return &MockBomAPI_ExportComponentAsCycloneDx_Call{Call: _e.mock.On("ExportComponentAsCycloneDx", ctx, uuid)}
}

func (_c *MockBomAPI_ExportComponentAsCycloneDx_Call) Run(run func(ctx context.Context, uuid string)) *MockBomAPI_ExportComponentAsCycloneDx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBomAPI_ExportComponentAsCycloneDx_Call) Return(_a0 ApiExportComponentAsCycloneDxRequest) *MockBomAPI_ExportComponentAsCycloneDx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBomAPI_ExportComponentAsCycloneDx_Call) RunAndReturn(run func(context.Context, string) ApiExportComponentAsCycloneDxRequest) *MockBomAPI_ExportComponentAsCycloneDx_Call {
	_c.Call.Return(run)
	return _c
}

// ExportComponentAsCycloneDxExecute provides a mock function with given fields: r
func (_m *MockBomAPI) ExportComponentAsCycloneDxExecute(r ApiExportComponentAsCycloneDxRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ExportComponentAsCycloneDxExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiExportComponentAsCycloneDxRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiExportComponentAsCycloneDxRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiExportComponentAsCycloneDxRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiExportComponentAsCycloneDxRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBomAPI_ExportComponentAsCycloneDxExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportComponentAsCycloneDxExecute'
type MockBomAPI_ExportComponentAsCycloneDxExecute_Call struct {
	*mock.Call
}

// ExportComponentAsCycloneDxExecute is a helper method to define mock.On call
//   - r ApiExportComponentAsCycloneDxRequest
func (_e *MockBomAPI_Expecter) ExportComponentAsCycloneDxExecute(r interface{}) *MockBomAPI_ExportComponentAsCycloneDxExecute_Call {
	return &MockBomAPI_ExportComponentAsCycloneDxExecute_Call{Call: _e.mock.On("ExportComponentAsCycloneDxExecute", r)}
}

func (_c *MockBomAPI_ExportComponentAsCycloneDxExecute_Call) Run(run func(r ApiExportComponentAsCycloneDxRequest)) *MockBomAPI_ExportComponentAsCycloneDxExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiExportComponentAsCycloneDxRequest))
	})
	return _c
}

func (_c *MockBomAPI_ExportComponentAsCycloneDxExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockBomAPI_ExportComponentAsCycloneDxExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBomAPI_ExportComponentAsCycloneDxExecute_Call) RunAndReturn(run func(ApiExportComponentAsCycloneDxRequest) (string, *http.Response, error)) *MockBomAPI_ExportComponentAsCycloneDxExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ExportProjectAsCycloneDx provides a mock function with given fields: ctx, uuid
func (_m *MockBomAPI) ExportProjectAsCycloneDx(ctx context.Context, uuid string) ApiExportProjectAsCycloneDxRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ExportProjectAsCycloneDx")
	}

	var r0 ApiExportProjectAsCycloneDxRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiExportProjectAsCycloneDxRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiExportProjectAsCycloneDxRequest)
	}

	return r0
}

// MockBomAPI_ExportProjectAsCycloneDx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportProjectAsCycloneDx'
type MockBomAPI_ExportProjectAsCycloneDx_Call struct {
	*mock.Call
}

// ExportProjectAsCycloneDx is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBomAPI_Expecter) ExportProjectAsCycloneDx(ctx interface{}, uuid interface{}) *MockBomAPI_ExportProjectAsCycloneDx_Call {
	return &MockBomAPI_ExportProjectAsCycloneDx_Call{Call: _e.mock.On("ExportProjectAsCycloneDx", ctx, uuid)}
}

func (_c *MockBomAPI_ExportProjectAsCycloneDx_Call) Run(run func(ctx context.Context, uuid string)) *MockBomAPI_ExportProjectAsCycloneDx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBomAPI_ExportProjectAsCycloneDx_Call) Return(_a0 ApiExportProjectAsCycloneDxRequest) *MockBomAPI_ExportProjectAsCycloneDx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBomAPI_ExportProjectAsCycloneDx_Call) RunAndReturn(run func(context.Context, string) ApiExportProjectAsCycloneDxRequest) *MockBomAPI_ExportProjectAsCycloneDx_Call {
	_c.Call.Return(run)
	return _c
}

// ExportProjectAsCycloneDxExecute provides a mock function with given fields: r
func (_m *MockBomAPI) ExportProjectAsCycloneDxExecute(r ApiExportProjectAsCycloneDxRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ExportProjectAsCycloneDxExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiExportProjectAsCycloneDxRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiExportProjectAsCycloneDxRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiExportProjectAsCycloneDxRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiExportProjectAsCycloneDxRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBomAPI_ExportProjectAsCycloneDxExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportProjectAsCycloneDxExecute'
type MockBomAPI_ExportProjectAsCycloneDxExecute_Call struct {
	*mock.Call
}

// ExportProjectAsCycloneDxExecute is a helper method to define mock.On call
//   - r ApiExportProjectAsCycloneDxRequest
func (_e *MockBomAPI_Expecter) ExportProjectAsCycloneDxExecute(r interface{}) *MockBomAPI_ExportProjectAsCycloneDxExecute_Call {
	return &MockBomAPI_ExportProjectAsCycloneDxExecute_Call{Call: _e.mock.On("ExportProjectAsCycloneDxExecute", r)}
}

func (_c *MockBomAPI_ExportProjectAsCycloneDxExecute_Call) Run(run func(r ApiExportProjectAsCycloneDxRequest)) *MockBomAPI_ExportProjectAsCycloneDxExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiExportProjectAsCycloneDxRequest))
	})
	return _c
}

func (_c *MockBomAPI_ExportProjectAsCycloneDxExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockBomAPI_ExportProjectAsCycloneDxExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBomAPI_ExportProjectAsCycloneDxExecute_Call) RunAndReturn(run func(ApiExportProjectAsCycloneDxRequest) (string, *http.Response, error)) *MockBomAPI_ExportProjectAsCycloneDxExecute_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenBeingProcessed provides a mock function with given fields: ctx, uuid
func (_m *MockBomAPI) IsTokenBeingProcessed(ctx context.Context, uuid string) ApiIsTokenBeingProcessedRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBeingProcessed")
	}

	var r0 ApiIsTokenBeingProcessedRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiIsTokenBeingProcessedRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiIsTokenBeingProcessedRequest)
	}

	return r0
}

// MockBomAPI_IsTokenBeingProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenBeingProcessed'
type MockBomAPI_IsTokenBeingProcessed_Call struct {
	*mock.Call
}

// IsTokenBeingProcessed is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockBomAPI_Expecter) IsTokenBeingProcessed(ctx interface{}, uuid interface{}) *MockBomAPI_IsTokenBeingProcessed_Call {
	return &MockBomAPI_IsTokenBeingProcessed_Call{Call: _e.mock.On("IsTokenBeingProcessed", ctx, uuid)}
}

func (_c *MockBomAPI_IsTokenBeingProcessed_Call) Run(run func(ctx context.Context, uuid string)) *MockBomAPI_IsTokenBeingProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBomAPI_IsTokenBeingProcessed_Call) Return(_a0 ApiIsTokenBeingProcessedRequest) *MockBomAPI_IsTokenBeingProcessed_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBomAPI_IsTokenBeingProcessed_Call) RunAndReturn(run func(context.Context, string) ApiIsTokenBeingProcessedRequest) *MockBomAPI_IsTokenBeingProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// IsTokenBeingProcessedExecute provides a mock function with given fields: r
func (_m *MockBomAPI) IsTokenBeingProcessedExecute(r ApiIsTokenBeingProcessedRequest) (*IsTokenBeingProcessedResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IsTokenBeingProcessedExecute")
	}

	var r0 *IsTokenBeingProcessedResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiIsTokenBeingProcessedRequest) (*IsTokenBeingProcessedResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiIsTokenBeingProcessedRequest) *IsTokenBeingProcessedResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IsTokenBeingProcessedResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiIsTokenBeingProcessedRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiIsTokenBeingProcessedRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBomAPI_IsTokenBeingProcessedExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsTokenBeingProcessedExecute'
type MockBomAPI_IsTokenBeingProcessedExecute_Call struct {
	*mock.Call
}

// IsTokenBeingProcessedExecute is a helper method to define mock.On call
//   - r ApiIsTokenBeingProcessedRequest
func (_e *MockBomAPI_Expecter) IsTokenBeingProcessedExecute(r interface{}) *MockBomAPI_IsTokenBeingProcessedExecute_Call {
	return &MockBomAPI_IsTokenBeingProcessedExecute_Call{Call: _e.mock.On("IsTokenBeingProcessedExecute", r)}
}

func (_c *MockBomAPI_IsTokenBeingProcessedExecute_Call) Run(run func(r ApiIsTokenBeingProcessedRequest)) *MockBomAPI_IsTokenBeingProcessedExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiIsTokenBeingProcessedRequest))
	})
	return _c
}

func (_c *MockBomAPI_IsTokenBeingProcessedExecute_Call) Return(_a0 *IsTokenBeingProcessedResponse, _a1 *http.Response, _a2 error) *MockBomAPI_IsTokenBeingProcessedExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBomAPI_IsTokenBeingProcessedExecute_Call) RunAndReturn(run func(ApiIsTokenBeingProcessedRequest) (*IsTokenBeingProcessedResponse, *http.Response, error)) *MockBomAPI_IsTokenBeingProcessedExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBom provides a mock function with given fields: ctx
func (_m *MockBomAPI) UploadBom(ctx context.Context) ApiUploadBomRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UploadBom")
	}

	var r0 ApiUploadBomRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUploadBomRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUploadBomRequest)
	}

	return r0
}

// MockBomAPI_UploadBom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBom'
type MockBomAPI_UploadBom_Call struct {
	*mock.Call
}

// UploadBom is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBomAPI_Expecter) UploadBom(ctx interface{}) *MockBomAPI_UploadBom_Call {
	return &MockBomAPI_UploadBom_Call{Call: _e.mock.On("UploadBom", ctx)}
}

func (_c *MockBomAPI_UploadBom_Call) Run(run func(ctx context.Context)) *MockBomAPI_UploadBom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBomAPI_UploadBom_Call) Return(_a0 ApiUploadBomRequest) *MockBomAPI_UploadBom_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBomAPI_UploadBom_Call) RunAndReturn(run func(context.Context) ApiUploadBomRequest) *MockBomAPI_UploadBom_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBomBase64Encoded provides a mock function with given fields: ctx
func (_m *MockBomAPI) UploadBomBase64Encoded(ctx context.Context) ApiUploadBomBase64EncodedRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UploadBomBase64Encoded")
	}

	var r0 ApiUploadBomBase64EncodedRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUploadBomBase64EncodedRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUploadBomBase64EncodedRequest)
	}

	return r0
}

// MockBomAPI_UploadBomBase64Encoded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBomBase64Encoded'
type MockBomAPI_UploadBomBase64Encoded_Call struct {
	*mock.Call
}

// UploadBomBase64Encoded is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockBomAPI_Expecter) UploadBomBase64Encoded(ctx interface{}) *MockBomAPI_UploadBomBase64Encoded_Call {
	return &MockBomAPI_UploadBomBase64Encoded_Call{Call: _e.mock.On("UploadBomBase64Encoded", ctx)}
}

func (_c *MockBomAPI_UploadBomBase64Encoded_Call) Run(run func(ctx context.Context)) *MockBomAPI_UploadBomBase64Encoded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockBomAPI_UploadBomBase64Encoded_Call) Return(_a0 ApiUploadBomBase64EncodedRequest) *MockBomAPI_UploadBomBase64Encoded_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBomAPI_UploadBomBase64Encoded_Call) RunAndReturn(run func(context.Context) ApiUploadBomBase64EncodedRequest) *MockBomAPI_UploadBomBase64Encoded_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBomBase64EncodedExecute provides a mock function with given fields: r
func (_m *MockBomAPI) UploadBomBase64EncodedExecute(r ApiUploadBomBase64EncodedRequest) (*BomUploadResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UploadBomBase64EncodedExecute")
	}

	var r0 *BomUploadResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUploadBomBase64EncodedRequest) (*BomUploadResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUploadBomBase64EncodedRequest) *BomUploadResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BomUploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUploadBomBase64EncodedRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUploadBomBase64EncodedRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBomAPI_UploadBomBase64EncodedExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBomBase64EncodedExecute'
type MockBomAPI_UploadBomBase64EncodedExecute_Call struct {
	*mock.Call
}

// UploadBomBase64EncodedExecute is a helper method to define mock.On call
//   - r ApiUploadBomBase64EncodedRequest
func (_e *MockBomAPI_Expecter) UploadBomBase64EncodedExecute(r interface{}) *MockBomAPI_UploadBomBase64EncodedExecute_Call {
	return &MockBomAPI_UploadBomBase64EncodedExecute_Call{Call: _e.mock.On("UploadBomBase64EncodedExecute", r)}
}

func (_c *MockBomAPI_UploadBomBase64EncodedExecute_Call) Run(run func(r ApiUploadBomBase64EncodedRequest)) *MockBomAPI_UploadBomBase64EncodedExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUploadBomBase64EncodedRequest))
	})
	return _c
}

func (_c *MockBomAPI_UploadBomBase64EncodedExecute_Call) Return(_a0 *BomUploadResponse, _a1 *http.Response, _a2 error) *MockBomAPI_UploadBomBase64EncodedExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBomAPI_UploadBomBase64EncodedExecute_Call) RunAndReturn(run func(ApiUploadBomBase64EncodedRequest) (*BomUploadResponse, *http.Response, error)) *MockBomAPI_UploadBomBase64EncodedExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UploadBomExecute provides a mock function with given fields: r
func (_m *MockBomAPI) UploadBomExecute(r ApiUploadBomRequest) (*BomUploadResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UploadBomExecute")
	}

	var r0 *BomUploadResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUploadBomRequest) (*BomUploadResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUploadBomRequest) *BomUploadResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BomUploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUploadBomRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUploadBomRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBomAPI_UploadBomExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadBomExecute'
type MockBomAPI_UploadBomExecute_Call struct {
	*mock.Call
}

// UploadBomExecute is a helper method to define mock.On call
//   - r ApiUploadBomRequest
func (_e *MockBomAPI_Expecter) UploadBomExecute(r interface{}) *MockBomAPI_UploadBomExecute_Call {
	return &MockBomAPI_UploadBomExecute_Call{Call: _e.mock.On("UploadBomExecute", r)}
}

func (_c *MockBomAPI_UploadBomExecute_Call) Run(run func(r ApiUploadBomRequest)) *MockBomAPI_UploadBomExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUploadBomRequest))
	})
	return _c
}

func (_c *MockBomAPI_UploadBomExecute_Call) Return(_a0 *BomUploadResponse, _a1 *http.Response, _a2 error) *MockBomAPI_UploadBomExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBomAPI_UploadBomExecute_Call) RunAndReturn(run func(ApiUploadBomRequest) (*BomUploadResponse, *http.Response, error)) *MockBomAPI_UploadBomExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBomAPI creates a new instance of MockBomAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBomAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBomAPI {
	mock := &MockBomAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
