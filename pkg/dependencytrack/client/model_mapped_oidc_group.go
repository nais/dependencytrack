/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MappedOidcGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MappedOidcGroup{}

// MappedOidcGroup struct for MappedOidcGroup
type MappedOidcGroup struct {
	Group *OidcGroup `json:"group,omitempty"`
	Uuid string `json:"uuid"`
}

type _MappedOidcGroup MappedOidcGroup

// NewMappedOidcGroup instantiates a new MappedOidcGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappedOidcGroup(uuid string) *MappedOidcGroup {
	this := MappedOidcGroup{}
	this.Uuid = uuid
	return &this
}

// NewMappedOidcGroupWithDefaults instantiates a new MappedOidcGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappedOidcGroupWithDefaults() *MappedOidcGroup {
	this := MappedOidcGroup{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *MappedOidcGroup) GetGroup() OidcGroup {
	if o == nil || IsNil(o.Group) {
		var ret OidcGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappedOidcGroup) GetGroupOk() (*OidcGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *MappedOidcGroup) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given OidcGroup and assigns it to the Group field.
func (o *MappedOidcGroup) SetGroup(v OidcGroup) {
	o.Group = &v
}

// GetUuid returns the Uuid field value
func (o *MappedOidcGroup) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *MappedOidcGroup) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *MappedOidcGroup) SetUuid(v string) {
	o.Uuid = v
}

func (o MappedOidcGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MappedOidcGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *MappedOidcGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMappedOidcGroup := _MappedOidcGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMappedOidcGroup)

	if err != nil {
		return err
	}

	*o = MappedOidcGroup(varMappedOidcGroup)

	return err
}

type NullableMappedOidcGroup struct {
	value *MappedOidcGroup
	isSet bool
}

func (v NullableMappedOidcGroup) Get() *MappedOidcGroup {
	return v.value
}

func (v *NullableMappedOidcGroup) Set(val *MappedOidcGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMappedOidcGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMappedOidcGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappedOidcGroup(val *MappedOidcGroup) *NullableMappedOidcGroup {
	return &NullableMappedOidcGroup{value: val, isSet: true}
}

func (v NullableMappedOidcGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappedOidcGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


