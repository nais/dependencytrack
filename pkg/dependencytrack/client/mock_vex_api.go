// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockVexAPI is an autogenerated mock type for the VexAPI type
type MockVexAPI struct {
	mock.Mock
}

type MockVexAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVexAPI) EXPECT() *MockVexAPI_Expecter {
	return &MockVexAPI_Expecter{mock: &_m.Mock}
}

// ExportProjectAsCycloneDx1 provides a mock function with given fields: ctx, uuid
func (_m *MockVexAPI) ExportProjectAsCycloneDx1(ctx context.Context, uuid string) ApiExportProjectAsCycloneDx1Request {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ExportProjectAsCycloneDx1")
	}

	var r0 ApiExportProjectAsCycloneDx1Request
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiExportProjectAsCycloneDx1Request); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiExportProjectAsCycloneDx1Request)
	}

	return r0
}

// MockVexAPI_ExportProjectAsCycloneDx1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportProjectAsCycloneDx1'
type MockVexAPI_ExportProjectAsCycloneDx1_Call struct {
	*mock.Call
}

// ExportProjectAsCycloneDx1 is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockVexAPI_Expecter) ExportProjectAsCycloneDx1(ctx interface{}, uuid interface{}) *MockVexAPI_ExportProjectAsCycloneDx1_Call {
	return &MockVexAPI_ExportProjectAsCycloneDx1_Call{Call: _e.mock.On("ExportProjectAsCycloneDx1", ctx, uuid)}
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1_Call) Run(run func(ctx context.Context, uuid string)) *MockVexAPI_ExportProjectAsCycloneDx1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1_Call) Return(_a0 ApiExportProjectAsCycloneDx1Request) *MockVexAPI_ExportProjectAsCycloneDx1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1_Call) RunAndReturn(run func(context.Context, string) ApiExportProjectAsCycloneDx1Request) *MockVexAPI_ExportProjectAsCycloneDx1_Call {
	_c.Call.Return(run)
	return _c
}

// ExportProjectAsCycloneDx1Execute provides a mock function with given fields: r
func (_m *MockVexAPI) ExportProjectAsCycloneDx1Execute(r ApiExportProjectAsCycloneDx1Request) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ExportProjectAsCycloneDx1Execute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiExportProjectAsCycloneDx1Request) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiExportProjectAsCycloneDx1Request) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiExportProjectAsCycloneDx1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiExportProjectAsCycloneDx1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVexAPI_ExportProjectAsCycloneDx1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportProjectAsCycloneDx1Execute'
type MockVexAPI_ExportProjectAsCycloneDx1Execute_Call struct {
	*mock.Call
}

// ExportProjectAsCycloneDx1Execute is a helper method to define mock.On call
//   - r ApiExportProjectAsCycloneDx1Request
func (_e *MockVexAPI_Expecter) ExportProjectAsCycloneDx1Execute(r interface{}) *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call {
	return &MockVexAPI_ExportProjectAsCycloneDx1Execute_Call{Call: _e.mock.On("ExportProjectAsCycloneDx1Execute", r)}
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call) Run(run func(r ApiExportProjectAsCycloneDx1Request)) *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiExportProjectAsCycloneDx1Request))
	})
	return _c
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call) RunAndReturn(run func(ApiExportProjectAsCycloneDx1Request) (string, *http.Response, error)) *MockVexAPI_ExportProjectAsCycloneDx1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVex provides a mock function with given fields: ctx
func (_m *MockVexAPI) UploadVex(ctx context.Context) ApiUploadVexRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UploadVex")
	}

	var r0 ApiUploadVexRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUploadVexRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUploadVexRequest)
	}

	return r0
}

// MockVexAPI_UploadVex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVex'
type MockVexAPI_UploadVex_Call struct {
	*mock.Call
}

// UploadVex is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVexAPI_Expecter) UploadVex(ctx interface{}) *MockVexAPI_UploadVex_Call {
	return &MockVexAPI_UploadVex_Call{Call: _e.mock.On("UploadVex", ctx)}
}

func (_c *MockVexAPI_UploadVex_Call) Run(run func(ctx context.Context)) *MockVexAPI_UploadVex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVexAPI_UploadVex_Call) Return(_a0 ApiUploadVexRequest) *MockVexAPI_UploadVex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVexAPI_UploadVex_Call) RunAndReturn(run func(context.Context) ApiUploadVexRequest) *MockVexAPI_UploadVex_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVex1 provides a mock function with given fields: ctx
func (_m *MockVexAPI) UploadVex1(ctx context.Context) ApiUploadVex1Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UploadVex1")
	}

	var r0 ApiUploadVex1Request
	if rf, ok := ret.Get(0).(func(context.Context) ApiUploadVex1Request); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUploadVex1Request)
	}

	return r0
}

// MockVexAPI_UploadVex1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVex1'
type MockVexAPI_UploadVex1_Call struct {
	*mock.Call
}

// UploadVex1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVexAPI_Expecter) UploadVex1(ctx interface{}) *MockVexAPI_UploadVex1_Call {
	return &MockVexAPI_UploadVex1_Call{Call: _e.mock.On("UploadVex1", ctx)}
}

func (_c *MockVexAPI_UploadVex1_Call) Run(run func(ctx context.Context)) *MockVexAPI_UploadVex1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVexAPI_UploadVex1_Call) Return(_a0 ApiUploadVex1Request) *MockVexAPI_UploadVex1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVexAPI_UploadVex1_Call) RunAndReturn(run func(context.Context) ApiUploadVex1Request) *MockVexAPI_UploadVex1_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVex1Execute provides a mock function with given fields: r
func (_m *MockVexAPI) UploadVex1Execute(r ApiUploadVex1Request) (*BomUploadResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UploadVex1Execute")
	}

	var r0 *BomUploadResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUploadVex1Request) (*BomUploadResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUploadVex1Request) *BomUploadResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BomUploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUploadVex1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUploadVex1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVexAPI_UploadVex1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVex1Execute'
type MockVexAPI_UploadVex1Execute_Call struct {
	*mock.Call
}

// UploadVex1Execute is a helper method to define mock.On call
//   - r ApiUploadVex1Request
func (_e *MockVexAPI_Expecter) UploadVex1Execute(r interface{}) *MockVexAPI_UploadVex1Execute_Call {
	return &MockVexAPI_UploadVex1Execute_Call{Call: _e.mock.On("UploadVex1Execute", r)}
}

func (_c *MockVexAPI_UploadVex1Execute_Call) Run(run func(r ApiUploadVex1Request)) *MockVexAPI_UploadVex1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUploadVex1Request))
	})
	return _c
}

func (_c *MockVexAPI_UploadVex1Execute_Call) Return(_a0 *BomUploadResponse, _a1 *http.Response, _a2 error) *MockVexAPI_UploadVex1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVexAPI_UploadVex1Execute_Call) RunAndReturn(run func(ApiUploadVex1Request) (*BomUploadResponse, *http.Response, error)) *MockVexAPI_UploadVex1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// UploadVexExecute provides a mock function with given fields: r
func (_m *MockVexAPI) UploadVexExecute(r ApiUploadVexRequest) (*BomUploadResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UploadVexExecute")
	}

	var r0 *BomUploadResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUploadVexRequest) (*BomUploadResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUploadVexRequest) *BomUploadResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BomUploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUploadVexRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUploadVexRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVexAPI_UploadVexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UploadVexExecute'
type MockVexAPI_UploadVexExecute_Call struct {
	*mock.Call
}

// UploadVexExecute is a helper method to define mock.On call
//   - r ApiUploadVexRequest
func (_e *MockVexAPI_Expecter) UploadVexExecute(r interface{}) *MockVexAPI_UploadVexExecute_Call {
	return &MockVexAPI_UploadVexExecute_Call{Call: _e.mock.On("UploadVexExecute", r)}
}

func (_c *MockVexAPI_UploadVexExecute_Call) Run(run func(r ApiUploadVexRequest)) *MockVexAPI_UploadVexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUploadVexRequest))
	})
	return _c
}

func (_c *MockVexAPI_UploadVexExecute_Call) Return(_a0 *BomUploadResponse, _a1 *http.Response, _a2 error) *MockVexAPI_UploadVexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVexAPI_UploadVexExecute_Call) RunAndReturn(run func(ApiUploadVexRequest) (*BomUploadResponse, *http.Response, error)) *MockVexAPI_UploadVexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVexAPI creates a new instance of MockVexAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVexAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVexAPI {
	mock := &MockVexAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
