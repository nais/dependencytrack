// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockUserAPI is an autogenerated mock type for the UserAPI type
type MockUserAPI struct {
	mock.Mock
}

type MockUserAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserAPI) EXPECT() *MockUserAPI_Expecter {
	return &MockUserAPI_Expecter{mock: &_m.Mock}
}

// AddTeamToUser provides a mock function with given fields: ctx, username
func (_m *MockUserAPI) AddTeamToUser(ctx context.Context, username string) ApiAddTeamToUserRequest {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamToUser")
	}

	var r0 ApiAddTeamToUserRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiAddTeamToUserRequest); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(ApiAddTeamToUserRequest)
	}

	return r0
}

// MockUserAPI_AddTeamToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamToUser'
type MockUserAPI_AddTeamToUser_Call struct {
	*mock.Call
}

// AddTeamToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserAPI_Expecter) AddTeamToUser(ctx interface{}, username interface{}) *MockUserAPI_AddTeamToUser_Call {
	return &MockUserAPI_AddTeamToUser_Call{Call: _e.mock.On("AddTeamToUser", ctx, username)}
}

func (_c *MockUserAPI_AddTeamToUser_Call) Run(run func(ctx context.Context, username string)) *MockUserAPI_AddTeamToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserAPI_AddTeamToUser_Call) Return(_a0 ApiAddTeamToUserRequest) *MockUserAPI_AddTeamToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_AddTeamToUser_Call) RunAndReturn(run func(context.Context, string) ApiAddTeamToUserRequest) *MockUserAPI_AddTeamToUser_Call {
	_c.Call.Return(run)
	return _c
}

// AddTeamToUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) AddTeamToUserExecute(r ApiAddTeamToUserRequest) (*UserPrincipal, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AddTeamToUserExecute")
	}

	var r0 *UserPrincipal
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAddTeamToUserRequest) (*UserPrincipal, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAddTeamToUserRequest) *UserPrincipal); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserPrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAddTeamToUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAddTeamToUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_AddTeamToUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddTeamToUserExecute'
type MockUserAPI_AddTeamToUserExecute_Call struct {
	*mock.Call
}

// AddTeamToUserExecute is a helper method to define mock.On call
//   - r ApiAddTeamToUserRequest
func (_e *MockUserAPI_Expecter) AddTeamToUserExecute(r interface{}) *MockUserAPI_AddTeamToUserExecute_Call {
	return &MockUserAPI_AddTeamToUserExecute_Call{Call: _e.mock.On("AddTeamToUserExecute", r)}
}

func (_c *MockUserAPI_AddTeamToUserExecute_Call) Run(run func(r ApiAddTeamToUserRequest)) *MockUserAPI_AddTeamToUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAddTeamToUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_AddTeamToUserExecute_Call) Return(_a0 *UserPrincipal, _a1 *http.Response, _a2 error) *MockUserAPI_AddTeamToUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_AddTeamToUserExecute_Call) RunAndReturn(run func(ApiAddTeamToUserRequest) (*UserPrincipal, *http.Response, error)) *MockUserAPI_AddTeamToUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLdapUser provides a mock function with given fields: ctx
func (_m *MockUserAPI) CreateLdapUser(ctx context.Context) ApiCreateLdapUserRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateLdapUser")
	}

	var r0 ApiCreateLdapUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateLdapUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateLdapUserRequest)
	}

	return r0
}

// MockUserAPI_CreateLdapUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLdapUser'
type MockUserAPI_CreateLdapUser_Call struct {
	*mock.Call
}

// CreateLdapUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) CreateLdapUser(ctx interface{}) *MockUserAPI_CreateLdapUser_Call {
	return &MockUserAPI_CreateLdapUser_Call{Call: _e.mock.On("CreateLdapUser", ctx)}
}

func (_c *MockUserAPI_CreateLdapUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_CreateLdapUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_CreateLdapUser_Call) Return(_a0 ApiCreateLdapUserRequest) *MockUserAPI_CreateLdapUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_CreateLdapUser_Call) RunAndReturn(run func(context.Context) ApiCreateLdapUserRequest) *MockUserAPI_CreateLdapUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLdapUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) CreateLdapUserExecute(r ApiCreateLdapUserRequest) (*LdapUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateLdapUserExecute")
	}

	var r0 *LdapUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateLdapUserRequest) (*LdapUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateLdapUserRequest) *LdapUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*LdapUser)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateLdapUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateLdapUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_CreateLdapUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLdapUserExecute'
type MockUserAPI_CreateLdapUserExecute_Call struct {
	*mock.Call
}

// CreateLdapUserExecute is a helper method to define mock.On call
//   - r ApiCreateLdapUserRequest
func (_e *MockUserAPI_Expecter) CreateLdapUserExecute(r interface{}) *MockUserAPI_CreateLdapUserExecute_Call {
	return &MockUserAPI_CreateLdapUserExecute_Call{Call: _e.mock.On("CreateLdapUserExecute", r)}
}

func (_c *MockUserAPI_CreateLdapUserExecute_Call) Run(run func(r ApiCreateLdapUserRequest)) *MockUserAPI_CreateLdapUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateLdapUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_CreateLdapUserExecute_Call) Return(_a0 *LdapUser, _a1 *http.Response, _a2 error) *MockUserAPI_CreateLdapUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_CreateLdapUserExecute_Call) RunAndReturn(run func(ApiCreateLdapUserRequest) (*LdapUser, *http.Response, error)) *MockUserAPI_CreateLdapUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManagedUser provides a mock function with given fields: ctx
func (_m *MockUserAPI) CreateManagedUser(ctx context.Context) ApiCreateManagedUserRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateManagedUser")
	}

	var r0 ApiCreateManagedUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateManagedUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateManagedUserRequest)
	}

	return r0
}

// MockUserAPI_CreateManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManagedUser'
type MockUserAPI_CreateManagedUser_Call struct {
	*mock.Call
}

// CreateManagedUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) CreateManagedUser(ctx interface{}) *MockUserAPI_CreateManagedUser_Call {
	return &MockUserAPI_CreateManagedUser_Call{Call: _e.mock.On("CreateManagedUser", ctx)}
}

func (_c *MockUserAPI_CreateManagedUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_CreateManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_CreateManagedUser_Call) Return(_a0 ApiCreateManagedUserRequest) *MockUserAPI_CreateManagedUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_CreateManagedUser_Call) RunAndReturn(run func(context.Context) ApiCreateManagedUserRequest) *MockUserAPI_CreateManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateManagedUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) CreateManagedUserExecute(r ApiCreateManagedUserRequest) (*ManagedUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateManagedUserExecute")
	}

	var r0 *ManagedUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateManagedUserRequest) (*ManagedUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateManagedUserRequest) *ManagedUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagedUser)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateManagedUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateManagedUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_CreateManagedUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateManagedUserExecute'
type MockUserAPI_CreateManagedUserExecute_Call struct {
	*mock.Call
}

// CreateManagedUserExecute is a helper method to define mock.On call
//   - r ApiCreateManagedUserRequest
func (_e *MockUserAPI_Expecter) CreateManagedUserExecute(r interface{}) *MockUserAPI_CreateManagedUserExecute_Call {
	return &MockUserAPI_CreateManagedUserExecute_Call{Call: _e.mock.On("CreateManagedUserExecute", r)}
}

func (_c *MockUserAPI_CreateManagedUserExecute_Call) Run(run func(r ApiCreateManagedUserRequest)) *MockUserAPI_CreateManagedUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateManagedUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_CreateManagedUserExecute_Call) Return(_a0 *ManagedUser, _a1 *http.Response, _a2 error) *MockUserAPI_CreateManagedUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_CreateManagedUserExecute_Call) RunAndReturn(run func(ApiCreateManagedUserRequest) (*ManagedUser, *http.Response, error)) *MockUserAPI_CreateManagedUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOidcUser provides a mock function with given fields: ctx
func (_m *MockUserAPI) CreateOidcUser(ctx context.Context) ApiCreateOidcUserRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateOidcUser")
	}

	var r0 ApiCreateOidcUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateOidcUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateOidcUserRequest)
	}

	return r0
}

// MockUserAPI_CreateOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOidcUser'
type MockUserAPI_CreateOidcUser_Call struct {
	*mock.Call
}

// CreateOidcUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) CreateOidcUser(ctx interface{}) *MockUserAPI_CreateOidcUser_Call {
	return &MockUserAPI_CreateOidcUser_Call{Call: _e.mock.On("CreateOidcUser", ctx)}
}

func (_c *MockUserAPI_CreateOidcUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_CreateOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_CreateOidcUser_Call) Return(_a0 ApiCreateOidcUserRequest) *MockUserAPI_CreateOidcUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_CreateOidcUser_Call) RunAndReturn(run func(context.Context) ApiCreateOidcUserRequest) *MockUserAPI_CreateOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOidcUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) CreateOidcUserExecute(r ApiCreateOidcUserRequest) (*OidcUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateOidcUserExecute")
	}

	var r0 *OidcUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateOidcUserRequest) (*OidcUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateOidcUserRequest) *OidcUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*OidcUser)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateOidcUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateOidcUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_CreateOidcUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOidcUserExecute'
type MockUserAPI_CreateOidcUserExecute_Call struct {
	*mock.Call
}

// CreateOidcUserExecute is a helper method to define mock.On call
//   - r ApiCreateOidcUserRequest
func (_e *MockUserAPI_Expecter) CreateOidcUserExecute(r interface{}) *MockUserAPI_CreateOidcUserExecute_Call {
	return &MockUserAPI_CreateOidcUserExecute_Call{Call: _e.mock.On("CreateOidcUserExecute", r)}
}

func (_c *MockUserAPI_CreateOidcUserExecute_Call) Run(run func(r ApiCreateOidcUserRequest)) *MockUserAPI_CreateOidcUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateOidcUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_CreateOidcUserExecute_Call) Return(_a0 *OidcUser, _a1 *http.Response, _a2 error) *MockUserAPI_CreateOidcUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_CreateOidcUserExecute_Call) RunAndReturn(run func(ApiCreateOidcUserRequest) (*OidcUser, *http.Response, error)) *MockUserAPI_CreateOidcUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLdapUser provides a mock function with given fields: ctx
func (_m *MockUserAPI) DeleteLdapUser(ctx context.Context) ApiDeleteLdapUserRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLdapUser")
	}

	var r0 ApiDeleteLdapUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiDeleteLdapUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiDeleteLdapUserRequest)
	}

	return r0
}

// MockUserAPI_DeleteLdapUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLdapUser'
type MockUserAPI_DeleteLdapUser_Call struct {
	*mock.Call
}

// DeleteLdapUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) DeleteLdapUser(ctx interface{}) *MockUserAPI_DeleteLdapUser_Call {
	return &MockUserAPI_DeleteLdapUser_Call{Call: _e.mock.On("DeleteLdapUser", ctx)}
}

func (_c *MockUserAPI_DeleteLdapUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_DeleteLdapUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_DeleteLdapUser_Call) Return(_a0 ApiDeleteLdapUserRequest) *MockUserAPI_DeleteLdapUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_DeleteLdapUser_Call) RunAndReturn(run func(context.Context) ApiDeleteLdapUserRequest) *MockUserAPI_DeleteLdapUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLdapUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) DeleteLdapUserExecute(r ApiDeleteLdapUserRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLdapUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteLdapUserRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteLdapUserRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteLdapUserRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_DeleteLdapUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLdapUserExecute'
type MockUserAPI_DeleteLdapUserExecute_Call struct {
	*mock.Call
}

// DeleteLdapUserExecute is a helper method to define mock.On call
//   - r ApiDeleteLdapUserRequest
func (_e *MockUserAPI_Expecter) DeleteLdapUserExecute(r interface{}) *MockUserAPI_DeleteLdapUserExecute_Call {
	return &MockUserAPI_DeleteLdapUserExecute_Call{Call: _e.mock.On("DeleteLdapUserExecute", r)}
}

func (_c *MockUserAPI_DeleteLdapUserExecute_Call) Run(run func(r ApiDeleteLdapUserRequest)) *MockUserAPI_DeleteLdapUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteLdapUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_DeleteLdapUserExecute_Call) Return(_a0 *http.Response, _a1 error) *MockUserAPI_DeleteLdapUserExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAPI_DeleteLdapUserExecute_Call) RunAndReturn(run func(ApiDeleteLdapUserRequest) (*http.Response, error)) *MockUserAPI_DeleteLdapUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedUser provides a mock function with given fields: ctx
func (_m *MockUserAPI) DeleteManagedUser(ctx context.Context) ApiDeleteManagedUserRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedUser")
	}

	var r0 ApiDeleteManagedUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiDeleteManagedUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiDeleteManagedUserRequest)
	}

	return r0
}

// MockUserAPI_DeleteManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedUser'
type MockUserAPI_DeleteManagedUser_Call struct {
	*mock.Call
}

// DeleteManagedUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) DeleteManagedUser(ctx interface{}) *MockUserAPI_DeleteManagedUser_Call {
	return &MockUserAPI_DeleteManagedUser_Call{Call: _e.mock.On("DeleteManagedUser", ctx)}
}

func (_c *MockUserAPI_DeleteManagedUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_DeleteManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_DeleteManagedUser_Call) Return(_a0 ApiDeleteManagedUserRequest) *MockUserAPI_DeleteManagedUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_DeleteManagedUser_Call) RunAndReturn(run func(context.Context) ApiDeleteManagedUserRequest) *MockUserAPI_DeleteManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteManagedUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) DeleteManagedUserExecute(r ApiDeleteManagedUserRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteManagedUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteManagedUserRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteManagedUserRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteManagedUserRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_DeleteManagedUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteManagedUserExecute'
type MockUserAPI_DeleteManagedUserExecute_Call struct {
	*mock.Call
}

// DeleteManagedUserExecute is a helper method to define mock.On call
//   - r ApiDeleteManagedUserRequest
func (_e *MockUserAPI_Expecter) DeleteManagedUserExecute(r interface{}) *MockUserAPI_DeleteManagedUserExecute_Call {
	return &MockUserAPI_DeleteManagedUserExecute_Call{Call: _e.mock.On("DeleteManagedUserExecute", r)}
}

func (_c *MockUserAPI_DeleteManagedUserExecute_Call) Run(run func(r ApiDeleteManagedUserRequest)) *MockUserAPI_DeleteManagedUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteManagedUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_DeleteManagedUserExecute_Call) Return(_a0 *http.Response, _a1 error) *MockUserAPI_DeleteManagedUserExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAPI_DeleteManagedUserExecute_Call) RunAndReturn(run func(ApiDeleteManagedUserRequest) (*http.Response, error)) *MockUserAPI_DeleteManagedUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOidcUser provides a mock function with given fields: ctx
func (_m *MockUserAPI) DeleteOidcUser(ctx context.Context) ApiDeleteOidcUserRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOidcUser")
	}

	var r0 ApiDeleteOidcUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiDeleteOidcUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiDeleteOidcUserRequest)
	}

	return r0
}

// MockUserAPI_DeleteOidcUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOidcUser'
type MockUserAPI_DeleteOidcUser_Call struct {
	*mock.Call
}

// DeleteOidcUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) DeleteOidcUser(ctx interface{}) *MockUserAPI_DeleteOidcUser_Call {
	return &MockUserAPI_DeleteOidcUser_Call{Call: _e.mock.On("DeleteOidcUser", ctx)}
}

func (_c *MockUserAPI_DeleteOidcUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_DeleteOidcUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_DeleteOidcUser_Call) Return(_a0 ApiDeleteOidcUserRequest) *MockUserAPI_DeleteOidcUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_DeleteOidcUser_Call) RunAndReturn(run func(context.Context) ApiDeleteOidcUserRequest) *MockUserAPI_DeleteOidcUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOidcUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) DeleteOidcUserExecute(r ApiDeleteOidcUserRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOidcUserExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteOidcUserRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteOidcUserRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteOidcUserRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_DeleteOidcUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOidcUserExecute'
type MockUserAPI_DeleteOidcUserExecute_Call struct {
	*mock.Call
}

// DeleteOidcUserExecute is a helper method to define mock.On call
//   - r ApiDeleteOidcUserRequest
func (_e *MockUserAPI_Expecter) DeleteOidcUserExecute(r interface{}) *MockUserAPI_DeleteOidcUserExecute_Call {
	return &MockUserAPI_DeleteOidcUserExecute_Call{Call: _e.mock.On("DeleteOidcUserExecute", r)}
}

func (_c *MockUserAPI_DeleteOidcUserExecute_Call) Run(run func(r ApiDeleteOidcUserRequest)) *MockUserAPI_DeleteOidcUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteOidcUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_DeleteOidcUserExecute_Call) Return(_a0 *http.Response, _a1 error) *MockUserAPI_DeleteOidcUserExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAPI_DeleteOidcUserExecute_Call) RunAndReturn(run func(ApiDeleteOidcUserRequest) (*http.Response, error)) *MockUserAPI_DeleteOidcUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ForceChangePassword provides a mock function with given fields: ctx
func (_m *MockUserAPI) ForceChangePassword(ctx context.Context) ApiForceChangePasswordRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ForceChangePassword")
	}

	var r0 ApiForceChangePasswordRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiForceChangePasswordRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiForceChangePasswordRequest)
	}

	return r0
}

// MockUserAPI_ForceChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceChangePassword'
type MockUserAPI_ForceChangePassword_Call struct {
	*mock.Call
}

// ForceChangePassword is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) ForceChangePassword(ctx interface{}) *MockUserAPI_ForceChangePassword_Call {
	return &MockUserAPI_ForceChangePassword_Call{Call: _e.mock.On("ForceChangePassword", ctx)}
}

func (_c *MockUserAPI_ForceChangePassword_Call) Run(run func(ctx context.Context)) *MockUserAPI_ForceChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_ForceChangePassword_Call) Return(_a0 ApiForceChangePasswordRequest) *MockUserAPI_ForceChangePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_ForceChangePassword_Call) RunAndReturn(run func(context.Context) ApiForceChangePasswordRequest) *MockUserAPI_ForceChangePassword_Call {
	_c.Call.Return(run)
	return _c
}

// ForceChangePasswordExecute provides a mock function with given fields: r
func (_m *MockUserAPI) ForceChangePasswordExecute(r ApiForceChangePasswordRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ForceChangePasswordExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiForceChangePasswordRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiForceChangePasswordRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiForceChangePasswordRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserAPI_ForceChangePasswordExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceChangePasswordExecute'
type MockUserAPI_ForceChangePasswordExecute_Call struct {
	*mock.Call
}

// ForceChangePasswordExecute is a helper method to define mock.On call
//   - r ApiForceChangePasswordRequest
func (_e *MockUserAPI_Expecter) ForceChangePasswordExecute(r interface{}) *MockUserAPI_ForceChangePasswordExecute_Call {
	return &MockUserAPI_ForceChangePasswordExecute_Call{Call: _e.mock.On("ForceChangePasswordExecute", r)}
}

func (_c *MockUserAPI_ForceChangePasswordExecute_Call) Run(run func(r ApiForceChangePasswordRequest)) *MockUserAPI_ForceChangePasswordExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiForceChangePasswordRequest))
	})
	return _c
}

func (_c *MockUserAPI_ForceChangePasswordExecute_Call) Return(_a0 *http.Response, _a1 error) *MockUserAPI_ForceChangePasswordExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserAPI_ForceChangePasswordExecute_Call) RunAndReturn(run func(ApiForceChangePasswordRequest) (*http.Response, error)) *MockUserAPI_ForceChangePasswordExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLdapUsers provides a mock function with given fields: ctx
func (_m *MockUserAPI) GetLdapUsers(ctx context.Context) ApiGetLdapUsersRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLdapUsers")
	}

	var r0 ApiGetLdapUsersRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetLdapUsersRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetLdapUsersRequest)
	}

	return r0
}

// MockUserAPI_GetLdapUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLdapUsers'
type MockUserAPI_GetLdapUsers_Call struct {
	*mock.Call
}

// GetLdapUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetLdapUsers(ctx interface{}) *MockUserAPI_GetLdapUsers_Call {
	return &MockUserAPI_GetLdapUsers_Call{Call: _e.mock.On("GetLdapUsers", ctx)}
}

func (_c *MockUserAPI_GetLdapUsers_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetLdapUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_GetLdapUsers_Call) Return(_a0 ApiGetLdapUsersRequest) *MockUserAPI_GetLdapUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_GetLdapUsers_Call) RunAndReturn(run func(context.Context) ApiGetLdapUsersRequest) *MockUserAPI_GetLdapUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetLdapUsersExecute provides a mock function with given fields: r
func (_m *MockUserAPI) GetLdapUsersExecute(r ApiGetLdapUsersRequest) ([]LdapUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLdapUsersExecute")
	}

	var r0 []LdapUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetLdapUsersRequest) ([]LdapUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetLdapUsersRequest) []LdapUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]LdapUser)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetLdapUsersRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetLdapUsersRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_GetLdapUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLdapUsersExecute'
type MockUserAPI_GetLdapUsersExecute_Call struct {
	*mock.Call
}

// GetLdapUsersExecute is a helper method to define mock.On call
//   - r ApiGetLdapUsersRequest
func (_e *MockUserAPI_Expecter) GetLdapUsersExecute(r interface{}) *MockUserAPI_GetLdapUsersExecute_Call {
	return &MockUserAPI_GetLdapUsersExecute_Call{Call: _e.mock.On("GetLdapUsersExecute", r)}
}

func (_c *MockUserAPI_GetLdapUsersExecute_Call) Run(run func(r ApiGetLdapUsersRequest)) *MockUserAPI_GetLdapUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetLdapUsersRequest))
	})
	return _c
}

func (_c *MockUserAPI_GetLdapUsersExecute_Call) Return(_a0 []LdapUser, _a1 *http.Response, _a2 error) *MockUserAPI_GetLdapUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_GetLdapUsersExecute_Call) RunAndReturn(run func(ApiGetLdapUsersRequest) ([]LdapUser, *http.Response, error)) *MockUserAPI_GetLdapUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedUsers provides a mock function with given fields: ctx
func (_m *MockUserAPI) GetManagedUsers(ctx context.Context) ApiGetManagedUsersRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedUsers")
	}

	var r0 ApiGetManagedUsersRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetManagedUsersRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetManagedUsersRequest)
	}

	return r0
}

// MockUserAPI_GetManagedUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedUsers'
type MockUserAPI_GetManagedUsers_Call struct {
	*mock.Call
}

// GetManagedUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetManagedUsers(ctx interface{}) *MockUserAPI_GetManagedUsers_Call {
	return &MockUserAPI_GetManagedUsers_Call{Call: _e.mock.On("GetManagedUsers", ctx)}
}

func (_c *MockUserAPI_GetManagedUsers_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetManagedUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_GetManagedUsers_Call) Return(_a0 ApiGetManagedUsersRequest) *MockUserAPI_GetManagedUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_GetManagedUsers_Call) RunAndReturn(run func(context.Context) ApiGetManagedUsersRequest) *MockUserAPI_GetManagedUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetManagedUsersExecute provides a mock function with given fields: r
func (_m *MockUserAPI) GetManagedUsersExecute(r ApiGetManagedUsersRequest) ([]ManagedUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedUsersExecute")
	}

	var r0 []ManagedUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetManagedUsersRequest) ([]ManagedUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetManagedUsersRequest) []ManagedUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ManagedUser)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetManagedUsersRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetManagedUsersRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_GetManagedUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetManagedUsersExecute'
type MockUserAPI_GetManagedUsersExecute_Call struct {
	*mock.Call
}

// GetManagedUsersExecute is a helper method to define mock.On call
//   - r ApiGetManagedUsersRequest
func (_e *MockUserAPI_Expecter) GetManagedUsersExecute(r interface{}) *MockUserAPI_GetManagedUsersExecute_Call {
	return &MockUserAPI_GetManagedUsersExecute_Call{Call: _e.mock.On("GetManagedUsersExecute", r)}
}

func (_c *MockUserAPI_GetManagedUsersExecute_Call) Run(run func(r ApiGetManagedUsersRequest)) *MockUserAPI_GetManagedUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetManagedUsersRequest))
	})
	return _c
}

func (_c *MockUserAPI_GetManagedUsersExecute_Call) Return(_a0 []ManagedUser, _a1 *http.Response, _a2 error) *MockUserAPI_GetManagedUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_GetManagedUsersExecute_Call) RunAndReturn(run func(ApiGetManagedUsersRequest) ([]ManagedUser, *http.Response, error)) *MockUserAPI_GetManagedUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUsers provides a mock function with given fields: ctx
func (_m *MockUserAPI) GetOidcUsers(ctx context.Context) ApiGetOidcUsersRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUsers")
	}

	var r0 ApiGetOidcUsersRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetOidcUsersRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetOidcUsersRequest)
	}

	return r0
}

// MockUserAPI_GetOidcUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUsers'
type MockUserAPI_GetOidcUsers_Call struct {
	*mock.Call
}

// GetOidcUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetOidcUsers(ctx interface{}) *MockUserAPI_GetOidcUsers_Call {
	return &MockUserAPI_GetOidcUsers_Call{Call: _e.mock.On("GetOidcUsers", ctx)}
}

func (_c *MockUserAPI_GetOidcUsers_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetOidcUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_GetOidcUsers_Call) Return(_a0 ApiGetOidcUsersRequest) *MockUserAPI_GetOidcUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_GetOidcUsers_Call) RunAndReturn(run func(context.Context) ApiGetOidcUsersRequest) *MockUserAPI_GetOidcUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetOidcUsersExecute provides a mock function with given fields: r
func (_m *MockUserAPI) GetOidcUsersExecute(r ApiGetOidcUsersRequest) ([]OidcUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetOidcUsersExecute")
	}

	var r0 []OidcUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetOidcUsersRequest) ([]OidcUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetOidcUsersRequest) []OidcUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]OidcUser)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetOidcUsersRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetOidcUsersRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_GetOidcUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOidcUsersExecute'
type MockUserAPI_GetOidcUsersExecute_Call struct {
	*mock.Call
}

// GetOidcUsersExecute is a helper method to define mock.On call
//   - r ApiGetOidcUsersRequest
func (_e *MockUserAPI_Expecter) GetOidcUsersExecute(r interface{}) *MockUserAPI_GetOidcUsersExecute_Call {
	return &MockUserAPI_GetOidcUsersExecute_Call{Call: _e.mock.On("GetOidcUsersExecute", r)}
}

func (_c *MockUserAPI_GetOidcUsersExecute_Call) Run(run func(r ApiGetOidcUsersRequest)) *MockUserAPI_GetOidcUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetOidcUsersRequest))
	})
	return _c
}

func (_c *MockUserAPI_GetOidcUsersExecute_Call) Return(_a0 []OidcUser, _a1 *http.Response, _a2 error) *MockUserAPI_GetOidcUsersExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_GetOidcUsersExecute_Call) RunAndReturn(run func(ApiGetOidcUsersRequest) ([]OidcUser, *http.Response, error)) *MockUserAPI_GetOidcUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelf1 provides a mock function with given fields: ctx
func (_m *MockUserAPI) GetSelf1(ctx context.Context) ApiGetSelf1Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSelf1")
	}

	var r0 ApiGetSelf1Request
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetSelf1Request); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetSelf1Request)
	}

	return r0
}

// MockUserAPI_GetSelf1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelf1'
type MockUserAPI_GetSelf1_Call struct {
	*mock.Call
}

// GetSelf1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) GetSelf1(ctx interface{}) *MockUserAPI_GetSelf1_Call {
	return &MockUserAPI_GetSelf1_Call{Call: _e.mock.On("GetSelf1", ctx)}
}

func (_c *MockUserAPI_GetSelf1_Call) Run(run func(ctx context.Context)) *MockUserAPI_GetSelf1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_GetSelf1_Call) Return(_a0 ApiGetSelf1Request) *MockUserAPI_GetSelf1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_GetSelf1_Call) RunAndReturn(run func(context.Context) ApiGetSelf1Request) *MockUserAPI_GetSelf1_Call {
	_c.Call.Return(run)
	return _c
}

// GetSelf1Execute provides a mock function with given fields: r
func (_m *MockUserAPI) GetSelf1Execute(r ApiGetSelf1Request) (*UserPrincipal, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetSelf1Execute")
	}

	var r0 *UserPrincipal
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetSelf1Request) (*UserPrincipal, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetSelf1Request) *UserPrincipal); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserPrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetSelf1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetSelf1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_GetSelf1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSelf1Execute'
type MockUserAPI_GetSelf1Execute_Call struct {
	*mock.Call
}

// GetSelf1Execute is a helper method to define mock.On call
//   - r ApiGetSelf1Request
func (_e *MockUserAPI_Expecter) GetSelf1Execute(r interface{}) *MockUserAPI_GetSelf1Execute_Call {
	return &MockUserAPI_GetSelf1Execute_Call{Call: _e.mock.On("GetSelf1Execute", r)}
}

func (_c *MockUserAPI_GetSelf1Execute_Call) Run(run func(r ApiGetSelf1Request)) *MockUserAPI_GetSelf1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetSelf1Request))
	})
	return _c
}

func (_c *MockUserAPI_GetSelf1Execute_Call) Return(_a0 *UserPrincipal, _a1 *http.Response, _a2 error) *MockUserAPI_GetSelf1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_GetSelf1Execute_Call) RunAndReturn(run func(ApiGetSelf1Request) (*UserPrincipal, *http.Response, error)) *MockUserAPI_GetSelf1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamFromUser provides a mock function with given fields: ctx, username
func (_m *MockUserAPI) RemoveTeamFromUser(ctx context.Context, username string) ApiRemoveTeamFromUserRequest {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamFromUser")
	}

	var r0 ApiRemoveTeamFromUserRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiRemoveTeamFromUserRequest); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(ApiRemoveTeamFromUserRequest)
	}

	return r0
}

// MockUserAPI_RemoveTeamFromUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamFromUser'
type MockUserAPI_RemoveTeamFromUser_Call struct {
	*mock.Call
}

// RemoveTeamFromUser is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *MockUserAPI_Expecter) RemoveTeamFromUser(ctx interface{}, username interface{}) *MockUserAPI_RemoveTeamFromUser_Call {
	return &MockUserAPI_RemoveTeamFromUser_Call{Call: _e.mock.On("RemoveTeamFromUser", ctx, username)}
}

func (_c *MockUserAPI_RemoveTeamFromUser_Call) Run(run func(ctx context.Context, username string)) *MockUserAPI_RemoveTeamFromUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserAPI_RemoveTeamFromUser_Call) Return(_a0 ApiRemoveTeamFromUserRequest) *MockUserAPI_RemoveTeamFromUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_RemoveTeamFromUser_Call) RunAndReturn(run func(context.Context, string) ApiRemoveTeamFromUserRequest) *MockUserAPI_RemoveTeamFromUser_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveTeamFromUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) RemoveTeamFromUserExecute(r ApiRemoveTeamFromUserRequest) (*UserPrincipal, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTeamFromUserExecute")
	}

	var r0 *UserPrincipal
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiRemoveTeamFromUserRequest) (*UserPrincipal, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiRemoveTeamFromUserRequest) *UserPrincipal); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*UserPrincipal)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiRemoveTeamFromUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiRemoveTeamFromUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_RemoveTeamFromUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveTeamFromUserExecute'
type MockUserAPI_RemoveTeamFromUserExecute_Call struct {
	*mock.Call
}

// RemoveTeamFromUserExecute is a helper method to define mock.On call
//   - r ApiRemoveTeamFromUserRequest
func (_e *MockUserAPI_Expecter) RemoveTeamFromUserExecute(r interface{}) *MockUserAPI_RemoveTeamFromUserExecute_Call {
	return &MockUserAPI_RemoveTeamFromUserExecute_Call{Call: _e.mock.On("RemoveTeamFromUserExecute", r)}
}

func (_c *MockUserAPI_RemoveTeamFromUserExecute_Call) Run(run func(r ApiRemoveTeamFromUserRequest)) *MockUserAPI_RemoveTeamFromUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiRemoveTeamFromUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_RemoveTeamFromUserExecute_Call) Return(_a0 *UserPrincipal, _a1 *http.Response, _a2 error) *MockUserAPI_RemoveTeamFromUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_RemoveTeamFromUserExecute_Call) RunAndReturn(run func(ApiRemoveTeamFromUserRequest) (*UserPrincipal, *http.Response, error)) *MockUserAPI_RemoveTeamFromUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManagedUser provides a mock function with given fields: ctx
func (_m *MockUserAPI) UpdateManagedUser(ctx context.Context) ApiUpdateManagedUserRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManagedUser")
	}

	var r0 ApiUpdateManagedUserRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateManagedUserRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateManagedUserRequest)
	}

	return r0
}

// MockUserAPI_UpdateManagedUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManagedUser'
type MockUserAPI_UpdateManagedUser_Call struct {
	*mock.Call
}

// UpdateManagedUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) UpdateManagedUser(ctx interface{}) *MockUserAPI_UpdateManagedUser_Call {
	return &MockUserAPI_UpdateManagedUser_Call{Call: _e.mock.On("UpdateManagedUser", ctx)}
}

func (_c *MockUserAPI_UpdateManagedUser_Call) Run(run func(ctx context.Context)) *MockUserAPI_UpdateManagedUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_UpdateManagedUser_Call) Return(_a0 ApiUpdateManagedUserRequest) *MockUserAPI_UpdateManagedUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_UpdateManagedUser_Call) RunAndReturn(run func(context.Context) ApiUpdateManagedUserRequest) *MockUserAPI_UpdateManagedUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateManagedUserExecute provides a mock function with given fields: r
func (_m *MockUserAPI) UpdateManagedUserExecute(r ApiUpdateManagedUserRequest) (*ManagedUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateManagedUserExecute")
	}

	var r0 *ManagedUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateManagedUserRequest) (*ManagedUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateManagedUserRequest) *ManagedUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagedUser)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateManagedUserRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateManagedUserRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_UpdateManagedUserExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateManagedUserExecute'
type MockUserAPI_UpdateManagedUserExecute_Call struct {
	*mock.Call
}

// UpdateManagedUserExecute is a helper method to define mock.On call
//   - r ApiUpdateManagedUserRequest
func (_e *MockUserAPI_Expecter) UpdateManagedUserExecute(r interface{}) *MockUserAPI_UpdateManagedUserExecute_Call {
	return &MockUserAPI_UpdateManagedUserExecute_Call{Call: _e.mock.On("UpdateManagedUserExecute", r)}
}

func (_c *MockUserAPI_UpdateManagedUserExecute_Call) Run(run func(r ApiUpdateManagedUserRequest)) *MockUserAPI_UpdateManagedUserExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateManagedUserRequest))
	})
	return _c
}

func (_c *MockUserAPI_UpdateManagedUserExecute_Call) Return(_a0 *ManagedUser, _a1 *http.Response, _a2 error) *MockUserAPI_UpdateManagedUserExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_UpdateManagedUserExecute_Call) RunAndReturn(run func(ApiUpdateManagedUserRequest) (*ManagedUser, *http.Response, error)) *MockUserAPI_UpdateManagedUserExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSelf provides a mock function with given fields: ctx
func (_m *MockUserAPI) UpdateSelf(ctx context.Context) ApiUpdateSelfRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSelf")
	}

	var r0 ApiUpdateSelfRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateSelfRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateSelfRequest)
	}

	return r0
}

// MockUserAPI_UpdateSelf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSelf'
type MockUserAPI_UpdateSelf_Call struct {
	*mock.Call
}

// UpdateSelf is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) UpdateSelf(ctx interface{}) *MockUserAPI_UpdateSelf_Call {
	return &MockUserAPI_UpdateSelf_Call{Call: _e.mock.On("UpdateSelf", ctx)}
}

func (_c *MockUserAPI_UpdateSelf_Call) Run(run func(ctx context.Context)) *MockUserAPI_UpdateSelf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_UpdateSelf_Call) Return(_a0 ApiUpdateSelfRequest) *MockUserAPI_UpdateSelf_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_UpdateSelf_Call) RunAndReturn(run func(context.Context) ApiUpdateSelfRequest) *MockUserAPI_UpdateSelf_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSelfExecute provides a mock function with given fields: r
func (_m *MockUserAPI) UpdateSelfExecute(r ApiUpdateSelfRequest) (*ManagedUser, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSelfExecute")
	}

	var r0 *ManagedUser
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateSelfRequest) (*ManagedUser, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateSelfRequest) *ManagedUser); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ManagedUser)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateSelfRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateSelfRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_UpdateSelfExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSelfExecute'
type MockUserAPI_UpdateSelfExecute_Call struct {
	*mock.Call
}

// UpdateSelfExecute is a helper method to define mock.On call
//   - r ApiUpdateSelfRequest
func (_e *MockUserAPI_Expecter) UpdateSelfExecute(r interface{}) *MockUserAPI_UpdateSelfExecute_Call {
	return &MockUserAPI_UpdateSelfExecute_Call{Call: _e.mock.On("UpdateSelfExecute", r)}
}

func (_c *MockUserAPI_UpdateSelfExecute_Call) Run(run func(r ApiUpdateSelfRequest)) *MockUserAPI_UpdateSelfExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateSelfRequest))
	})
	return _c
}

func (_c *MockUserAPI_UpdateSelfExecute_Call) Return(_a0 *ManagedUser, _a1 *http.Response, _a2 error) *MockUserAPI_UpdateSelfExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_UpdateSelfExecute_Call) RunAndReturn(run func(ApiUpdateSelfRequest) (*ManagedUser, *http.Response, error)) *MockUserAPI_UpdateSelfExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateCredentials provides a mock function with given fields: ctx
func (_m *MockUserAPI) ValidateCredentials(ctx context.Context) ApiValidateCredentialsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCredentials")
	}

	var r0 ApiValidateCredentialsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiValidateCredentialsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiValidateCredentialsRequest)
	}

	return r0
}

// MockUserAPI_ValidateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCredentials'
type MockUserAPI_ValidateCredentials_Call struct {
	*mock.Call
}

// ValidateCredentials is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) ValidateCredentials(ctx interface{}) *MockUserAPI_ValidateCredentials_Call {
	return &MockUserAPI_ValidateCredentials_Call{Call: _e.mock.On("ValidateCredentials", ctx)}
}

func (_c *MockUserAPI_ValidateCredentials_Call) Run(run func(ctx context.Context)) *MockUserAPI_ValidateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_ValidateCredentials_Call) Return(_a0 ApiValidateCredentialsRequest) *MockUserAPI_ValidateCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_ValidateCredentials_Call) RunAndReturn(run func(context.Context) ApiValidateCredentialsRequest) *MockUserAPI_ValidateCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateCredentialsExecute provides a mock function with given fields: r
func (_m *MockUserAPI) ValidateCredentialsExecute(r ApiValidateCredentialsRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ValidateCredentialsExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiValidateCredentialsRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiValidateCredentialsRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiValidateCredentialsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiValidateCredentialsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_ValidateCredentialsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateCredentialsExecute'
type MockUserAPI_ValidateCredentialsExecute_Call struct {
	*mock.Call
}

// ValidateCredentialsExecute is a helper method to define mock.On call
//   - r ApiValidateCredentialsRequest
func (_e *MockUserAPI_Expecter) ValidateCredentialsExecute(r interface{}) *MockUserAPI_ValidateCredentialsExecute_Call {
	return &MockUserAPI_ValidateCredentialsExecute_Call{Call: _e.mock.On("ValidateCredentialsExecute", r)}
}

func (_c *MockUserAPI_ValidateCredentialsExecute_Call) Run(run func(r ApiValidateCredentialsRequest)) *MockUserAPI_ValidateCredentialsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiValidateCredentialsRequest))
	})
	return _c
}

func (_c *MockUserAPI_ValidateCredentialsExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockUserAPI_ValidateCredentialsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_ValidateCredentialsExecute_Call) RunAndReturn(run func(ApiValidateCredentialsRequest) (string, *http.Response, error)) *MockUserAPI_ValidateCredentialsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateOidcAccessToken provides a mock function with given fields: ctx
func (_m *MockUserAPI) ValidateOidcAccessToken(ctx context.Context) ApiValidateOidcAccessTokenRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ValidateOidcAccessToken")
	}

	var r0 ApiValidateOidcAccessTokenRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiValidateOidcAccessTokenRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiValidateOidcAccessTokenRequest)
	}

	return r0
}

// MockUserAPI_ValidateOidcAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateOidcAccessToken'
type MockUserAPI_ValidateOidcAccessToken_Call struct {
	*mock.Call
}

// ValidateOidcAccessToken is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockUserAPI_Expecter) ValidateOidcAccessToken(ctx interface{}) *MockUserAPI_ValidateOidcAccessToken_Call {
	return &MockUserAPI_ValidateOidcAccessToken_Call{Call: _e.mock.On("ValidateOidcAccessToken", ctx)}
}

func (_c *MockUserAPI_ValidateOidcAccessToken_Call) Run(run func(ctx context.Context)) *MockUserAPI_ValidateOidcAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUserAPI_ValidateOidcAccessToken_Call) Return(_a0 ApiValidateOidcAccessTokenRequest) *MockUserAPI_ValidateOidcAccessToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserAPI_ValidateOidcAccessToken_Call) RunAndReturn(run func(context.Context) ApiValidateOidcAccessTokenRequest) *MockUserAPI_ValidateOidcAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateOidcAccessTokenExecute provides a mock function with given fields: r
func (_m *MockUserAPI) ValidateOidcAccessTokenExecute(r ApiValidateOidcAccessTokenRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ValidateOidcAccessTokenExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiValidateOidcAccessTokenRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiValidateOidcAccessTokenRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiValidateOidcAccessTokenRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiValidateOidcAccessTokenRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockUserAPI_ValidateOidcAccessTokenExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateOidcAccessTokenExecute'
type MockUserAPI_ValidateOidcAccessTokenExecute_Call struct {
	*mock.Call
}

// ValidateOidcAccessTokenExecute is a helper method to define mock.On call
//   - r ApiValidateOidcAccessTokenRequest
func (_e *MockUserAPI_Expecter) ValidateOidcAccessTokenExecute(r interface{}) *MockUserAPI_ValidateOidcAccessTokenExecute_Call {
	return &MockUserAPI_ValidateOidcAccessTokenExecute_Call{Call: _e.mock.On("ValidateOidcAccessTokenExecute", r)}
}

func (_c *MockUserAPI_ValidateOidcAccessTokenExecute_Call) Run(run func(r ApiValidateOidcAccessTokenRequest)) *MockUserAPI_ValidateOidcAccessTokenExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiValidateOidcAccessTokenRequest))
	})
	return _c
}

func (_c *MockUserAPI_ValidateOidcAccessTokenExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockUserAPI_ValidateOidcAccessTokenExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockUserAPI_ValidateOidcAccessTokenExecute_Call) RunAndReturn(run func(ApiValidateOidcAccessTokenRequest) (string, *http.Response, error)) *MockUserAPI_ValidateOidcAccessTokenExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserAPI creates a new instance of MockUserAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserAPI {
	mock := &MockUserAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
