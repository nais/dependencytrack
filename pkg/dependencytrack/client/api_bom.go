/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type BomAPI interface {

	/*
	ExportComponentAsCycloneDx Returns dependency metadata for a specific component in CycloneDX format

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the component to export
	@return ApiExportComponentAsCycloneDxRequest
	*/
	ExportComponentAsCycloneDx(ctx context.Context, uuid string) ApiExportComponentAsCycloneDxRequest

	// ExportComponentAsCycloneDxExecute executes the request
	//  @return string
	ExportComponentAsCycloneDxExecute(r ApiExportComponentAsCycloneDxRequest) (string, *http.Response, error)

	/*
	ExportProjectAsCycloneDx Returns dependency metadata for a project in CycloneDX format

	<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the project to export
	@return ApiExportProjectAsCycloneDxRequest
	*/
	ExportProjectAsCycloneDx(ctx context.Context, uuid string) ApiExportProjectAsCycloneDxRequest

	// ExportProjectAsCycloneDxExecute executes the request
	//  @return string
	ExportProjectAsCycloneDxExecute(r ApiExportProjectAsCycloneDxRequest) (string, *http.Response, error)

	/*
	IsTokenBeingProcessed Determines if there are any tasks associated with the token that are being processed, or in the queue to be processed.

	<p>
  This endpoint is intended to be used in conjunction with uploading a supported BOM document.
  Upon upload, a token will be returned. The token can then be queried using this endpoint to
  determine if any tasks (such as vulnerability analysis) is being performed on the BOM:
  <ul>
    <li>A value of <code>true</code> indicates processing is occurring.</li>
    <li>A value of <code>false</code> indicates that no processing is occurring for the specified token.</li>
  </ul>
  However, a value of <code>false</code> also does not confirm the token is valid,
  only that no processing is associated with the specified token.
</p>
<p>Requires permission <strong>BOM_UPLOAD</strong></p>
<p><strong>Deprecated</strong>. Use <code>/v1/event/token/{uuid}</code> instead.</p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param uuid The UUID of the token to query
	@return ApiIsTokenBeingProcessedRequest

	Deprecated
	*/
	IsTokenBeingProcessed(ctx context.Context, uuid string) ApiIsTokenBeingProcessedRequest

	// IsTokenBeingProcessedExecute executes the request
	//  @return IsTokenBeingProcessedResponse
	// Deprecated
	IsTokenBeingProcessedExecute(r ApiIsTokenBeingProcessedRequest) (*IsTokenBeingProcessedResponse, *http.Response, error)

	/*
	UploadBom Upload a supported bill of material format document

	<p>
   Expects CycloneDX and a valid project UUID. If a UUID is not specified,
   then the <code>projectName</code> and <code>projectVersion</code> must be specified.
   Optionally, if <code>autoCreate</code> is specified and <code>true</code> and the project does not exist,
   the project will be created. In this scenario, the principal making the request will
   additionally need the <strong>PORTFOLIO_MANAGEMENT</strong> or
   <strong>PROJECT_CREATION_UPLOAD</strong> permission.
 </p>
 <p>
   The BOM will be validated against the CycloneDX schema. If schema validation fails,
   a response with problem details in RFC 9457 format will be returned. In this case,
   the response's content type will be <code>application/problem+json</code>.
 </p>
 <p>Requires permission <strong>BOM_UPLOAD</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUploadBomRequest
	*/
	UploadBom(ctx context.Context) ApiUploadBomRequest

	// UploadBomExecute executes the request
	//  @return BomUploadResponse
	UploadBomExecute(r ApiUploadBomRequest) (*BomUploadResponse, *http.Response, error)

	/*
	UploadBomBase64Encoded Upload a supported bill of material format document

	<p>
  Expects CycloneDX and a valid project UUID. If a UUID is not specified,
  then the <code>projectName</code> and <code>projectVersion</code> must be specified.
  Optionally, if <code>autoCreate</code> is specified and <code>true</code> and the project does not exist,
  the project will be created. In this scenario, the principal making the request will
  additionally need the <strong>PORTFOLIO_MANAGEMENT</strong> or
  <strong>PROJECT_CREATION_UPLOAD</strong> permission.
</p>
<p>
  The BOM will be validated against the CycloneDX schema. If schema validation fails,
  a response with problem details in RFC 9457 format will be returned. In this case,
  the response's content type will be <code>application/problem+json</code>.
</p>
<p>
  The maximum allowed length of the <code>bom</code> value is 20'000'000 characters.
  When uploading large BOMs, the <code>POST</code> endpoint is preferred,
  as it does not have this limit.
</p>
<p>Requires permission <strong>BOM_UPLOAD</strong></p>

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUploadBomBase64EncodedRequest
	*/
	UploadBomBase64Encoded(ctx context.Context) ApiUploadBomBase64EncodedRequest

	// UploadBomBase64EncodedExecute executes the request
	//  @return BomUploadResponse
	UploadBomBase64EncodedExecute(r ApiUploadBomBase64EncodedRequest) (*BomUploadResponse, *http.Response, error)
}

// BomAPIService BomAPI service
type BomAPIService service

type ApiExportComponentAsCycloneDxRequest struct {
	ctx context.Context
	ApiService BomAPI
	uuid string
	format *string
}

// The format to output (defaults to JSON)
func (r ApiExportComponentAsCycloneDxRequest) Format(format string) ApiExportComponentAsCycloneDxRequest {
	r.format = &format
	return r
}

func (r ApiExportComponentAsCycloneDxRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExportComponentAsCycloneDxExecute(r)
}

/*
ExportComponentAsCycloneDx Returns dependency metadata for a specific component in CycloneDX format

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the component to export
 @return ApiExportComponentAsCycloneDxRequest
*/
func (a *BomAPIService) ExportComponentAsCycloneDx(ctx context.Context, uuid string) ApiExportComponentAsCycloneDxRequest {
	return ApiExportComponentAsCycloneDxRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return string
func (a *BomAPIService) ExportComponentAsCycloneDxExecute(r ApiExportComponentAsCycloneDxRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BomAPIService.ExportComponentAsCycloneDx")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bom/cyclonedx/component/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.cyclonedx+xml", "application/vnd.cyclonedx+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExportProjectAsCycloneDxRequest struct {
	ctx context.Context
	ApiService BomAPI
	uuid string
	format *string
	variant *string
	download *bool
}

// The format to output (defaults to JSON)
func (r ApiExportProjectAsCycloneDxRequest) Format(format string) ApiExportProjectAsCycloneDxRequest {
	r.format = &format
	return r
}

// Specifies the CycloneDX variant to export. Value options are &#39;inventory&#39; and &#39;withVulnerabilities&#39;. (defaults to &#39;inventory&#39;)
func (r ApiExportProjectAsCycloneDxRequest) Variant(variant string) ApiExportProjectAsCycloneDxRequest {
	r.variant = &variant
	return r
}

// Force the resulting BOM to be downloaded as a file (defaults to &#39;false&#39;)
func (r ApiExportProjectAsCycloneDxRequest) Download(download bool) ApiExportProjectAsCycloneDxRequest {
	r.download = &download
	return r
}

func (r ApiExportProjectAsCycloneDxRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.ExportProjectAsCycloneDxExecute(r)
}

/*
ExportProjectAsCycloneDx Returns dependency metadata for a project in CycloneDX format

<p>Requires permission <strong>VIEW_PORTFOLIO</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the project to export
 @return ApiExportProjectAsCycloneDxRequest
*/
func (a *BomAPIService) ExportProjectAsCycloneDx(ctx context.Context, uuid string) ApiExportProjectAsCycloneDxRequest {
	return ApiExportProjectAsCycloneDxRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return string
func (a *BomAPIService) ExportProjectAsCycloneDxExecute(r ApiExportProjectAsCycloneDxRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BomAPIService.ExportProjectAsCycloneDx")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bom/cyclonedx/project/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.format != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "format", r.format, "form", "")
	}
	if r.variant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "variant", r.variant, "form", "")
	}
	if r.download != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "download", r.download, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.cyclonedx+xml", "application/vnd.cyclonedx+json", "application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIsTokenBeingProcessedRequest struct {
	ctx context.Context
	ApiService BomAPI
	uuid string
}

func (r ApiIsTokenBeingProcessedRequest) Execute() (*IsTokenBeingProcessedResponse, *http.Response, error) {
	return r.ApiService.IsTokenBeingProcessedExecute(r)
}

/*
IsTokenBeingProcessed Determines if there are any tasks associated with the token that are being processed, or in the queue to be processed.

<p>
  This endpoint is intended to be used in conjunction with uploading a supported BOM document.
  Upon upload, a token will be returned. The token can then be queried using this endpoint to
  determine if any tasks (such as vulnerability analysis) is being performed on the BOM:
  <ul>
    <li>A value of <code>true</code> indicates processing is occurring.</li>
    <li>A value of <code>false</code> indicates that no processing is occurring for the specified token.</li>
  </ul>
  However, a value of <code>false</code> also does not confirm the token is valid,
  only that no processing is associated with the specified token.
</p>
<p>Requires permission <strong>BOM_UPLOAD</strong></p>
<p><strong>Deprecated</strong>. Use <code>/v1/event/token/{uuid}</code> instead.</p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid The UUID of the token to query
 @return ApiIsTokenBeingProcessedRequest

Deprecated
*/
func (a *BomAPIService) IsTokenBeingProcessed(ctx context.Context, uuid string) ApiIsTokenBeingProcessedRequest {
	return ApiIsTokenBeingProcessedRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return IsTokenBeingProcessedResponse
// Deprecated
func (a *BomAPIService) IsTokenBeingProcessedExecute(r ApiIsTokenBeingProcessedRequest) (*IsTokenBeingProcessedResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IsTokenBeingProcessedResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BomAPIService.IsTokenBeingProcessed")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bom/token/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadBomRequest struct {
	ctx context.Context
	ApiService BomAPI
	project *string
	autoCreate *bool
	projectName *string
	projectVersion *string
	projectTags *string
	parentName *string
	parentVersion *string
	parentUUID *string
	isLatest *bool
	bom *string
}

func (r ApiUploadBomRequest) Project(project string) ApiUploadBomRequest {
	r.project = &project
	return r
}

func (r ApiUploadBomRequest) AutoCreate(autoCreate bool) ApiUploadBomRequest {
	r.autoCreate = &autoCreate
	return r
}

func (r ApiUploadBomRequest) ProjectName(projectName string) ApiUploadBomRequest {
	r.projectName = &projectName
	return r
}

func (r ApiUploadBomRequest) ProjectVersion(projectVersion string) ApiUploadBomRequest {
	r.projectVersion = &projectVersion
	return r
}

func (r ApiUploadBomRequest) ProjectTags(projectTags string) ApiUploadBomRequest {
	r.projectTags = &projectTags
	return r
}

func (r ApiUploadBomRequest) ParentName(parentName string) ApiUploadBomRequest {
	r.parentName = &parentName
	return r
}

func (r ApiUploadBomRequest) ParentVersion(parentVersion string) ApiUploadBomRequest {
	r.parentVersion = &parentVersion
	return r
}

func (r ApiUploadBomRequest) ParentUUID(parentUUID string) ApiUploadBomRequest {
	r.parentUUID = &parentUUID
	return r
}

func (r ApiUploadBomRequest) IsLatest(isLatest bool) ApiUploadBomRequest {
	r.isLatest = &isLatest
	return r
}

func (r ApiUploadBomRequest) Bom(bom string) ApiUploadBomRequest {
	r.bom = &bom
	return r
}

func (r ApiUploadBomRequest) Execute() (*BomUploadResponse, *http.Response, error) {
	return r.ApiService.UploadBomExecute(r)
}

/*
UploadBom Upload a supported bill of material format document

<p>
   Expects CycloneDX and a valid project UUID. If a UUID is not specified,
   then the <code>projectName</code> and <code>projectVersion</code> must be specified.
   Optionally, if <code>autoCreate</code> is specified and <code>true</code> and the project does not exist,
   the project will be created. In this scenario, the principal making the request will
   additionally need the <strong>PORTFOLIO_MANAGEMENT</strong> or
   <strong>PROJECT_CREATION_UPLOAD</strong> permission.
 </p>
 <p>
   The BOM will be validated against the CycloneDX schema. If schema validation fails,
   a response with problem details in RFC 9457 format will be returned. In this case,
   the response's content type will be <code>application/problem+json</code>.
 </p>
 <p>Requires permission <strong>BOM_UPLOAD</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUploadBomRequest
*/
func (a *BomAPIService) UploadBom(ctx context.Context) ApiUploadBomRequest {
	return ApiUploadBomRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BomUploadResponse
func (a *BomAPIService) UploadBomExecute(r ApiUploadBomRequest) (*BomUploadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BomUploadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BomAPIService.UploadBom")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.project != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "project", r.project, "", "")
	}
	if r.autoCreate != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "autoCreate", r.autoCreate, "", "")
	}
	if r.projectName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "projectName", r.projectName, "", "")
	}
	if r.projectVersion != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "projectVersion", r.projectVersion, "", "")
	}
	if r.projectTags != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "projectTags", r.projectTags, "", "")
	}
	if r.parentName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "parentName", r.parentName, "", "")
	}
	if r.parentVersion != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "parentVersion", r.parentVersion, "", "")
	}
	if r.parentUUID != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "parentUUID", r.parentUUID, "", "")
	}
	if r.isLatest != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "isLatest", r.isLatest, "", "")
	}
	if r.bom != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "bom", r.bom, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InvalidBomProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUploadBomBase64EncodedRequest struct {
	ctx context.Context
	ApiService BomAPI
	bomSubmitRequest *BomSubmitRequest
}

func (r ApiUploadBomBase64EncodedRequest) BomSubmitRequest(bomSubmitRequest BomSubmitRequest) ApiUploadBomBase64EncodedRequest {
	r.bomSubmitRequest = &bomSubmitRequest
	return r
}

func (r ApiUploadBomBase64EncodedRequest) Execute() (*BomUploadResponse, *http.Response, error) {
	return r.ApiService.UploadBomBase64EncodedExecute(r)
}

/*
UploadBomBase64Encoded Upload a supported bill of material format document

<p>
  Expects CycloneDX and a valid project UUID. If a UUID is not specified,
  then the <code>projectName</code> and <code>projectVersion</code> must be specified.
  Optionally, if <code>autoCreate</code> is specified and <code>true</code> and the project does not exist,
  the project will be created. In this scenario, the principal making the request will
  additionally need the <strong>PORTFOLIO_MANAGEMENT</strong> or
  <strong>PROJECT_CREATION_UPLOAD</strong> permission.
</p>
<p>
  The BOM will be validated against the CycloneDX schema. If schema validation fails,
  a response with problem details in RFC 9457 format will be returned. In this case,
  the response's content type will be <code>application/problem+json</code>.
</p>
<p>
  The maximum allowed length of the <code>bom</code> value is 20'000'000 characters.
  When uploading large BOMs, the <code>POST</code> endpoint is preferred,
  as it does not have this limit.
</p>
<p>Requires permission <strong>BOM_UPLOAD</strong></p>

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUploadBomBase64EncodedRequest
*/
func (a *BomAPIService) UploadBomBase64Encoded(ctx context.Context) ApiUploadBomBase64EncodedRequest {
	return ApiUploadBomBase64EncodedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BomUploadResponse
func (a *BomAPIService) UploadBomBase64EncodedExecute(r ApiUploadBomBase64EncodedRequest) (*BomUploadResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BomUploadResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BomAPIService.UploadBomBase64Encoded")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/bom"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.bomSubmitRequest == nil {
		return localVarReturnValue, nil, reportError("bomSubmitRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.bomSubmitRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InvalidBomProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
