/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the License type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &License{}

// License struct for License
type License struct {
	LicenseGroups []LicenseGroup `json:"licenseGroups,omitempty"`
	Uuid string `json:"uuid"`
	Name string `json:"name" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
	LicenseText *string `json:"licenseText,omitempty"`
	StandardLicenseTemplate *string `json:"standardLicenseTemplate,omitempty"`
	StandardLicenseHeader *string `json:"standardLicenseHeader,omitempty"`
	LicenseComments *string `json:"licenseComments,omitempty"`
	LicenseId string `json:"licenseId" validate:"regexp=^[a-zA-Z0-9_.\\\\-+]*$"`
	IsOsiApproved *bool `json:"isOsiApproved,omitempty"`
	IsFsfLibre *bool `json:"isFsfLibre,omitempty"`
	IsDeprecatedLicenseId *bool `json:"isDeprecatedLicenseId,omitempty"`
	IsCustomLicense *bool `json:"isCustomLicense,omitempty"`
	SeeAlso []string `json:"seeAlso,omitempty"`
}

type _License License

// NewLicense instantiates a new License object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicense(uuid string, name string, licenseId string) *License {
	this := License{}
	this.Uuid = uuid
	this.Name = name
	this.LicenseId = licenseId
	return &this
}

// NewLicenseWithDefaults instantiates a new License object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseWithDefaults() *License {
	this := License{}
	return &this
}

// GetLicenseGroups returns the LicenseGroups field value if set, zero value otherwise.
func (o *License) GetLicenseGroups() []LicenseGroup {
	if o == nil || IsNil(o.LicenseGroups) {
		var ret []LicenseGroup
		return ret
	}
	return o.LicenseGroups
}

// GetLicenseGroupsOk returns a tuple with the LicenseGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetLicenseGroupsOk() ([]LicenseGroup, bool) {
	if o == nil || IsNil(o.LicenseGroups) {
		return nil, false
	}
	return o.LicenseGroups, true
}

// HasLicenseGroups returns a boolean if a field has been set.
func (o *License) HasLicenseGroups() bool {
	if o != nil && !IsNil(o.LicenseGroups) {
		return true
	}

	return false
}

// SetLicenseGroups gets a reference to the given []LicenseGroup and assigns it to the LicenseGroups field.
func (o *License) SetLicenseGroups(v []LicenseGroup) {
	o.LicenseGroups = v
}

// GetUuid returns the Uuid field value
func (o *License) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *License) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *License) SetUuid(v string) {
	o.Uuid = v
}

// GetName returns the Name field value
func (o *License) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *License) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *License) SetName(v string) {
	o.Name = v
}

// GetLicenseText returns the LicenseText field value if set, zero value otherwise.
func (o *License) GetLicenseText() string {
	if o == nil || IsNil(o.LicenseText) {
		var ret string
		return ret
	}
	return *o.LicenseText
}

// GetLicenseTextOk returns a tuple with the LicenseText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetLicenseTextOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseText) {
		return nil, false
	}
	return o.LicenseText, true
}

// HasLicenseText returns a boolean if a field has been set.
func (o *License) HasLicenseText() bool {
	if o != nil && !IsNil(o.LicenseText) {
		return true
	}

	return false
}

// SetLicenseText gets a reference to the given string and assigns it to the LicenseText field.
func (o *License) SetLicenseText(v string) {
	o.LicenseText = &v
}

// GetStandardLicenseTemplate returns the StandardLicenseTemplate field value if set, zero value otherwise.
func (o *License) GetStandardLicenseTemplate() string {
	if o == nil || IsNil(o.StandardLicenseTemplate) {
		var ret string
		return ret
	}
	return *o.StandardLicenseTemplate
}

// GetStandardLicenseTemplateOk returns a tuple with the StandardLicenseTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetStandardLicenseTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.StandardLicenseTemplate) {
		return nil, false
	}
	return o.StandardLicenseTemplate, true
}

// HasStandardLicenseTemplate returns a boolean if a field has been set.
func (o *License) HasStandardLicenseTemplate() bool {
	if o != nil && !IsNil(o.StandardLicenseTemplate) {
		return true
	}

	return false
}

// SetStandardLicenseTemplate gets a reference to the given string and assigns it to the StandardLicenseTemplate field.
func (o *License) SetStandardLicenseTemplate(v string) {
	o.StandardLicenseTemplate = &v
}

// GetStandardLicenseHeader returns the StandardLicenseHeader field value if set, zero value otherwise.
func (o *License) GetStandardLicenseHeader() string {
	if o == nil || IsNil(o.StandardLicenseHeader) {
		var ret string
		return ret
	}
	return *o.StandardLicenseHeader
}

// GetStandardLicenseHeaderOk returns a tuple with the StandardLicenseHeader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetStandardLicenseHeaderOk() (*string, bool) {
	if o == nil || IsNil(o.StandardLicenseHeader) {
		return nil, false
	}
	return o.StandardLicenseHeader, true
}

// HasStandardLicenseHeader returns a boolean if a field has been set.
func (o *License) HasStandardLicenseHeader() bool {
	if o != nil && !IsNil(o.StandardLicenseHeader) {
		return true
	}

	return false
}

// SetStandardLicenseHeader gets a reference to the given string and assigns it to the StandardLicenseHeader field.
func (o *License) SetStandardLicenseHeader(v string) {
	o.StandardLicenseHeader = &v
}

// GetLicenseComments returns the LicenseComments field value if set, zero value otherwise.
func (o *License) GetLicenseComments() string {
	if o == nil || IsNil(o.LicenseComments) {
		var ret string
		return ret
	}
	return *o.LicenseComments
}

// GetLicenseCommentsOk returns a tuple with the LicenseComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetLicenseCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseComments) {
		return nil, false
	}
	return o.LicenseComments, true
}

// HasLicenseComments returns a boolean if a field has been set.
func (o *License) HasLicenseComments() bool {
	if o != nil && !IsNil(o.LicenseComments) {
		return true
	}

	return false
}

// SetLicenseComments gets a reference to the given string and assigns it to the LicenseComments field.
func (o *License) SetLicenseComments(v string) {
	o.LicenseComments = &v
}

// GetLicenseId returns the LicenseId field value
func (o *License) GetLicenseId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseId
}

// GetLicenseIdOk returns a tuple with the LicenseId field value
// and a boolean to check if the value has been set.
func (o *License) GetLicenseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseId, true
}

// SetLicenseId sets field value
func (o *License) SetLicenseId(v string) {
	o.LicenseId = v
}

// GetIsOsiApproved returns the IsOsiApproved field value if set, zero value otherwise.
func (o *License) GetIsOsiApproved() bool {
	if o == nil || IsNil(o.IsOsiApproved) {
		var ret bool
		return ret
	}
	return *o.IsOsiApproved
}

// GetIsOsiApprovedOk returns a tuple with the IsOsiApproved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetIsOsiApprovedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOsiApproved) {
		return nil, false
	}
	return o.IsOsiApproved, true
}

// HasIsOsiApproved returns a boolean if a field has been set.
func (o *License) HasIsOsiApproved() bool {
	if o != nil && !IsNil(o.IsOsiApproved) {
		return true
	}

	return false
}

// SetIsOsiApproved gets a reference to the given bool and assigns it to the IsOsiApproved field.
func (o *License) SetIsOsiApproved(v bool) {
	o.IsOsiApproved = &v
}

// GetIsFsfLibre returns the IsFsfLibre field value if set, zero value otherwise.
func (o *License) GetIsFsfLibre() bool {
	if o == nil || IsNil(o.IsFsfLibre) {
		var ret bool
		return ret
	}
	return *o.IsFsfLibre
}

// GetIsFsfLibreOk returns a tuple with the IsFsfLibre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetIsFsfLibreOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFsfLibre) {
		return nil, false
	}
	return o.IsFsfLibre, true
}

// HasIsFsfLibre returns a boolean if a field has been set.
func (o *License) HasIsFsfLibre() bool {
	if o != nil && !IsNil(o.IsFsfLibre) {
		return true
	}

	return false
}

// SetIsFsfLibre gets a reference to the given bool and assigns it to the IsFsfLibre field.
func (o *License) SetIsFsfLibre(v bool) {
	o.IsFsfLibre = &v
}

// GetIsDeprecatedLicenseId returns the IsDeprecatedLicenseId field value if set, zero value otherwise.
func (o *License) GetIsDeprecatedLicenseId() bool {
	if o == nil || IsNil(o.IsDeprecatedLicenseId) {
		var ret bool
		return ret
	}
	return *o.IsDeprecatedLicenseId
}

// GetIsDeprecatedLicenseIdOk returns a tuple with the IsDeprecatedLicenseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetIsDeprecatedLicenseIdOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeprecatedLicenseId) {
		return nil, false
	}
	return o.IsDeprecatedLicenseId, true
}

// HasIsDeprecatedLicenseId returns a boolean if a field has been set.
func (o *License) HasIsDeprecatedLicenseId() bool {
	if o != nil && !IsNil(o.IsDeprecatedLicenseId) {
		return true
	}

	return false
}

// SetIsDeprecatedLicenseId gets a reference to the given bool and assigns it to the IsDeprecatedLicenseId field.
func (o *License) SetIsDeprecatedLicenseId(v bool) {
	o.IsDeprecatedLicenseId = &v
}

// GetIsCustomLicense returns the IsCustomLicense field value if set, zero value otherwise.
func (o *License) GetIsCustomLicense() bool {
	if o == nil || IsNil(o.IsCustomLicense) {
		var ret bool
		return ret
	}
	return *o.IsCustomLicense
}

// GetIsCustomLicenseOk returns a tuple with the IsCustomLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetIsCustomLicenseOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustomLicense) {
		return nil, false
	}
	return o.IsCustomLicense, true
}

// HasIsCustomLicense returns a boolean if a field has been set.
func (o *License) HasIsCustomLicense() bool {
	if o != nil && !IsNil(o.IsCustomLicense) {
		return true
	}

	return false
}

// SetIsCustomLicense gets a reference to the given bool and assigns it to the IsCustomLicense field.
func (o *License) SetIsCustomLicense(v bool) {
	o.IsCustomLicense = &v
}

// GetSeeAlso returns the SeeAlso field value if set, zero value otherwise.
func (o *License) GetSeeAlso() []string {
	if o == nil || IsNil(o.SeeAlso) {
		var ret []string
		return ret
	}
	return o.SeeAlso
}

// GetSeeAlsoOk returns a tuple with the SeeAlso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *License) GetSeeAlsoOk() ([]string, bool) {
	if o == nil || IsNil(o.SeeAlso) {
		return nil, false
	}
	return o.SeeAlso, true
}

// HasSeeAlso returns a boolean if a field has been set.
func (o *License) HasSeeAlso() bool {
	if o != nil && !IsNil(o.SeeAlso) {
		return true
	}

	return false
}

// SetSeeAlso gets a reference to the given []string and assigns it to the SeeAlso field.
func (o *License) SetSeeAlso(v []string) {
	o.SeeAlso = v
}

func (o License) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o License) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LicenseGroups) {
		toSerialize["licenseGroups"] = o.LicenseGroups
	}
	toSerialize["uuid"] = o.Uuid
	toSerialize["name"] = o.Name
	if !IsNil(o.LicenseText) {
		toSerialize["licenseText"] = o.LicenseText
	}
	if !IsNil(o.StandardLicenseTemplate) {
		toSerialize["standardLicenseTemplate"] = o.StandardLicenseTemplate
	}
	if !IsNil(o.StandardLicenseHeader) {
		toSerialize["standardLicenseHeader"] = o.StandardLicenseHeader
	}
	if !IsNil(o.LicenseComments) {
		toSerialize["licenseComments"] = o.LicenseComments
	}
	toSerialize["licenseId"] = o.LicenseId
	if !IsNil(o.IsOsiApproved) {
		toSerialize["isOsiApproved"] = o.IsOsiApproved
	}
	if !IsNil(o.IsFsfLibre) {
		toSerialize["isFsfLibre"] = o.IsFsfLibre
	}
	if !IsNil(o.IsDeprecatedLicenseId) {
		toSerialize["isDeprecatedLicenseId"] = o.IsDeprecatedLicenseId
	}
	if !IsNil(o.IsCustomLicense) {
		toSerialize["isCustomLicense"] = o.IsCustomLicense
	}
	if !IsNil(o.SeeAlso) {
		toSerialize["seeAlso"] = o.SeeAlso
	}
	return toSerialize, nil
}

func (o *License) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
		"name",
		"licenseId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLicense := _License{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLicense)

	if err != nil {
		return err
	}

	*o = License(varLicense)

	return err
}

type NullableLicense struct {
	value *License
	isSet bool
}

func (v NullableLicense) Get() *License {
	return v.value
}

func (v *NullableLicense) Set(val *License) {
	v.value = val
	v.isSet = true
}

func (v NullableLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicense(val *License) *NullableLicense {
	return &NullableLicense{value: val, isSet: true}
}

func (v NullableLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


