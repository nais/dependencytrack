// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockSearchAPI is an autogenerated mock type for the SearchAPI type
type MockSearchAPI struct {
	mock.Mock
}

type MockSearchAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSearchAPI) EXPECT() *MockSearchAPI_Expecter {
	return &MockSearchAPI_Expecter{mock: &_m.Mock}
}

// AggregateSearch provides a mock function with given fields: ctx
func (_m *MockSearchAPI) AggregateSearch(ctx context.Context) ApiAggregateSearchRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for AggregateSearch")
	}

	var r0 ApiAggregateSearchRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiAggregateSearchRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiAggregateSearchRequest)
	}

	return r0
}

// MockSearchAPI_AggregateSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateSearch'
type MockSearchAPI_AggregateSearch_Call struct {
	*mock.Call
}

// AggregateSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) AggregateSearch(ctx interface{}) *MockSearchAPI_AggregateSearch_Call {
	return &MockSearchAPI_AggregateSearch_Call{Call: _e.mock.On("AggregateSearch", ctx)}
}

func (_c *MockSearchAPI_AggregateSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_AggregateSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchAPI_AggregateSearch_Call) Return(_a0 ApiAggregateSearchRequest) *MockSearchAPI_AggregateSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchAPI_AggregateSearch_Call) RunAndReturn(run func(context.Context) ApiAggregateSearchRequest) *MockSearchAPI_AggregateSearch_Call {
	_c.Call.Return(run)
	return _c
}

// AggregateSearchExecute provides a mock function with given fields: r
func (_m *MockSearchAPI) AggregateSearchExecute(r ApiAggregateSearchRequest) (*SearchResult, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AggregateSearchExecute")
	}

	var r0 *SearchResult
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAggregateSearchRequest) (*SearchResult, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAggregateSearchRequest) *SearchResult); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAggregateSearchRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAggregateSearchRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSearchAPI_AggregateSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AggregateSearchExecute'
type MockSearchAPI_AggregateSearchExecute_Call struct {
	*mock.Call
}

// AggregateSearchExecute is a helper method to define mock.On call
//   - r ApiAggregateSearchRequest
func (_e *MockSearchAPI_Expecter) AggregateSearchExecute(r interface{}) *MockSearchAPI_AggregateSearchExecute_Call {
	return &MockSearchAPI_AggregateSearchExecute_Call{Call: _e.mock.On("AggregateSearchExecute", r)}
}

func (_c *MockSearchAPI_AggregateSearchExecute_Call) Run(run func(r ApiAggregateSearchRequest)) *MockSearchAPI_AggregateSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAggregateSearchRequest))
	})
	return _c
}

func (_c *MockSearchAPI_AggregateSearchExecute_Call) Return(_a0 *SearchResult, _a1 *http.Response, _a2 error) *MockSearchAPI_AggregateSearchExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSearchAPI_AggregateSearchExecute_Call) RunAndReturn(run func(ApiAggregateSearchRequest) (*SearchResult, *http.Response, error)) *MockSearchAPI_AggregateSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ComponentSearch provides a mock function with given fields: ctx
func (_m *MockSearchAPI) ComponentSearch(ctx context.Context) ApiComponentSearchRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ComponentSearch")
	}

	var r0 ApiComponentSearchRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiComponentSearchRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiComponentSearchRequest)
	}

	return r0
}

// MockSearchAPI_ComponentSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComponentSearch'
type MockSearchAPI_ComponentSearch_Call struct {
	*mock.Call
}

// ComponentSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) ComponentSearch(ctx interface{}) *MockSearchAPI_ComponentSearch_Call {
	return &MockSearchAPI_ComponentSearch_Call{Call: _e.mock.On("ComponentSearch", ctx)}
}

func (_c *MockSearchAPI_ComponentSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_ComponentSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchAPI_ComponentSearch_Call) Return(_a0 ApiComponentSearchRequest) *MockSearchAPI_ComponentSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchAPI_ComponentSearch_Call) RunAndReturn(run func(context.Context) ApiComponentSearchRequest) *MockSearchAPI_ComponentSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ComponentSearchExecute provides a mock function with given fields: r
func (_m *MockSearchAPI) ComponentSearchExecute(r ApiComponentSearchRequest) (*SearchResult, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ComponentSearchExecute")
	}

	var r0 *SearchResult
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiComponentSearchRequest) (*SearchResult, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiComponentSearchRequest) *SearchResult); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiComponentSearchRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiComponentSearchRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSearchAPI_ComponentSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ComponentSearchExecute'
type MockSearchAPI_ComponentSearchExecute_Call struct {
	*mock.Call
}

// ComponentSearchExecute is a helper method to define mock.On call
//   - r ApiComponentSearchRequest
func (_e *MockSearchAPI_Expecter) ComponentSearchExecute(r interface{}) *MockSearchAPI_ComponentSearchExecute_Call {
	return &MockSearchAPI_ComponentSearchExecute_Call{Call: _e.mock.On("ComponentSearchExecute", r)}
}

func (_c *MockSearchAPI_ComponentSearchExecute_Call) Run(run func(r ApiComponentSearchRequest)) *MockSearchAPI_ComponentSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiComponentSearchRequest))
	})
	return _c
}

func (_c *MockSearchAPI_ComponentSearchExecute_Call) Return(_a0 *SearchResult, _a1 *http.Response, _a2 error) *MockSearchAPI_ComponentSearchExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSearchAPI_ComponentSearchExecute_Call) RunAndReturn(run func(ApiComponentSearchRequest) (*SearchResult, *http.Response, error)) *MockSearchAPI_ComponentSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// LicenseSearch provides a mock function with given fields: ctx
func (_m *MockSearchAPI) LicenseSearch(ctx context.Context) ApiLicenseSearchRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for LicenseSearch")
	}

	var r0 ApiLicenseSearchRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiLicenseSearchRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiLicenseSearchRequest)
	}

	return r0
}

// MockSearchAPI_LicenseSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LicenseSearch'
type MockSearchAPI_LicenseSearch_Call struct {
	*mock.Call
}

// LicenseSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) LicenseSearch(ctx interface{}) *MockSearchAPI_LicenseSearch_Call {
	return &MockSearchAPI_LicenseSearch_Call{Call: _e.mock.On("LicenseSearch", ctx)}
}

func (_c *MockSearchAPI_LicenseSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_LicenseSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchAPI_LicenseSearch_Call) Return(_a0 ApiLicenseSearchRequest) *MockSearchAPI_LicenseSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchAPI_LicenseSearch_Call) RunAndReturn(run func(context.Context) ApiLicenseSearchRequest) *MockSearchAPI_LicenseSearch_Call {
	_c.Call.Return(run)
	return _c
}

// LicenseSearchExecute provides a mock function with given fields: r
func (_m *MockSearchAPI) LicenseSearchExecute(r ApiLicenseSearchRequest) (*SearchResult, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for LicenseSearchExecute")
	}

	var r0 *SearchResult
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiLicenseSearchRequest) (*SearchResult, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiLicenseSearchRequest) *SearchResult); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiLicenseSearchRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiLicenseSearchRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSearchAPI_LicenseSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LicenseSearchExecute'
type MockSearchAPI_LicenseSearchExecute_Call struct {
	*mock.Call
}

// LicenseSearchExecute is a helper method to define mock.On call
//   - r ApiLicenseSearchRequest
func (_e *MockSearchAPI_Expecter) LicenseSearchExecute(r interface{}) *MockSearchAPI_LicenseSearchExecute_Call {
	return &MockSearchAPI_LicenseSearchExecute_Call{Call: _e.mock.On("LicenseSearchExecute", r)}
}

func (_c *MockSearchAPI_LicenseSearchExecute_Call) Run(run func(r ApiLicenseSearchRequest)) *MockSearchAPI_LicenseSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiLicenseSearchRequest))
	})
	return _c
}

func (_c *MockSearchAPI_LicenseSearchExecute_Call) Return(_a0 *SearchResult, _a1 *http.Response, _a2 error) *MockSearchAPI_LicenseSearchExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSearchAPI_LicenseSearchExecute_Call) RunAndReturn(run func(ApiLicenseSearchRequest) (*SearchResult, *http.Response, error)) *MockSearchAPI_LicenseSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectSearch provides a mock function with given fields: ctx
func (_m *MockSearchAPI) ProjectSearch(ctx context.Context) ApiProjectSearchRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ProjectSearch")
	}

	var r0 ApiProjectSearchRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiProjectSearchRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiProjectSearchRequest)
	}

	return r0
}

// MockSearchAPI_ProjectSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectSearch'
type MockSearchAPI_ProjectSearch_Call struct {
	*mock.Call
}

// ProjectSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) ProjectSearch(ctx interface{}) *MockSearchAPI_ProjectSearch_Call {
	return &MockSearchAPI_ProjectSearch_Call{Call: _e.mock.On("ProjectSearch", ctx)}
}

func (_c *MockSearchAPI_ProjectSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_ProjectSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchAPI_ProjectSearch_Call) Return(_a0 ApiProjectSearchRequest) *MockSearchAPI_ProjectSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchAPI_ProjectSearch_Call) RunAndReturn(run func(context.Context) ApiProjectSearchRequest) *MockSearchAPI_ProjectSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ProjectSearchExecute provides a mock function with given fields: r
func (_m *MockSearchAPI) ProjectSearchExecute(r ApiProjectSearchRequest) (*SearchResult, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ProjectSearchExecute")
	}

	var r0 *SearchResult
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiProjectSearchRequest) (*SearchResult, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiProjectSearchRequest) *SearchResult); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiProjectSearchRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiProjectSearchRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSearchAPI_ProjectSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectSearchExecute'
type MockSearchAPI_ProjectSearchExecute_Call struct {
	*mock.Call
}

// ProjectSearchExecute is a helper method to define mock.On call
//   - r ApiProjectSearchRequest
func (_e *MockSearchAPI_Expecter) ProjectSearchExecute(r interface{}) *MockSearchAPI_ProjectSearchExecute_Call {
	return &MockSearchAPI_ProjectSearchExecute_Call{Call: _e.mock.On("ProjectSearchExecute", r)}
}

func (_c *MockSearchAPI_ProjectSearchExecute_Call) Run(run func(r ApiProjectSearchRequest)) *MockSearchAPI_ProjectSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiProjectSearchRequest))
	})
	return _c
}

func (_c *MockSearchAPI_ProjectSearchExecute_Call) Return(_a0 *SearchResult, _a1 *http.Response, _a2 error) *MockSearchAPI_ProjectSearchExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSearchAPI_ProjectSearchExecute_Call) RunAndReturn(run func(ApiProjectSearchRequest) (*SearchResult, *http.Response, error)) *MockSearchAPI_ProjectSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Reindex provides a mock function with given fields: ctx
func (_m *MockSearchAPI) Reindex(ctx context.Context) ApiReindexRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reindex")
	}

	var r0 ApiReindexRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiReindexRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiReindexRequest)
	}

	return r0
}

// MockSearchAPI_Reindex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reindex'
type MockSearchAPI_Reindex_Call struct {
	*mock.Call
}

// Reindex is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) Reindex(ctx interface{}) *MockSearchAPI_Reindex_Call {
	return &MockSearchAPI_Reindex_Call{Call: _e.mock.On("Reindex", ctx)}
}

func (_c *MockSearchAPI_Reindex_Call) Run(run func(ctx context.Context)) *MockSearchAPI_Reindex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchAPI_Reindex_Call) Return(_a0 ApiReindexRequest) *MockSearchAPI_Reindex_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchAPI_Reindex_Call) RunAndReturn(run func(context.Context) ApiReindexRequest) *MockSearchAPI_Reindex_Call {
	_c.Call.Return(run)
	return _c
}

// ReindexExecute provides a mock function with given fields: r
func (_m *MockSearchAPI) ReindexExecute(r ApiReindexRequest) (*BomUploadResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ReindexExecute")
	}

	var r0 *BomUploadResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiReindexRequest) (*BomUploadResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiReindexRequest) *BomUploadResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BomUploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiReindexRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiReindexRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSearchAPI_ReindexExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReindexExecute'
type MockSearchAPI_ReindexExecute_Call struct {
	*mock.Call
}

// ReindexExecute is a helper method to define mock.On call
//   - r ApiReindexRequest
func (_e *MockSearchAPI_Expecter) ReindexExecute(r interface{}) *MockSearchAPI_ReindexExecute_Call {
	return &MockSearchAPI_ReindexExecute_Call{Call: _e.mock.On("ReindexExecute", r)}
}

func (_c *MockSearchAPI_ReindexExecute_Call) Run(run func(r ApiReindexRequest)) *MockSearchAPI_ReindexExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiReindexRequest))
	})
	return _c
}

func (_c *MockSearchAPI_ReindexExecute_Call) Return(_a0 *BomUploadResponse, _a1 *http.Response, _a2 error) *MockSearchAPI_ReindexExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSearchAPI_ReindexExecute_Call) RunAndReturn(run func(ApiReindexRequest) (*BomUploadResponse, *http.Response, error)) *MockSearchAPI_ReindexExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceSearch provides a mock function with given fields: ctx
func (_m *MockSearchAPI) ServiceSearch(ctx context.Context) ApiServiceSearchRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ServiceSearch")
	}

	var r0 ApiServiceSearchRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiServiceSearchRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiServiceSearchRequest)
	}

	return r0
}

// MockSearchAPI_ServiceSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceSearch'
type MockSearchAPI_ServiceSearch_Call struct {
	*mock.Call
}

// ServiceSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) ServiceSearch(ctx interface{}) *MockSearchAPI_ServiceSearch_Call {
	return &MockSearchAPI_ServiceSearch_Call{Call: _e.mock.On("ServiceSearch", ctx)}
}

func (_c *MockSearchAPI_ServiceSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_ServiceSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchAPI_ServiceSearch_Call) Return(_a0 ApiServiceSearchRequest) *MockSearchAPI_ServiceSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchAPI_ServiceSearch_Call) RunAndReturn(run func(context.Context) ApiServiceSearchRequest) *MockSearchAPI_ServiceSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceSearchExecute provides a mock function with given fields: r
func (_m *MockSearchAPI) ServiceSearchExecute(r ApiServiceSearchRequest) (*SearchResult, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ServiceSearchExecute")
	}

	var r0 *SearchResult
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiServiceSearchRequest) (*SearchResult, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiServiceSearchRequest) *SearchResult); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiServiceSearchRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiServiceSearchRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSearchAPI_ServiceSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceSearchExecute'
type MockSearchAPI_ServiceSearchExecute_Call struct {
	*mock.Call
}

// ServiceSearchExecute is a helper method to define mock.On call
//   - r ApiServiceSearchRequest
func (_e *MockSearchAPI_Expecter) ServiceSearchExecute(r interface{}) *MockSearchAPI_ServiceSearchExecute_Call {
	return &MockSearchAPI_ServiceSearchExecute_Call{Call: _e.mock.On("ServiceSearchExecute", r)}
}

func (_c *MockSearchAPI_ServiceSearchExecute_Call) Run(run func(r ApiServiceSearchRequest)) *MockSearchAPI_ServiceSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiServiceSearchRequest))
	})
	return _c
}

func (_c *MockSearchAPI_ServiceSearchExecute_Call) Return(_a0 *SearchResult, _a1 *http.Response, _a2 error) *MockSearchAPI_ServiceSearchExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSearchAPI_ServiceSearchExecute_Call) RunAndReturn(run func(ApiServiceSearchRequest) (*SearchResult, *http.Response, error)) *MockSearchAPI_ServiceSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// VulnerabilitySearch provides a mock function with given fields: ctx
func (_m *MockSearchAPI) VulnerabilitySearch(ctx context.Context) ApiVulnerabilitySearchRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for VulnerabilitySearch")
	}

	var r0 ApiVulnerabilitySearchRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiVulnerabilitySearchRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiVulnerabilitySearchRequest)
	}

	return r0
}

// MockSearchAPI_VulnerabilitySearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnerabilitySearch'
type MockSearchAPI_VulnerabilitySearch_Call struct {
	*mock.Call
}

// VulnerabilitySearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) VulnerabilitySearch(ctx interface{}) *MockSearchAPI_VulnerabilitySearch_Call {
	return &MockSearchAPI_VulnerabilitySearch_Call{Call: _e.mock.On("VulnerabilitySearch", ctx)}
}

func (_c *MockSearchAPI_VulnerabilitySearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_VulnerabilitySearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchAPI_VulnerabilitySearch_Call) Return(_a0 ApiVulnerabilitySearchRequest) *MockSearchAPI_VulnerabilitySearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchAPI_VulnerabilitySearch_Call) RunAndReturn(run func(context.Context) ApiVulnerabilitySearchRequest) *MockSearchAPI_VulnerabilitySearch_Call {
	_c.Call.Return(run)
	return _c
}

// VulnerabilitySearchExecute provides a mock function with given fields: r
func (_m *MockSearchAPI) VulnerabilitySearchExecute(r ApiVulnerabilitySearchRequest) (*SearchResult, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for VulnerabilitySearchExecute")
	}

	var r0 *SearchResult
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiVulnerabilitySearchRequest) (*SearchResult, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiVulnerabilitySearchRequest) *SearchResult); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiVulnerabilitySearchRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiVulnerabilitySearchRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSearchAPI_VulnerabilitySearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnerabilitySearchExecute'
type MockSearchAPI_VulnerabilitySearchExecute_Call struct {
	*mock.Call
}

// VulnerabilitySearchExecute is a helper method to define mock.On call
//   - r ApiVulnerabilitySearchRequest
func (_e *MockSearchAPI_Expecter) VulnerabilitySearchExecute(r interface{}) *MockSearchAPI_VulnerabilitySearchExecute_Call {
	return &MockSearchAPI_VulnerabilitySearchExecute_Call{Call: _e.mock.On("VulnerabilitySearchExecute", r)}
}

func (_c *MockSearchAPI_VulnerabilitySearchExecute_Call) Run(run func(r ApiVulnerabilitySearchRequest)) *MockSearchAPI_VulnerabilitySearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiVulnerabilitySearchRequest))
	})
	return _c
}

func (_c *MockSearchAPI_VulnerabilitySearchExecute_Call) Return(_a0 *SearchResult, _a1 *http.Response, _a2 error) *MockSearchAPI_VulnerabilitySearchExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSearchAPI_VulnerabilitySearchExecute_Call) RunAndReturn(run func(ApiVulnerabilitySearchRequest) (*SearchResult, *http.Response, error)) *MockSearchAPI_VulnerabilitySearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// VulnerableSoftwareSearch provides a mock function with given fields: ctx
func (_m *MockSearchAPI) VulnerableSoftwareSearch(ctx context.Context) ApiVulnerableSoftwareSearchRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for VulnerableSoftwareSearch")
	}

	var r0 ApiVulnerableSoftwareSearchRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiVulnerableSoftwareSearchRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiVulnerableSoftwareSearchRequest)
	}

	return r0
}

// MockSearchAPI_VulnerableSoftwareSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnerableSoftwareSearch'
type MockSearchAPI_VulnerableSoftwareSearch_Call struct {
	*mock.Call
}

// VulnerableSoftwareSearch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSearchAPI_Expecter) VulnerableSoftwareSearch(ctx interface{}) *MockSearchAPI_VulnerableSoftwareSearch_Call {
	return &MockSearchAPI_VulnerableSoftwareSearch_Call{Call: _e.mock.On("VulnerableSoftwareSearch", ctx)}
}

func (_c *MockSearchAPI_VulnerableSoftwareSearch_Call) Run(run func(ctx context.Context)) *MockSearchAPI_VulnerableSoftwareSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSearchAPI_VulnerableSoftwareSearch_Call) Return(_a0 ApiVulnerableSoftwareSearchRequest) *MockSearchAPI_VulnerableSoftwareSearch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSearchAPI_VulnerableSoftwareSearch_Call) RunAndReturn(run func(context.Context) ApiVulnerableSoftwareSearchRequest) *MockSearchAPI_VulnerableSoftwareSearch_Call {
	_c.Call.Return(run)
	return _c
}

// VulnerableSoftwareSearchExecute provides a mock function with given fields: r
func (_m *MockSearchAPI) VulnerableSoftwareSearchExecute(r ApiVulnerableSoftwareSearchRequest) (*SearchResult, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for VulnerableSoftwareSearchExecute")
	}

	var r0 *SearchResult
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiVulnerableSoftwareSearchRequest) (*SearchResult, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiVulnerableSoftwareSearchRequest) *SearchResult); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiVulnerableSoftwareSearchRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiVulnerableSoftwareSearchRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockSearchAPI_VulnerableSoftwareSearchExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VulnerableSoftwareSearchExecute'
type MockSearchAPI_VulnerableSoftwareSearchExecute_Call struct {
	*mock.Call
}

// VulnerableSoftwareSearchExecute is a helper method to define mock.On call
//   - r ApiVulnerableSoftwareSearchRequest
func (_e *MockSearchAPI_Expecter) VulnerableSoftwareSearchExecute(r interface{}) *MockSearchAPI_VulnerableSoftwareSearchExecute_Call {
	return &MockSearchAPI_VulnerableSoftwareSearchExecute_Call{Call: _e.mock.On("VulnerableSoftwareSearchExecute", r)}
}

func (_c *MockSearchAPI_VulnerableSoftwareSearchExecute_Call) Run(run func(r ApiVulnerableSoftwareSearchRequest)) *MockSearchAPI_VulnerableSoftwareSearchExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiVulnerableSoftwareSearchRequest))
	})
	return _c
}

func (_c *MockSearchAPI_VulnerableSoftwareSearchExecute_Call) Return(_a0 *SearchResult, _a1 *http.Response, _a2 error) *MockSearchAPI_VulnerableSoftwareSearchExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockSearchAPI_VulnerableSoftwareSearchExecute_Call) RunAndReturn(run func(ApiVulnerableSoftwareSearchRequest) (*SearchResult, *http.Response, error)) *MockSearchAPI_VulnerableSoftwareSearchExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSearchAPI creates a new instance of MockSearchAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSearchAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSearchAPI {
	mock := &MockSearchAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
