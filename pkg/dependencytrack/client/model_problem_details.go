/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProblemDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemDetails{}

// ProblemDetails An RFC 9457 problem object
type ProblemDetails struct {
	// A URI reference that identifies the problem type
	Type *string `json:"type,omitempty"`
	// HTTP status code generated by the origin server for this occurrence of the problem
	Status int32 `json:"status"`
	// Short, human-readable summary of the problem type
	Title string `json:"title"`
	// Human-readable explanation specific to this occurrence of the problem
	Detail string `json:"detail"`
	// Reference URI that identifies the specific occurrence of the problem
	Instance *string `json:"instance,omitempty"`
}

type _ProblemDetails ProblemDetails

// NewProblemDetails instantiates a new ProblemDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemDetails(status int32, title string, detail string) *ProblemDetails {
	this := ProblemDetails{}
	this.Status = status
	this.Title = title
	this.Detail = detail
	return &this
}

// NewProblemDetailsWithDefaults instantiates a new ProblemDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemDetailsWithDefaults() *ProblemDetails {
	this := ProblemDetails{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProblemDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProblemDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProblemDetails) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value
func (o *ProblemDetails) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ProblemDetails) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ProblemDetails) SetStatus(v int32) {
	o.Status = v
}

// GetTitle returns the Title field value
func (o *ProblemDetails) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ProblemDetails) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ProblemDetails) SetTitle(v string) {
	o.Title = v
}

// GetDetail returns the Detail field value
func (o *ProblemDetails) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ProblemDetails) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ProblemDetails) SetDetail(v string) {
	o.Detail = v
}

// GetInstance returns the Instance field value if set, zero value otherwise.
func (o *ProblemDetails) GetInstance() string {
	if o == nil || IsNil(o.Instance) {
		var ret string
		return ret
	}
	return *o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProblemDetails) GetInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.Instance) {
		return nil, false
	}
	return o.Instance, true
}

// HasInstance returns a boolean if a field has been set.
func (o *ProblemDetails) HasInstance() bool {
	if o != nil && !IsNil(o.Instance) {
		return true
	}

	return false
}

// SetInstance gets a reference to the given string and assigns it to the Instance field.
func (o *ProblemDetails) SetInstance(v string) {
	o.Instance = &v
}

func (o ProblemDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["status"] = o.Status
	toSerialize["title"] = o.Title
	toSerialize["detail"] = o.Detail
	if !IsNil(o.Instance) {
		toSerialize["instance"] = o.Instance
	}
	return toSerialize, nil
}

func (o *ProblemDetails) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
		"title",
		"detail",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProblemDetails := _ProblemDetails{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProblemDetails)

	if err != nil {
		return err
	}

	*o = ProblemDetails(varProblemDetails)

	return err
}

type NullableProblemDetails struct {
	value *ProblemDetails
	isSet bool
}

func (v NullableProblemDetails) Get() *ProblemDetails {
	return v.value
}

func (v *NullableProblemDetails) Set(val *ProblemDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemDetails(val *ProblemDetails) *NullableProblemDetails {
	return &NullableProblemDetails{value: val, isSet: true}
}

func (v NullableProblemDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


