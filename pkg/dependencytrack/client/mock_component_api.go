// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockComponentAPI is an autogenerated mock type for the ComponentAPI type
type MockComponentAPI struct {
	mock.Mock
}

type MockComponentAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockComponentAPI) EXPECT() *MockComponentAPI_Expecter {
	return &MockComponentAPI_Expecter{mock: &_m.Mock}
}

// CreateComponent provides a mock function with given fields: ctx, uuid
func (_m *MockComponentAPI) CreateComponent(ctx context.Context, uuid string) ApiCreateComponentRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 ApiCreateComponentRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiCreateComponentRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiCreateComponentRequest)
	}

	return r0
}

// MockComponentAPI_CreateComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponent'
type MockComponentAPI_CreateComponent_Call struct {
	*mock.Call
}

// CreateComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentAPI_Expecter) CreateComponent(ctx interface{}, uuid interface{}) *MockComponentAPI_CreateComponent_Call {
	return &MockComponentAPI_CreateComponent_Call{Call: _e.mock.On("CreateComponent", ctx, uuid)}
}

func (_c *MockComponentAPI_CreateComponent_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentAPI_CreateComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComponentAPI_CreateComponent_Call) Return(_a0 ApiCreateComponentRequest) *MockComponentAPI_CreateComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_CreateComponent_Call) RunAndReturn(run func(context.Context, string) ApiCreateComponentRequest) *MockComponentAPI_CreateComponent_Call {
	_c.Call.Return(run)
	return _c
}

// CreateComponentExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) CreateComponentExecute(r ApiCreateComponentRequest) (*Component, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentExecute")
	}

	var r0 *Component
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateComponentRequest) (*Component, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateComponentRequest) *Component); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Component)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateComponentRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateComponentRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockComponentAPI_CreateComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateComponentExecute'
type MockComponentAPI_CreateComponentExecute_Call struct {
	*mock.Call
}

// CreateComponentExecute is a helper method to define mock.On call
//   - r ApiCreateComponentRequest
func (_e *MockComponentAPI_Expecter) CreateComponentExecute(r interface{}) *MockComponentAPI_CreateComponentExecute_Call {
	return &MockComponentAPI_CreateComponentExecute_Call{Call: _e.mock.On("CreateComponentExecute", r)}
}

func (_c *MockComponentAPI_CreateComponentExecute_Call) Run(run func(r ApiCreateComponentRequest)) *MockComponentAPI_CreateComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateComponentRequest))
	})
	return _c
}

func (_c *MockComponentAPI_CreateComponentExecute_Call) Return(_a0 *Component, _a1 *http.Response, _a2 error) *MockComponentAPI_CreateComponentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockComponentAPI_CreateComponentExecute_Call) RunAndReturn(run func(ApiCreateComponentRequest) (*Component, *http.Response, error)) *MockComponentAPI_CreateComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponent provides a mock function with given fields: ctx, uuid
func (_m *MockComponentAPI) DeleteComponent(ctx context.Context, uuid string) ApiDeleteComponentRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponent")
	}

	var r0 ApiDeleteComponentRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteComponentRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeleteComponentRequest)
	}

	return r0
}

// MockComponentAPI_DeleteComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponent'
type MockComponentAPI_DeleteComponent_Call struct {
	*mock.Call
}

// DeleteComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentAPI_Expecter) DeleteComponent(ctx interface{}, uuid interface{}) *MockComponentAPI_DeleteComponent_Call {
	return &MockComponentAPI_DeleteComponent_Call{Call: _e.mock.On("DeleteComponent", ctx, uuid)}
}

func (_c *MockComponentAPI_DeleteComponent_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentAPI_DeleteComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComponentAPI_DeleteComponent_Call) Return(_a0 ApiDeleteComponentRequest) *MockComponentAPI_DeleteComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_DeleteComponent_Call) RunAndReturn(run func(context.Context, string) ApiDeleteComponentRequest) *MockComponentAPI_DeleteComponent_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteComponentExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) DeleteComponentExecute(r ApiDeleteComponentRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponentExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteComponentRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteComponentRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteComponentRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComponentAPI_DeleteComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComponentExecute'
type MockComponentAPI_DeleteComponentExecute_Call struct {
	*mock.Call
}

// DeleteComponentExecute is a helper method to define mock.On call
//   - r ApiDeleteComponentRequest
func (_e *MockComponentAPI_Expecter) DeleteComponentExecute(r interface{}) *MockComponentAPI_DeleteComponentExecute_Call {
	return &MockComponentAPI_DeleteComponentExecute_Call{Call: _e.mock.On("DeleteComponentExecute", r)}
}

func (_c *MockComponentAPI_DeleteComponentExecute_Call) Run(run func(r ApiDeleteComponentRequest)) *MockComponentAPI_DeleteComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteComponentRequest))
	})
	return _c
}

func (_c *MockComponentAPI_DeleteComponentExecute_Call) Return(_a0 *http.Response, _a1 error) *MockComponentAPI_DeleteComponentExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComponentAPI_DeleteComponentExecute_Call) RunAndReturn(run func(ApiDeleteComponentRequest) (*http.Response, error)) *MockComponentAPI_DeleteComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComponents provides a mock function with given fields: ctx, uuid
func (_m *MockComponentAPI) GetAllComponents(ctx context.Context, uuid string) ApiGetAllComponentsRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComponents")
	}

	var r0 ApiGetAllComponentsRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetAllComponentsRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetAllComponentsRequest)
	}

	return r0
}

// MockComponentAPI_GetAllComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComponents'
type MockComponentAPI_GetAllComponents_Call struct {
	*mock.Call
}

// GetAllComponents is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentAPI_Expecter) GetAllComponents(ctx interface{}, uuid interface{}) *MockComponentAPI_GetAllComponents_Call {
	return &MockComponentAPI_GetAllComponents_Call{Call: _e.mock.On("GetAllComponents", ctx, uuid)}
}

func (_c *MockComponentAPI_GetAllComponents_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentAPI_GetAllComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComponentAPI_GetAllComponents_Call) Return(_a0 ApiGetAllComponentsRequest) *MockComponentAPI_GetAllComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_GetAllComponents_Call) RunAndReturn(run func(context.Context, string) ApiGetAllComponentsRequest) *MockComponentAPI_GetAllComponents_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllComponentsExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) GetAllComponentsExecute(r ApiGetAllComponentsRequest) ([]Component, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllComponentsExecute")
	}

	var r0 []Component
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllComponentsRequest) ([]Component, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllComponentsRequest) []Component); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Component)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllComponentsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllComponentsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockComponentAPI_GetAllComponentsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllComponentsExecute'
type MockComponentAPI_GetAllComponentsExecute_Call struct {
	*mock.Call
}

// GetAllComponentsExecute is a helper method to define mock.On call
//   - r ApiGetAllComponentsRequest
func (_e *MockComponentAPI_Expecter) GetAllComponentsExecute(r interface{}) *MockComponentAPI_GetAllComponentsExecute_Call {
	return &MockComponentAPI_GetAllComponentsExecute_Call{Call: _e.mock.On("GetAllComponentsExecute", r)}
}

func (_c *MockComponentAPI_GetAllComponentsExecute_Call) Run(run func(r ApiGetAllComponentsRequest)) *MockComponentAPI_GetAllComponentsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllComponentsRequest))
	})
	return _c
}

func (_c *MockComponentAPI_GetAllComponentsExecute_Call) Return(_a0 []Component, _a1 *http.Response, _a2 error) *MockComponentAPI_GetAllComponentsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockComponentAPI_GetAllComponentsExecute_Call) RunAndReturn(run func(ApiGetAllComponentsRequest) ([]Component, *http.Response, error)) *MockComponentAPI_GetAllComponentsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByHash provides a mock function with given fields: ctx, hash
func (_m *MockComponentAPI) GetComponentByHash(ctx context.Context, hash string) ApiGetComponentByHashRequest {
	ret := _m.Called(ctx, hash)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByHash")
	}

	var r0 ApiGetComponentByHashRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetComponentByHashRequest); ok {
		r0 = rf(ctx, hash)
	} else {
		r0 = ret.Get(0).(ApiGetComponentByHashRequest)
	}

	return r0
}

// MockComponentAPI_GetComponentByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByHash'
type MockComponentAPI_GetComponentByHash_Call struct {
	*mock.Call
}

// GetComponentByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
func (_e *MockComponentAPI_Expecter) GetComponentByHash(ctx interface{}, hash interface{}) *MockComponentAPI_GetComponentByHash_Call {
	return &MockComponentAPI_GetComponentByHash_Call{Call: _e.mock.On("GetComponentByHash", ctx, hash)}
}

func (_c *MockComponentAPI_GetComponentByHash_Call) Run(run func(ctx context.Context, hash string)) *MockComponentAPI_GetComponentByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByHash_Call) Return(_a0 ApiGetComponentByHashRequest) *MockComponentAPI_GetComponentByHash_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_GetComponentByHash_Call) RunAndReturn(run func(context.Context, string) ApiGetComponentByHashRequest) *MockComponentAPI_GetComponentByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByHashExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) GetComponentByHashExecute(r ApiGetComponentByHashRequest) ([]Component, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByHashExecute")
	}

	var r0 []Component
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetComponentByHashRequest) ([]Component, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetComponentByHashRequest) []Component); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Component)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetComponentByHashRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetComponentByHashRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockComponentAPI_GetComponentByHashExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByHashExecute'
type MockComponentAPI_GetComponentByHashExecute_Call struct {
	*mock.Call
}

// GetComponentByHashExecute is a helper method to define mock.On call
//   - r ApiGetComponentByHashRequest
func (_e *MockComponentAPI_Expecter) GetComponentByHashExecute(r interface{}) *MockComponentAPI_GetComponentByHashExecute_Call {
	return &MockComponentAPI_GetComponentByHashExecute_Call{Call: _e.mock.On("GetComponentByHashExecute", r)}
}

func (_c *MockComponentAPI_GetComponentByHashExecute_Call) Run(run func(r ApiGetComponentByHashRequest)) *MockComponentAPI_GetComponentByHashExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetComponentByHashRequest))
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByHashExecute_Call) Return(_a0 []Component, _a1 *http.Response, _a2 error) *MockComponentAPI_GetComponentByHashExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockComponentAPI_GetComponentByHashExecute_Call) RunAndReturn(run func(ApiGetComponentByHashRequest) ([]Component, *http.Response, error)) *MockComponentAPI_GetComponentByHashExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByIdentity provides a mock function with given fields: ctx
func (_m *MockComponentAPI) GetComponentByIdentity(ctx context.Context) ApiGetComponentByIdentityRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByIdentity")
	}

	var r0 ApiGetComponentByIdentityRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetComponentByIdentityRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetComponentByIdentityRequest)
	}

	return r0
}

// MockComponentAPI_GetComponentByIdentity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByIdentity'
type MockComponentAPI_GetComponentByIdentity_Call struct {
	*mock.Call
}

// GetComponentByIdentity is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockComponentAPI_Expecter) GetComponentByIdentity(ctx interface{}) *MockComponentAPI_GetComponentByIdentity_Call {
	return &MockComponentAPI_GetComponentByIdentity_Call{Call: _e.mock.On("GetComponentByIdentity", ctx)}
}

func (_c *MockComponentAPI_GetComponentByIdentity_Call) Run(run func(ctx context.Context)) *MockComponentAPI_GetComponentByIdentity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByIdentity_Call) Return(_a0 ApiGetComponentByIdentityRequest) *MockComponentAPI_GetComponentByIdentity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_GetComponentByIdentity_Call) RunAndReturn(run func(context.Context) ApiGetComponentByIdentityRequest) *MockComponentAPI_GetComponentByIdentity_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByIdentityExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) GetComponentByIdentityExecute(r ApiGetComponentByIdentityRequest) ([]Component, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByIdentityExecute")
	}

	var r0 []Component
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetComponentByIdentityRequest) ([]Component, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetComponentByIdentityRequest) []Component); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Component)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetComponentByIdentityRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetComponentByIdentityRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockComponentAPI_GetComponentByIdentityExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByIdentityExecute'
type MockComponentAPI_GetComponentByIdentityExecute_Call struct {
	*mock.Call
}

// GetComponentByIdentityExecute is a helper method to define mock.On call
//   - r ApiGetComponentByIdentityRequest
func (_e *MockComponentAPI_Expecter) GetComponentByIdentityExecute(r interface{}) *MockComponentAPI_GetComponentByIdentityExecute_Call {
	return &MockComponentAPI_GetComponentByIdentityExecute_Call{Call: _e.mock.On("GetComponentByIdentityExecute", r)}
}

func (_c *MockComponentAPI_GetComponentByIdentityExecute_Call) Run(run func(r ApiGetComponentByIdentityRequest)) *MockComponentAPI_GetComponentByIdentityExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetComponentByIdentityRequest))
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByIdentityExecute_Call) Return(_a0 []Component, _a1 *http.Response, _a2 error) *MockComponentAPI_GetComponentByIdentityExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockComponentAPI_GetComponentByIdentityExecute_Call) RunAndReturn(run func(ApiGetComponentByIdentityRequest) ([]Component, *http.Response, error)) *MockComponentAPI_GetComponentByIdentityExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByUuid provides a mock function with given fields: ctx, uuid
func (_m *MockComponentAPI) GetComponentByUuid(ctx context.Context, uuid string) ApiGetComponentByUuidRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByUuid")
	}

	var r0 ApiGetComponentByUuidRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetComponentByUuidRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetComponentByUuidRequest)
	}

	return r0
}

// MockComponentAPI_GetComponentByUuid_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByUuid'
type MockComponentAPI_GetComponentByUuid_Call struct {
	*mock.Call
}

// GetComponentByUuid is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockComponentAPI_Expecter) GetComponentByUuid(ctx interface{}, uuid interface{}) *MockComponentAPI_GetComponentByUuid_Call {
	return &MockComponentAPI_GetComponentByUuid_Call{Call: _e.mock.On("GetComponentByUuid", ctx, uuid)}
}

func (_c *MockComponentAPI_GetComponentByUuid_Call) Run(run func(ctx context.Context, uuid string)) *MockComponentAPI_GetComponentByUuid_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByUuid_Call) Return(_a0 ApiGetComponentByUuidRequest) *MockComponentAPI_GetComponentByUuid_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_GetComponentByUuid_Call) RunAndReturn(run func(context.Context, string) ApiGetComponentByUuidRequest) *MockComponentAPI_GetComponentByUuid_Call {
	_c.Call.Return(run)
	return _c
}

// GetComponentByUuidExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) GetComponentByUuidExecute(r ApiGetComponentByUuidRequest) (*Component, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentByUuidExecute")
	}

	var r0 *Component
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetComponentByUuidRequest) (*Component, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetComponentByUuidRequest) *Component); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Component)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetComponentByUuidRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetComponentByUuidRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockComponentAPI_GetComponentByUuidExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetComponentByUuidExecute'
type MockComponentAPI_GetComponentByUuidExecute_Call struct {
	*mock.Call
}

// GetComponentByUuidExecute is a helper method to define mock.On call
//   - r ApiGetComponentByUuidRequest
func (_e *MockComponentAPI_Expecter) GetComponentByUuidExecute(r interface{}) *MockComponentAPI_GetComponentByUuidExecute_Call {
	return &MockComponentAPI_GetComponentByUuidExecute_Call{Call: _e.mock.On("GetComponentByUuidExecute", r)}
}

func (_c *MockComponentAPI_GetComponentByUuidExecute_Call) Run(run func(r ApiGetComponentByUuidRequest)) *MockComponentAPI_GetComponentByUuidExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetComponentByUuidRequest))
	})
	return _c
}

func (_c *MockComponentAPI_GetComponentByUuidExecute_Call) Return(_a0 *Component, _a1 *http.Response, _a2 error) *MockComponentAPI_GetComponentByUuidExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockComponentAPI_GetComponentByUuidExecute_Call) RunAndReturn(run func(ApiGetComponentByUuidRequest) (*Component, *http.Response, error)) *MockComponentAPI_GetComponentByUuidExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyGraphForComponent provides a mock function with given fields: ctx, projectUuid, componentUuids
func (_m *MockComponentAPI) GetDependencyGraphForComponent(ctx context.Context, projectUuid string, componentUuids string) ApiGetDependencyGraphForComponentRequest {
	ret := _m.Called(ctx, projectUuid, componentUuids)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyGraphForComponent")
	}

	var r0 ApiGetDependencyGraphForComponentRequest
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ApiGetDependencyGraphForComponentRequest); ok {
		r0 = rf(ctx, projectUuid, componentUuids)
	} else {
		r0 = ret.Get(0).(ApiGetDependencyGraphForComponentRequest)
	}

	return r0
}

// MockComponentAPI_GetDependencyGraphForComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyGraphForComponent'
type MockComponentAPI_GetDependencyGraphForComponent_Call struct {
	*mock.Call
}

// GetDependencyGraphForComponent is a helper method to define mock.On call
//   - ctx context.Context
//   - projectUuid string
//   - componentUuids string
func (_e *MockComponentAPI_Expecter) GetDependencyGraphForComponent(ctx interface{}, projectUuid interface{}, componentUuids interface{}) *MockComponentAPI_GetDependencyGraphForComponent_Call {
	return &MockComponentAPI_GetDependencyGraphForComponent_Call{Call: _e.mock.On("GetDependencyGraphForComponent", ctx, projectUuid, componentUuids)}
}

func (_c *MockComponentAPI_GetDependencyGraphForComponent_Call) Run(run func(ctx context.Context, projectUuid string, componentUuids string)) *MockComponentAPI_GetDependencyGraphForComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockComponentAPI_GetDependencyGraphForComponent_Call) Return(_a0 ApiGetDependencyGraphForComponentRequest) *MockComponentAPI_GetDependencyGraphForComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_GetDependencyGraphForComponent_Call) RunAndReturn(run func(context.Context, string, string) ApiGetDependencyGraphForComponentRequest) *MockComponentAPI_GetDependencyGraphForComponent_Call {
	_c.Call.Return(run)
	return _c
}

// GetDependencyGraphForComponentExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) GetDependencyGraphForComponentExecute(r ApiGetDependencyGraphForComponentRequest) (map[string]interface{}, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetDependencyGraphForComponentExecute")
	}

	var r0 map[string]interface{}
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetDependencyGraphForComponentRequest) (map[string]interface{}, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetDependencyGraphForComponentRequest) map[string]interface{}); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetDependencyGraphForComponentRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetDependencyGraphForComponentRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockComponentAPI_GetDependencyGraphForComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDependencyGraphForComponentExecute'
type MockComponentAPI_GetDependencyGraphForComponentExecute_Call struct {
	*mock.Call
}

// GetDependencyGraphForComponentExecute is a helper method to define mock.On call
//   - r ApiGetDependencyGraphForComponentRequest
func (_e *MockComponentAPI_Expecter) GetDependencyGraphForComponentExecute(r interface{}) *MockComponentAPI_GetDependencyGraphForComponentExecute_Call {
	return &MockComponentAPI_GetDependencyGraphForComponentExecute_Call{Call: _e.mock.On("GetDependencyGraphForComponentExecute", r)}
}

func (_c *MockComponentAPI_GetDependencyGraphForComponentExecute_Call) Run(run func(r ApiGetDependencyGraphForComponentRequest)) *MockComponentAPI_GetDependencyGraphForComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetDependencyGraphForComponentRequest))
	})
	return _c
}

func (_c *MockComponentAPI_GetDependencyGraphForComponentExecute_Call) Return(_a0 map[string]interface{}, _a1 *http.Response, _a2 error) *MockComponentAPI_GetDependencyGraphForComponentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockComponentAPI_GetDependencyGraphForComponentExecute_Call) RunAndReturn(run func(ApiGetDependencyGraphForComponentRequest) (map[string]interface{}, *http.Response, error)) *MockComponentAPI_GetDependencyGraphForComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// IdentifyInternalComponents provides a mock function with given fields: ctx
func (_m *MockComponentAPI) IdentifyInternalComponents(ctx context.Context) ApiIdentifyInternalComponentsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyInternalComponents")
	}

	var r0 ApiIdentifyInternalComponentsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiIdentifyInternalComponentsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiIdentifyInternalComponentsRequest)
	}

	return r0
}

// MockComponentAPI_IdentifyInternalComponents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentifyInternalComponents'
type MockComponentAPI_IdentifyInternalComponents_Call struct {
	*mock.Call
}

// IdentifyInternalComponents is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockComponentAPI_Expecter) IdentifyInternalComponents(ctx interface{}) *MockComponentAPI_IdentifyInternalComponents_Call {
	return &MockComponentAPI_IdentifyInternalComponents_Call{Call: _e.mock.On("IdentifyInternalComponents", ctx)}
}

func (_c *MockComponentAPI_IdentifyInternalComponents_Call) Run(run func(ctx context.Context)) *MockComponentAPI_IdentifyInternalComponents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockComponentAPI_IdentifyInternalComponents_Call) Return(_a0 ApiIdentifyInternalComponentsRequest) *MockComponentAPI_IdentifyInternalComponents_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_IdentifyInternalComponents_Call) RunAndReturn(run func(context.Context) ApiIdentifyInternalComponentsRequest) *MockComponentAPI_IdentifyInternalComponents_Call {
	_c.Call.Return(run)
	return _c
}

// IdentifyInternalComponentsExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) IdentifyInternalComponentsExecute(r ApiIdentifyInternalComponentsRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for IdentifyInternalComponentsExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiIdentifyInternalComponentsRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiIdentifyInternalComponentsRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiIdentifyInternalComponentsRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockComponentAPI_IdentifyInternalComponentsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IdentifyInternalComponentsExecute'
type MockComponentAPI_IdentifyInternalComponentsExecute_Call struct {
	*mock.Call
}

// IdentifyInternalComponentsExecute is a helper method to define mock.On call
//   - r ApiIdentifyInternalComponentsRequest
func (_e *MockComponentAPI_Expecter) IdentifyInternalComponentsExecute(r interface{}) *MockComponentAPI_IdentifyInternalComponentsExecute_Call {
	return &MockComponentAPI_IdentifyInternalComponentsExecute_Call{Call: _e.mock.On("IdentifyInternalComponentsExecute", r)}
}

func (_c *MockComponentAPI_IdentifyInternalComponentsExecute_Call) Run(run func(r ApiIdentifyInternalComponentsRequest)) *MockComponentAPI_IdentifyInternalComponentsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiIdentifyInternalComponentsRequest))
	})
	return _c
}

func (_c *MockComponentAPI_IdentifyInternalComponentsExecute_Call) Return(_a0 *http.Response, _a1 error) *MockComponentAPI_IdentifyInternalComponentsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockComponentAPI_IdentifyInternalComponentsExecute_Call) RunAndReturn(run func(ApiIdentifyInternalComponentsRequest) (*http.Response, error)) *MockComponentAPI_IdentifyInternalComponentsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponent provides a mock function with given fields: ctx
func (_m *MockComponentAPI) UpdateComponent(ctx context.Context) ApiUpdateComponentRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponent")
	}

	var r0 ApiUpdateComponentRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdateComponentRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdateComponentRequest)
	}

	return r0
}

// MockComponentAPI_UpdateComponent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponent'
type MockComponentAPI_UpdateComponent_Call struct {
	*mock.Call
}

// UpdateComponent is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockComponentAPI_Expecter) UpdateComponent(ctx interface{}) *MockComponentAPI_UpdateComponent_Call {
	return &MockComponentAPI_UpdateComponent_Call{Call: _e.mock.On("UpdateComponent", ctx)}
}

func (_c *MockComponentAPI_UpdateComponent_Call) Run(run func(ctx context.Context)) *MockComponentAPI_UpdateComponent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockComponentAPI_UpdateComponent_Call) Return(_a0 ApiUpdateComponentRequest) *MockComponentAPI_UpdateComponent_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockComponentAPI_UpdateComponent_Call) RunAndReturn(run func(context.Context) ApiUpdateComponentRequest) *MockComponentAPI_UpdateComponent_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateComponentExecute provides a mock function with given fields: r
func (_m *MockComponentAPI) UpdateComponentExecute(r ApiUpdateComponentRequest) (*Component, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponentExecute")
	}

	var r0 *Component
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdateComponentRequest) (*Component, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdateComponentRequest) *Component); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Component)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdateComponentRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdateComponentRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockComponentAPI_UpdateComponentExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateComponentExecute'
type MockComponentAPI_UpdateComponentExecute_Call struct {
	*mock.Call
}

// UpdateComponentExecute is a helper method to define mock.On call
//   - r ApiUpdateComponentRequest
func (_e *MockComponentAPI_Expecter) UpdateComponentExecute(r interface{}) *MockComponentAPI_UpdateComponentExecute_Call {
	return &MockComponentAPI_UpdateComponentExecute_Call{Call: _e.mock.On("UpdateComponentExecute", r)}
}

func (_c *MockComponentAPI_UpdateComponentExecute_Call) Run(run func(r ApiUpdateComponentRequest)) *MockComponentAPI_UpdateComponentExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdateComponentRequest))
	})
	return _c
}

func (_c *MockComponentAPI_UpdateComponentExecute_Call) Return(_a0 *Component, _a1 *http.Response, _a2 error) *MockComponentAPI_UpdateComponentExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockComponentAPI_UpdateComponentExecute_Call) RunAndReturn(run func(ApiUpdateComponentRequest) (*Component, *http.Response, error)) *MockComponentAPI_UpdateComponentExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockComponentAPI creates a new instance of MockComponentAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockComponentAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockComponentAPI {
	mock := &MockComponentAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
