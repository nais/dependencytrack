// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockLicenseAPI is an autogenerated mock type for the LicenseAPI type
type MockLicenseAPI struct {
	mock.Mock
}

type MockLicenseAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLicenseAPI) EXPECT() *MockLicenseAPI_Expecter {
	return &MockLicenseAPI_Expecter{mock: &_m.Mock}
}

// CreateLicense provides a mock function with given fields: ctx
func (_m *MockLicenseAPI) CreateLicense(ctx context.Context) ApiCreateLicenseRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicense")
	}

	var r0 ApiCreateLicenseRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiCreateLicenseRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiCreateLicenseRequest)
	}

	return r0
}

// MockLicenseAPI_CreateLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLicense'
type MockLicenseAPI_CreateLicense_Call struct {
	*mock.Call
}

// CreateLicense is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseAPI_Expecter) CreateLicense(ctx interface{}) *MockLicenseAPI_CreateLicense_Call {
	return &MockLicenseAPI_CreateLicense_Call{Call: _e.mock.On("CreateLicense", ctx)}
}

func (_c *MockLicenseAPI_CreateLicense_Call) Run(run func(ctx context.Context)) *MockLicenseAPI_CreateLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLicenseAPI_CreateLicense_Call) Return(_a0 ApiCreateLicenseRequest) *MockLicenseAPI_CreateLicense_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLicenseAPI_CreateLicense_Call) RunAndReturn(run func(context.Context) ApiCreateLicenseRequest) *MockLicenseAPI_CreateLicense_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLicenseExecute provides a mock function with given fields: r
func (_m *MockLicenseAPI) CreateLicenseExecute(r ApiCreateLicenseRequest) (*License, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseExecute")
	}

	var r0 *License
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreateLicenseRequest) (*License, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreateLicenseRequest) *License); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*License)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreateLicenseRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreateLicenseRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLicenseAPI_CreateLicenseExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLicenseExecute'
type MockLicenseAPI_CreateLicenseExecute_Call struct {
	*mock.Call
}

// CreateLicenseExecute is a helper method to define mock.On call
//   - r ApiCreateLicenseRequest
func (_e *MockLicenseAPI_Expecter) CreateLicenseExecute(r interface{}) *MockLicenseAPI_CreateLicenseExecute_Call {
	return &MockLicenseAPI_CreateLicenseExecute_Call{Call: _e.mock.On("CreateLicenseExecute", r)}
}

func (_c *MockLicenseAPI_CreateLicenseExecute_Call) Run(run func(r ApiCreateLicenseRequest)) *MockLicenseAPI_CreateLicenseExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreateLicenseRequest))
	})
	return _c
}

func (_c *MockLicenseAPI_CreateLicenseExecute_Call) Return(_a0 *License, _a1 *http.Response, _a2 error) *MockLicenseAPI_CreateLicenseExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLicenseAPI_CreateLicenseExecute_Call) RunAndReturn(run func(ApiCreateLicenseRequest) (*License, *http.Response, error)) *MockLicenseAPI_CreateLicenseExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLicense provides a mock function with given fields: ctx, licenseId
func (_m *MockLicenseAPI) DeleteLicense(ctx context.Context, licenseId string) ApiDeleteLicenseRequest {
	ret := _m.Called(ctx, licenseId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicense")
	}

	var r0 ApiDeleteLicenseRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeleteLicenseRequest); ok {
		r0 = rf(ctx, licenseId)
	} else {
		r0 = ret.Get(0).(ApiDeleteLicenseRequest)
	}

	return r0
}

// MockLicenseAPI_DeleteLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLicense'
type MockLicenseAPI_DeleteLicense_Call struct {
	*mock.Call
}

// DeleteLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - licenseId string
func (_e *MockLicenseAPI_Expecter) DeleteLicense(ctx interface{}, licenseId interface{}) *MockLicenseAPI_DeleteLicense_Call {
	return &MockLicenseAPI_DeleteLicense_Call{Call: _e.mock.On("DeleteLicense", ctx, licenseId)}
}

func (_c *MockLicenseAPI_DeleteLicense_Call) Run(run func(ctx context.Context, licenseId string)) *MockLicenseAPI_DeleteLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLicenseAPI_DeleteLicense_Call) Return(_a0 ApiDeleteLicenseRequest) *MockLicenseAPI_DeleteLicense_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLicenseAPI_DeleteLicense_Call) RunAndReturn(run func(context.Context, string) ApiDeleteLicenseRequest) *MockLicenseAPI_DeleteLicense_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLicenseExecute provides a mock function with given fields: r
func (_m *MockLicenseAPI) DeleteLicenseExecute(r ApiDeleteLicenseRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicenseExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeleteLicenseRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeleteLicenseRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeleteLicenseRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLicenseAPI_DeleteLicenseExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLicenseExecute'
type MockLicenseAPI_DeleteLicenseExecute_Call struct {
	*mock.Call
}

// DeleteLicenseExecute is a helper method to define mock.On call
//   - r ApiDeleteLicenseRequest
func (_e *MockLicenseAPI_Expecter) DeleteLicenseExecute(r interface{}) *MockLicenseAPI_DeleteLicenseExecute_Call {
	return &MockLicenseAPI_DeleteLicenseExecute_Call{Call: _e.mock.On("DeleteLicenseExecute", r)}
}

func (_c *MockLicenseAPI_DeleteLicenseExecute_Call) Run(run func(r ApiDeleteLicenseRequest)) *MockLicenseAPI_DeleteLicenseExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeleteLicenseRequest))
	})
	return _c
}

func (_c *MockLicenseAPI_DeleteLicenseExecute_Call) Return(_a0 *http.Response, _a1 error) *MockLicenseAPI_DeleteLicenseExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLicenseAPI_DeleteLicenseExecute_Call) RunAndReturn(run func(ApiDeleteLicenseRequest) (*http.Response, error)) *MockLicenseAPI_DeleteLicenseExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicense provides a mock function with given fields: ctx, licenseId
func (_m *MockLicenseAPI) GetLicense(ctx context.Context, licenseId string) ApiGetLicenseRequest {
	ret := _m.Called(ctx, licenseId)

	if len(ret) == 0 {
		panic("no return value specified for GetLicense")
	}

	var r0 ApiGetLicenseRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetLicenseRequest); ok {
		r0 = rf(ctx, licenseId)
	} else {
		r0 = ret.Get(0).(ApiGetLicenseRequest)
	}

	return r0
}

// MockLicenseAPI_GetLicense_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicense'
type MockLicenseAPI_GetLicense_Call struct {
	*mock.Call
}

// GetLicense is a helper method to define mock.On call
//   - ctx context.Context
//   - licenseId string
func (_e *MockLicenseAPI_Expecter) GetLicense(ctx interface{}, licenseId interface{}) *MockLicenseAPI_GetLicense_Call {
	return &MockLicenseAPI_GetLicense_Call{Call: _e.mock.On("GetLicense", ctx, licenseId)}
}

func (_c *MockLicenseAPI_GetLicense_Call) Run(run func(ctx context.Context, licenseId string)) *MockLicenseAPI_GetLicense_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicense_Call) Return(_a0 ApiGetLicenseRequest) *MockLicenseAPI_GetLicense_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLicenseAPI_GetLicense_Call) RunAndReturn(run func(context.Context, string) ApiGetLicenseRequest) *MockLicenseAPI_GetLicense_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseExecute provides a mock function with given fields: r
func (_m *MockLicenseAPI) GetLicenseExecute(r ApiGetLicenseRequest) (*License, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseExecute")
	}

	var r0 *License
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetLicenseRequest) (*License, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetLicenseRequest) *License); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*License)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetLicenseRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetLicenseRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLicenseAPI_GetLicenseExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseExecute'
type MockLicenseAPI_GetLicenseExecute_Call struct {
	*mock.Call
}

// GetLicenseExecute is a helper method to define mock.On call
//   - r ApiGetLicenseRequest
func (_e *MockLicenseAPI_Expecter) GetLicenseExecute(r interface{}) *MockLicenseAPI_GetLicenseExecute_Call {
	return &MockLicenseAPI_GetLicenseExecute_Call{Call: _e.mock.On("GetLicenseExecute", r)}
}

func (_c *MockLicenseAPI_GetLicenseExecute_Call) Run(run func(r ApiGetLicenseRequest)) *MockLicenseAPI_GetLicenseExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetLicenseRequest))
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicenseExecute_Call) Return(_a0 *License, _a1 *http.Response, _a2 error) *MockLicenseAPI_GetLicenseExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLicenseAPI_GetLicenseExecute_Call) RunAndReturn(run func(ApiGetLicenseRequest) (*License, *http.Response, error)) *MockLicenseAPI_GetLicenseExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseListing provides a mock function with given fields: ctx
func (_m *MockLicenseAPI) GetLicenseListing(ctx context.Context) ApiGetLicenseListingRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseListing")
	}

	var r0 ApiGetLicenseListingRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetLicenseListingRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetLicenseListingRequest)
	}

	return r0
}

// MockLicenseAPI_GetLicenseListing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseListing'
type MockLicenseAPI_GetLicenseListing_Call struct {
	*mock.Call
}

// GetLicenseListing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseAPI_Expecter) GetLicenseListing(ctx interface{}) *MockLicenseAPI_GetLicenseListing_Call {
	return &MockLicenseAPI_GetLicenseListing_Call{Call: _e.mock.On("GetLicenseListing", ctx)}
}

func (_c *MockLicenseAPI_GetLicenseListing_Call) Run(run func(ctx context.Context)) *MockLicenseAPI_GetLicenseListing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicenseListing_Call) Return(_a0 ApiGetLicenseListingRequest) *MockLicenseAPI_GetLicenseListing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLicenseAPI_GetLicenseListing_Call) RunAndReturn(run func(context.Context) ApiGetLicenseListingRequest) *MockLicenseAPI_GetLicenseListing_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenseListingExecute provides a mock function with given fields: r
func (_m *MockLicenseAPI) GetLicenseListingExecute(r ApiGetLicenseListingRequest) ([]License, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseListingExecute")
	}

	var r0 []License
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetLicenseListingRequest) ([]License, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetLicenseListingRequest) []License); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]License)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetLicenseListingRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetLicenseListingRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLicenseAPI_GetLicenseListingExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenseListingExecute'
type MockLicenseAPI_GetLicenseListingExecute_Call struct {
	*mock.Call
}

// GetLicenseListingExecute is a helper method to define mock.On call
//   - r ApiGetLicenseListingRequest
func (_e *MockLicenseAPI_Expecter) GetLicenseListingExecute(r interface{}) *MockLicenseAPI_GetLicenseListingExecute_Call {
	return &MockLicenseAPI_GetLicenseListingExecute_Call{Call: _e.mock.On("GetLicenseListingExecute", r)}
}

func (_c *MockLicenseAPI_GetLicenseListingExecute_Call) Run(run func(r ApiGetLicenseListingRequest)) *MockLicenseAPI_GetLicenseListingExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetLicenseListingRequest))
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicenseListingExecute_Call) Return(_a0 []License, _a1 *http.Response, _a2 error) *MockLicenseAPI_GetLicenseListingExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLicenseAPI_GetLicenseListingExecute_Call) RunAndReturn(run func(ApiGetLicenseListingRequest) ([]License, *http.Response, error)) *MockLicenseAPI_GetLicenseListingExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicenses provides a mock function with given fields: ctx
func (_m *MockLicenseAPI) GetLicenses(ctx context.Context) ApiGetLicensesRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenses")
	}

	var r0 ApiGetLicensesRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetLicensesRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetLicensesRequest)
	}

	return r0
}

// MockLicenseAPI_GetLicenses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicenses'
type MockLicenseAPI_GetLicenses_Call struct {
	*mock.Call
}

// GetLicenses is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockLicenseAPI_Expecter) GetLicenses(ctx interface{}) *MockLicenseAPI_GetLicenses_Call {
	return &MockLicenseAPI_GetLicenses_Call{Call: _e.mock.On("GetLicenses", ctx)}
}

func (_c *MockLicenseAPI_GetLicenses_Call) Run(run func(ctx context.Context)) *MockLicenseAPI_GetLicenses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicenses_Call) Return(_a0 ApiGetLicensesRequest) *MockLicenseAPI_GetLicenses_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLicenseAPI_GetLicenses_Call) RunAndReturn(run func(context.Context) ApiGetLicensesRequest) *MockLicenseAPI_GetLicenses_Call {
	_c.Call.Return(run)
	return _c
}

// GetLicensesExecute provides a mock function with given fields: r
func (_m *MockLicenseAPI) GetLicensesExecute(r ApiGetLicensesRequest) ([]License, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetLicensesExecute")
	}

	var r0 []License
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetLicensesRequest) ([]License, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetLicensesRequest) []License); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]License)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetLicensesRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetLicensesRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockLicenseAPI_GetLicensesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLicensesExecute'
type MockLicenseAPI_GetLicensesExecute_Call struct {
	*mock.Call
}

// GetLicensesExecute is a helper method to define mock.On call
//   - r ApiGetLicensesRequest
func (_e *MockLicenseAPI_Expecter) GetLicensesExecute(r interface{}) *MockLicenseAPI_GetLicensesExecute_Call {
	return &MockLicenseAPI_GetLicensesExecute_Call{Call: _e.mock.On("GetLicensesExecute", r)}
}

func (_c *MockLicenseAPI_GetLicensesExecute_Call) Run(run func(r ApiGetLicensesRequest)) *MockLicenseAPI_GetLicensesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetLicensesRequest))
	})
	return _c
}

func (_c *MockLicenseAPI_GetLicensesExecute_Call) Return(_a0 []License, _a1 *http.Response, _a2 error) *MockLicenseAPI_GetLicensesExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockLicenseAPI_GetLicensesExecute_Call) RunAndReturn(run func(ApiGetLicensesRequest) ([]License, *http.Response, error)) *MockLicenseAPI_GetLicensesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLicenseAPI creates a new instance of MockLicenseAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLicenseAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLicenseAPI {
	mock := &MockLicenseAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
