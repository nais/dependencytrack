// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockFindingAPI is an autogenerated mock type for the FindingAPI type
type MockFindingAPI struct {
	mock.Mock
}

type MockFindingAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFindingAPI) EXPECT() *MockFindingAPI_Expecter {
	return &MockFindingAPI_Expecter{mock: &_m.Mock}
}

// AnalyzeProject provides a mock function with given fields: ctx, uuid
func (_m *MockFindingAPI) AnalyzeProject(ctx context.Context, uuid string) ApiAnalyzeProjectRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeProject")
	}

	var r0 ApiAnalyzeProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiAnalyzeProjectRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiAnalyzeProjectRequest)
	}

	return r0
}

// MockFindingAPI_AnalyzeProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnalyzeProject'
type MockFindingAPI_AnalyzeProject_Call struct {
	*mock.Call
}

// AnalyzeProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockFindingAPI_Expecter) AnalyzeProject(ctx interface{}, uuid interface{}) *MockFindingAPI_AnalyzeProject_Call {
	return &MockFindingAPI_AnalyzeProject_Call{Call: _e.mock.On("AnalyzeProject", ctx, uuid)}
}

func (_c *MockFindingAPI_AnalyzeProject_Call) Run(run func(ctx context.Context, uuid string)) *MockFindingAPI_AnalyzeProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFindingAPI_AnalyzeProject_Call) Return(_a0 ApiAnalyzeProjectRequest) *MockFindingAPI_AnalyzeProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFindingAPI_AnalyzeProject_Call) RunAndReturn(run func(context.Context, string) ApiAnalyzeProjectRequest) *MockFindingAPI_AnalyzeProject_Call {
	_c.Call.Return(run)
	return _c
}

// AnalyzeProjectExecute provides a mock function with given fields: r
func (_m *MockFindingAPI) AnalyzeProjectExecute(r ApiAnalyzeProjectRequest) (*BomUploadResponse, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for AnalyzeProjectExecute")
	}

	var r0 *BomUploadResponse
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiAnalyzeProjectRequest) (*BomUploadResponse, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiAnalyzeProjectRequest) *BomUploadResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*BomUploadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiAnalyzeProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiAnalyzeProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFindingAPI_AnalyzeProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AnalyzeProjectExecute'
type MockFindingAPI_AnalyzeProjectExecute_Call struct {
	*mock.Call
}

// AnalyzeProjectExecute is a helper method to define mock.On call
//   - r ApiAnalyzeProjectRequest
func (_e *MockFindingAPI_Expecter) AnalyzeProjectExecute(r interface{}) *MockFindingAPI_AnalyzeProjectExecute_Call {
	return &MockFindingAPI_AnalyzeProjectExecute_Call{Call: _e.mock.On("AnalyzeProjectExecute", r)}
}

func (_c *MockFindingAPI_AnalyzeProjectExecute_Call) Run(run func(r ApiAnalyzeProjectRequest)) *MockFindingAPI_AnalyzeProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiAnalyzeProjectRequest))
	})
	return _c
}

func (_c *MockFindingAPI_AnalyzeProjectExecute_Call) Return(_a0 *BomUploadResponse, _a1 *http.Response, _a2 error) *MockFindingAPI_AnalyzeProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFindingAPI_AnalyzeProjectExecute_Call) RunAndReturn(run func(ApiAnalyzeProjectRequest) (*BomUploadResponse, *http.Response, error)) *MockFindingAPI_AnalyzeProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ExportFindingsByProject provides a mock function with given fields: ctx, uuid
func (_m *MockFindingAPI) ExportFindingsByProject(ctx context.Context, uuid string) ApiExportFindingsByProjectRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for ExportFindingsByProject")
	}

	var r0 ApiExportFindingsByProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiExportFindingsByProjectRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiExportFindingsByProjectRequest)
	}

	return r0
}

// MockFindingAPI_ExportFindingsByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportFindingsByProject'
type MockFindingAPI_ExportFindingsByProject_Call struct {
	*mock.Call
}

// ExportFindingsByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockFindingAPI_Expecter) ExportFindingsByProject(ctx interface{}, uuid interface{}) *MockFindingAPI_ExportFindingsByProject_Call {
	return &MockFindingAPI_ExportFindingsByProject_Call{Call: _e.mock.On("ExportFindingsByProject", ctx, uuid)}
}

func (_c *MockFindingAPI_ExportFindingsByProject_Call) Run(run func(ctx context.Context, uuid string)) *MockFindingAPI_ExportFindingsByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFindingAPI_ExportFindingsByProject_Call) Return(_a0 ApiExportFindingsByProjectRequest) *MockFindingAPI_ExportFindingsByProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFindingAPI_ExportFindingsByProject_Call) RunAndReturn(run func(context.Context, string) ApiExportFindingsByProjectRequest) *MockFindingAPI_ExportFindingsByProject_Call {
	_c.Call.Return(run)
	return _c
}

// ExportFindingsByProjectExecute provides a mock function with given fields: r
func (_m *MockFindingAPI) ExportFindingsByProjectExecute(r ApiExportFindingsByProjectRequest) (string, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ExportFindingsByProjectExecute")
	}

	var r0 string
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiExportFindingsByProjectRequest) (string, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiExportFindingsByProjectRequest) string); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ApiExportFindingsByProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiExportFindingsByProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFindingAPI_ExportFindingsByProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportFindingsByProjectExecute'
type MockFindingAPI_ExportFindingsByProjectExecute_Call struct {
	*mock.Call
}

// ExportFindingsByProjectExecute is a helper method to define mock.On call
//   - r ApiExportFindingsByProjectRequest
func (_e *MockFindingAPI_Expecter) ExportFindingsByProjectExecute(r interface{}) *MockFindingAPI_ExportFindingsByProjectExecute_Call {
	return &MockFindingAPI_ExportFindingsByProjectExecute_Call{Call: _e.mock.On("ExportFindingsByProjectExecute", r)}
}

func (_c *MockFindingAPI_ExportFindingsByProjectExecute_Call) Run(run func(r ApiExportFindingsByProjectRequest)) *MockFindingAPI_ExportFindingsByProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiExportFindingsByProjectRequest))
	})
	return _c
}

func (_c *MockFindingAPI_ExportFindingsByProjectExecute_Call) Return(_a0 string, _a1 *http.Response, _a2 error) *MockFindingAPI_ExportFindingsByProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFindingAPI_ExportFindingsByProjectExecute_Call) RunAndReturn(run func(ApiExportFindingsByProjectRequest) (string, *http.Response, error)) *MockFindingAPI_ExportFindingsByProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFindings provides a mock function with given fields: ctx
func (_m *MockFindingAPI) GetAllFindings(ctx context.Context) ApiGetAllFindingsRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFindings")
	}

	var r0 ApiGetAllFindingsRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetAllFindingsRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetAllFindingsRequest)
	}

	return r0
}

// MockFindingAPI_GetAllFindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFindings'
type MockFindingAPI_GetAllFindings_Call struct {
	*mock.Call
}

// GetAllFindings is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFindingAPI_Expecter) GetAllFindings(ctx interface{}) *MockFindingAPI_GetAllFindings_Call {
	return &MockFindingAPI_GetAllFindings_Call{Call: _e.mock.On("GetAllFindings", ctx)}
}

func (_c *MockFindingAPI_GetAllFindings_Call) Run(run func(ctx context.Context)) *MockFindingAPI_GetAllFindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFindingAPI_GetAllFindings_Call) Return(_a0 ApiGetAllFindingsRequest) *MockFindingAPI_GetAllFindings_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFindingAPI_GetAllFindings_Call) RunAndReturn(run func(context.Context) ApiGetAllFindingsRequest) *MockFindingAPI_GetAllFindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFindings1 provides a mock function with given fields: ctx
func (_m *MockFindingAPI) GetAllFindings1(ctx context.Context) ApiGetAllFindings1Request {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFindings1")
	}

	var r0 ApiGetAllFindings1Request
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetAllFindings1Request); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetAllFindings1Request)
	}

	return r0
}

// MockFindingAPI_GetAllFindings1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFindings1'
type MockFindingAPI_GetAllFindings1_Call struct {
	*mock.Call
}

// GetAllFindings1 is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockFindingAPI_Expecter) GetAllFindings1(ctx interface{}) *MockFindingAPI_GetAllFindings1_Call {
	return &MockFindingAPI_GetAllFindings1_Call{Call: _e.mock.On("GetAllFindings1", ctx)}
}

func (_c *MockFindingAPI_GetAllFindings1_Call) Run(run func(ctx context.Context)) *MockFindingAPI_GetAllFindings1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockFindingAPI_GetAllFindings1_Call) Return(_a0 ApiGetAllFindings1Request) *MockFindingAPI_GetAllFindings1_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFindingAPI_GetAllFindings1_Call) RunAndReturn(run func(context.Context) ApiGetAllFindings1Request) *MockFindingAPI_GetAllFindings1_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFindings1Execute provides a mock function with given fields: r
func (_m *MockFindingAPI) GetAllFindings1Execute(r ApiGetAllFindings1Request) ([]Finding, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFindings1Execute")
	}

	var r0 []Finding
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllFindings1Request) ([]Finding, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllFindings1Request) []Finding); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Finding)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllFindings1Request) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllFindings1Request) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFindingAPI_GetAllFindings1Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFindings1Execute'
type MockFindingAPI_GetAllFindings1Execute_Call struct {
	*mock.Call
}

// GetAllFindings1Execute is a helper method to define mock.On call
//   - r ApiGetAllFindings1Request
func (_e *MockFindingAPI_Expecter) GetAllFindings1Execute(r interface{}) *MockFindingAPI_GetAllFindings1Execute_Call {
	return &MockFindingAPI_GetAllFindings1Execute_Call{Call: _e.mock.On("GetAllFindings1Execute", r)}
}

func (_c *MockFindingAPI_GetAllFindings1Execute_Call) Run(run func(r ApiGetAllFindings1Request)) *MockFindingAPI_GetAllFindings1Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllFindings1Request))
	})
	return _c
}

func (_c *MockFindingAPI_GetAllFindings1Execute_Call) Return(_a0 []Finding, _a1 *http.Response, _a2 error) *MockFindingAPI_GetAllFindings1Execute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFindingAPI_GetAllFindings1Execute_Call) RunAndReturn(run func(ApiGetAllFindings1Request) ([]Finding, *http.Response, error)) *MockFindingAPI_GetAllFindings1Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFindingsExecute provides a mock function with given fields: r
func (_m *MockFindingAPI) GetAllFindingsExecute(r ApiGetAllFindingsRequest) ([]Finding, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFindingsExecute")
	}

	var r0 []Finding
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetAllFindingsRequest) ([]Finding, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetAllFindingsRequest) []Finding); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Finding)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetAllFindingsRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetAllFindingsRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFindingAPI_GetAllFindingsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFindingsExecute'
type MockFindingAPI_GetAllFindingsExecute_Call struct {
	*mock.Call
}

// GetAllFindingsExecute is a helper method to define mock.On call
//   - r ApiGetAllFindingsRequest
func (_e *MockFindingAPI_Expecter) GetAllFindingsExecute(r interface{}) *MockFindingAPI_GetAllFindingsExecute_Call {
	return &MockFindingAPI_GetAllFindingsExecute_Call{Call: _e.mock.On("GetAllFindingsExecute", r)}
}

func (_c *MockFindingAPI_GetAllFindingsExecute_Call) Run(run func(r ApiGetAllFindingsRequest)) *MockFindingAPI_GetAllFindingsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetAllFindingsRequest))
	})
	return _c
}

func (_c *MockFindingAPI_GetAllFindingsExecute_Call) Return(_a0 []Finding, _a1 *http.Response, _a2 error) *MockFindingAPI_GetAllFindingsExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFindingAPI_GetAllFindingsExecute_Call) RunAndReturn(run func(ApiGetAllFindingsRequest) ([]Finding, *http.Response, error)) *MockFindingAPI_GetAllFindingsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetFindingsByProject provides a mock function with given fields: ctx, uuid
func (_m *MockFindingAPI) GetFindingsByProject(ctx context.Context, uuid string) ApiGetFindingsByProjectRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingsByProject")
	}

	var r0 ApiGetFindingsByProjectRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiGetFindingsByProjectRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiGetFindingsByProjectRequest)
	}

	return r0
}

// MockFindingAPI_GetFindingsByProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindingsByProject'
type MockFindingAPI_GetFindingsByProject_Call struct {
	*mock.Call
}

// GetFindingsByProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockFindingAPI_Expecter) GetFindingsByProject(ctx interface{}, uuid interface{}) *MockFindingAPI_GetFindingsByProject_Call {
	return &MockFindingAPI_GetFindingsByProject_Call{Call: _e.mock.On("GetFindingsByProject", ctx, uuid)}
}

func (_c *MockFindingAPI_GetFindingsByProject_Call) Run(run func(ctx context.Context, uuid string)) *MockFindingAPI_GetFindingsByProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockFindingAPI_GetFindingsByProject_Call) Return(_a0 ApiGetFindingsByProjectRequest) *MockFindingAPI_GetFindingsByProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFindingAPI_GetFindingsByProject_Call) RunAndReturn(run func(context.Context, string) ApiGetFindingsByProjectRequest) *MockFindingAPI_GetFindingsByProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetFindingsByProjectExecute provides a mock function with given fields: r
func (_m *MockFindingAPI) GetFindingsByProjectExecute(r ApiGetFindingsByProjectRequest) ([]Finding, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingsByProjectExecute")
	}

	var r0 []Finding
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetFindingsByProjectRequest) ([]Finding, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetFindingsByProjectRequest) []Finding); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Finding)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetFindingsByProjectRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetFindingsByProjectRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockFindingAPI_GetFindingsByProjectExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindingsByProjectExecute'
type MockFindingAPI_GetFindingsByProjectExecute_Call struct {
	*mock.Call
}

// GetFindingsByProjectExecute is a helper method to define mock.On call
//   - r ApiGetFindingsByProjectRequest
func (_e *MockFindingAPI_Expecter) GetFindingsByProjectExecute(r interface{}) *MockFindingAPI_GetFindingsByProjectExecute_Call {
	return &MockFindingAPI_GetFindingsByProjectExecute_Call{Call: _e.mock.On("GetFindingsByProjectExecute", r)}
}

func (_c *MockFindingAPI_GetFindingsByProjectExecute_Call) Run(run func(r ApiGetFindingsByProjectRequest)) *MockFindingAPI_GetFindingsByProjectExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetFindingsByProjectRequest))
	})
	return _c
}

func (_c *MockFindingAPI_GetFindingsByProjectExecute_Call) Return(_a0 []Finding, _a1 *http.Response, _a2 error) *MockFindingAPI_GetFindingsByProjectExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockFindingAPI_GetFindingsByProjectExecute_Call) RunAndReturn(run func(ApiGetFindingsByProjectRequest) ([]Finding, *http.Response, error)) *MockFindingAPI_GetFindingsByProjectExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFindingAPI creates a new instance of MockFindingAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFindingAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFindingAPI {
	mock := &MockFindingAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
