/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MappedLdapGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MappedLdapGroup{}

// MappedLdapGroup struct for MappedLdapGroup
type MappedLdapGroup struct {
	Dn *string `json:"dn,omitempty" validate:"regexp=[\\\\P{Cc}]+"`
	Uuid string `json:"uuid"`
}

type _MappedLdapGroup MappedLdapGroup

// NewMappedLdapGroup instantiates a new MappedLdapGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMappedLdapGroup(uuid string) *MappedLdapGroup {
	this := MappedLdapGroup{}
	this.Uuid = uuid
	return &this
}

// NewMappedLdapGroupWithDefaults instantiates a new MappedLdapGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMappedLdapGroupWithDefaults() *MappedLdapGroup {
	this := MappedLdapGroup{}
	return &this
}

// GetDn returns the Dn field value if set, zero value otherwise.
func (o *MappedLdapGroup) GetDn() string {
	if o == nil || IsNil(o.Dn) {
		var ret string
		return ret
	}
	return *o.Dn
}

// GetDnOk returns a tuple with the Dn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MappedLdapGroup) GetDnOk() (*string, bool) {
	if o == nil || IsNil(o.Dn) {
		return nil, false
	}
	return o.Dn, true
}

// HasDn returns a boolean if a field has been set.
func (o *MappedLdapGroup) HasDn() bool {
	if o != nil && !IsNil(o.Dn) {
		return true
	}

	return false
}

// SetDn gets a reference to the given string and assigns it to the Dn field.
func (o *MappedLdapGroup) SetDn(v string) {
	o.Dn = &v
}

// GetUuid returns the Uuid field value
func (o *MappedLdapGroup) GetUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uuid
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
func (o *MappedLdapGroup) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uuid, true
}

// SetUuid sets field value
func (o *MappedLdapGroup) SetUuid(v string) {
	o.Uuid = v
}

func (o MappedLdapGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MappedLdapGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dn) {
		toSerialize["dn"] = o.Dn
	}
	toSerialize["uuid"] = o.Uuid
	return toSerialize, nil
}

func (o *MappedLdapGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMappedLdapGroup := _MappedLdapGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMappedLdapGroup)

	if err != nil {
		return err
	}

	*o = MappedLdapGroup(varMappedLdapGroup)

	return err
}

type NullableMappedLdapGroup struct {
	value *MappedLdapGroup
	isSet bool
}

func (v NullableMappedLdapGroup) Get() *MappedLdapGroup {
	return v.value
}

func (v *NullableMappedLdapGroup) Set(val *MappedLdapGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMappedLdapGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMappedLdapGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMappedLdapGroup(val *MappedLdapGroup) *NullableMappedLdapGroup {
	return &NullableMappedLdapGroup{value: val, isSet: true}
}

func (v NullableMappedLdapGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMappedLdapGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


