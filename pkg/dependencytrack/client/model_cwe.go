/*
OWASP Dependency-Track

REST API of OWASP Dependency-Track

API version: 4.13.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Cwe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Cwe{}

// Cwe struct for Cwe
type Cwe struct {
	CweId *int32 `json:"cweId,omitempty"`
	Name *string `json:"name,omitempty" validate:"regexp=^[\\\\p{IsWhite_Space}\\\\p{L}\\\\p{M}\\\\p{S}\\\\p{N}\\\\p{P}]*$"`
}

// NewCwe instantiates a new Cwe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCwe() *Cwe {
	this := Cwe{}
	return &this
}

// NewCweWithDefaults instantiates a new Cwe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCweWithDefaults() *Cwe {
	this := Cwe{}
	return &this
}

// GetCweId returns the CweId field value if set, zero value otherwise.
func (o *Cwe) GetCweId() int32 {
	if o == nil || IsNil(o.CweId) {
		var ret int32
		return ret
	}
	return *o.CweId
}

// GetCweIdOk returns a tuple with the CweId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cwe) GetCweIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CweId) {
		return nil, false
	}
	return o.CweId, true
}

// HasCweId returns a boolean if a field has been set.
func (o *Cwe) HasCweId() bool {
	if o != nil && !IsNil(o.CweId) {
		return true
	}

	return false
}

// SetCweId gets a reference to the given int32 and assigns it to the CweId field.
func (o *Cwe) SetCweId(v int32) {
	o.CweId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Cwe) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Cwe) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Cwe) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Cwe) SetName(v string) {
	o.Name = &v
}

func (o Cwe) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Cwe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CweId) {
		toSerialize["cweId"] = o.CweId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableCwe struct {
	value *Cwe
	isSet bool
}

func (v NullableCwe) Get() *Cwe {
	return v.value
}

func (v *NullableCwe) Set(val *Cwe) {
	v.value = val
	v.isSet = true
}

func (v NullableCwe) IsSet() bool {
	return v.isSet
}

func (v *NullableCwe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCwe(val *Cwe) *NullableCwe {
	return &NullableCwe{value: val, isSet: true}
}

func (v NullableCwe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCwe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


