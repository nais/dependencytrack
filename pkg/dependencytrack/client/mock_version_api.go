// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockVersionAPI is an autogenerated mock type for the VersionAPI type
type MockVersionAPI struct {
	mock.Mock
}

type MockVersionAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVersionAPI) EXPECT() *MockVersionAPI_Expecter {
	return &MockVersionAPI_Expecter{mock: &_m.Mock}
}

// GetVersion provides a mock function with given fields: ctx
func (_m *MockVersionAPI) GetVersion(ctx context.Context) ApiGetVersionRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetVersion")
	}

	var r0 ApiGetVersionRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiGetVersionRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiGetVersionRequest)
	}

	return r0
}

// MockVersionAPI_GetVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersion'
type MockVersionAPI_GetVersion_Call struct {
	*mock.Call
}

// GetVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockVersionAPI_Expecter) GetVersion(ctx interface{}) *MockVersionAPI_GetVersion_Call {
	return &MockVersionAPI_GetVersion_Call{Call: _e.mock.On("GetVersion", ctx)}
}

func (_c *MockVersionAPI_GetVersion_Call) Run(run func(ctx context.Context)) *MockVersionAPI_GetVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockVersionAPI_GetVersion_Call) Return(_a0 ApiGetVersionRequest) *MockVersionAPI_GetVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVersionAPI_GetVersion_Call) RunAndReturn(run func(context.Context) ApiGetVersionRequest) *MockVersionAPI_GetVersion_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionExecute provides a mock function with given fields: r
func (_m *MockVersionAPI) GetVersionExecute(r ApiGetVersionRequest) (*About, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for GetVersionExecute")
	}

	var r0 *About
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiGetVersionRequest) (*About, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiGetVersionRequest) *About); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*About)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiGetVersionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiGetVersionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockVersionAPI_GetVersionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionExecute'
type MockVersionAPI_GetVersionExecute_Call struct {
	*mock.Call
}

// GetVersionExecute is a helper method to define mock.On call
//   - r ApiGetVersionRequest
func (_e *MockVersionAPI_Expecter) GetVersionExecute(r interface{}) *MockVersionAPI_GetVersionExecute_Call {
	return &MockVersionAPI_GetVersionExecute_Call{Call: _e.mock.On("GetVersionExecute", r)}
}

func (_c *MockVersionAPI_GetVersionExecute_Call) Run(run func(r ApiGetVersionRequest)) *MockVersionAPI_GetVersionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiGetVersionRequest))
	})
	return _c
}

func (_c *MockVersionAPI_GetVersionExecute_Call) Return(_a0 *About, _a1 *http.Response, _a2 error) *MockVersionAPI_GetVersionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockVersionAPI_GetVersionExecute_Call) RunAndReturn(run func(ApiGetVersionRequest) (*About, *http.Response, error)) *MockVersionAPI_GetVersionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVersionAPI creates a new instance of MockVersionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVersionAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVersionAPI {
	mock := &MockVersionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
