// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockPolicyConditionAPI is an autogenerated mock type for the PolicyConditionAPI type
type MockPolicyConditionAPI struct {
	mock.Mock
}

type MockPolicyConditionAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPolicyConditionAPI) EXPECT() *MockPolicyConditionAPI_Expecter {
	return &MockPolicyConditionAPI_Expecter{mock: &_m.Mock}
}

// CreatePolicyCondition provides a mock function with given fields: ctx, uuid
func (_m *MockPolicyConditionAPI) CreatePolicyCondition(ctx context.Context, uuid string) ApiCreatePolicyConditionRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicyCondition")
	}

	var r0 ApiCreatePolicyConditionRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiCreatePolicyConditionRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiCreatePolicyConditionRequest)
	}

	return r0
}

// MockPolicyConditionAPI_CreatePolicyCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyCondition'
type MockPolicyConditionAPI_CreatePolicyCondition_Call struct {
	*mock.Call
}

// CreatePolicyCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPolicyConditionAPI_Expecter) CreatePolicyCondition(ctx interface{}, uuid interface{}) *MockPolicyConditionAPI_CreatePolicyCondition_Call {
	return &MockPolicyConditionAPI_CreatePolicyCondition_Call{Call: _e.mock.On("CreatePolicyCondition", ctx, uuid)}
}

func (_c *MockPolicyConditionAPI_CreatePolicyCondition_Call) Run(run func(ctx context.Context, uuid string)) *MockPolicyConditionAPI_CreatePolicyCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPolicyConditionAPI_CreatePolicyCondition_Call) Return(_a0 ApiCreatePolicyConditionRequest) *MockPolicyConditionAPI_CreatePolicyCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyConditionAPI_CreatePolicyCondition_Call) RunAndReturn(run func(context.Context, string) ApiCreatePolicyConditionRequest) *MockPolicyConditionAPI_CreatePolicyCondition_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePolicyConditionExecute provides a mock function with given fields: r
func (_m *MockPolicyConditionAPI) CreatePolicyConditionExecute(r ApiCreatePolicyConditionRequest) (*PolicyCondition, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicyConditionExecute")
	}

	var r0 *PolicyCondition
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiCreatePolicyConditionRequest) (*PolicyCondition, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiCreatePolicyConditionRequest) *PolicyCondition); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PolicyCondition)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiCreatePolicyConditionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiCreatePolicyConditionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyConditionAPI_CreatePolicyConditionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyConditionExecute'
type MockPolicyConditionAPI_CreatePolicyConditionExecute_Call struct {
	*mock.Call
}

// CreatePolicyConditionExecute is a helper method to define mock.On call
//   - r ApiCreatePolicyConditionRequest
func (_e *MockPolicyConditionAPI_Expecter) CreatePolicyConditionExecute(r interface{}) *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call {
	return &MockPolicyConditionAPI_CreatePolicyConditionExecute_Call{Call: _e.mock.On("CreatePolicyConditionExecute", r)}
}

func (_c *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call) Run(run func(r ApiCreatePolicyConditionRequest)) *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiCreatePolicyConditionRequest))
	})
	return _c
}

func (_c *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call) Return(_a0 *PolicyCondition, _a1 *http.Response, _a2 error) *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call) RunAndReturn(run func(ApiCreatePolicyConditionRequest) (*PolicyCondition, *http.Response, error)) *MockPolicyConditionAPI_CreatePolicyConditionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyCondition provides a mock function with given fields: ctx, uuid
func (_m *MockPolicyConditionAPI) DeletePolicyCondition(ctx context.Context, uuid string) ApiDeletePolicyConditionRequest {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyCondition")
	}

	var r0 ApiDeletePolicyConditionRequest
	if rf, ok := ret.Get(0).(func(context.Context, string) ApiDeletePolicyConditionRequest); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(ApiDeletePolicyConditionRequest)
	}

	return r0
}

// MockPolicyConditionAPI_DeletePolicyCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyCondition'
type MockPolicyConditionAPI_DeletePolicyCondition_Call struct {
	*mock.Call
}

// DeletePolicyCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockPolicyConditionAPI_Expecter) DeletePolicyCondition(ctx interface{}, uuid interface{}) *MockPolicyConditionAPI_DeletePolicyCondition_Call {
	return &MockPolicyConditionAPI_DeletePolicyCondition_Call{Call: _e.mock.On("DeletePolicyCondition", ctx, uuid)}
}

func (_c *MockPolicyConditionAPI_DeletePolicyCondition_Call) Run(run func(ctx context.Context, uuid string)) *MockPolicyConditionAPI_DeletePolicyCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockPolicyConditionAPI_DeletePolicyCondition_Call) Return(_a0 ApiDeletePolicyConditionRequest) *MockPolicyConditionAPI_DeletePolicyCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyConditionAPI_DeletePolicyCondition_Call) RunAndReturn(run func(context.Context, string) ApiDeletePolicyConditionRequest) *MockPolicyConditionAPI_DeletePolicyCondition_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyConditionExecute provides a mock function with given fields: r
func (_m *MockPolicyConditionAPI) DeletePolicyConditionExecute(r ApiDeletePolicyConditionRequest) (*http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyConditionExecute")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(ApiDeletePolicyConditionRequest) (*http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiDeletePolicyConditionRequest) *http.Response); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiDeletePolicyConditionRequest) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPolicyConditionAPI_DeletePolicyConditionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyConditionExecute'
type MockPolicyConditionAPI_DeletePolicyConditionExecute_Call struct {
	*mock.Call
}

// DeletePolicyConditionExecute is a helper method to define mock.On call
//   - r ApiDeletePolicyConditionRequest
func (_e *MockPolicyConditionAPI_Expecter) DeletePolicyConditionExecute(r interface{}) *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call {
	return &MockPolicyConditionAPI_DeletePolicyConditionExecute_Call{Call: _e.mock.On("DeletePolicyConditionExecute", r)}
}

func (_c *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call) Run(run func(r ApiDeletePolicyConditionRequest)) *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiDeletePolicyConditionRequest))
	})
	return _c
}

func (_c *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call) Return(_a0 *http.Response, _a1 error) *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call) RunAndReturn(run func(ApiDeletePolicyConditionRequest) (*http.Response, error)) *MockPolicyConditionAPI_DeletePolicyConditionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicyCondition provides a mock function with given fields: ctx
func (_m *MockPolicyConditionAPI) UpdatePolicyCondition(ctx context.Context) ApiUpdatePolicyConditionRequest {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicyCondition")
	}

	var r0 ApiUpdatePolicyConditionRequest
	if rf, ok := ret.Get(0).(func(context.Context) ApiUpdatePolicyConditionRequest); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(ApiUpdatePolicyConditionRequest)
	}

	return r0
}

// MockPolicyConditionAPI_UpdatePolicyCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicyCondition'
type MockPolicyConditionAPI_UpdatePolicyCondition_Call struct {
	*mock.Call
}

// UpdatePolicyCondition is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPolicyConditionAPI_Expecter) UpdatePolicyCondition(ctx interface{}) *MockPolicyConditionAPI_UpdatePolicyCondition_Call {
	return &MockPolicyConditionAPI_UpdatePolicyCondition_Call{Call: _e.mock.On("UpdatePolicyCondition", ctx)}
}

func (_c *MockPolicyConditionAPI_UpdatePolicyCondition_Call) Run(run func(ctx context.Context)) *MockPolicyConditionAPI_UpdatePolicyCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPolicyConditionAPI_UpdatePolicyCondition_Call) Return(_a0 ApiUpdatePolicyConditionRequest) *MockPolicyConditionAPI_UpdatePolicyCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPolicyConditionAPI_UpdatePolicyCondition_Call) RunAndReturn(run func(context.Context) ApiUpdatePolicyConditionRequest) *MockPolicyConditionAPI_UpdatePolicyCondition_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicyConditionExecute provides a mock function with given fields: r
func (_m *MockPolicyConditionAPI) UpdatePolicyConditionExecute(r ApiUpdatePolicyConditionRequest) (*PolicyCondition, *http.Response, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicyConditionExecute")
	}

	var r0 *PolicyCondition
	var r1 *http.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(ApiUpdatePolicyConditionRequest) (*PolicyCondition, *http.Response, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(ApiUpdatePolicyConditionRequest) *PolicyCondition); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*PolicyCondition)
		}
	}

	if rf, ok := ret.Get(1).(func(ApiUpdatePolicyConditionRequest) *http.Response); ok {
		r1 = rf(r)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*http.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(ApiUpdatePolicyConditionRequest) error); ok {
		r2 = rf(r)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicyConditionExecute'
type MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call struct {
	*mock.Call
}

// UpdatePolicyConditionExecute is a helper method to define mock.On call
//   - r ApiUpdatePolicyConditionRequest
func (_e *MockPolicyConditionAPI_Expecter) UpdatePolicyConditionExecute(r interface{}) *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call {
	return &MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call{Call: _e.mock.On("UpdatePolicyConditionExecute", r)}
}

func (_c *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call) Run(run func(r ApiUpdatePolicyConditionRequest)) *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ApiUpdatePolicyConditionRequest))
	})
	return _c
}

func (_c *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call) Return(_a0 *PolicyCondition, _a1 *http.Response, _a2 error) *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call) RunAndReturn(run func(ApiUpdatePolicyConditionRequest) (*PolicyCondition, *http.Response, error)) *MockPolicyConditionAPI_UpdatePolicyConditionExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPolicyConditionAPI creates a new instance of MockPolicyConditionAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPolicyConditionAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPolicyConditionAPI {
	mock := &MockPolicyConditionAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
