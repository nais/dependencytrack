// Code generated by mockery. DO NOT EDIT.

package dependencytrack

import (
	context "context"

	in_toto "github.com/in-toto/in-toto-golang/in_toto"
	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CreateProject provides a mock function with given fields: ctx, imageName, imageTag, tags
func (_m *MockClient) CreateProject(ctx context.Context, imageName string, imageTag string, tags []string) (*Project, error) {
	ret := _m.Called(ctx, imageName, imageTag, tags)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) (*Project, error)); ok {
		return rf(ctx, imageName, imageTag, tags)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) *Project); ok {
		r0 = rf(ctx, imageName, imageTag, tags)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, imageName, imageTag, tags)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type MockClient_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//   - ctx context.Context
//   - imageName string
//   - imageTag string
//   - tags []string
func (_e *MockClient_Expecter) CreateProject(ctx interface{}, imageName interface{}, imageTag interface{}, tags interface{}) *MockClient_CreateProject_Call {
	return &MockClient_CreateProject_Call{Call: _e.mock.On("CreateProject", ctx, imageName, imageTag, tags)}
}

func (_c *MockClient_CreateProject_Call) Run(run func(ctx context.Context, imageName string, imageTag string, tags []string)) *MockClient_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockClient_CreateProject_Call) Return(_a0 *Project, _a1 error) *MockClient_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CreateProject_Call) RunAndReturn(run func(context.Context, string, string, []string) (*Project, error)) *MockClient_CreateProject_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProjectWithSbom provides a mock function with given fields: ctx, sbom, imageName, imageTag
func (_m *MockClient) CreateProjectWithSbom(ctx context.Context, sbom *in_toto.CycloneDXStatement, imageName string, imageTag string) (string, error) {
	ret := _m.Called(ctx, sbom, imageName, imageTag)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectWithSbom")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *in_toto.CycloneDXStatement, string, string) (string, error)); ok {
		return rf(ctx, sbom, imageName, imageTag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *in_toto.CycloneDXStatement, string, string) string); ok {
		r0 = rf(ctx, sbom, imageName, imageTag)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *in_toto.CycloneDXStatement, string, string) error); ok {
		r1 = rf(ctx, sbom, imageName, imageTag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_CreateProjectWithSbom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectWithSbom'
type MockClient_CreateProjectWithSbom_Call struct {
	*mock.Call
}

// CreateProjectWithSbom is a helper method to define mock.On call
//   - ctx context.Context
//   - sbom *in_toto.CycloneDXStatement
//   - imageName string
//   - imageTag string
func (_e *MockClient_Expecter) CreateProjectWithSbom(ctx interface{}, sbom interface{}, imageName interface{}, imageTag interface{}) *MockClient_CreateProjectWithSbom_Call {
	return &MockClient_CreateProjectWithSbom_Call{Call: _e.mock.On("CreateProjectWithSbom", ctx, sbom, imageName, imageTag)}
}

func (_c *MockClient_CreateProjectWithSbom_Call) Run(run func(ctx context.Context, sbom *in_toto.CycloneDXStatement, imageName string, imageTag string)) *MockClient_CreateProjectWithSbom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*in_toto.CycloneDXStatement), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_CreateProjectWithSbom_Call) Return(_a0 string, _a1 error) *MockClient_CreateProjectWithSbom_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_CreateProjectWithSbom_Call) RunAndReturn(run func(context.Context, *in_toto.CycloneDXStatement, string, string) (string, error)) *MockClient_CreateProjectWithSbom_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProject provides a mock function with given fields: ctx, uuid
func (_m *MockClient) DeleteProject(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type MockClient_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockClient_Expecter) DeleteProject(ctx interface{}, uuid interface{}) *MockClient_DeleteProject_Call {
	return &MockClient_DeleteProject_Call{Call: _e.mock.On("DeleteProject", ctx, uuid)}
}

func (_c *MockClient_DeleteProject_Call) Run(run func(ctx context.Context, uuid string)) *MockClient_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DeleteProject_Call) Return(_a0 error) *MockClient_DeleteProject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DeleteProject_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_DeleteProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetAnalysisTrailForImage provides a mock function with given fields: ctx, projectId, componentId, vulnerabilityId
func (_m *MockClient) GetAnalysisTrailForImage(ctx context.Context, projectId string, componentId string, vulnerabilityId string) (*Analysis, error) {
	ret := _m.Called(ctx, projectId, componentId, vulnerabilityId)

	if len(ret) == 0 {
		panic("no return value specified for GetAnalysisTrailForImage")
	}

	var r0 *Analysis
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*Analysis, error)); ok {
		return rf(ctx, projectId, componentId, vulnerabilityId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *Analysis); ok {
		r0 = rf(ctx, projectId, componentId, vulnerabilityId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Analysis)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectId, componentId, vulnerabilityId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetAnalysisTrailForImage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAnalysisTrailForImage'
type MockClient_GetAnalysisTrailForImage_Call struct {
	*mock.Call
}

// GetAnalysisTrailForImage is a helper method to define mock.On call
//   - ctx context.Context
//   - projectId string
//   - componentId string
//   - vulnerabilityId string
func (_e *MockClient_Expecter) GetAnalysisTrailForImage(ctx interface{}, projectId interface{}, componentId interface{}, vulnerabilityId interface{}) *MockClient_GetAnalysisTrailForImage_Call {
	return &MockClient_GetAnalysisTrailForImage_Call{Call: _e.mock.On("GetAnalysisTrailForImage", ctx, projectId, componentId, vulnerabilityId)}
}

func (_c *MockClient_GetAnalysisTrailForImage_Call) Run(run func(ctx context.Context, projectId string, componentId string, vulnerabilityId string)) *MockClient_GetAnalysisTrailForImage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockClient_GetAnalysisTrailForImage_Call) Return(_a0 *Analysis, _a1 error) *MockClient_GetAnalysisTrailForImage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetAnalysisTrailForImage_Call) RunAndReturn(run func(context.Context, string, string, string) (*Analysis, error)) *MockClient_GetAnalysisTrailForImage_Call {
	_c.Call.Return(run)
	return _c
}

// GetFindings provides a mock function with given fields: ctx, uuid, suppressed, filterSource
func (_m *MockClient) GetFindings(ctx context.Context, uuid string, suppressed bool, filterSource ...string) ([]*Vulnerability, error) {
	_va := make([]interface{}, len(filterSource))
	for _i := range filterSource {
		_va[_i] = filterSource[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, uuid, suppressed)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindings")
	}

	var r0 []*Vulnerability
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, ...string) ([]*Vulnerability, error)); ok {
		return rf(ctx, uuid, suppressed, filterSource...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, ...string) []*Vulnerability); ok {
		r0 = rf(ctx, uuid, suppressed, filterSource...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Vulnerability)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, ...string) error); ok {
		r1 = rf(ctx, uuid, suppressed, filterSource...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetFindings_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFindings'
type MockClient_GetFindings_Call struct {
	*mock.Call
}

// GetFindings is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - suppressed bool
//   - filterSource ...string
func (_e *MockClient_Expecter) GetFindings(ctx interface{}, uuid interface{}, suppressed interface{}, filterSource ...interface{}) *MockClient_GetFindings_Call {
	return &MockClient_GetFindings_Call{Call: _e.mock.On("GetFindings",
		append([]interface{}{ctx, uuid, suppressed}, filterSource...)...)}
}

func (_c *MockClient_GetFindings_Call) Run(run func(ctx context.Context, uuid string, suppressed bool, filterSource ...string)) *MockClient_GetFindings_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(bool), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_GetFindings_Call) Return(_a0 []*Vulnerability, _a1 error) *MockClient_GetFindings_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetFindings_Call) RunAndReturn(run func(context.Context, string, bool, ...string) ([]*Vulnerability, error)) *MockClient_GetFindings_Call {
	_c.Call.Return(run)
	return _c
}

// GetProject provides a mock function with given fields: ctx, name, version
func (_m *MockClient) GetProject(ctx context.Context, name string, version string) (*Project, error) {
	ret := _m.Called(ctx, name, version)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*Project, error)); ok {
		return rf(ctx, name, version)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Project); ok {
		r0 = rf(ctx, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type MockClient_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - version string
func (_e *MockClient_Expecter) GetProject(ctx interface{}, name interface{}, version interface{}) *MockClient_GetProject_Call {
	return &MockClient_GetProject_Call{Call: _e.mock.On("GetProject", ctx, name, version)}
}

func (_c *MockClient_GetProject_Call) Run(run func(ctx context.Context, name string, version string)) *MockClient_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_GetProject_Call) Return(_a0 *Project, _a1 error) *MockClient_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProject_Call) RunAndReturn(run func(context.Context, string, string) (*Project, error)) *MockClient_GetProject_Call {
	_c.Call.Return(run)
	return _c
}

// GetProjects provides a mock function with given fields: ctx, limit, offset
func (_m *MockClient) GetProjects(ctx context.Context, limit int32, offset int32) ([]Project, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetProjects")
	}

	var r0 []Project
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) ([]Project, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32) []Project); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Project)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjects'
type MockClient_GetProjects_Call struct {
	*mock.Call
}

// GetProjects is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int32
//   - offset int32
func (_e *MockClient_Expecter) GetProjects(ctx interface{}, limit interface{}, offset interface{}) *MockClient_GetProjects_Call {
	return &MockClient_GetProjects_Call{Call: _e.mock.On("GetProjects", ctx, limit, offset)}
}

func (_c *MockClient_GetProjects_Call) Run(run func(ctx context.Context, limit int32, offset int32)) *MockClient_GetProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int32), args[2].(int32))
	})
	return _c
}

func (_c *MockClient_GetProjects_Call) Return(_a0 []Project, _a1 error) *MockClient_GetProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetProjects_Call) RunAndReturn(run func(context.Context, int32, int32) ([]Project, error)) *MockClient_GetProjects_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerAnalysis provides a mock function with given fields: ctx, uuid
func (_m *MockClient) TriggerAnalysis(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for TriggerAnalysis")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_TriggerAnalysis_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerAnalysis'
type MockClient_TriggerAnalysis_Call struct {
	*mock.Call
}

// TriggerAnalysis is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockClient_Expecter) TriggerAnalysis(ctx interface{}, uuid interface{}) *MockClient_TriggerAnalysis_Call {
	return &MockClient_TriggerAnalysis_Call{Call: _e.mock.On("TriggerAnalysis", ctx, uuid)}
}

func (_c *MockClient_TriggerAnalysis_Call) Run(run func(ctx context.Context, uuid string)) *MockClient_TriggerAnalysis_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClient_TriggerAnalysis_Call) Return(_a0 error) *MockClient_TriggerAnalysis_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_TriggerAnalysis_Call) RunAndReturn(run func(context.Context, string) error) *MockClient_TriggerAnalysis_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFinding provides a mock function with given fields: ctx, request
func (_m *MockClient) UpdateFinding(ctx context.Context, request AnalysisRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFinding")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, AnalysisRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_UpdateFinding_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFinding'
type MockClient_UpdateFinding_Call struct {
	*mock.Call
}

// UpdateFinding is a helper method to define mock.On call
//   - ctx context.Context
//   - request AnalysisRequest
func (_e *MockClient_Expecter) UpdateFinding(ctx interface{}, request interface{}) *MockClient_UpdateFinding_Call {
	return &MockClient_UpdateFinding_Call{Call: _e.mock.On("UpdateFinding", ctx, request)}
}

func (_c *MockClient_UpdateFinding_Call) Run(run func(ctx context.Context, request AnalysisRequest)) *MockClient_UpdateFinding_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(AnalysisRequest))
	})
	return _c
}

func (_c *MockClient_UpdateFinding_Call) Return(_a0 error) *MockClient_UpdateFinding_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_UpdateFinding_Call) RunAndReturn(run func(context.Context, AnalysisRequest) error) *MockClient_UpdateFinding_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
